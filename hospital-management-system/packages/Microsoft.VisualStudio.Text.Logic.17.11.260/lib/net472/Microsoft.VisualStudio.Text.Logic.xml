<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Microsoft.VisualStudio.Text.Logic</name>
    </assembly>
    <members>
        <member name="T:Microsoft.VisualStudio.Text.Classification.ClassificationChangedEventArgs">
            <summary>
            Provides information for the <see cref="E:Microsoft.VisualStudio.Text.Classification.IClassifier.ClassificationChanged" /> event.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Classification.ClassificationChangedEventArgs.#ctor(Microsoft.VisualStudio.Text.SnapshotSpan)">
            <summary>
            Initializes a new instance of a <see cref="T:Microsoft.VisualStudio.Text.Classification.ClassificationChangedEventArgs" /> object.
            </summary>
            <param name="changeSpan">
            The span of the classification that changed.
            </param>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Classification.ClassificationChangedEventArgs.ChangeSpan">
            <summary>
            Gets the span of the classification that changed.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Classification.ClassificationLayer">
            <summary>
            Defines a set of well known classification layers to which an
            <see cref="T:Microsoft.VisualStudio.Text.Classification.ILayeredClassificationType" /> can belong.
            </summary>
            <remarks>
            <see cref="T:Microsoft.VisualStudio.Text.Tagging.IClassificationTag" /> layers with greater numeric values take
            precedence over layers with smaller values. e.g.: <see cref="F:Microsoft.VisualStudio.Text.Classification.ClassificationLayer.Semantic" />
            classifications override <see cref="F:Microsoft.VisualStudio.Text.Classification.ClassificationLayer.Lexical" /> classifications in cases
            of overlap.
            </remarks>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Classification.ClassificationLayer.Default">
            <summary>
            The default behavior, assigned to any classifications that
            implement <see cref="T:Microsoft.VisualStudio.Text.Classification.IClassificationType" /> but do not
            implement <see cref="T:Microsoft.VisualStudio.Text.Classification.ILayeredClassificationType" />.
            </summary>
            <remarks>
            The default behavior is 'non-layered', meaning that these classifications
            can be merged into any layer. This behavior exists primarily for backwards
            compatibility.
            </remarks>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Classification.ClassificationLayer.Lexical">
            <summary>
            The lexical layer, including classifications generated through pure
            lexical analysis of a file.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Classification.ClassificationLayer.Syntactic">
            <summary>
            The syntatic layer, including classifications generated through parsing
            the lexed syntactic tokens into a parse tree.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Classification.ClassificationLayer.Semantic">
            <summary>
            The semantic layer, including classifications generated through type checking
            of a file, resolving of references, and other complex analyses.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Classification.ClassificationSpan">
            <summary>
            Describes a region of text by an <see cref="T:Microsoft.VisualStudio.Text.Classification.IClassificationType" />.
            </summary>
            <remarks>
            This class is immutable.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Classification.ClassificationSpan.#ctor(Microsoft.VisualStudio.Text.SnapshotSpan,Microsoft.VisualStudio.Text.Classification.IClassificationType)">
            <summary>
            Initializes a new instance of a <see cref="T:Microsoft.VisualStudio.Text.Classification.ClassificationSpan" />.
            </summary>
            <param name="span">The span of text to which the classification applies.</param>
            <param name="classification">
            The classification type of the span.
            </param>
            <exception cref="T:System.ArgumentNullException"><paramref name="classification" /> is null.</exception>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Classification.ClassificationSpan.ClassificationType">
            <summary>
            Gets the classification type of the text.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Classification.ClassificationSpan.Span">
            <summary>
            Gets the snapshot span of the classified text.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Classification.ClassificationTypeAttribute">
            <summary>
            Used to declare the name for a logical classification
            type and the name of a classification type from which it is derived.
            </summary>
            <remarks>
            <para>This attribute is used to provide metadata for the <see cref="T:Microsoft.VisualStudio.Text.Classification.ClassificationTypeDefinition" /> MEF export.
            The <see cref="T:Microsoft.VisualStudio.Text.Classification.IClassificationTypeRegistryService" /> service uses this to construct <see cref="T:Microsoft.VisualStudio.Text.Classification.IClassificationType"></see> objects.
            </para>
            <para>
            This attribute can be stacked, so that a <see cref="T:Microsoft.VisualStudio.Text.Classification.IClassificationType" /> can multiply inherit from different base types.
            </para>
            </remarks>
            <seealso cref="T:Microsoft.VisualStudio.Text.Classification.IClassificationType" />
            <seealso cref="T:Microsoft.VisualStudio.Text.Classification.IClassificationTypeRegistryService" />
            <seealso cref="T:Microsoft.VisualStudio.Text.Classification.ClassificationTypeDefinition" />
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Classification.ClassificationTypeAttribute.ClassificationTypeNames">
            <summary>
            Gets or sets the name of this classification type.
            </summary>
            <remarks>
            The name must be unique across all classification types.  It cannot be null or
            an empty string. Classification type names are case insensitive.
            </remarks>
            <exception cref="T:System.ArgumentNullException">The value is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">The value is an empty string.</exception>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Classification.ClassificationTypeDefinition">
            <summary>
            Describes a data-only export for declaring classification types.
            </summary>
            <remarks> 
            Because you cannot subclass this type, you can use the [Export] attribute with no type.
            </remarks>
            <example>
            <code>
            internal sealed class Components
            {
               [Export]
               [Name("keyword")]            // required
               [BaseDefinition("text")]     // zero or more BaseDefinitions are allowed
               internal ClassificationTypeDefinition keywordDefinition;
               
               { other components }
            }
            </code>
            </example>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Classification.IAccurateClassifier">
            <summary>
            Assigns <see cref="T:Microsoft.VisualStudio.Text.Classification.IClassificationType" /> objects to the text in a <see cref="T:Microsoft.VisualStudio.Text.ITextBuffer" />.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Classification.IAccurateClassifier.GetAllClassificationSpans(Microsoft.VisualStudio.Text.SnapshotSpan,System.Threading.CancellationToken)">
            <summary>
            Gets all the <see cref="T:Microsoft.VisualStudio.Text.Classification.ClassificationSpan" /> objects that intersect the given range of text.
            </summary>
            <param name="span">
            The snapshot span.
            </param>
            <param name="cancel">Cancellation token</param>
            <returns>
            A list of <see cref="T:Microsoft.VisualStudio.Text.Classification.ClassificationSpan" /> objects that intersect with the given range. 
            </returns>
            <remarks>
            <para>This method is used when final results are needed (when, for example, when doing color printing) and is expected
            to return final results (however long it takes to compute) instead of quick but tentative results.</para>
            <para>If the underlying tagger does not support <see cref="T:Microsoft.VisualStudio.Text.Classification.IClassifier" />, then <see cref="T:Microsoft.VisualStudio.Text.Classification.IClassifier" />.GetClassificationSpans(...) is used instead.</para>
            </remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Classification.IClassificationType">
            <summary>
            The logical classification type of a span of text.
            </summary>
            <remarks>
            <para>
            All classification types are identified by a unique name.
            The <see cref="T:Microsoft.VisualStudio.Text.Classification.IClassificationTypeRegistryService"></see> can return an <see cref="T:Microsoft.VisualStudio.Text.Classification.IClassificationType" /> object from this 
            unique name in order to allow clients to access additional information.
            </para>
            <para>
            Classification types can multiply inherit by stacking <see cref="T:Microsoft.VisualStudio.Text.Classification.ClassificationTypeAttribute" /> attributes./&gt;
            </para>
            <para>
            <see cref="T:Microsoft.VisualStudio.Text.Classification.ILayeredClassificationType" /> can be used instead of <see cref="T:Microsoft.VisualStudio.Text.Classification.IClassificationType" />
            to enable one component's classifications to categorically supersede another's classifications.
            </para>
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Classification.IClassificationType.Classification">
            <summary>
            Gets the name of the classification type.
            </summary>
            <remarks>All classification types are identified by a unique name.
            The <see cref="T:Microsoft.VisualStudio.Text.Classification.IClassificationTypeRegistryService"></see> can return an <see cref="T:Microsoft.VisualStudio.Text.Classification.IClassificationType" /> from this name.</remarks>
            <value>This name is never <c>null</c>.</value>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Classification.IClassificationType.IsOfType(System.String)">
            <summary>
            Determines whether the current <see cref="T:Microsoft.VisualStudio.Text.Classification.IClassificationType"></see>
            derives from the classification type named <paramref name="type" />.
            </summary>
            <param name="type">The name of the base classification type.</param>
            <returns><c>true</c> if the current classification type derives from the one identified by <paramref name="type" />, otherwise <c>false</c>.</returns>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Classification.IClassificationType.BaseTypes">
            <summary>
            Gets the classification types from which the current <see cref="T:Microsoft.VisualStudio.Text.Classification.IClassificationType" /> is derived.
            </summary>
            <value>This value is never <c>null</c>, though it may be the empty set.</value>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Classification.IClassificationTypeRegistryService">
            <summary>
            The service that maintains the collection of all known classification types.
            </summary>
            <remarks>This is a MEF component part, and should be imported as follows:
            [Import]
            IClassificationTypeRegistryService registry = null;
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Classification.IClassificationTypeRegistryService.GetClassificationType(System.String)">
            <summary>
            Gets the <see cref="T:Microsoft.VisualStudio.Text.Classification.IClassificationType"></see> object identified by the specified <paramref name="type" />.
            </summary>
            <param name="type">
            The name of the classification type.
            </param>
            <returns>
            The classification type, <c>null</c> if there is no classification type of that name.
            </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Classification.IClassificationTypeRegistryService.CreateClassificationType(System.String,System.Collections.Generic.IEnumerable{Microsoft.VisualStudio.Text.Classification.IClassificationType})">
            <summary>
            Initializes a new instance of a <see cref="T:Microsoft.VisualStudio.Text.Classification.IClassificationType" /> and adds it to the registry.
            </summary>
            <param name="type">The name of the classification type to create.</param>
            <param name="baseTypes">The base types of the classification.</param>
            <returns>A new <see cref="T:Microsoft.VisualStudio.Text.Classification.IClassificationType" />.</returns>
            <exception cref="T:System.InvalidOperationException"><paramref name="type" /> is already in the registry.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Classification.IClassificationTypeRegistryService.CreateTransientClassificationType(System.Collections.Generic.IEnumerable{Microsoft.VisualStudio.Text.Classification.IClassificationType})">
            <summary>
            Creates an <see cref="T:Microsoft.VisualStudio.Text.Classification.IClassificationType" /> that persists only for the duration of
            this session. This <see cref="T:Microsoft.VisualStudio.Text.Classification.IClassificationType" /> must inherit from at least one
            <see cref="T:Microsoft.VisualStudio.Text.Classification.IClassificationType" />.
            </summary>
            <param name="baseTypes">
            The base types for this <see cref="T:Microsoft.VisualStudio.Text.Classification.IClassificationType" />.
            </param>
            <returns>
            A new <see cref="T:Microsoft.VisualStudio.Text.Classification.IClassificationType" /> that inherits from all of <paramref name="baseTypes" />.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="baseTypes" /> is null.</exception>
            <exception cref="T:System.InvalidOperationException"><paramref name="baseTypes" /> has zero items.</exception>
            <remarks>
            <para>
            This function is intended primarily to aid in the runtime display of overlapping classifications.
            </para>
            <para>
            The classification names generated by this function are determined at run time and are subject to
            change in future revisions. The only guarantee made is that if two transient <see cref="T:Microsoft.VisualStudio.Text.Classification.IClassificationType" /> objects
            are created with the same base types, they will have the same classification name.
            </para>
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Classification.IClassificationTypeRegistryService.CreateTransientClassificationType(Microsoft.VisualStudio.Text.Classification.IClassificationType[])">
            <summary>
            Creates an <see cref="T:Microsoft.VisualStudio.Text.Classification.IClassificationType" /> that persists only for the duration of
            this session. This <see cref="T:Microsoft.VisualStudio.Text.Classification.IClassificationType" /> must inherit from at least one
            <see cref="T:Microsoft.VisualStudio.Text.Classification.IClassificationType" />.
            </summary>
            <param name="baseTypes">
            The base types for this <see cref="T:Microsoft.VisualStudio.Text.Classification.IClassificationType" />.
            </param>
            <returns>
            A new <see cref="T:Microsoft.VisualStudio.Text.Classification.IClassificationType" /> which inherits from all <paramref name="baseTypes" />.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="baseTypes" /> is null.</exception>
            <exception cref="T:System.InvalidOperationException"><paramref name="baseTypes" /> has zero items.</exception>
            <remarks>
            <para>
            This function is intended primarily to aid in the runtime display of overlapping classifications.
            </para>
            
            <para>
            The classification names generated by this function are determined at run time and are subject to
            change in future revisions. The only guarantee made is that if two transient <see cref="T:Microsoft.VisualStudio.Text.Classification.IClassificationType" /> objects
            are created with the same base types, they will have the same classification name.
            </para>
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Classification.IClassificationTypeRegistryService.GetClassificationType(Microsoft.VisualStudio.Text.Classification.ClassificationLayer,System.String)">
            <summary>
            Gets the <see cref="T:Microsoft.VisualStudio.Text.Classification.IClassificationType"></see> object identified by the specified <paramref name="type" />.
            </summary>
            <param name="layer">
            Specifies the layer to which this classification belongs. Layers are specializations
            of <see cref="T:Microsoft.VisualStudio.Text.Classification.IClassificationType" />s that can be used to make all classifications from
            one source supersede another.
            </param>
            <param name="type">
            The name of the classification type.
            </param>
            <returns>
            The classification type, <c>null</c> if there is no classification type of that name.
            </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Classification.IClassificationTypeRegistryService.CreateClassificationType(Microsoft.VisualStudio.Text.Classification.ClassificationLayer,System.String,System.Collections.Generic.IEnumerable{Microsoft.VisualStudio.Text.Classification.IClassificationType})">
            <summary>
            Initializes a new instance of a <see cref="T:Microsoft.VisualStudio.Text.Classification.IClassificationType" /> and adds it to the registry.
            </summary>
            <param name="layer">
            Specifies the layer to which this classification belongs. Layers are specializations
            of <see cref="T:Microsoft.VisualStudio.Text.Classification.IClassificationType" />s that can be used to make all classifications from
            one source supersede another.
            </param>
            <param name="type">The name of the classification type to create.</param>
            <param name="baseTypes">The base types of the classification.</param>
            <returns>A new <see cref="T:Microsoft.VisualStudio.Text.Classification.IClassificationType" />.</returns>
            <exception cref="T:System.InvalidOperationException"><paramref name="type" /> is already in the registry.</exception>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Classification.IClassifier">
            <summary>
            Assigns <see cref="T:Microsoft.VisualStudio.Text.Classification.IClassificationType" /> objects to the text in a <see cref="T:Microsoft.VisualStudio.Text.ITextBuffer" />.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Classification.IClassifier.GetClassificationSpans(Microsoft.VisualStudio.Text.SnapshotSpan)">
            <summary>
            Gets all the <see cref="T:Microsoft.VisualStudio.Text.Classification.ClassificationSpan" /> objects that intersect the given range of text.
            </summary>
            <param name="span">
            The snapshot span.
            </param>
            <returns>
            A list of <see cref="T:Microsoft.VisualStudio.Text.Classification.ClassificationSpan" /> objects that intersect with the given range. 
            </returns>
        </member>
        <member name="E:Microsoft.VisualStudio.Text.Classification.IClassifier.ClassificationChanged">
            <summary>
            Occurs when the classification of a span of text has changed. 
            </summary>
            <remarks>
            This event does not need to be raised for newly-inserted text. 
            However, it should be raised if any text other than that which was actually inserted has been reclassified.
            It should also be raised if the deletion of text causes the remaining
            text to be reclassified.</remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Classification.IClassifierAggregatorService">
            <summary>
            A service that returns an <see cref="T:Microsoft.VisualStudio.Text.Classification.IClassifier" /> that aggregates and normalizes all <see cref="T:Microsoft.VisualStudio.Text.Classification.IClassifier" />
            contributions for a <see cref="T:Microsoft.VisualStudio.Text.ITextBuffer" />.
            </summary>
            <remarks>
            <para>The normalized classifications produced by this aggregator are sorted and do not overlap. If a span of text
            had multiple classifications based on the original classifier contributions, then in the normalized
            classification it has a transient classification (<see cref="T:Microsoft.VisualStudio.Text.Classification.IClassificationTypeRegistryService" />) that corresponds to
            all of the original classifications.</para>
            <para>Classifier aggregators are cached for each <see cref="T:Microsoft.VisualStudio.Text.ITextBuffer" /> object.</para>
            </remarks>
            <remarks>This is a MEF component part, and should be imported as follows:
            [Import]
            IClassifierAggregatorService aggregator = null;
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Classification.IClassifierAggregatorService.GetClassifier(Microsoft.VisualStudio.Text.ITextBuffer)">
            <summary>
            Gets the cached <see cref="T:Microsoft.VisualStudio.Text.Classification.IClassifier" /> for the given <see cref="T:Microsoft.VisualStudio.Text.ITextBuffer" />.  
            If one does not exist, an <see cref="T:Microsoft.VisualStudio.Text.Classification.IClassifier" /> will be created and cached with the given <see cref="T:Microsoft.VisualStudio.Text.ITextBuffer" />.
            </summary>
            <param name="textBuffer">The <see cref="T:Microsoft.VisualStudio.Text.ITextBuffer" /> with which to retrieve/create the <see cref="T:Microsoft.VisualStudio.Text.Classification.IClassifier" />.</param>
            <returns>The cached <see cref="T:Microsoft.VisualStudio.Text.Classification.IClassifier" />.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="textBuffer" /> is null.</exception>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Classification.IClassifierProvider">
            <summary>
            Creates a classifier for a given <see cref="T:Microsoft.VisualStudio.Text.ITextBuffer" />.
            </summary>
            <remarks>This is a MEF component part, and should be exported with the following attribute:
            [Export(typeof(IClassifierProvider))]
            Component exporters must add at least one content type attribute to specify the
            content types for which the component is valid.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Classification.IClassifierProvider.GetClassifier(Microsoft.VisualStudio.Text.ITextBuffer)">
            <summary>
            Gets a classifier for the given text buffer.
            </summary>
            <param name="textBuffer">The <see cref="T:Microsoft.VisualStudio.Text.ITextBuffer" /> to classify.</param>
            <returns>A classifier for the text buffer, or null if the provider cannot do so in its current state.</returns>   
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Classification.ILayeredClassificationType">
            <summary>
            A specialization of <see cref="T:Microsoft.VisualStudio.Text.Classification.IClassificationType" /> that includes a 'layer'
            designation.
            </summary>
            <remarks>
            <see cref="T:Microsoft.VisualStudio.Text.Classification.ILayeredClassificationType" /> can be used instead of <see cref="T:Microsoft.VisualStudio.Text.Classification.IClassificationType" />
            to enable one component's classifications to categorically supersede another's classifications.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Classification.ILayeredClassificationType.Layer">
            <summary>
            The classification layer to which this classification belongs.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.CodingConventions.ContextFileMovedEventArgs.#ctor(System.String,System.String)">
            <summary>
            Creates an instance of <see cref="T:Microsoft.VisualStudio.Text.CodingConventions.ContextFileMovedEventArgs" />
            </summary>
            <param name="oldFilePath"></param>
            <param name="newFilePath"></param>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.CodingConventions.ConventionsFileChangeEventArgs">
            <summary>
            Arguments passed when config file changed event <see cref="E:Microsoft.VisualStudio.Text.CodingConventions.IFileWatcher.ConventionFileChanged" /> is invoked
            </summary>
            <remarks>
            Creates an instance of <see cref="T:Microsoft.VisualStudio.Text.CodingConventions.ConventionsFileChangeEventArgs" />
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.CodingConventions.ConventionsFileChangeEventArgs.#ctor(System.String,System.String,Microsoft.VisualStudio.Text.CodingConventions.ChangeType)">
            <summary>
            Arguments passed when config file changed event <see cref="E:Microsoft.VisualStudio.Text.CodingConventions.IFileWatcher.ConventionFileChanged" /> is invoked
            </summary>
            <remarks>
            Creates an instance of <see cref="T:Microsoft.VisualStudio.Text.CodingConventions.ConventionsFileChangeEventArgs" />
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.CodingConventions.ConventionsFileChangeEventArgs.FileName">
            <summary>
            The file name for which the event was raised
            Eg: .editorconfig, .clang
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.CodingConventions.ConventionsFileChangeEventArgs.DirectoryPath">
            <summary>
            The directory path for which the event was raised
            Eg: C:\DirA
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.CodingConventions.ConventionsFileChangeEventArgs.ChangeType">
            <summary>
            The change type that occurred in the directory
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.CodingConventions.ICodingConventionContext">
            <summary>
            A context abstraction, provides access to an immutable snapshot of
            all properties as well as update notifications.
            </summary>
        </member>
        <member name="E:Microsoft.VisualStudio.Text.CodingConventions.ICodingConventionContext.CodingConventionsChangedAsync">
            <summary>
            Raised when coding convention properties in this context have changed.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.CodingConventions.ICodingConventionContext.CurrentConventions">
            <summary>
            Current immutable snapshot of coding conventions for this context.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.CodingConventions.CodingConventionsChangedAsyncEventHandler">
            <summary>
            A delegate handling <see cref="E:Microsoft.VisualStudio.Text.CodingConventions.ICodingConventionContext.CodingConventionsChangedAsync" /> event.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.CodingConventions.CodingConventionsChangedEventArgs">
            <summary>
            An argument for the <see cref="E:Microsoft.VisualStudio.Text.CodingConventions.ICodingConventionContext.CodingConventionsChangedAsync" /> event.
            Currently it doesn't provide any additional information about what exactly changed.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.CodingConventions.ICodingConventionsManager">
            <summary>
            Represents a service providing access to contextual coding conventions.
            </summary>
            <remarks>
            This is a MEF component part, and should be imported as follows:
            <code>
            [Import]
            ICodingConventionsManager codingConventionsManager;
            </code>
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.CodingConventions.ICodingConventionsManager.GetConventionContextAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Gets a tracking snapshot of all coding conventions for a context.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.CodingConventions.ICodingConventionsProvider">
            <summary>
            Represents a format-specific coding convention (for example EditorConfig) provider.
            </summary>
            <remarks>
            Interface looks identical to <see cref="T:Microsoft.VisualStudio.Text.CodingConventions.ICodingConventionsManager" /> but needs to be separate for MEF importing purposes.
            Specifically, our implementation of <see cref="T:Microsoft.VisualStudio.Text.CodingConventions.ICodingConventionsManager" /> MEF imports <see cref="T:Microsoft.VisualStudio.Text.CodingConventions.ICodingConventionsProvider" />
            implementations in its constructor.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.CodingConventions.ICodingConventionsProvider.GetCodingConventionsAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Gets a tracking snapshot of all format-specific coding conventions for a context.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.CodingConventions.ICodingConventionsProviderDependencies">
            <summary>
            External dependencies an <see cref="T:Microsoft.VisualStudio.Text.CodingConventions.ICodingConventionsProvider" /> might need to perform advanced operations
            like file change watching.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.CodingConventions.ICodingConventionsProviderDependencies.FileWatcher">
            <summary>
            A component for watching for file changes.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.CodingConventions.ICodingConventionsProviderFactory">
            <summary>
            Format-specific <see cref="T:Microsoft.VisualStudio.Text.CodingConventions.ICodingConventionsProvider" /> factory, MEF component (in VS).
            Must be exported with FormatName metadata attribute indicating the unique
            name of the format supported by this provider (e.g. "EditorConfig").
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.CodingConventions.ICodingConventionsProviderFactory.CreateCodingConventionsProvider(Microsoft.VisualStudio.Text.CodingConventions.ICodingConventionsProviderDependencies)">
            <summary>
            Creates an instance of <see cref="T:Microsoft.VisualStudio.Text.CodingConventions.ICodingConventionsProvider" /> given a list of dependencies.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.CodingConventions.ICodingConventionsSnapshot">
            <summary>
            An immutable snapshot of all coding conventions in a context.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.CodingConventions.ICodingConventionsSnapshot.UniversalConventions">
            <summary>
            Strongly typed universal coding conventions.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.CodingConventions.ICodingConventionsSnapshot.TryGetConventionValue``1(System.String,``0@)">
            <summary>
            Attempts to get a coding convention value in a context.
            </summary>
            <typeparam name="T">Convention value type</typeparam>
            <param name="conventionName">The name of convention property.</param>
            <param name="conventionValue">The value of convention property or default(typeof(T)) if the convention is not
            specified in this context.</param>
            <returns>True if convention is specified in this context, false otherwise.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.CodingConventions.ICodingConventionsSnapshot.TryGetConventionPath(System.String,System.String@)">
            <summary>
            Attempts to get the path to the source file that sets the convention value in a context.
            </summary>
            <param name="conventionName">The name of convention property.</param>
            <param name="conventionPath">The path to the convention source file that sets this property.</param>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.CodingConventions.ICodingConventionsSnapshot.AllRawConventions">
            <summary>
            Immutable untyped dictionary of all coding conventions in this context.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.CodingConventions.IFileWatcher">
            <summary>
            Allows <see cref="T:Microsoft.VisualStudio.Text.CodingConventions.ICodingConventionsProvider" />s to watch for file updates.
            This file watcher is specifically designed for watching config files. 
            It invokes the start and stop watching files function every time CodingConventions determines the need to watch a directory for a particular config file.
            However, it assumes the client will be responsible for ref counting these invokes and start and stop watching the directories at the right time.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.CodingConventions.IFileWatcher.StartWatching(System.String,System.String)">
            <summary>
            Start watching the directory for the particular file name.
            File - Directory association is necessary as we can have different directories being watched for different files.
            Eg: .editorconfig - C:\DirA ; .clang - C:\DirB
            Only called when a context watches a directory. It can be called multiple times for a directory by different context. 
            Any external implementation must take care not to watch multiple times.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.CodingConventions.IFileWatcher.StopWatching(System.String,System.String)">
            <summary>
            Stop watching the directory for the particular file name.
            File - Directory association is necessary as we can have different directories being watched for different files.
            Eg: .editorconfig - C:\DirA ; .clang - C:\DirB
            Only called when a context watching a directory is disposed. It can be called multiple for a directory by a different context. 
            Any external implementation must take care to only really stop watching when either a. All context watching the directories are disposed or b. When the directory is itself deleted.
            </summary>
        </member>
        <member name="E:Microsoft.VisualStudio.Text.CodingConventions.IFileWatcher.ConventionFileChanged">
            <summary>
            Event to be raised to notify listeners that a change has been detected on the config file for a directory being watched
            </summary>
        </member>
        <member name="E:Microsoft.VisualStudio.Text.CodingConventions.IFileWatcher.ContextFileMoved">
            <summary>
            Event to be raised to notify listeners that a change has been detected in the location of the file that is associated with a Coding Convention context
            This event is to be raised when the source file is moved to a new location as that location may have a different editorconfig file or may not even have one.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.CodingConventions.ConventionsFileChangedAsyncEventHandler">
            <summary>
            Delegate for the handling file changed events in <see cref="E:Microsoft.VisualStudio.Text.CodingConventions.IFileWatcher.ConventionFileChanged" />
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.CodingConventions.IndentStyle">
            <summary>
            An enum of universal indent styles.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.CodingConventions.IUniversalCodingConventions">
            <summary>
            Universal coding conventions.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.CodingConventions.IUniversalCodingConventions.TryGetIndentStyle(System.Nullable{Microsoft.VisualStudio.Text.CodingConventions.IndentStyle}@)">
            <summary>
            Indentation style (tabs or spaces).
            </summary>
            <returns>True if convention was specified, false otherwise. </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.CodingConventions.IUniversalCodingConventions.TryGetIndentSize(System.Nullable{System.Int32}@)">
            <summary>
            A number or columns used for each indentation level.
            </summary>
            <returns>True if convention was specified, false otherwise. </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.CodingConventions.IUniversalCodingConventions.TryGetTabWidth(System.Nullable{System.Int32}@)">
            <summary>
            A number of columns used to represent a tab character.
            </summary>
            <returns>True if convention was specified, false otherwise. </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.CodingConventions.IUniversalCodingConventions.TryGetLineEnding(System.String@)">
            <summary>
            Line ending characters.
            </summary>
            <returns>True if convention was specified, false otherwise. </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.CodingConventions.IUniversalCodingConventions.TryGetEncoding(System.Text.Encoding@)">
            <summary>
            The encoding of files.
            </summary>
            <returns>True if convention was specified, false otherwise. </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.CodingConventions.IUniversalCodingConventions.TryGetAllowTrailingWhitespace(System.Nullable{System.Boolean}@)">
            <summary>
            Whether to allow any whitespace characters preceding newline characters.
            </summary>
            <returns>True if convention was specified, false otherwise. </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.CodingConventions.IUniversalCodingConventions.TryGetRequireFinalNewline(System.Nullable{System.Boolean}@)">
            <summary>
            Whether to require files to end with a new line.
            </summary>
            <returns>True if convention was specified, false otherwise. </returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Configuration.IWordPatternBroker">
            <summary>
            Utility which selects the appropriate <see cref="T:Microsoft.VisualStudio.Text.Configuration.IWordPatternProviderFactory" />
            for a given <see cref="T:Microsoft.VisualStudio.Text.SnapshotPoint" />,
            gets its <see cref="T:Microsoft.VisualStudio.Text.Configuration.IWordPatternProvider" />
            and calls <see cref="M:Microsoft.VisualStudio.Text.Configuration.IWordPatternProvider.GetWordPatternRegexAsync(Microsoft.VisualStudio.Text.SnapshotPoint,System.Threading.CancellationToken)" />
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Configuration.IWordPatternBroker.GetWordPatternExpressionAsync(Microsoft.VisualStudio.Text.SnapshotPoint,System.Threading.CancellationToken)">
            <summary>
            Provides a regular expression which matches whole words and is applicable at <paramref name="snapshotPoint" />.
            If no <see cref="T:Microsoft.VisualStudio.Text.Configuration.IWordPatternProviderFactory" /> is applicable at <paramref name="snapshotPoint" />,
            empty this method returns <see cref="F:System.String.Empty" />.
            </summary>
            <param name="snapshotPoint">Location where the word pattern is applicable.</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>String containing regular expression which matches whole words, or <see cref="F:System.String.Empty" />.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Configuration.IWordPatternProvider">
            <summary>
            Provides the Word Pattern which determines boundaries between words.
            Instance of this type can be obtained by importing <see cref="T:Microsoft.VisualStudio.Text.Configuration.IWordPatternProviderFactory" />.
            </summary>
            <remarks>
            <para>
            This interface provides similar information as <see cref="T:Microsoft.VisualStudio.Text.Operations.ITextStructureNavigator" />,
            however: <see cref="T:Microsoft.VisualStudio.Text.Operations.ITextStructureNavigator" /> provides extent of a word in a realized
            <see cref="T:Microsoft.VisualStudio.Text.ITextSnapshot" />, as well as spans of its parent element and its surrounding elements.
            The data it produces is used to navigate the document using keyboard.
            </para>
            <para>
            On the other hand, this interface provides an expression used to find extent of a word either
            in a realized snapshot or in an arbitrary string. This expression may be used in various features,
            for example, by completion to determine its boundaries.
            </para>
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Configuration.IWordPatternProvider.GetWordPatternRegexAsync(Microsoft.VisualStudio.Text.SnapshotPoint,System.Threading.CancellationToken)">
            <summary>
            Provides a regular expression which matches whole words and is applicable at <paramref name="snapshotPoint" />.
            </summary>
            <remarks>
            May be called on any thread.
            </remarks>
            <remarks>
            When this method returns an empty string, features which rely on knowledge of word pattern may not work.
            </remarks>
            <param name="snapshotPoint">Location where the word pattern is applicable.</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Regular expression which matches whole words.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Configuration.IWordPatternProviderFactory">
            <summary>
            <para>
            Creates <see cref="T:Microsoft.VisualStudio.Text.Configuration.IWordPatternProvider" /> applicable to an <see cref="T:Microsoft.VisualStudio.Text.ITextBuffer" />.
            </para>
            <para>
            This is a MEF component and should be exported with [ContentType] and [Name] attributes
            and optional [Order] attribute. An instance of <see cref="T:Microsoft.VisualStudio.Text.Configuration.IWordPatternProviderFactory" /> is selected by matching
            declared ContentType to content type of location where <see cref="T:Microsoft.VisualStudio.Text.Configuration.IWordPatternProvider" /> is needed,
            and then by declared Order with Order of other applicable components.
            </para>
            <example>
            <code>
            [Export(typeof(IWordPatternProviderFactory))]
            [Name(nameof(IWordPatternProviderFactory))]
            [ContentType("text")]
            public class MyWordPatternProviderFactory : IWordPatternProviderFactory
            </code>
            </example>
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Differencing.BaseLeftBufferChangedEventArgs">
            <summary>
            Raised whenever the left buffer of an <see cref="T:Microsoft.VisualStudio.Text.Differencing.IDifferenceBuffer2" /> changes. This can only
            happen if <see cref="P:Microsoft.VisualStudio.Text.Differencing.IDifferenceBuffer2.HasFixedBaseLeftBuffer" /> is false.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Differencing.DifferenceBufferOptions.IgnoreWhiteSpaceBehaviorId">
            <summary>
            What type of whitespace, if any, to ignore when performing line-level differencing.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Differencing.DifferenceBufferOptions.IgnoreCaseId">
            <summary>
            Whether or not to ignore case when performing line-level differencing.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Differencing.DifferenceBufferOption`1">
            <summary>
            A base class that can be used for options that are specific to an <see cref="T:Microsoft.VisualStudio.Text.Differencing.IDifferenceBuffer" />.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Differencing.DifferenceBufferProperties.PlaceholderBuffer">
            <summary>
            Add this property to an <see cref="T:Microsoft.VisualStudio.Text.ITextBuffer" />'s <see cref="P:Microsoft.VisualStudio.Utilities.IPropertyOwner.Properties" /> to prevent a difference buffer from computing differences when the buffer
            is used as the left buffer.
            </summary>
            <remarks>
            This is intended for situations where you want to open a difference buffer but have not, yet, loaded the baseline. You can set the
            <see cref="P:Microsoft.VisualStudio.Text.Differencing.IDifferenceBuffer.BaseLeftBuffer" /> to this and then change it to the correct buffer once it is available.
            </remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Differencing.DifferenceMappingMode">
            <summary>
            The mapping modes that can be used when mapping points inside a difference between the left and right snapshots.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Differencing.DifferenceMappingMode.Start">
            <summary>
            Map any point in a difference to the start of the corresponding difference in the other snapshot.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Differencing.DifferenceMappingMode.LineColumn">
            <summary>
            Map any point in a difference to the corresponding line/column of the corresponding difference in the other snapshot.
            </summary>
            <remarks>
            If the difference is in the other snapshot doesn't have a corresponding line the point will be mapped to the end of the difference.
            If the column if greater than the length of the corresponding line in the other snapshpt, then the point will be mapped to the end of the corresponding line.
            </remarks>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Differencing.DifferenceMappingMode.End">
            <summary>
            Map any point in a difference to the end of the corresponding difference in the other snapshot.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Differencing.IDifferenceTrackingSpanCollection">
            <summary>
            Tracking spans for an <see cref="T:Microsoft.VisualStudio.Text.Differencing.ISnapshotDifference" /> for the various line and word differences.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Differencing.IDifferenceTrackingSpanCollection.RemovedLineSpans">
            <summary>
            Removed line spans, against the <see cref="P:Microsoft.VisualStudio.Text.Differencing.IDifferenceBuffer.LeftBuffer" />.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Differencing.IDifferenceTrackingSpanCollection.RemovedWordSpans">
            <summary>
            Removed word spans, against the <see cref="P:Microsoft.VisualStudio.Text.Differencing.IDifferenceBuffer.LeftBuffer" />.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Differencing.IDifferenceTrackingSpanCollection.AddedLineSpans">
            <summary>
            Added line spans, against the <see cref="P:Microsoft.VisualStudio.Text.Differencing.IDifferenceBuffer.RightBuffer" />.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Differencing.IDifferenceTrackingSpanCollection.AddedWordSpans">
            <summary>
            Added line spans, against the <see cref="P:Microsoft.VisualStudio.Text.Differencing.IDifferenceBuffer.RightBuffer" />.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Differencing.IDifferenceBuffer">
            <summary>
            A difference buffer constantly computes the differences between two <see cref="T:Microsoft.VisualStudio.Text.ITextBuffer" />s,
            providing an <see cref="T:Microsoft.VisualStudio.Text.Projection.IProjectionBuffer" />, <see cref="P:Microsoft.VisualStudio.Text.Differencing.IDifferenceBuffer.InlineBuffer" />, that
            contains the differences between the two <see cref="T:Microsoft.VisualStudio.Text.ITextBuffer" />s in an inline difference.
            </summary>
            <remarks>
            <para>
            The differences are computed on a background thread in response to various changes (text change,
            options changing, etc.), though all of the events around differencing, like <see cref="E:Microsoft.VisualStudio.Text.Differencing.IDifferenceBuffer.SnapshotDifferenceChanged" />,
            will be raised on the thread that owns the <see cref="P:Microsoft.VisualStudio.Text.Differencing.IDifferenceBuffer.LeftBuffer" /> and <see cref="P:Microsoft.VisualStudio.Text.Differencing.IDifferenceBuffer.RightBuffer" /> (generally,
            the UI thread).
            </para>
            <para>
            Because the differences are computed asynchronously, the <see cref="P:Microsoft.VisualStudio.Text.Differencing.IDifferenceBuffer.CurrentSnapshotDifference" /> may be
            behind the current versions of any of the buffers, and will be <c>null</c> before the first difference
            is computed.
            </para>
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Differencing.IDifferenceBuffer.BaseLeftBuffer">
            <summary>
            The source of the left buffer in the difference.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Differencing.IDifferenceBuffer.LeftBuffer">
            <summary>
            The left buffer of the difference.
            </summary>
            <remarks>This is a projection of the BaseLeftBuffer that has been made read-only. It's contents are identical to the contents of BaseLeftBuffer.</remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Differencing.IDifferenceBuffer.BaseRightBuffer">
            <summary>
            The source of the right buffer in the difference.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Differencing.IDifferenceBuffer.RightBuffer">
            <summary>
            The right buffer in the difference.
            </summary>
            <remarks>
            <para>This will either be equal to the BaseRightBuffer or it will be a projection of the BaseRightBuffer that has been made read-only. It's contents are identical to the contents of BaseRightBuffer.</para>
            
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Differencing.IDifferenceBuffer.InlineBuffer">
            <summary>
            The top-level buffer, which contains the differences combined.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Differencing.IDifferenceBuffer.CurrentSnapshotDifference">
            <summary>
            The currently-used snapshot difference that matches up with the current snapshot
            of <see cref="P:Microsoft.VisualStudio.Text.Differencing.IDifferenceBuffer.InlineBuffer" />.
            </summary>
            <remarks>Will be <c>null</c> before the first snapshot difference is computed.</remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Differencing.IDifferenceBuffer.CurrentInlineBufferSnapshot">
            <summary>
            The snapshot of <see cref="P:Microsoft.VisualStudio.Text.Differencing.IDifferenceBuffer.InlineBuffer" /> that corresponds to the state at
            which <see cref="P:Microsoft.VisualStudio.Text.Differencing.IDifferenceBuffer.CurrentSnapshotDifference" /> is current.
            </summary>
            <remarks>Will be <c>null</c> if <see cref="P:Microsoft.VisualStudio.Text.Differencing.IDifferenceBuffer.CurrentSnapshotDifference" /> is <c>null</c>.</remarks>
        </member>
        <member name="E:Microsoft.VisualStudio.Text.Differencing.IDifferenceBuffer.SnapshotDifferenceChanging">
            <summary>
            Raised immediately before the <see cref="P:Microsoft.VisualStudio.Text.Differencing.IDifferenceBuffer.CurrentSnapshotDifference" /> and
            <see cref="P:Microsoft.VisualStudio.Text.Differencing.IDifferenceBuffer.InlineBuffer" /> are updated.
            </summary>
        </member>
        <member name="E:Microsoft.VisualStudio.Text.Differencing.IDifferenceBuffer.SnapshotDifferenceChanged">
            <summary>
            Raised when the <see cref="P:Microsoft.VisualStudio.Text.Differencing.IDifferenceBuffer.CurrentSnapshotDifference" /> and
            <see cref="P:Microsoft.VisualStudio.Text.Differencing.IDifferenceBuffer.InlineBuffer" /> have changed.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Differencing.IDifferenceBuffer.Options">
            <summary>
            Used to modify general difference buffer options (<see cref="T:Microsoft.VisualStudio.Text.Differencing.DifferenceBufferOptions" />).
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Differencing.IDifferenceBuffer.DifferenceOptions">
            <summary>
            Used to get or set the options used in differencing the two buffers. These options are used
            in calls to the <see cref="T:Microsoft.VisualStudio.Text.Differencing.IHierarchicalStringDifferenceService" /> that performs the actual
            comparison.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Differencing.IDifferenceBuffer.IsEditingDisabled">
            <summary>
            Is editing disabled in this <see cref="T:Microsoft.VisualStudio.Text.Differencing.IDifferenceBuffer" />?
            </summary>
            <remarks><para>If true, then this.RightBuffer is a read-only projection of this.BaseRightBuffer.</para></remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Differencing.IDifferenceBuffer.AddIgnoreDifferencePredicate(Microsoft.VisualStudio.Text.Differencing.IgnoreDifferencePredicate)">
            <summary>
            Add a predicate to selectively ignore differences.
            </summary>
            <param name="predicate">A predicate to be called for every computed line difference.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Differencing.IDifferenceBuffer.RemoveIgnoreDifferencePredicate(Microsoft.VisualStudio.Text.Differencing.IgnoreDifferencePredicate)">
            <summary>
            Remove a predicate previously added with <see cref="M:Microsoft.VisualStudio.Text.Differencing.IDifferenceBuffer.AddIgnoreDifferencePredicate(Microsoft.VisualStudio.Text.Differencing.IgnoreDifferencePredicate)" />.
            </summary>
            <param name="predicate">The predicate to remove.</param>
            <returns><c>true</c> if the predicate was found and removed, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Differencing.IDifferenceBuffer.AddSnapshotLineTransform(Microsoft.VisualStudio.Text.Differencing.SnapshotLineTransform)">
            <summary>
            Add a custom <see cref="T:Microsoft.VisualStudio.Text.Differencing.SnapshotLineTransform" />, which can modify lines of text before they are
            compared.
            </summary>
            <param name="transform">The transform to add.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Differencing.IDifferenceBuffer.RemoveSnapshotLineTransform(Microsoft.VisualStudio.Text.Differencing.SnapshotLineTransform)">
            <summary>
            Remove a custom <see cref="T:Microsoft.VisualStudio.Text.Differencing.SnapshotLineTransform" /> previously added with <see cref="M:Microsoft.VisualStudio.Text.Differencing.IDifferenceBuffer.AddSnapshotLineTransform(Microsoft.VisualStudio.Text.Differencing.SnapshotLineTransform)" />.
            </summary>
            <param name="transform">The transform to remove.</param>
            <returns><c>true</c> if the transform was found and removed, <c>false</c> otherwise.</returns>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Differencing.IDifferenceBuffer2.HasFixedBaseLeftBuffer">
            <summary>
            True if the BaseLeftBuffer can never change. If false, the BaseLeftBuffer can change (via setting the InnerLeftDataModel) and
            can be null.
            </summary>
        </member>
        <member name="E:Microsoft.VisualStudio.Text.Differencing.IDifferenceBuffer2.BaseLeftBufferChanged">
            <summary>
            Raised whenever the <see cref="P:Microsoft.VisualStudio.Text.Differencing.IDifferenceBuffer.BaseLeftBuffer" /> is changed to a different buffer.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Differencing.IDifferenceBuffer2.LeftDataModel">
            <summary>
            The <see cref="T:Microsoft.VisualStudio.Text.ITextDataModel" /> for the BaseLeftBuffer. This can be created even if <see cref="P:Microsoft.VisualStudio.Text.Differencing.IDifferenceBuffer.BaseLeftBuffer" /> is null.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Differencing.IDifferenceBuffer2.InnerLeftDataModel">
            <summary>
            The <see cref="T:Microsoft.VisualStudio.Text.ITextDataModel" /> actual ITextDataModel for the BaseLeftBuffer. This value is only meaningful if <see cref="P:Microsoft.VisualStudio.Text.Differencing.IDifferenceBuffer2.HasFixedBaseLeftBuffer" /> is
            false. Set InnerLeftDataModel to null to set the difference buffer's BaseLeftBuffer to null.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Differencing.IDifferenceBuffer2.RightDataModel">
            <summary>
            The <see cref="T:Microsoft.VisualStudio.Text.ITextDataModel" /> for the right buffer.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Differencing.IDifferenceBuffer2.InlineDataModel">
            <summary>
            The <see cref="T:Microsoft.VisualStudio.Text.ITextDataModel" /> for the inline buffer. This can be created even if <see cref="P:Microsoft.VisualStudio.Text.Differencing.IDifferenceBuffer.BaseLeftBuffer" /> is null.
            </summary>
        </member>
        <member name="E:Microsoft.VisualStudio.Text.Differencing.IDifferenceBuffer3.BaseLeftBufferChanging">
            <summary>
            Raised whenever the <see cref="P:Microsoft.VisualStudio.Text.Differencing.IDifferenceBuffer.BaseLeftBuffer" /> is about to change to a different buffer.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Differencing.IDifferenceBuffer4.AddLineDifferenceMutator(Microsoft.VisualStudio.Text.Differencing.LineDifferenceMutator)">
            <summary>
            Add a mutator to selectively ignore parts of a line differences.
            </summary>
            <param name="mutator">A function called to modify line differences.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Differencing.IDifferenceBuffer4.RemoveLineDifferenceMutator(Microsoft.VisualStudio.Text.Differencing.LineDifferenceMutator)">
            <summary>
            Remove a mutator previously added with <see cref="M:Microsoft.VisualStudio.Text.Differencing.IDifferenceBuffer4.AddLineDifferenceMutator(Microsoft.VisualStudio.Text.Differencing.LineDifferenceMutator)" />.
            </summary>
            <param name="mutator">The mutator to remove.</param>
            <returns><c>true</c> if the mutator was found and removed, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Differencing.IDifferenceBuffer4.ForceUpdate">
            <summary>
            Force the difference buffer to recompute its differences.
            </summary>
            <remarks>This will happen automatically after adding or removing a <see cref="T:Microsoft.VisualStudio.Text.Differencing.LineDifferenceMutator" />
            or <see cref="T:Microsoft.VisualStudio.Text.Differencing.IgnoreDifferencePredicate" />. You should only call this method after changing the behavior
            of a previously added mutator or predicate.
            </remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Differencing.IDifferenceBufferFactoryService">
            <summary>
            A factory for creating <see cref="T:Microsoft.VisualStudio.Text.Differencing.IDifferenceBuffer" /> instances.
            </summary>
            <remarks>
            This is a MEF service and can be imported.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Differencing.IDifferenceBufferFactoryService.CreateDifferenceBuffer(Microsoft.VisualStudio.Text.ITextBuffer,Microsoft.VisualStudio.Text.ITextBuffer)">
            <summary>
            Create an <see cref="T:Microsoft.VisualStudio.Text.Differencing.IDifferenceBuffer" /> for the given left and right buffers.
            </summary>
            <param name="leftBaseBuffer">The left (old, before) buffer.</param>
            <param name="rightBaseBuffer">The right (new, after) buffer.</param>
            <remarks>This is equivalent to calling <c>CreateDifferenceBuffer(left, right, new StringDifferenceOptions());</c>.</remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Differencing.IDifferenceBufferFactoryService.CreateDifferenceBuffer(Microsoft.VisualStudio.Text.ITextBuffer,Microsoft.VisualStudio.Text.ITextBuffer,Microsoft.VisualStudio.Text.Differencing.StringDifferenceOptions,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Create an <see cref="T:Microsoft.VisualStudio.Text.Differencing.IDifferenceBuffer" /> for the given left and right buffers and with the given difference options.
            </summary>
            <param name="leftBaseBuffer">The left (old, before) buffer.</param>
            <param name="rightBaseBuffer">The right (new, after) buffer.</param>
            <param name="options">The options to use in computing differences between the buffers.</param>
            <param name="disableEditing">If true, disable editing in the right and inlines views.</param>
            <param name="wrapLeftBuffer">If true, create a read-only projection of <paramref name="leftBaseBuffer" /> (which will prevent
            that buffer from being modified through the difference buffers).</param>
            <param name="wrapRightBuffer">If true and editing is disabled, create a read-only projection of <paramref name="rightBaseBuffer" /> (which will prevent
            that buffer from being modified through the difference buffers).</param>
            <remarks>
            <para>If <paramref name="disableEditing" /> is false, then <paramref name="wrapRightBuffer" /> is ignored (and the right buffer will not be wrapped).</para>
            <para>If <paramref name="wrapLeftBuffer" /> is false, then the caller of this method is responsible for making sure <paramref name="leftBaseBuffer" /> is read-only.</para>
            <para>If <paramref name="disableEditing" /> is true and <paramref name="wrapRightBuffer" /> is false, then the caller of this method is responsible for making sure <paramref name="rightBaseBuffer" /> is read-only.</para>
            <para>If <paramref name="wrapLeftBuffer" /> is true, then <paramref name="leftBaseBuffer" /> can be null.</para>
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Differencing.IDifferenceBufferFactoryService.TryGetDifferenceBuffer(Microsoft.VisualStudio.Text.Projection.IProjectionBufferBase)">
            <summary>
            If there is a <see cref="T:Microsoft.VisualStudio.Text.Differencing.IDifferenceBuffer" /> for the given projection buffer, retrieve it.
            </summary>
            <returns>The difference buffer if one exists, <c>null</c> otherwise.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Differencing.IDifferenceBufferFactoryService2">
            <summary>
            A factory for creating <see cref="T:Microsoft.VisualStudio.Text.Differencing.IDifferenceBuffer" /> instances.
            </summary>
            <remarks>
            This is a MEF service and can be imported.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Differencing.IDifferenceBufferFactoryService2.CreateDifferenceBuffer(Microsoft.VisualStudio.Text.ITextBuffer,Microsoft.VisualStudio.Text.ITextBuffer,Microsoft.VisualStudio.Text.Differencing.StringDifferenceOptions,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Create an <see cref="T:Microsoft.VisualStudio.Text.Differencing.IDifferenceBuffer" /> for the given left and right buffers and with the given difference options.
            </summary>
            <param name="leftBaseBuffer">The left (old, before) buffer.</param>
            <param name="rightBaseBuffer">The right (new, after) buffer.</param>
            <param name="options">The options to use in computing differences between the buffers.</param>
            <param name="disableEditing">If true, disable editing in the right and inlines views.</param>
            <param name="wrapLeftBuffer">If true, create a read-only projection of <paramref name="leftBaseBuffer" /> (which will prevent
            that buffer from being modified through the difference buffers).</param>
            <param name="wrapRightBuffer">If true and editing is disabled, create a read-only projection of <paramref name="rightBaseBuffer" /> (which will prevent
            that buffer from being modified through the difference buffers).</param>
            <param name="fixedBaseLeftBuffer">Allows, if false, the <see cref="P:Microsoft.VisualStudio.Text.Differencing.IDifferenceBuffer.BaseLeftBuffer" /> can be changed.</param>
            <remarks>
            <para>If <paramref name="disableEditing" /> is false, then <paramref name="wrapRightBuffer" /> is ignored (and the right buffer will not be wrapped).</para>
            <para>If <paramref name="wrapLeftBuffer" /> is false, then the caller of this method is responsible for making sure <paramref name="leftBaseBuffer" /> is read-only.</para>
            <para>If <paramref name="disableEditing" /> is true and <paramref name="wrapRightBuffer" /> is false, then the caller of this method is responsible for making sure <paramref name="rightBaseBuffer" /> is read-only.</para>
            <para>If <paramref name="fixedBaseLeftBuffer" /> is false, then <paramref name="wrapLeftBuffer" /> is ignored and <paramref name="leftBaseBuffer" /> can be null.</para>
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Differencing.IDifferenceBufferFactoryService2.CreateDifferenceBuffer(Microsoft.VisualStudio.Text.ITextDataModel,Microsoft.VisualStudio.Text.ITextDataModel,Microsoft.VisualStudio.Text.Differencing.StringDifferenceOptions,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Create an <see cref="T:Microsoft.VisualStudio.Text.Differencing.IDifferenceBuffer" /> for the given left and right buffers and with the given difference options.
            </summary>
            <param name="innerLeftDataModel">The data model for the left buffer. This can be null.</param>
            <param name="rightDataModel">The right (new, after) buffer.</param>
            <param name="options">The options to use in computing differences between the buffers.</param>
            <param name="disableEditing">If true, disable editing in the right and inlines views.</param>
            <param name="wrapLeftBuffer">If true, create a read-only projection of <paramref name="innerLeftDataModel" /> (which will prevent
            that buffer from being modified through the difference buffers).</param>
            <param name="wrapRightBuffer">If true and editing is disabled, create a read-only projection of <paramref name="rightDataModel" /> (which will prevent
            that buffer from being modified through the difference buffers).</param>
            <param name="fixedBaseLeftBuffer">Allows, if false, the <see cref="P:Microsoft.VisualStudio.Text.Differencing.IDifferenceBuffer.BaseLeftBuffer" /> can be changed.</param>
            <remarks>
            <para>If <paramref name="disableEditing" /> is false, then <paramref name="wrapRightBuffer" /> is ignored (and the right buffer will not be wrapped).</para>
            <para>If <paramref name="wrapLeftBuffer" /> is false, then the caller of this method is responsible for making sure <paramref name="innerLeftDataModel" /> is read-only.</para>
            <para>If <paramref name="disableEditing" /> is true and <paramref name="wrapRightBuffer" /> is false, then the caller of this method is responsible for making sure <paramref name="rightDataModel" /> is read-only.</para>
            <para>If <paramref name="fixedBaseLeftBuffer" /> is false, then <paramref name="wrapLeftBuffer" /> is ignored and <paramref name="innerLeftDataModel" /> can be null.</para>
            </remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Differencing.IDifferenceBufferFactoryService3">
            <summary>
            A factory for creating <see cref="T:Microsoft.VisualStudio.Text.Differencing.IDifferenceBuffer" /> instances.
            </summary>
            <remarks>
            This is a MEF service and can be imported.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Differencing.IDifferenceBufferFactoryService3.CreateDifferenceBuffer(Microsoft.VisualStudio.Text.ITextDataModel,Microsoft.VisualStudio.Text.ITextDataModel,Microsoft.VisualStudio.Text.Differencing.StringDifferenceOptions,System.Boolean,Microsoft.VisualStudio.Text.Projection.IProjectionBuffer,System.Action{Microsoft.VisualStudio.Text.Projection.IProjectionBuffer,Microsoft.VisualStudio.Text.Differencing.IDifferenceBuffer2,Microsoft.VisualStudio.Text.ITextDataModel},Microsoft.VisualStudio.Text.Projection.IProjectionBuffer,System.Boolean)">
            <summary>
            Create an <see cref="T:Microsoft.VisualStudio.Text.Differencing.IDifferenceBuffer" /> for the given left and right buffers and with the given difference options.
            </summary>
            <param name="innerLeftDataModel">The data model for the left buffer. This can be null.</param>
            <param name="rightDataModel">The right (new, after) buffer's data model.</param>
            <param name="options">The options to use in computing differences between the buffers.</param>
            <param name="disableEditing">If true, disable editing in the right and inline views.</param>
            <param name="leftEditBuffer">The buffer that will be used as the left edit buffer of a containing diff view.</param>
            <param name="updateLeftProjection">Called when the left data model changes to update the left edit buffer's projection buffer. Can be null if <paramref name="fixedBaseLeftBuffer" /> is true.</param>
            <param name="rightEditBuffer">The buffer that will be used as the right edit buffer of a containing diff view.</param>
            <param name="fixedBaseLeftBuffer">Allows, if false, the <see cref="P:Microsoft.VisualStudio.Text.Differencing.IDifferenceBuffer.BaseLeftBuffer" /> can be changed.</param>
            <remarks>
            <para>If <paramref name="disableEditing" />if true, then the caller is responsible for ensuring <paramref name="rightEditBuffer" /> is covered by a read-only region.</para>
            <para><paramref name="updateLeftProjection" />is only called when <see cref="P:Microsoft.VisualStudio.Text.Differencing.IDifferenceBuffer2.LeftDataModel" /> changes.</para>
            <para>
            The other difference buffer factory methods all assume that the created DifferenceBuffer will be used to create a DifferenceView that displays all
            of the buffers defined in the left and right data models. This factory method is used when you want a difference viewer that displays only part of
            the buffers: the supplied <paramref name="leftEditBuffer" /> and <paramref name="rightEditBuffer" /> define the spans that will be displayed in the
            difference viewer. <paramref name="updateLeftProjection" /> is used to adjust the left edit buffer if the left data model changes.
            </para>
            </remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Differencing.IgnoreDifferencePredicate">
            <summary>
            A custom predicate that the <see cref="T:Microsoft.VisualStudio.Text.Differencing.IDifferenceBuffer" /> uses to selectively ignore differences.
            </summary>
            <param name="lineDifference">The lines that have changed.  The <see cref="P:Microsoft.VisualStudio.Text.Differencing.Difference.Left" /> and <see cref="P:Microsoft.VisualStudio.Text.Differencing.Difference.Right" /> spans
            are line numbers in the <paramref name="leftSnapshot" /> and <paramref name="rightSnapshot" />, respectively.</param>
            <param name="leftSnapshot">The snapshot of the <see cref="P:Microsoft.VisualStudio.Text.Differencing.IDifferenceBuffer.LeftBuffer" /> being compared.</param>
            <param name="rightSnapshot">The snapshot of the <see cref="P:Microsoft.VisualStudio.Text.Differencing.IDifferenceBuffer.RightBuffer" /> being compared.</param>
            <returns><c>true</c> to ignore the given difference, <c>false</c> to include it in the list of differences.</returns>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Differencing.IgnoreWhiteSpaceBehavior.None">
            <summary>
            Don't ignore whitespace.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Differencing.IgnoreWhiteSpaceBehavior.IgnoreTrimWhiteSpace">
            <summary>
            Ignore whitespace at the start and end of lines when performing line-level differencing.
            </summary>
            <remarks>This is equivalent to <see cref="P:Microsoft.VisualStudio.Text.Differencing.StringDifferenceOptions.IgnoreTrimWhiteSpace" />.</remarks>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Differencing.IgnoreWhiteSpaceBehavior.IgnoreAllWhiteSpace">
            <summary>
            Ignore all whitespace when performing line-level differencing.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Differencing.ISnapshotDifference">
            <summary>
            A set of differences between two <see cref="T:Microsoft.VisualStudio.Text.ITextSnapshot" />s. These are created by
            an <see cref="T:Microsoft.VisualStudio.Text.Differencing.IDifferenceBuffer" />, and are valid to a specific set of snapshots for the
            <see cref="P:Microsoft.VisualStudio.Text.Differencing.IDifferenceBuffer.LeftBuffer" />/<see cref="P:Microsoft.VisualStudio.Text.Differencing.IDifferenceBuffer.RightBuffer" /> and
            the <see cref="T:Microsoft.VisualStudio.Text.Differencing.StringDifferenceOptions" /> and collections of <see cref="T:Microsoft.VisualStudio.Text.Differencing.SnapshotLineTransform" /> 
            and <see cref="T:Microsoft.VisualStudio.Text.Differencing.IgnoreDifferencePredicate" /> in place at that time.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Differencing.ISnapshotDifference.DifferenceBuffer">
            <summary>
            The <see cref="T:Microsoft.VisualStudio.Text.Differencing.IDifferenceBuffer" /> that generated this difference.
            </summary>
            <remarks>
            To determine if this difference is current, you can compare it against
            <see cref="P:Microsoft.VisualStudio.Text.Differencing.IDifferenceBuffer.CurrentSnapshotDifference" />.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Differencing.ISnapshotDifference.LeftBufferSnapshot">
            <summary>
            The snapshot of the left buffer used to compute this difference.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Differencing.ISnapshotDifference.RightBufferSnapshot">
            <summary>
            The snapshot of the right buffer used to compute this difference.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Differencing.ISnapshotDifference.InlineBufferSnapshot">
            <summary>
            The snapshot generated for the inline buffer for this difference.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Differencing.ISnapshotDifference.DifferenceOptions">
            <summary>
            The difference options that were used to generate this difference.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Differencing.ISnapshotDifference.SnapshotLineTransforms">
            <summary>
            The line transforms that were used to generate this difference.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Differencing.ISnapshotDifference.IgnoreDifferencePredicates">
            <summary>
            The ignore difference predicates that were used to generate this difference.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Differencing.ISnapshotDifference.LineDifferences">
            <summary>
            The differences for this snapshot.
            </summary>
            <remarks>
            To find word-level differences, use <see cref="M:Microsoft.VisualStudio.Text.Differencing.IHierarchicalDifferenceCollection.HasContainedDifferences(System.Int32)" /> 
            and <see cref="M:Microsoft.VisualStudio.Text.Differencing.IHierarchicalDifferenceCollection.GetContainedDifferences(System.Int32)" />.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Differencing.ISnapshotDifference.DifferenceSpans">
            <summary>
            The word and line difference spans as <see cref="T:Microsoft.VisualStudio.Text.ITrackingSpan" />s against the left and right buffer.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Differencing.ISnapshotDifference.MapToInlineSnapshot(Microsoft.VisualStudio.Text.SnapshotPoint)">
            <summary>
            Map a point from either the left or right buffer to the inline snapshot.
            </summary>
            <param name="point">The point to map up.</param>
            <returns>A point in the <see cref="P:Microsoft.VisualStudio.Text.Differencing.ISnapshotDifference.InlineBufferSnapshot" />.</returns>
            <remarks>This is equivalent to calling MapToSnapshot(point, snapshot.InlineBufferSnapshot).</remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Differencing.ISnapshotDifference.MapToInlineSnapshot(Microsoft.VisualStudio.Text.SnapshotPoint,Microsoft.VisualStudio.Text.PositionAffinity)">
            <summary>
            Map a point from either the left or right buffer to the inline snapshot.
            </summary>
            <param name="point">The point to map up.</param>
            <param name="positionAffinity">
            Specifies whether the point in the inline buffer should be in the predecessor or successor buffer.</param>
            <returns>A point in the <see cref="P:Microsoft.VisualStudio.Text.Differencing.ISnapshotDifference.InlineBufferSnapshot" />.</returns>
            <remarks>This is equivalent to calling MapToSnapshot(point, snapshot.InlineBufferSnapshot).</remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Differencing.ISnapshotDifference.FindMatchOrDifference(Microsoft.VisualStudio.Text.SnapshotPoint,Microsoft.VisualStudio.Text.Differencing.Match@,Microsoft.VisualStudio.Text.Differencing.Difference@)">
            <summary>
            Find the match or difference that contains the specified point.
            </summary>
            <param name="point">Point for which to find the corresponding difference. This can be on the left, right or inline buffers.</param>
            <param name="match">Match containing the <paramref name="point" /> (will be null if <paramref name="point" /> lies in a difference).</param>
            <param name="difference">Difference containing the <paramref name="point" /> (will be null if <paramref name="point" /> lies in a match).</param>
            <returns>Index of the matching difference.</returns>
            <remarks>
            <para> If the <paramref name="point" /> is contained in a match, then it is the index of the following difference. If <paramref name="point" /> is contained in a match
            after the last difference, then index will be equal to the count of differences.</para></remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Differencing.ISnapshotDifference.TranslateToSnapshot(Microsoft.VisualStudio.Text.SnapshotPoint)">
            <summary>
            Translate the specified point to the corresponding snapshot associated with snapshot difference.
            </summary>
            <param name="point">SnapshotPoint to translate.</param>
            <returns><paramref name="point" /> translated from its snapshot to this.LeftBufferSnapshot, this.RightBufferSnapshot, or this.InlineBufferSnapshot.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Differencing.ISnapshotDifference.MapToSourceSnapshot(Microsoft.VisualStudio.Text.SnapshotPoint)">
            <summary>
            Map the specified <see cref="T:Microsoft.VisualStudio.Text.SnapshotPoint" /> in the inline buffer to its corresponding location in the left or right snapshots.
            </summary>
            <param name="inlinePoint">Point to map.</param>
            <returns>Corresponding location on either the left or right buffers.</returns>
            <remarks>
            <para>Locations inside matching text will always map to the right buffer.</para>
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Differencing.ISnapshotDifference.MapToSnapshot(Microsoft.VisualStudio.Text.SnapshotPoint,Microsoft.VisualStudio.Text.ITextSnapshot,Microsoft.VisualStudio.Text.Differencing.DifferenceMappingMode)">
            <summary>
            Map the specified <see cref="T:Microsoft.VisualStudio.Text.SnapshotPoint" /> to the specified <see cref="T:Microsoft.VisualStudio.Text.ITextSnapshot" />.
            </summary>
            <param name="point">Point to map.</param>
            <param name="target">Target snapshot</param>
            <param name="mode">The mapping used when mapping between the left and right snapshots (or vs. versa) when <paramref name="point" /> lies inside a difference.</param>
            <remarks>
            <para>Mapping to the left or right buffers may be lossy. Points inside a difference will be mapped according to <paramref name="mode" />.</para>
            <para>Mapping between the inline snapshot and the source snapshots or vs. versa will, with one exception, be invertable. The exception is that a point between the \r\n
            of a line break may be mapped to the end of the corresponding line.</para>
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Differencing.ISnapshotDifference.MapToSnapshot(Microsoft.VisualStudio.Text.Differencing.Difference,Microsoft.VisualStudio.Text.ITextSnapshot)">
            <summary>
            Get the extent of the difference in the specified snapshot.
            </summary>
            <param name="difference"></param>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Differencing.LineDifferenceMutator">
            <summary>
             A custom function to selectively ignore parts of a line difference.
            </summary>
            <param name="lineDifferences">The lines that have changed. left and right correspond to spans of line numbers (in ine numbers in 
            <paramref name="leftSnapshot" /> and <paramref name="rightSnapshot" />, respectively) that have changed.</param>
            <param name="leftSnapshot">The snapshot of the <see cref="P:Microsoft.VisualStudio.Text.Differencing.IDifferenceBuffer.LeftBuffer" /> being compared.</param>
            <param name="rightSnapshot">The snapshot of the <see cref="P:Microsoft.VisualStudio.Text.Differencing.IDifferenceBuffer.RightBuffer" /> being compared.</param>
            <returns>An enumerator of the differences after mutating lineDifferences.</returns>
            <remarks>
            If there are no changes, then the returned enumeration should be object.ReferenceEquals to lineDifferences.
            </remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Differencing.LineType">
            <summary>
            The line type, as used in methods on <see cref="T:Microsoft.VisualStudio.Text.Differencing.IDifferenceBuffer" />.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Differencing.LineType.Added">
            <summary>
            A line that was added, meaning it only appears in the right buffer.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Differencing.LineType.Removed">
            <summary>
            A line that was removed, meaning it only appears in the left buffer.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Differencing.LineType.Matched">
            <summary>
            A line that appears in both the left and right buffer.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Differencing.SnapshotDifferenceChangeEventArgs">
            <summary>
            Used in conjunction with <see cref="E:Microsoft.VisualStudio.Text.Differencing.IDifferenceBuffer.SnapshotDifferenceChanging" /> and
            <see cref="E:Microsoft.VisualStudio.Text.Differencing.IDifferenceBuffer.SnapshotDifferenceChanged" />.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Differencing.SnapshotDifferenceChangeEventArgs.#ctor(Microsoft.VisualStudio.Text.Differencing.ISnapshotDifference,Microsoft.VisualStudio.Text.Differencing.ISnapshotDifference)">
            <summary>
            Create a change event from the given before and after <see cref="T:Microsoft.VisualStudio.Text.Differencing.ISnapshotDifference" />s.
            </summary>
            <param name="before">The <see cref="T:Microsoft.VisualStudio.Text.Differencing.ISnapshotDifference" /> before the change (may be <c>null</c>).</param>
            <param name="after">The <see cref="T:Microsoft.VisualStudio.Text.Differencing.ISnapshotDifference" /> after the change.</param>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Differencing.SnapshotDifferenceChangeEventArgs.Before">
            <summary>
            The <see cref="T:Microsoft.VisualStudio.Text.Differencing.ISnapshotDifference" /> before the change, which is <c>null</c> for the
            first change event.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Differencing.SnapshotDifferenceChangeEventArgs.After">
            <summary>
            The <see cref="T:Microsoft.VisualStudio.Text.Differencing.ISnapshotDifference" /> after the change.
            If this is a <see cref="E:Microsoft.VisualStudio.Text.Differencing.IDifferenceBuffer.SnapshotDifferenceChanging" />
            event, this property will be <c>null</c>, as it hasn't been computed yet.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Differencing.SnapshotLineTransform">
            <summary>
            A custom transform for text snapshot lines, to allow clients of <see cref="T:Microsoft.VisualStudio.Text.Differencing.IDifferenceBuffer" /> to modify lines before
            performing any comparison.
            </summary>
            <param name="line">The original snapshot line that this transform is being asked to operate on.</param>
            <param name="currentText">The current text of the line, which may differ from <see cref="M:Microsoft.VisualStudio.Text.ITextSnapshotLine.GetText" /> if an
            earlier transform has already processed the line.</param>
            <returns>The new line text to use for the line.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Editor.OptionsExtensionMethods.DefaultOptionExtensions">
            <summary>
            Extension methods for common general options.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.OptionsExtensionMethods.DefaultOptionExtensions.IsConvertTabsToSpacesEnabled(Microsoft.VisualStudio.Text.Editor.IEditorOptions)">
            <summary>
            Determines whether the option to convert tabs to spaces is enabled in the specified <see cref="T:Microsoft.VisualStudio.Text.Editor.IEditorOptions" />.
            </summary>
            <param name="options">The <see cref="T:Microsoft.VisualStudio.Text.Editor.IEditorOptions" />.</param>
            <returns><c>true</c> if the option is enabled, otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.OptionsExtensionMethods.DefaultOptionExtensions.GetTabSize(Microsoft.VisualStudio.Text.Editor.IEditorOptions)">
            <summary>
            Gets the size of the tab for the specified <see cref="T:Microsoft.VisualStudio.Text.Editor.IEditorOptions" />.
            </summary>
            <param name="options">The <see cref="T:Microsoft.VisualStudio.Text.Editor.IEditorOptions" />.</param>
            <returns>The number of spaces of the tab size.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.OptionsExtensionMethods.DefaultOptionExtensions.GetIndentSize(Microsoft.VisualStudio.Text.Editor.IEditorOptions)">
            <summary>
            Gets the size of an indent for the specified <see cref="T:Microsoft.VisualStudio.Text.Editor.IEditorOptions" />.
            </summary>
            <param name="options">The <see cref="T:Microsoft.VisualStudio.Text.Editor.IEditorOptions" />.</param>
            <returns>The number of spaces of the indent size.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.OptionsExtensionMethods.DefaultOptionExtensions.GetIndentStyle(Microsoft.VisualStudio.Text.Editor.IEditorOptions)">
            <summary>
            Gets the indentation style for the specified <see cref="T:Microsoft.VisualStudio.Text.Editor.IEditorOptions" />.
            </summary>
            <param name="options">The <see cref="T:Microsoft.VisualStudio.Text.Editor.IEditorOptions" />.</param>
            <returns>The indentation style.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.OptionsExtensionMethods.DefaultOptionExtensions.GetReplicateNewLineCharacter(Microsoft.VisualStudio.Text.Editor.IEditorOptions)">
            <summary>
            Determines whether to duplicate the new line character if it is already present when inserting a new line.
            </summary>
            <param name="options">The <see cref="T:Microsoft.VisualStudio.Text.Editor.IEditorOptions" />.</param>
            <returns><c>true</c> if the new line character should be duplicated, otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.OptionsExtensionMethods.DefaultOptionExtensions.GetNewLineCharacter(Microsoft.VisualStudio.Text.Editor.IEditorOptions)">
            <summary>
            Gets the new line character for the specified editor options.
            </summary>
            <param name="options">The <see cref="T:Microsoft.VisualStudio.Text.Editor.IEditorOptions" />.</param>
            <returns>A string containing the new line character or characters.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.OptionsExtensionMethods.DefaultOptionExtensions.GetTrimTrailingWhieSpace(Microsoft.VisualStudio.Text.Editor.IEditorOptions)">
            <summary>
            Determines whether to trim trailing whitespace.
            </summary>
            <param name="options">The <see cref="T:Microsoft.VisualStudio.Text.Editor.IEditorOptions" />.</param>
            <returns><c>true</c> if trailing whitespace should be trimmed, otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.OptionsExtensionMethods.DefaultOptionExtensions.GetInsertFinalNewLine(Microsoft.VisualStudio.Text.Editor.IEditorOptions)">
            <summary>
            Determines whether to insert final newline.
            </summary>
            <param name="options">The <see cref="T:Microsoft.VisualStudio.Text.Editor.IEditorOptions" />.</param>
            <returns><c>true</c> if a final new line should be inserted, otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.OptionsExtensionMethods.DefaultOptionExtensions.GetTooltipAppearanceCategory(Microsoft.VisualStudio.Text.Editor.IEditorOptions)">
            <summary>
            Determines appearance category for tooltips originating in this view
            </summary>
            <param name="options">The <see cref="T:Microsoft.VisualStudio.Text.Editor.IEditorOptions" />.</param>
            <returns>A string containing the appearance category for tooltips originating in this view.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Editor.DefaultOptions">
            <summary>
            Common general options.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Editor.DefaultOptions.ConvertTabsToSpacesOptionId">
            <summary>
            The default option that determines whether to convert tabs to spaces.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Editor.DefaultOptions.TabSizeOptionId">
            <summary>
            The default option that determines size of a tab.
            </summary>
            <remarks>This option is used to determine the numerical column offset of a tab
            character ('\t') and, if <see cref="T:Microsoft.VisualStudio.Text.Editor.ConvertTabsToSpaces" /> is enabled, the number of spaces to which a tab
            should be converted.</remarks>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Editor.DefaultOptions.IndentSizeOptionId">
            <summary>
            The default option that determines size of an indent.
            </summary>
            <remarks>This option is used to determine the numerical column offset of an indent level.</remarks>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Editor.DefaultOptions.IndentStyleId">
            <summary>
            Determines the indentation style of the document.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Editor.DefaultOptions.ReplicateNewLineCharacterOptionId">
            <summary>
            The default option that determines whether to duplicate the new line character already present
            when inserting a new line.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Editor.DefaultOptions.NewLineCharacterOptionId">
            <summary>
            The default option that determines the newline character or characters. 
            </summary>
            <remarks>The newline character can be a string, as in the common case of "\r\n". This setting applies
            when <see cref="T:Microsoft.VisualStudio.Text.Editor.ReplicateNewLineCharacter" /> is <c>false</c>, or when <see cref="T:Microsoft.VisualStudio.Text.Editor.ReplicateNewLineCharacter" /> is <c>true</c> and
            the text buffer is empty.</remarks>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Editor.DefaultOptions.LongBufferLineThresholdId">
            <summary>
            The default option that determines the threshold for special handling of long lines.
            </summary>
            <remarks>
            Some operations will not operate on lines longer than this threshold.
            </remarks>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Editor.DefaultOptions.LongBufferLineChunkLengthId">
            <summary>
            The default option that determines the chunking size for long lines.
            </summary>
            <remarks>
            Lines longer than <see cref="T:Microsoft.VisualStudio.Text.Editor.LongBufferLineThreshold" /> may be considered in chunks of this size.
            </remarks>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Editor.DefaultOptions.TrimTrailingWhiteSpaceOptionId">
            <summary>
            The default option that determines whether to trim trailing whitespace.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Editor.DefaultOptions.InsertFinalNewLineOptionId">
            <summary>
            The default option that determines whether to insert final new line charcter.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Editor.DefaultOptions.TooltipAppearanceCategoryOptionId">
            <summary>
            The default option that determines appearance category for tooltips originating in this view.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Editor.DefaultOptions.AutoDetectUtf8Id">
            <summary>
            The default option that determines whether files, when opened, attempt to detect for a utf-8 encoding.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Editor.DefaultOptions.AutomaticDelimiterHighlightingId">
            <summary>
            The default option that determines whether matching delimiters should be highlighted.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Editor.DefaultOptions.FollowCodingConventionsId">
            <summary>
            The default option that determines whether files should follow project coding conventions.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Editor.DefaultOptions.RawCodingConventionsSnapshotOptionId">
            <summary>
            The default option that contains current snapshot of coding conventions.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Editor.DefaultOptions.EditorEmulationModeId">
            <summary>
            The default option that determines the editor emulation mode.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Editor.DefaultOptions.MaximumTypingLatencyOptionId">
            <summary>
            The option definition that determines maximum allowed typing latency value in milliseconds. Its value comes either
            from remote settings or from <see cref="T:Microsoft.VisualStudio.Text.Editor.UserCustomMaximumTypingLatencyOption" /> if user specifies it in
            Tools/Options/Text Editor/Advanced page.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Editor.DefaultOptions.UserCustomMaximumTypingLatencyOptionId">
            <summary>
            The option definition that determines user custom maximum allowed typing latency value in milliseconds. If user
            specifies it on Tools/Options/Text Editor/Advanced page, it becomes a source for the <see cref="T:Microsoft.VisualStudio.Text.Editor.MaximumTypingLatency" /> option.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Editor.DefaultOptions.EnableTypingLatencyGuardOptionId">
            <summary>
            The option definition that determines whether to enable typing latency guarding.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Editor.DefaultOptions.FallbackFontId">
            <summary>
            Option that defines the fallback font for the editor.
            </summary>
            <remarks>
            Note that, unlike most other options, this value is only checked once at startup on <see cref="P:Microsoft.VisualStudio.Text.Editor.IEditorOptionsFactoryService.GlobalOptions" />
            and we do not react to changes.
            </remarks>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Editor.DefaultOptions.NonBlockingCompletionOptionId">
            <summary>
            Option that defines whether or not Editor should block waiting for computation of completion items.
            When set to <c>true</c> and user invoked gesture to commit a completion item, Editor will
            either use the last computed set of completion items, or dismiss completion if no completion items were computed so far.
            </summary>
            <remarks>
            When set to <c>true</c>, it takes precedence over <see cref="F:Microsoft.VisualStudio.Text.Editor.DefaultOptions.ResponsiveCompletionOptionId" /> and is equivalent to
            setting <see cref="F:Microsoft.VisualStudio.Text.Editor.DefaultOptions.ResponsiveCompletionThresholdOptionId" /> to <c>true</c> and <see cref="F:Microsoft.VisualStudio.Text.Editor.DefaultOptions.ResponsiveCompletionOptionId" /> to <c>0</c>.
            </remarks>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Editor.DefaultOptions.ResponsiveCompletionOptionId">
            <summary>
            Option that defines whether or not Editor should limit the time it blocks waiting for computation of completion items.
            When this time duration elapses, Editor will either use the last computed set of completion items, or dismiss completion if no completion items were computed so far.
            </summary>
            <remarks>
            This option is used only when <see cref="F:Microsoft.VisualStudio.Text.Editor.DefaultOptions.NonBlockingCompletionOptionId" /> is reset to <c>false</c>.
            </remarks>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Editor.DefaultOptions.ResponsiveCompletionThresholdOptionId">
            <summary>
            Option that defines how long Editor should block waiting for computation of completion items, in miliseconds.
            When this time duration elapses, Editor will either use the last computed set of completion items, or dismiss completion if no completion items were computed so far.
            </summary>
            <remarks>
            This option is used only when <see cref="F:Microsoft.VisualStudio.Text.Editor.DefaultOptions.ResponsiveCompletionOptionId" /> is set to <c>true</c>.
            </remarks>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Editor.DefaultOptions.WordBasedSuggestionsOptionId">
            <summary>
            Option that defines whether Editor extensions like TextMate should default to
            providing suggestions based on words already present in the document, when semantic IntelliSense completion would be otherwise unavailable.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Editor.DefaultOptions.DefaultCompletionModeOptionId">
            <summary>
            Option that stores user's preference for IntelliSense completion mode when VS starts up.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Editor.DefaultOptions.DiagnosticModeOptionId">
            <summary>
            This option is no longer used. Back when it was used,
            if set to true, Editor produced a detailed log for a particular scenario of interest.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Editor.DefaultOptions.AdaptiveFormattingOptionId">
            <summary>
            Determines whether automatic formatting should adapt to the contents of the file instead of user options.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Editor.DefaultOptions.UseBoxSelectionOptionId">
            <summary>
            Determines whether Editor should retain box selection functionality (if true) or use multiple stream selections (if false).
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Editor.DefaultOptions.SelectSubwordOnDoubleClickId">
            <summary>
            The option that determines whether double click should select by subword instead of word.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Editor.DefaultOptions.EnableCodeCleanupOnSaveOptionId">
            <summary>
            The option that determines whether Code Cleanup should be performed on Save.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Editor.DefaultOptions.CodeCleanupOnSaveProfileOptionId">
            <summary>
            Determines which Code Cleanup profile should be used by Code Cleanup on Save.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Editor.DefaultOptions.HideAdvancedCompletionItemsOptionId">
            <summary>
            Determines whether or not advanced members are hidden in the IntelliSense completion.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Editor.DefaultOptions.ShowSignatureHelpOptionId">
            <summary>
            Defines whether Signature Help should be shown automatically.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Editor.DefaultOptions.ChangeTrackingModeOptionId">
            <summary>
            The option definition that defines the mode of change tracking indicated by the Change Margin.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Editor.DefaultOptions.PreloadDisallowListOptionId">
            <summary>
            The option definition that defines the semicolon separated list of extensions that should not be preloaded
            with optional version number of the first version where extension has been fixed.
            <example>
            Example value: "AssemblyA;AssemblyB=1.0.0;AssemblyC"
            This will disallow preload of all versions of AssemblyA and AssemblyC,
            and disallow preload of AssemblyB with version &lt; 1.0.0
            </example>
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Editor.ConvertTabsToSpaces">
            <summary>
            The option definition that determines whether to convert tabs to spaces.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.ConvertTabsToSpaces.Default">
            <summary>
            Gets the default value (<c>true</c>)&gt;.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.ConvertTabsToSpaces.Key">
            <summary>
            Gets the editor option key.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Editor.TabSize">
            <summary>
            The option definition that determines the size (in number of spaces) of a tab.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.TabSize.Default">
            <summary>
            Gets the default value (4).
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.TabSize.Key">
            <summary>
            Gets the editor option key.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.TabSize.IsValid(System.Int32@)">
            <summary>
            Determines whether a given tab size is valid.
            </summary>
            <param name="proposedValue">The size of the tab, in number of spaces.</param>
            <returns><c>true</c> if <paramref name="proposedValue" /> is a valid size, otherwise <c>false</c>.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Editor.IndentSize">
            <summary>
            The option definition that determines the size (in number of spaces) of an indent.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.IndentSize.Default">
            <summary>
            Gets the default value (4).
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.IndentSize.Key">
            <summary>
            Gets the editor option key.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.IndentSize.IsValid(System.Int32@)">
            <summary>
            Determines whether a given indent size is valid.
            </summary>
            <param name="proposedValue">The size of the indent, in number of spaces.</param>
            <returns><c>true</c> if <paramref name="proposedValue" /> is a valid size, otherwise <c>false</c>.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Editor.IndentingStyleOption">
            <summary>
            The option definition that determines the style of auto indentation.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.IndentingStyleOption.Default">
            <summary>
            Gets the default value, which is <see cref="F:Microsoft.VisualStudio.Text.Editor.IndentingStyle.Block" />.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.IndentingStyleOption.Key">
            <summary>
            Gets the default text view host value.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Editor.ReplicateNewLineCharacter">
            <summary>
            The option definition that determines whether to duplicate a newline character when inserting a line.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.ReplicateNewLineCharacter.Default">
            <summary>
            Gets the default value (<c>true</c>).
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.ReplicateNewLineCharacter.Key">
            <summary>
            Gets the editor option key.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Editor.NewLineCharacter">
            <summary>
            The option definition that specifies the newline character or characters.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.NewLineCharacter.Default">
            <summary>
            Gets the default value ("\r\n").
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.NewLineCharacter.Key">
            <summary>
            Gets the editor option key.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Editor.LongBufferLineThreshold">
            <summary>
            The option definition that determines the threshold for special handling of long lines.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.LongBufferLineThreshold.Default">
            <summary>
            Gets the default value (32K).
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.LongBufferLineThreshold.Key">
            <summary>
            Gets the editor option key.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Editor.LongBufferLineChunk">
            <summary>
            The option definition that determines the determines the chunking size for long lines.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.LongBufferLineChunk.Default">
            <summary>
            Gets the default value (4K).
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.LongBufferLineChunk.Key">
            <summary>
            Gets the editor option key.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Editor.TrimTrailingWhiteSpace">
            <summary>
            The option definition that determines whether to trim trailing whitespace.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.TrimTrailingWhiteSpace.Default">
            <summary>
            Gets the default value (<c>false</c>).
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.TrimTrailingWhiteSpace.Key">
            <summary>
            Gets the editor option key.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Editor.InsertFinalNewLine">
            <summary>
            The option definition that determines whether to insert a final newline.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.InsertFinalNewLine.Default">
            <summary>
            Gets the default value (<c>false</c>).
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.InsertFinalNewLine.Key">
            <summary>
            Gets the editor option key.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Editor.TooltipAppearanceCategory">
            <summary>
            The option definition that determines whether to insert a final newline.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.TooltipAppearanceCategory.Default">
            <summary>
            Gets the default value ("text").
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.TooltipAppearanceCategory.Key">
            <summary>
            Gets the editor option key.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Editor.AutoDetectUtf8Option">
            <summary>
            The option definition that determines whether files, when opened, attempt to detect for a utf-8 encoding.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Editor.AutomaticDelimiterHighlightingOption">
            <summary>
            The option definition that determines whether matching delimiters should be highlighted.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Editor.FollowCodingConventionsOption">
            <summary>
            The option definition that determines whether files should follow project coding conventions.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Editor.EditorEmulationModeOption">
            <summary>
            The option definition that determines the editor emulation mode.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Editor.EnableTypingLatencyGuard">
             <summary>
            The option definition that determines whether to enable typing latency guarding.
             </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.EnableTypingLatencyGuard.Default">
            <summary>
            Gets the default value (true).
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.EnableTypingLatencyGuard.Key">
            <summary>
            Gets the editor option key.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Editor.MaximumTypingLatency">
            <summary>
            The option definition that determines maximum allowed typing latency value in milliseconds. Its value comes either
            from remote settings or from <see cref="T:Microsoft.VisualStudio.Text.Editor.UserCustomMaximumTypingLatencyOption" /> if user specifies it in
            Tools/Options/Text Editor/Advanced page.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.MaximumTypingLatency.Default">
            <summary>
            Gets the default value (infinite).
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.MaximumTypingLatency.Key">
            <summary>
            Gets the editor option key.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Editor.UserCustomMaximumTypingLatencyOption">
            <summary>
            The option definition that determines user custom maximum allowed typing latency value in milliseconds. If user
            specifies it on Tools/Options/Text Editor/Advanced page, it becomes a source for the <see cref="T:Microsoft.VisualStudio.Text.Editor.MaximumTypingLatency" /> option.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Editor.NonBlockingCompletionOption">
            <summary>
            The option definition that determines whether editor uses non blocking completion mode,
            where editor does not wait for completion items to arrive when user presses a commit character.
            This option is not exposed to the users. It is controllable by laguage services.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Editor.ResponsiveCompletionOption">
            <summary>
            The option definition that determines whether editor uses responsive completion  mode,
            where editor waits short amount of time for completion items when user presses a commit character.
            If completion items still don't exist after the delay, completion is dismissed.
            This option is exposed to the users at Tools/Options/Text Editor/Advanced page.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Editor.ResponsiveCompletionThresholdOption">
            <summary>
            The option definition that determines the maximum allowed delay in responsive completion mode,
            where editor waits specified amount of time for completion items when user presses a commit character.
            If completion items still don't exist after the delay, completion is dismissed.
            This option is not exposed to the users. It is controllable by remote setting.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Editor.WordBasedSuggestions">
            <summary>
            The option definition that determines whether extensions like TextMate should default to
            providing suggestions based on words already present in the document, when semantic IntelliSense completion would be otherwise unavailable.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Editor.DefaultCompletionModeOption">
            <summary>
            The option definition that determines the completion mode after starting VS.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Editor.DiagnosticModeOption">
            <summary>
            This option is no longer used
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Editor.AdaptiveFormattingOption">
            <summary>
            Determines whether automatic formatting should adapt to the contents of the file instead of user options.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Editor.UseBoxSelectionOption">
            <summary>
            The option definition determines whether Editor retains Box selection functionality (if true)
            or uses multiple stream selections (if false).
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Editor.SubWordNavigationOption">
            <summary>
            The option definition that determines whether subWord Navigation should be enabled.
            This option is set using tool option window, and is set to <c>false</c>
            so that responsive mode remains disabled when it is not reached.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Editor.HideAdvancedCompletionItemsOption">
            <summary>
            Defines the Hide Advanced Members in IntelliSense completion option.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.HideAdvancedCompletionItemsOption.Default">
            <summary>
            Gets the default value, which is <c>false</c>, indicating whether or not advanced members are hidden in the IntelliSense completion.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.HideAdvancedCompletionItemsOption.Key">
            <summary>
            Gets the default text view host value.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Editor.ShowSignatureHelpOption">
            <summary>
            Defines the Show Signature Help option.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.ShowSignatureHelpOption.Default">
            <summary>
            Gets the default value, which is <c>true</c>, indicating whether or not the Signature Help should be displayed.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.ShowSignatureHelpOption.Key">
            <summary>
            Gets the default text view host value.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Editor.RawCodingConventionsSnapshotOption">
            <summary>
            Defines the Coding Conventions Snapshot option.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.RawCodingConventionsSnapshotOption.Default">
            <summary>
            Gets the default value, which is an empty dictionary.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.RawCodingConventionsSnapshotOption.Key">
            <summary>
            Gets this option's key instance.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Editor.ChangeTrackingModeOption">
            <summary>
            The option definition that defines the mode of change tracking indicated by the Change Margin.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Editor.PreloadDisallowListOption">
            <summary>
            The option definition that defines the semicolon separated list of extensions that should not be preloaded
            with optional version number of the first version where extension has been fixed.
            <example>
            Example value: "AssemblyA;AssemblyB=1.0.0;AssemblyC"
            This will disallow preload of all versions of AssemblyA and AssemblyC,
            and disallow preload of AssemblyB with version &lt; 1.0.0
            </example>
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Editor.DeferCreationAttribute">
            <summary>
            Specifies optional deferred creation semantics.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.DeferCreationAttribute.#ctor">
            <summary>
            Instantiates a new instance of a <see cref="T:Microsoft.VisualStudio.Text.Editor.DeferCreationAttribute" />.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.DeferCreationAttribute.OptionName">
            <summary>
            The optional OptionName that controls creation.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Editor.EditorOptionChangedEventArgs">
            <summary>
            Provides information for the <see cref="E:Microsoft.VisualStudio.Text.Editor.IEditorOptions.OptionChanged" /> event.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.EditorOptionChangedEventArgs.#ctor(System.String)">
            <summary>
            Initializes a new instance of <see cref="T:Microsoft.VisualStudio.Text.Editor.EditorOptionChangedEventArgs" />.
            </summary>
            <param name="optionId">The ID of the option.</param>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.EditorOptionChangedEventArgs.OptionId">
            <summary>
            Gets the ID of the option that has changed.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Editor.EditorOptionDefinition">
            <summary>
            The definition of an editor option.
            </summary>
            <remarks>
            This is a MEF component part, and should be exported with:
            [Export(typeof(EditorOptionDefinition))]
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.EditorOptionDefinition.DefaultValue">
            <summary>
            Gets the default value of the option.
            </summary>
            <remarks> The type of the value must be the same as the <see cref="P:Microsoft.VisualStudio.Text.Editor.EditorOptionDefinition.ValueType" />.</remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.EditorOptionDefinition.ValueType">
            <summary>
            Gets the actual type of the option. This is used to ensure
            that setting the option by using the editor options registry
            is type-safe.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.EditorOptionDefinition.Name">
            <summary>
            Gets the name of the option from the options registry.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.EditorOptionDefinition.IsApplicableToScope(Microsoft.VisualStudio.Utilities.IPropertyOwner)">
            <summary>
            Determines whether this option is applicable for the given scope (for example, a text buffer).
            The default implementation returns <c>true</c>. An option, by default, is applicable to any scope.
            </summary>
            <remarks>This method will not be called for the global scope. Every option is
            valid by definition in the global scope.</remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.EditorOptionDefinition.IsValid(System.Object@)">
            <summary>
            Determines whether the proposed value is valid.
            </summary>
            <param name="proposedValue">The proposed value for this option.</param>
            <returns><c>true</c> if the value is valid, otherwise <c>false</c>.</returns>
            <remarks>By the time the value is passed to this method, it has already
            been checked to be of the correct ValueType.
            The implementer of this method may modify the value.</remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.EditorOptionDefinition.Equals(System.Object)">
            <summary>
            Determines whether two <see cref="T:Microsoft.VisualStudio.Text.Editor.EditorOptionDefinition" /> objects are the same.
            </summary>
            <param name="obj">The object to be compared.</param>
            <returns><c>true</c> if the two objects are the same, otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.EditorOptionDefinition.GetHashCode">
            <summary>
            Gets the hash code of this type.
            </summary>
            <returns>The hash code.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Editor.EditorOptionDefinition`1">
            <summary>
            Represents the definition of an editor option.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.EditorOptionDefinition`1.ValueType">
            <summary>
            Gets the actual type of the option.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.EditorOptionDefinition`1.Name">
            <summary>
            Gets the name of the option.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.EditorOptionDefinition`1.DefaultValue">
            <summary>
            Gets the default value of the option.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.EditorOptionDefinition`1.IsValid(System.Object@)">
            <summary>Determines whether the proposed value is valid.
            </summary>
            <param name="proposedValue">The proposed value for this option.</param>
            <returns><c>true</c> if the value is valid, otherwise <c>false</c>.</returns>
            <remarks>By the time the value is passed to this method, it has already
            been checked to be of the correct ValueType.
            The implementer of this method may modify the value.</remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.EditorOptionDefinition`1.Key">
            <summary>
            Gets the key of this option.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.EditorOptionDefinition`1.Default">
            <summary>
            Gets the default value of this option.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.EditorOptionDefinition`1.IsValid(`0@)">
            <summary>
            Determines whether the proposed value is valid.
            </summary>
            <param name="proposedValue">The proposed value for this option.</param>
            <returns><c>true</c> if the value is valid, otherwise <c>false</c>.</returns>
            <remarks>The implementer of this method may modify the value.</remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Editor.EditorOptionKey`1">
            <summary>
            Represents a type-safe key for editor options.
            </summary>
            <typeparam name="T">The type of the option value.</typeparam>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.EditorOptionKey`1.#ctor(System.String)">
            <summary>
            Initializes a new instance of <see cref="T:Microsoft.VisualStudio.Text.Editor.EditorOptionKey`1" />.
            </summary>
            <param name="name">The name of the option key.</param>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.EditorOptionKey`1.Name">
            <summary>
            Gets the name of this key.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.EditorOptionKey`1.Equals(System.Object)">
            <summary>
            Determines whether two <see cref="T:Microsoft.VisualStudio.Text.Editor.EditorOptionKey`1" /> objects are the same.
            </summary>
            <param name="obj">The object to be compared.</param>
            <returns><c>true</c> if the objects are the same, otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.EditorOptionKey`1.GetHashCode">
            <summary>
            Gets the hash code for this object.
            </summary>
            <returns>The hash code.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.EditorOptionKey`1.ToString">
            <summary>
            Converts this object to a string. 
            </summary>
            <returns>The name of the option.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.EditorOptionKey`1.op_Equality(Microsoft.VisualStudio.Text.Editor.EditorOptionKey{`0},Microsoft.VisualStudio.Text.Editor.EditorOptionKey{`0})">
            <summary>
            Determines whether two instances of this type are the same.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.EditorOptionKey`1.op_Inequality(Microsoft.VisualStudio.Text.Editor.EditorOptionKey{`0},Microsoft.VisualStudio.Text.Editor.EditorOptionKey{`0})">
            <summary>
            Determines whether two instances of this type are different.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Editor.IEditorOptions">
            <summary>
            Represents common editor options and an extensible mechanism for modifying values and adding new options.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.IEditorOptions.GetOptionValue``1(System.String)">
            <summary>
            Gets the value of the option identified by the specified option ID.
            </summary>
            <typeparam name="T">The type of the value.</typeparam>
            <param name="optionId">The ID of the option.</param>
            <returns>The current value of the option.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.IEditorOptions.GetOptionValue``1(Microsoft.VisualStudio.Text.Editor.EditorOptionKey{``0})">
            <summary>
            Gets the value of the option identified by the specified key.
            </summary>
            <typeparam name="T">The type of the value.</typeparam>
            <param name="key">The key of the option.</param>
            <returns>The current value of the option.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.IEditorOptions.GetOptionValue(System.String)">
            <summary>
            Gets the value of the option specified by the option ID.
            </summary>
            <param name="optionId">The ID of the option.</param>
            <returns>The current value of the option, as an object. The caller is responsible for casting the object to the correct type.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.IEditorOptions.SetOptionValue(System.String,System.Object)">
            <summary>
            Sets the value of the specified option in the current scope. If the given option is not applicable
            in the current scope, it attempts to set the option in the global scope.
            </summary>
            <param name="optionId">The ID of the option.</param>
            <param name="value">The new value of the option.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.IEditorOptions.SetOptionValue``1(Microsoft.VisualStudio.Text.Editor.EditorOptionKey{``0},``0)">
            <summary>
            Sets the value of the specified option in the current scope. If the given option is not applicable
            in the current scope, it attempts to set the option in the global scope.
            </summary>
            <param name="key">The key of the option.</param>
            <param name="value">The new value of the option.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.IEditorOptions.IsOptionDefined(System.String,System.Boolean)">
            <summary>
            Determines whether the specified option is defined.
            </summary>
            <param name="optionId">The ID of the option.</param>
            <param name="localScopeOnly"><c>true</c> to search only in this scope, <c>false</c> 
            to try parent scopes as well. This setting has no effect if the current scope is global.</param>
            <returns><c>true</c> if the option is defined, otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.IEditorOptions.IsOptionDefined``1(Microsoft.VisualStudio.Text.Editor.EditorOptionKey{``0},System.Boolean)">
            <summary>
            Determines whether the specified editor option is defined.
            </summary>
            <param name="key">The key of the option.</param>
            <param name="localScopeOnly"><c>true</c> to search only in this scope, <c>false</c> 
            to try parent scopes as well. This setting has no effect if the current scope is global.</param>
            <returns><c>true</c> if the option is defined, otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.IEditorOptions.ClearOptionValue(System.String)">
            <summary>
            Clear the locally-defined value for the given option.
            </summary>
            <param name="optionId">The ID of the option.</param>
            <returns><c>true</c> if the option was defined locally and cleared.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.IEditorOptions.ClearOptionValue``1(Microsoft.VisualStudio.Text.Editor.EditorOptionKey{``0})">
            <summary>
            Clear the locally-defined value for the given option.
            </summary>
            <param name="key">The key of the option.</param>
            <returns><c>true</c> if the option was defined locally and cleared.</returns>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.IEditorOptions.SupportedOptions">
            <summary>
            Gets the supported options. Note that this method will load all assemblies exporting editor definitions and should not be called on in performance critical scenarios.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.IEditorOptions.GlobalOptions">
            <summary>
            Gets the global options.
            </summary>
            <remarks>This returns the global <see cref="T:Microsoft.VisualStudio.Text.Editor.IEditorOptions" />, even if
            the current scope is global.</remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.IEditorOptions.Parent">
            <summary>
            Gets or sets the immediate parent of this set of options. If this set of
            options has no parent scope (because it is the global scope), this property is null
            and cannot be set.
            </summary>
            <remarks>
            When calling set, the new parent must be non-null and a different instance
            of IEditorOptions that was created from the same 
            <see cref="T:Microsoft.VisualStudio.Text.Editor.IEditorOptionsFactoryService" /> as this instance.  Also,
            cycles in the Parent chain are not allowed.</remarks>
        </member>
        <member name="E:Microsoft.VisualStudio.Text.Editor.IEditorOptions.OptionChanged">
            <summary>
            Occurs when any option changes. Options that change in the global scope
            cause this event to be raised if they are also applicable to this
            scope.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Editor.IEditorOptionsFactoryService">
            <summary>
            Represents a service that gets <see cref="T:Microsoft.VisualStudio.Text.Editor.IEditorOptions" /> for a specified scope or for the global scope.
            </summary>
            <remarks>This is a MEF component part, and should be imported as follows:
            [Import]
            IEditorOptionsFactoryService factory = null;
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.IEditorOptionsFactoryService.GetOptions(Microsoft.VisualStudio.Utilities.IPropertyOwner)">
            <summary>
            Gets the <see cref="T:Microsoft.VisualStudio.Text.Editor.IEditorOptions" /> for the <see cref="T:Microsoft.VisualStudio.Utilities.IPropertyOwner" />. Buffers and views are
            property owners. Creates new options for the scope if none have previously been created.
            </summary>
            <param name="scope">The <see cref="T:Microsoft.VisualStudio.Utilities.IPropertyOwner" />.</param>
            <returns>The <see cref="T:Microsoft.VisualStudio.Text.Editor.IEditorOptions" /> for the given <see cref="T:Microsoft.VisualStudio.Utilities.IPropertyOwner" />.</returns>
            <remarks>
            This method returns a set of options for a given scope. Options defined in this scope will
            not affect options in its ancestor scopes. If you try to get an option in this scope, the method checks
            for any overridden values in the scope. If there are none, it gets the value from the options of
            its parent scope. The set of applicable options may change depending on the
            scope. An option defined in a text view scope will not apply to text buffers.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.IEditorOptionsFactoryService.CreateOptions">
            <summary>
            Creates a new instance of <see cref="T:Microsoft.VisualStudio.Text.Editor.IEditorOptions" /> that is not bound to any
            particular scope.
            </summary>
            <returns>A new instance of <see cref="T:Microsoft.VisualStudio.Text.Editor.IEditorOptions" />, parented on the
            <see cref="P:Microsoft.VisualStudio.Text.Editor.IEditorOptionsFactoryService.GlobalOptions" /></returns>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.IEditorOptionsFactoryService.GlobalOptions">
            <summary>
            Gets the global <see cref="T:Microsoft.VisualStudio.Text.Editor.IEditorOptions" />.
            </summary>
            <remarks>
            An option set in the global scope does not override the same option set in a specific scope, but it is visible in
            a specific scope that has not overridden that option.
            </remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Editor.IEditorOptionsFactoryService2">
            <summary>
            Support the scenario where we want to create the editor options and then create the corresponding view (so that the editor
            options can be seeded with options the view will want).
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.IEditorOptionsFactoryService2.CreateOptions(System.Boolean)">
            <summary>
            Create a new <see cref="T:Microsoft.VisualStudio.Text.Editor.IEditorOptions" /> that is not bound to a particular scope.
            </summary>
            <param name="allowLateBinding">If true, this option can be bound to a scope after it has been created using <see cref="M:Microsoft.VisualStudio.Text.Editor.IEditorOptionsFactoryService2.TryBindToScope(Microsoft.VisualStudio.Text.Editor.IEditorOptions,Microsoft.VisualStudio.Utilities.IPropertyOwner)" />.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.IEditorOptionsFactoryService2.TryBindToScope(Microsoft.VisualStudio.Text.Editor.IEditorOptions,Microsoft.VisualStudio.Utilities.IPropertyOwner)">
            <summary>
            Binds <paramref name="option" /> to the specified scope if the scope does not have pre-existing <see cref="T:Microsoft.VisualStudio.Text.Editor.IEditorOptions" /> and <paramref name="option" /> was
            created using <see cref="M:Microsoft.VisualStudio.Text.Editor.IEditorOptionsFactoryService2.CreateOptions(System.Boolean)" /> with the late binding allowed.
            </summary>
            <returns>true if <paramref name="option" /> was bound to <paramref name="scope" />.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.IEditorOptionsFactoryService2.GetOptionDefinition(System.String)">
            <summary>
            Get the option definition associated with <paramref name="optionId" />.
            </summary>
            <param name="optionId"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Editor.IndentingStyle">
            <summary>
            Represents the different indenting styles supported by language services.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Editor.IndentingStyle.None">
            <summary>
            Pressing Enter inserts a new line and causes the caret to always move to the beginning of the new line.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Editor.IndentingStyle.Block">
            <summary>
            Pressing Enter inserts a new line and causes the caret to move to the same column as the first non-whitespace character on the previous line.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Editor.IndentingStyle.Smart">
            <summary>
            Pressing Enter inserts a new line and causes the caret to either move to the same position as the first
            non-whitespace character on the previous line or to indent or outdent automatically depending on the
            character at the end of the previous line. For example, in C#, pressing Enter after a "{" causes a new
            line to be inserted and cursor to be indented properly. In addition, the "{" may be moved to its own line.
            If Enter is pressed after a "}", however, a new line is entered and the caret is moved out one level of indentation.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Editor.ITextModelOptionsSetter">
            <summary>
            A service that propagates <see cref="T:Microsoft.VisualStudio.Text.Editor.IEditorOptions" /> to the text model component.
            This is never intended to be part of the public API -- we already have the 
            editor options facilities for that. This is inteded to allow hosting code (e.g. the
            Visual Studio editor package) to propagate options down to the text model,
            where EditorOptions isn't visible.
            </summary>
            <remarks>This is a MEF component part, and should be imported as follows:
            [Import]
            ITextModelOptionsSetter setter = null;
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.ITextModelOptionsSetter.SetTextModelOptions(Microsoft.VisualStudio.Text.Editor.IEditorOptions)">
            <summary>
            Extract options useful to the text model layer and expose them in
            that layer.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Editor.CompletionModePreference.AutoCompletionMode">
            <summary>
            When launching VS, IntelliSense will be in Auto Completion mode.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Editor.CompletionModePreference.SuggestionMode">
            <summary>
            When launching VS, IntelliSense will be in Suggestion mode.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Editor.CompletionModePreference.LastUsed">
            <summary>
            When launching VS, IntelliSense will be in the last mode it was in
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Editor.IIndentationManagerService">
            <summary>
            This is a service that supports smart indentation in a file.
            </summary>
            <remarks>
            This is a MEF component part, and implementations should use the following to import it:
            <code>
            [Import]
            IIndentationManagerService IndentationManagerService = null;
            </code>
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.IIndentationManagerService.GetIndentation(Microsoft.VisualStudio.Text.ITextBuffer,System.Boolean,System.Boolean@,System.Int32@,System.Int32@)">
            <summary>
            Get the desired indentation behavior for the specified <paramref name="buffer" />.
            </summary>
            <param name="buffer">Buffer whose indentation behavior to get.</param>
            <param name="explicitFormat">true if the format is due to an explicit user request (e.g. format selection); false if the format is a side-effect of some user action (e.g. typing a newline).</param>
            <param name="convertTabsToSpaces">True if tabs should be converted to spaces.</param>
            <param name="tabSize">Desired tab size.</param>
            <param name="indentSize">Desired indentation.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.IIndentationManagerService.UseSpacesForWhitespace(Microsoft.VisualStudio.Text.ITextBuffer,System.Boolean)">
            <summary>
            Determines whether spaces or tab should be used for <paramref name="buffer" /> when formatting.
            </summary>
            <param name="buffer">A position on the line of text being formatted.</param>
            <param name="explicitFormat">true if the format is due to an explicit user request (e.g. format selection); false if the format is a side-effect of some user action (e.g. typing a newline).</param>
            <returns>true if spaces should be used.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.IIndentationManagerService.GetTabSize(Microsoft.VisualStudio.Text.ITextBuffer,System.Boolean)">
            <summary>
            Determines the appropriate tab size for <paramref name="buffer" /> when formatting.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.IIndentationManagerService.GetIndentSize(Microsoft.VisualStudio.Text.ITextBuffer,System.Boolean)">
            <summary>
            Determines the appropriate indentation size for <paramref name="buffer" /> when formatting.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Editor.ReplacesAttribute">
            <summary>
            Specifies the name(s) of an asset(s) that will be replaced by this asset.
            </summary>
            <remarks>
            <para>You can specify multiple Replaces attributes if you want to replace multiple assets.</para>
            <para>An asset must have a different Name attribute than its Replaces attribute (otherwise it would "replace" itself, preventing it from being created).</para>
            <para>An asset is not created if its Name attribute matches the Replaces attribute of any other asset that would -- excluding this check -- be created. For
            margin providers, the means that a provider must match the view's ContentType and TextViewRole before it can replace another provider.</para>
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.ReplacesAttribute.#ctor(System.String)">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.VisualStudio.Text.Editor.ReplacesAttribute" />.
            </summary>
            <param name="replaces">The name of the replaced asset.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="replaces" /> is null.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="replaces" /> is an empty string.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.ReplacesAttribute.#ctor(System.String,System.Boolean)">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.VisualStudio.Text.Editor.ReplacesAttribute" />.
            </summary>
            <param name="replaces">The name of the replaced asset.</param>
            <param name="replacesOnlyIfCreated">Indicates that this asset should replace assets specified
            in <paramref name="replaces" /> only if it can be created.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="replaces" /> is null.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="replaces" /> is an empty string.</exception>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.ReplacesAttribute.Replaces">
            <summary>
            The name of the replaced asset.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.ReplacesAttribute.ReplacesOnlyIfCreated">
            <summary>
            Indicates that this asset should replace assets specified in <see cref="P:Microsoft.VisualStudio.Text.Editor.ReplacesAttribute.Replaces" /> only if
            it can be created.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Utilities.DeferCreationAttributeHelper`1.#ctor(Microsoft.VisualStudio.Text.Utilities.IDeferCreationHandler,System.Boolean)">
            <summary>
            Creates an instance of deferred creation attribute helper class
            </summary>
            <param name="subscribeToFirstOptionChangeEventOnly">Indicates if <see cref="E:Microsoft.VisualStudio.Text.Utilities.DeferCreationAttributeHelper`1.DeferredAssetRequested" /> should be invoked by the helper class only once </param>
            <param name="deferCreationHandler">The handler of the deferred creation attribute. Must implement <see cref="T:Microsoft.VisualStudio.Text.Utilities.IDeferCreationHandler" /> </param>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Utilities.DeferCreationAttributeHelper`1.TryDeferCreation(System.String,`0,System.Boolean)">
            <summary>
            Method to subscribe to editor option change events if option is deferred.
            </summary>
            <param name="optionName">Name of the editor option that the asset is asking to be deferred on</param>
            <param name="asset">The editor asset that requires to be deferred based on an editor option.</param>
            <param name="subscribeEvenIfNotDeferred">Whether to subscribe to editor option changed events even if option is not deferred. Needs option to be defined and of Boolean type to subscribe.</param>
            <returns>Indicates if the editor option is subscribed. Editor options that are not defined are considered to be deferred but not subscribed.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Utilities.DeferCreationAttributeHelper`1.Unsubscribe">
            <summary>
            Unsubscribes from editor options changes.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Utilities.DeferCreationAttributeHelper`1.GetDeferredEditorAssetsForOption(System.String)">
            <summary>
            Gets the set of editor assets deferred on the option name
            </summary>
            <param name="optionName">The editor option name the deferred assets are waiting on</param>
            <returns>List of the editor assets being deferred on the given option name</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Utilities.DeferCreationAttributeHelper`1.IsOptionRegistered(System.String)">
            <summary>
            Checks if the given editor option is being waited on by editor assets handled by this handler
            </summary>
            <param name="optionName">The editor option name the deferred assets are waiting on</param>
            <returns>True if there are assets waiting on the editor option</returns>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Utilities.IDeferCreationHandler.EditorOptions">
            <summary>
            Editor Options to which the Editor Asset belongs. Global or TextView level Editor Options are supported
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Operations.FindData">
            <summary>
            Represents the set of data used in a search by the <see cref="T:Microsoft.VisualStudio.Text.Operations.ITextSearchService" />.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Operations.FindData.#ctor(System.String,Microsoft.VisualStudio.Text.ITextSnapshot,Microsoft.VisualStudio.Text.Operations.FindOptions,Microsoft.VisualStudio.Text.Operations.ITextStructureNavigator)">
            <summary>
            Initializes a new instance of <see cref="T:Microsoft.VisualStudio.Text.Operations.FindData" /> with the specified search pattern, text snapshot,
            find options, and text structure navigator.
            </summary>
            <param name="searchPattern">The search pattern.</param>
            <param name="textSnapshot">The <see cref="T:Microsoft.VisualStudio.Text.ITextSnapshot" /> to search.</param>
            <param name="findOptions">The <see cref="P:Microsoft.VisualStudio.Text.Operations.FindData.FindOptions" /> to use during the search.</param>
            <param name="textStructureNavigator">The <see cref="T:Microsoft.VisualStudio.Text.Operations.ITextStructureNavigator" /> to use during the search.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="searchPattern" /> or <paramref name="textSnapshot" /> is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="searchPattern" /> is an empty string.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Operations.FindData.#ctor(System.String,Microsoft.VisualStudio.Text.ITextSnapshot)">
            <summary>
            Initializes a new instance of <see cref="T:Microsoft.VisualStudio.Text.Operations.FindData" /> with the specified search pattern and text snapshot.
            </summary>
            <param name="searchPattern">The search pattern.</param>
            <param name="textSnapshot">The <see cref="T:Microsoft.VisualStudio.Text.ITextSnapshot" /> to search.</param>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Operations.FindData.SearchString">
            <summary>
            Gets or sets the string to use in the search.
            </summary>
            <exception cref="T:System.ArgumentNullException">The value is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">The value is an empty string.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Operations.FindData.Equals(System.Object)">
            <summary>
            Determines whether two <see cref="T:Microsoft.VisualStudio.Text.Operations.FindData" /> objects are the same.
            </summary>
            <param name="obj">The object to compare.</param>
            <returns><c>true</c> if the objects are the same, otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Operations.FindData.GetHashCode">
            <summary>
            Gets the hash code for the object.
            </summary>
            <returns>The hash code.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Operations.FindData.ToString">
            <summary>
            Converts the <see cref="T:Microsoft.VisualStudio.Text.Operations.FindData" /> object to a string.
            </summary>
            <returns>The string representation of the <see cref="T:Microsoft.VisualStudio.Text.Operations.FindData" /> object.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Operations.FindData.op_Equality(Microsoft.VisualStudio.Text.Operations.FindData,Microsoft.VisualStudio.Text.Operations.FindData)">
            <summary>
            Determines whether two <see cref="T:Microsoft.VisualStudio.Text.Operations.FindData" /> objects are the same.
            </summary>
            <param name="data1">The first object.</param>
            <param name="data2">The second object.</param>
            <returns><c>true</c> if the objects are the same, otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Operations.FindData.op_Inequality(Microsoft.VisualStudio.Text.Operations.FindData,Microsoft.VisualStudio.Text.Operations.FindData)">
            <summary>
            Determines whether two <see cref="T:Microsoft.VisualStudio.Text.Operations.FindData" /> objects are different.
            </summary>
            <param name="data1">The first object.</param>
            <param name="data2">The second object.</param>
            <returns><c>true</c> if the two objects are different, otherwise <c>false</c>.</returns>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Operations.FindData.FindOptions">
            <summary>
            Gets or sets the options that are used for the search.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Operations.FindData.TextSnapshotToSearch">
            <summary>
            Gets or sets the <see cref="T:Microsoft.VisualStudio.Text.ITextSnapshot" /> on which to perform the search.
            </summary>
             <exception cref="T:System.ArgumentNullException">The value is null.</exception>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Operations.FindData.TextStructureNavigator">
            <summary>
            Gets or sets the <see cref="T:Microsoft.VisualStudio.Text.Operations.ITextStructureNavigator" /> to use in determining word boundaries.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Operations.FinderReplacement">
            <summary>
            Struct used to report the results of a <see cref="M:Microsoft.VisualStudio.Text.Operations.IFinder.FindForReplaceAll" />.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Operations.FinderReplacement.Match">
            <summary>
            Span of the match.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Operations.FinderReplacement.Replace">
            <summary>
            Text that should be used to replace the match.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Operations.FindOptions">
            <summary>
            Represents the options that are used in a search.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Operations.FindOptions.None">
            <summary>
            No options have been set.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Operations.FindOptions.MatchCase">
            <summary>
            The search is case-sensitive.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Operations.FindOptions.UseRegularExpressions">
            <summary>
            The search uses .NET regular expressions.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Operations.FindOptions.WholeWord">
            <summary>
            The search matches whole words only.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Operations.FindOptions.SearchReverse">
            <summary>
            The search starts at the end of the string.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Operations.FindOptions.Wrap">
            <summary>
            The search should wrap around if it hits boundaries of the search range.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Operations.FindOptions.Multiline">
            <summary>
            The search contains data that could match over line endings.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Operations.FindOptions.OrdinalComparison">
            <summary>
            The string comparison used for the search is culture-insensitive (ordinal). For regular expression searches,
            this options specifies the <see cref="F:System.Text.RegularExpressions.RegexOptions.CultureInvariant" />.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Operations.FindOptions.SingleLine">
            <summary>
            Only valid in conjunction with <see cref="F:Microsoft.VisualStudio.Text.Operations.FindOptions.UseRegularExpressions" />. When supplied, uses the <see cref="F:System.Text.RegularExpressions.RegexOptions.Singleline" /> option to perform the searches.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Operations.FindOptions.DoNotUpdateUI">
            <summary>
            Indicates that no message dialogs should be shown as a result of the search.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Operations.FindOptions.PreserveCase">
            <summary>
            Preserve case when performing a replace
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Operations.IFinder">
            <summary>
            An object that is used to perform a variety of find operations on <see cref="T:Microsoft.VisualStudio.Text.ITextSnapshot" />. Created via the <see cref="T:Microsoft.VisualStudio.Text.Operations.IFinderFactory" />.
            </summary>
            <remarks>The find &amp; replace strings, find options and snapshot are set when the <see cref="T:Microsoft.VisualStudio.Text.Operations.IFinder" /> is created and cannot be changed.</remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Operations.IFinder.FindWhat">
            <summary>
            The string being searched for.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Operations.IFinder.ReplaceWith">
            <summary>
            The string used to replace the found text.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Operations.IFinder.Options">
            <summary>
            The search options.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Operations.IFinder.Snapshot">
            <summary>
            The snapshot searched by the finder.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Operations.IFinder.TryFind(Microsoft.VisualStudio.Text.Span@)">
            <summary>
            Try to find the first/last instance in the entire snapspshot.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Operations.IFinder.TryFind(Microsoft.VisualStudio.Text.Span,Microsoft.VisualStudio.Text.Span@)">
            <summary>
            Try to find the first/last instance in <paramref name="searchRange" />.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Operations.IFinder.TryFind(System.Int32,Microsoft.VisualStudio.Text.Span@)">
            <summary>
            Try to find the first/last instance after/before <paramref name="startingPosition" /> in the entire snapshot.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Operations.IFinder.TryFind(System.Int32,Microsoft.VisualStudio.Text.Span,Microsoft.VisualStudio.Text.Span@)">
            <summary>
            Try to find the first/last instance after/before <paramref name="startingPosition" /> in <paramref name="searchRange" />.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Operations.IFinder.FindAll">
            <summary>
            Find all matches in the entire snapshot.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Operations.IFinder.FindAll(Microsoft.VisualStudio.Text.Span)">
            <summary>
            Find all matches in <paramref name="searchRange" />.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Operations.IFinder.TryFindForReplace(Microsoft.VisualStudio.Text.Span@,System.String@)">
            <summary>
            Try to find the first/last instance in the entire snapspshot. <paramref name="expandedReplacePattern" /> is the text
            that should be used for the replacement (accounting for regex substitutions).
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Operations.IFinder.TryFindForReplace(Microsoft.VisualStudio.Text.Span,Microsoft.VisualStudio.Text.Span@,System.String@)">
            <summary>
            Try to find the first/last instance in <paramref name="searchRange" />.
            <paramref name="expandedReplacePattern" /> is the text that should be used for the replacement (accounting for regex substitutions).
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Operations.IFinder.TryFindForReplace(System.Int32,Microsoft.VisualStudio.Text.Span@,System.String@)">
            <summary>
            Try to find the first/last instance after/before <paramref name="startingPosition" /> in the entire snapshot.
            <paramref name="expandedReplacePattern" /> is the text that should be used for the replacement (accounting for regex substitutions).
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Operations.IFinder.TryFindForReplace(System.Int32,Microsoft.VisualStudio.Text.Span,Microsoft.VisualStudio.Text.Span@,System.String@)">
            <summary>
            Try to find the first/last instance after/before <paramref name="startingPosition" /> in <paramref name="searchRange" />.
            <paramref name="expandedReplacePattern" /> is the text that should be used for the replacement (accounting for regex substitutions).
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Operations.IFinder.FindForReplaceAll">
            <summary>
            Find all matches in the entire snapshot.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Operations.IFinder.FindForReplaceAll(Microsoft.VisualStudio.Text.Span)">
            <summary>
            Find all matches in <paramref name="searchRange" />.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Operations.IFinderFactory">
            <summary>
            A factory used to create <see cref="T:Microsoft.VisualStudio.Text.Operations.IFinder" />, which can be used to perform find operations on <see cref="T:Microsoft.VisualStudio.Text.ITextSnapshot" />s. Created from <see cref="T:Microsoft.VisualStudio.Text.Operations.IFindService" />.
            </summary>
            <remarks>The find &amp; replace strings and find options are set when the <see cref="T:Microsoft.VisualStudio.Text.Operations.IFinderFactory" /> is created and cannot be changed.</remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Operations.IFinderFactory.Create(Microsoft.VisualStudio.Text.ITextSnapshot)">
            <summary>
            Create a finder for searching <paramref name="snapshot" />.
            </summary>
            <remarks>Finders can be used from any thread (but each finder can only be used on one thread at a time).</remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Operations.IFinderFactory.FindWhat">
            <summary>
            The string being searched for.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Operations.IFinderFactory.ReplaceWith">
            <summary>
            The string used to replace the found text.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Operations.IFinderFactory.Options">
            <summary>
            The search options.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Operations.IFinderFactory2">
            <summary>
            A factory used to create <see cref="T:Microsoft.VisualStudio.Text.Operations.IFinder" />, which can be used to perform find operations on <see cref="T:Microsoft.VisualStudio.Text.ITextSnapshot" />s. Created from <see cref="T:Microsoft.VisualStudio.Text.Operations.IFinderFactory" />.
            </summary>
            <remarks>The search and replace strings are set when the <see cref="T:Microsoft.VisualStudio.Text.Operations.IFinderFactory" /> is created and cannot be changed.</remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Operations.IFinderFactory2.FindKind">
            <summary>
            The string representing what kind of find this factory is doing.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Operations.IFinderFactory2.ScopeName">
            <summary>
            The string representing the scope of Find Operation
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Operations.IFinderFactory2.Filters">
            <summary>
            The string representing the filters used for the search.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Operations.IFinderFactory2.ScopeOptions">
            <summary>
            The scope options defining the search
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Operations.IFindService">
            <summary>
            Provides methods creating <see cref="T:Microsoft.VisualStudio.Text.Operations.IFinderFactory" />s, which are used to search <see cref="T:Microsoft.VisualStudio.Text.ITextSnapshot" />s.
            </summary>
            <remarks>This is a MEF component part, and should be imported as follows:
            <code>
            [Import]
            IFindService findService = null;
            </code>
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Operations.IFindService.CreateFinderFactory(System.String,Microsoft.VisualStudio.Text.Operations.FindOptions)">
            <summary>
            Create a factory to search for a particular <paramref name="findWhat" /> and <paramref name="options" />.
            </summary>
            <remarks>
            <para>This can be called from any thread.</para>
            <para>Note that parameters of the created factory may not quite match the parameters to this method. For example,
            <paramref name="findWhat" /> willl be converted to lower case unless the <see cref="F:Microsoft.VisualStudio.Text.Operations.FindOptions.MatchCase" /> option is set.</para>
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Operations.IFindService.CreateFinderFactory(System.String,System.String,Microsoft.VisualStudio.Text.Operations.FindOptions)">
            <summary>
            Create a factory to search for a particular <paramref name="findWhat" /> and <paramref name="options" />
            with the potential to replace it with <paramref name="replaceWith" />.
            </summary>
            <remarks>
            <para>This can be called from any thread.</para>
            <para>Note that parameters of the created factory may not quite match the parameters to this method. For example,
            <paramref name="findWhat" /> willl be converted to lower case unless the <see cref="F:Microsoft.VisualStudio.Text.Operations.FindOptions.MatchCase" /> option is set.</para>
            </remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Operations.IFindService2">
            <summary>
            Internal interface to get related find operation data points for consumers to use.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Operations.IFindService2.CreateFinderFactory(System.String,System.String,Microsoft.VisualStudio.Text.Operations.FindOptions,System.String,System.String,System.String,Microsoft.VisualStudio.Text.Operations.FindScopeOptions)">
            <summary>
            Create a factory to search for a particular <paramref name="findWhat" /> and <paramref name="options" />
            with the potential to replace it with <paramref name="replaceWith" />. Also accepts additional <see cref="T:Microsoft.VisualStudio.Text.Operations.IFinderFactory2" /> options
            </summary>
            <remarks>
            <para>This can be called from any thread.</para>
            <para>Note that parameters of the created factory may not quite match the parameters to this method. For example,
            <paramref name="findWhat" /> willl be converted to lower case unless the <see cref="F:Microsoft.VisualStudio.Text.Operations.FindOptions.MatchCase" /> option is set.</para>
            </remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Operations.ITextSearchNavigator3">
            <summary>
            Provides a service to navigate between search results on a <see cref="T:Microsoft.VisualStudio.Text.ITextBuffer" /> and to
            perform replacements.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Operations.ITextSearchNavigator3.SearchTerm">
            <summary>
            The term to search for.
            </summary>
            <remarks>
            Modifying the <see cref="P:Microsoft.VisualStudio.Text.Operations.ITextSearchNavigator3.SearchTerm" /> does not perform a search. To do so, call the
            <see cref="M:Microsoft.VisualStudio.Text.Operations.ITextSearchNavigator3.Find" /> method.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Operations.ITextSearchNavigator3.ReplaceTerm">
            <summary>
            The term to replace matches with.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Operations.ITextSearchNavigator3.SearchOptions">
            <summary>
            Sets or gets options used for the search.
            </summary>
            <remarks>
            Modifying the <see cref="P:Microsoft.VisualStudio.Text.Operations.ITextSearchNavigator3.SearchOptions" /> don't change the current search. To perform a search
            using the new options, call the <see cref="M:Microsoft.VisualStudio.Text.Operations.ITextSearchNavigator3.Find" /> method.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Operations.ITextSearchNavigator3.StartPoint">
            <summary>
            Indicates the position in <see cref="P:Microsoft.VisualStudio.Text.ITextBuffer.CurrentSnapshot" /> at which the search should be started.
            </summary>
            <remarks>
            <para>
            If <see cref="P:Microsoft.VisualStudio.Text.Operations.ITextSearchNavigator3.CurrentResult" /> is not null then <see cref="P:Microsoft.VisualStudio.Text.Operations.ITextSearchNavigator3.CurrentResult" /> will
            be used as the starting point for the next search or replace operation.
            </para>
            <para>
            If <see cref="P:Microsoft.VisualStudio.Text.Operations.ITextSearchNavigator3.CurrentResult" /> is null and this value is also null, then
            the beginning of the document will be used as the search's starting point.
            </para>
            StartPoint can be set to a snapshot point belonging to any <see cref="T:Microsoft.VisualStudio.Text.ITextSnapshot" /> belonging
            to this <see cref="T:Microsoft.VisualStudio.Text.ITextBuffer" />. However, value returned by this property is always 
            translated to current snapshot.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Operations.ITextSearchNavigator3.SearchSpan">
            <summary>
            Indicates the range that should be searched (if any).
            </summary>
            <remarks>
            If the <see cref="P:Microsoft.VisualStudio.Text.Operations.ITextSearchNavigator3.SearchSpan" /> is null then the entire document will be searched. Otherwise only results that
            are contained by the provided span will be returned.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Operations.ITextSearchNavigator3.CurrentResult">
            <summary>
            Returns the <see cref="T:Microsoft.VisualStudio.Text.SnapshotSpan" /> corresponding to the result of the last
            find operation. If no matches were found or if no search has been performed yet,
            null is returned.
            </summary>
            <remarks>
            <para>
            If <see cref="P:Microsoft.VisualStudio.Text.Operations.ITextSearchNavigator3.CurrentResult" /> is not null, then the next find operation will search
            from either endpoint of the current result depending on the search direction.
            </para>
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Operations.ITextSearchNavigator3.Find">
            <summary>
            Finds the next occurrence of the text matching the <see cref="P:Microsoft.VisualStudio.Text.Operations.ITextSearchNavigator3.SearchTerm" />.
            </summary>
            <returns>
            Returns <c>true</c> if a match is found, <c>false</c> otherwise.
            </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Operations.ITextSearchNavigator3.Replace">
            <summary>
            Replaces the current result with <see cref="P:Microsoft.VisualStudio.Text.Operations.ITextSearchNavigator3.ReplaceTerm" />.
            </summary>
            <returns>
            <c>true</c> if the edit succeeded, <c>false</c> otherwise.
            </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Operations.ITextSearchNavigator3.ClearCurrentResult">
            <summary>
            Clears the current result.
            </summary>
            <remarks>
            Searches will be performed starting from the <see cref="P:Microsoft.VisualStudio.Text.Operations.ITextSearchNavigator3.StartPoint" /> when
            no current result is available.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Operations.ITextSearchNavigator3.SearchSpans">
            <summary>
            Indicates the ranges that should be searched (if any).
            </summary>
            <remarks>
            If this value to a non-null value will effectively override the ITextSearchNavigator3.SearchSpan property.
            </remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Operations.ITextSearchNavigatorFactoryService">
            <summary>
            A service that creates <see cref="T:Microsoft.VisualStudio.Text.Operations.ITextSearchNavigator3" /> objects.
            </summary>
            <remarks>
            This service is provided by the editor and should be consumed via the Managed Extensibility Framework.
            </remarks>
            <example>
            Use the code below in your MEF exported class to import an instance of this type.
            <code>
            [Import]
            ITextSearchNavigatorFactoryService TextSearchNavigatorProvider { get; set; }
            </code>
            </example>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Operations.ITextSearchNavigatorFactoryService.CreateSearchNavigator(Microsoft.VisualStudio.Text.ITextBuffer)">
            <summary>
            Creates an <see cref="T:Microsoft.VisualStudio.Text.Operations.ITextSearchNavigator3" /> that searches the provided <paramref name="buffer" />.
            </summary>
            <param name="buffer">
            The <see cref="T:Microsoft.VisualStudio.Text.ITextBuffer" /> to search.
            </param>
            <returns>
            An <see cref="T:Microsoft.VisualStudio.Text.Operations.ITextSearchNavigator3" /> that searches the provided <see cref="T:Microsoft.VisualStudio.Text.ITextBuffer" />.
            </returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Operations.ITextSearchService">
            <summary>
            Searches a <see cref="T:Microsoft.VisualStudio.Text.ITextSnapshot" /> with different search options.
            </summary>
            <remarks>This is a MEF component part, and should be imported as follows:
            [Import]
            ITextSearchService textSearch = null;
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Operations.ITextSearchService.FindNext(System.Int32,System.Boolean,Microsoft.VisualStudio.Text.Operations.FindData)">
            <summary>
            Searches for the next occurrence of the search string.
            </summary>
            <param name="startIndex">
            The index from which to begin the search.
            </param>
            <param name="wraparound">
            Determines whether the search wraps to the beginning of the buffer when it reaches the end of the buffer.
            </param>
            <param name="findData">
            The data to use for this search.
            </param>
            <returns>
            The <see cref="T:Microsoft.VisualStudio.Text.SnapshotSpan" /> containing the match if a match was found, or null if no matches were found.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="startIndex" /> is less than zero or greater than the length of the data.</exception>
            <exception cref="T:System.ArgumentException"> The UseRegularExpressions flag is set and the search string is an invalid regular expression.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="findData" /> is null.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Operations.ITextSearchService.FindAll(Microsoft.VisualStudio.Text.Operations.FindData)">
            <summary>
            Searches for all the occurrences of the search string.
            </summary>
            <param name="findData">
            The data to use for this search.
            </param>
            <returns>
            A list of all the matches, or null if no matches were found.
            </returns>
            <exception cref="T:System.ArgumentException"> The UseRegularExpressions flag of the find options is set and the search string is an invalid regular expression.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="findData" /> is null.</exception>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Operations.ITextSearchService2">
            <summary>
            Provides methods for searching contents of a <see cref="T:Microsoft.VisualStudio.Text.ITextSnapshot" />. Additionally, provides
            helper methods for performing replace operations.
            </summary>
            <remarks>This is a MEF component part, and should be imported as follows:
            [Import]
            ITextSearchService2 textSearch = null;
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Operations.ITextSearchService2.Find(Microsoft.VisualStudio.Text.SnapshotPoint,System.String,Microsoft.VisualStudio.Text.Operations.FindOptions)">
            <summary>
            Searches for the next occurrence of the search string.
            </summary>
            <param name="startingPosition">
            The position from which to begin the search. The search will be performed on the <see cref="T:Microsoft.VisualStudio.Text.ITextSnapshot" /> to which
            this parameter belongs.
            </param>
            <param name="searchPattern">
            The pattern to search for.
            </param>
            <param name="options">
            Specifies options used for the search operation.
            </param>
            <returns>
            A <see cref="T:Microsoft.VisualStudio.Text.SnapshotSpan" /> containing the match if a match was found, or null if no matches were found.
            </returns>
            <remarks>
            This method is safe to be executed from any thread.
            </remarks>
            <exception cref="T:System.ArgumentException">
            The <see cref="F:Microsoft.VisualStudio.Text.Operations.FindOptions.UseRegularExpressions" /> flag is set and the search string is an invalid regular expression.
            </exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Operations.ITextSearchService2.Find(Microsoft.VisualStudio.Text.SnapshotSpan,Microsoft.VisualStudio.Text.SnapshotPoint,System.String,Microsoft.VisualStudio.Text.Operations.FindOptions)">
            <summary>
            Searches for the next occurrence of the search string.
            </summary>
            <param name="searchRange">
            The range of text to search in.
            </param>
            <param name="startingPosition">
            The position from which to begin the search. The search will be performed on the <see cref="T:Microsoft.VisualStudio.Text.ITextSnapshot" /> to which
            this parameter belongs.
            </param>
            <param name="options">
            Specifies options used for the search operation.
            </param>
            <param name="searchPattern">
            The pattern to search for.
            </param>
            <returns>
            A <see cref="T:Microsoft.VisualStudio.Text.SnapshotSpan" /> containing the match if a match was found, or null if no matches were found.
            </returns>
            <remarks>
            This method can be executed from any thread.
            </remarks>
            <exception cref="T:System.ArgumentException">
            The <see cref="F:Microsoft.VisualStudio.Text.Operations.FindOptions.UseRegularExpressions" /> flag is set and the search string is an invalid regular expression.
            </exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Operations.ITextSearchService2.FindForReplace(Microsoft.VisualStudio.Text.SnapshotPoint,System.String,System.String,Microsoft.VisualStudio.Text.Operations.FindOptions,System.String@)">
            <summary>
            Searches for the next occurrence of <paramref name="searchPattern" /> and sets <paramref name="expandedReplacePattern" /> to the result of
            the text replacement.
            </summary>
            <param name="startingPosition">
            The position from which search is started. The search will be performed on the <see cref="T:Microsoft.VisualStudio.Text.ITextSnapshot" /> to which this
            parameter belongs.
            </param>
            <param name="searchPattern">
            The pattern to look for.
            </param>
            <param name="replacePattern">
            The pattern to replace the found text with.
            </param>
            <param name="options">
            Options used to perform the search.
            </param>
            <param name="expandedReplacePattern">
            The result of the replacement. This output parameter will be useful when performing regular expression searches. Will be empty
            if no matches are found.
            </param>
            <returns>
            A <see cref="T:Microsoft.VisualStudio.Text.SnapshotSpan" /> pointing to the search result found. If no matches are found, null is returned.
            </returns>
            <remarks>
            <para>
            This function does not perform any edits. The consumers would need to create an <see cref="T:Microsoft.VisualStudio.Text.ITextEdit" /> to perform the actual text
            replacement if desired. This method is safe to be executed from any thread.
            </para>
            <para>
            Note that <paramref name="expandedReplacePattern" /> will always equal <paramref name="replacePattern" /> if the search is not using regular
            expressions. In those scenarios you can utilize the more lightweight <see cref="M:Microsoft.VisualStudio.Text.Operations.ITextSearchService2.Find(Microsoft.VisualStudio.Text.SnapshotSpan,Microsoft.VisualStudio.Text.SnapshotPoint,System.String,Microsoft.VisualStudio.Text.Operations.FindOptions)" />.
            </para>
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Operations.ITextSearchService2.FindForReplace(Microsoft.VisualStudio.Text.SnapshotSpan,System.String,System.String,Microsoft.VisualStudio.Text.Operations.FindOptions,System.String@)">
            <summary>
            Searches for the next occurrence of <paramref name="searchPattern" /> and sets <paramref name="expandedReplacePattern" /> to the result of
            the text replacement.
            </summary>
            <param name="searchRange">
            The range of text to search in.
            </param>
            <param name="searchPattern">
            The pattern to look for.
            </param>
            <param name="replacePattern">
            The pattern to replace the found text with.
            </param>
            <param name="options">
            Options used to perform the search.
            </param>
            <param name="expandedReplacePattern">
            The result of the replacement. This output parameter will be useful when performing regular expression searches. Will be empty
            if no matches are found.
            </param>
            <returns>
            A <see cref="T:Microsoft.VisualStudio.Text.SnapshotSpan" /> pointing to the search result found. If no matches are found, null is returned.
            </returns>
            <remarks>
            <para>
            This function does not perform any edits. The consumers would need to create an <see cref="T:Microsoft.VisualStudio.Text.ITextEdit" /> to perform the actual text
            replacement if desired. This method is safe to be executed from any thread.
            </para>
            <para>
            Note that <paramref name="expandedReplacePattern" /> will always equal <paramref name="replacePattern" /> if search is not using regular
            expressions. In those scenarios you can utilize the more lightweight <see cref="M:Microsoft.VisualStudio.Text.Operations.ITextSearchService2.Find(Microsoft.VisualStudio.Text.SnapshotSpan,Microsoft.VisualStudio.Text.SnapshotPoint,System.String,Microsoft.VisualStudio.Text.Operations.FindOptions)" />.
            </para>
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Operations.ITextSearchService2.FindAll(Microsoft.VisualStudio.Text.SnapshotSpan,System.String,Microsoft.VisualStudio.Text.Operations.FindOptions)">
            <summary>
            Finds all occurrences of the <paramref name="searchPattern" /> in <paramref name="searchRange" />.
            </summary>
            <param name="searchRange">
            The range to search in.
            </param>
            <param name="searchPattern">
            The pattern to search for.
            </param>
            <param name="options">
            The options to use while performing the search operation.
            </param>
            <returns>
            An <see cref="T:System.Collections.Generic.IEnumerable`1" /> containing all occurrences of the <paramref name="searchPattern" />.
            </returns>
            <remarks>
            This method is safe to execute on any thread.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Operations.ITextSearchService2.FindAll(Microsoft.VisualStudio.Text.SnapshotSpan,Microsoft.VisualStudio.Text.SnapshotPoint,System.String,Microsoft.VisualStudio.Text.Operations.FindOptions)">
            <summary>
            Finds all occurrences of the <paramref name="searchPattern" /> in <paramref name="searchRange" /> starting from
            <paramref name="startingPosition" />.
            </summary>
            <param name="searchRange">
            The range to search in.
            </param>
            <param name="startingPosition">
            The location from which the search should be started.
            </param>
            <param name="searchPattern">
            The pattern to search for.
            </param>
            <param name="options">
            The options to use while performing the search operation.
            </param>
            <returns>
            An <see cref="T:System.Collections.Generic.IEnumerable`1" /> containing all occurrences of the <paramref name="searchPattern" />.
            </returns>
            <remarks>
            This method is safe to execute on any thread.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Operations.ITextSearchService2.FindAllForReplace(Microsoft.VisualStudio.Text.SnapshotSpan,System.String,System.String,Microsoft.VisualStudio.Text.Operations.FindOptions)">
            <summary>
            Searches for all occurrences of the <paramref name="searchPattern" /> and calculates all
            the corresponding replacement results for every match according to the <paramref name="replacePattern" />.
            </summary>
            <param name="searchRange">
            The range of text to search in.
            </param>
            <param name="searchPattern">
            The pattern to search for.
            </param>
            <param name="replacePattern">
            The replace pattern to use for the operation.
            </param>
            <param name="options">
            The options to use while performing the search operation.
            </param>
            <returns>
            An <see cref="T:System.Collections.Generic.IEnumerable`1" /> containing all matches found and their corresponding replacement values.
            </returns>
            <remarks>
            <para>
            The returned <see cref="T:System.Collections.Generic.IEnumerable`1" /> will contain a collection of tuples indicating all the matches. Each
            <see cref="T:System.Tuple" /> will contain a <see cref="T:Microsoft.VisualStudio.Text.SnapshotSpan" /> referencing the location of the match and a <see cref="T:System.String" />
            containing the calculated replacement text for the match. 
            </para>
            <para>
            If you are not using regular expressions then the calculated replacement text will always 
            equal the <paramref name="replacePattern" />. In that scenario, you can use the
            <see cref="M:Microsoft.VisualStudio.Text.Operations.ITextSearchService2.FindAll(Microsoft.VisualStudio.Text.SnapshotSpan,System.String,Microsoft.VisualStudio.Text.Operations.FindOptions)" /> method to only obtain the search results.
            </para>
            </remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Operations.ITextSearchTagger`1">
             <summary>
             A tagger that tags contents of a buffer based on the search terms that are passed to the object. To
             obtain an implementation of this interface, import the <see cref="T:Microsoft.VisualStudio.Text.Operations.ITextSearchTaggerFactoryService" />
             via the Managed Extensibility Framework.
             </summary>
             <remarks>
             <para>
             All search operations are performed on a low priority background thread and on demand.
             </para>
             <para>
             In order for this tagger to be consumed by the editor, a corresponding <see cref="T:Microsoft.VisualStudio.Text.Tagging.ITaggerProvider" />
             that provides an instance of this tagger must be exported through the Managed Extensibility Framework.
             </para>
             </remarks>
             <example>
             <code>
             [Export]
             [TagType(typeof(T))]
             [ContentType("any")]
             class TaggerProvider : ITaggerProvider
             {
                 [Import]
                 ITextSearchTaggerFactoryService searchTaggerFactory;
                 
                 #region ITaggerProvider Members
            
                 public ITagger&lt;T&gt; CreateTagger&lt;T&gt;(Microsoft.VisualStudio.Text.ITextBuffer buffer) where T : ITag
                 {
                     ITextSearchTagger&lt;T&gt; tagger = searchTaggerFactory.CreateTextSearchTagger&lt;T&gt;(buffer);
                     
                     tagger.TagTerm(...);
                     
                     return tagger as ITagger&lt;T&gt;;
                 }
            
                 #endregion
             }
             </code>
             </example>
             <typeparam name="T">
             A derivative of <see cref="T:Microsoft.VisualStudio.Text.Tagging.ITag" />.
             </typeparam>
             <remarks>
             The <see cref="T:Microsoft.VisualStudio.Text.Operations.ITextSearchTagger`1" /> expects to be queried for monotonically increasing snapshot versions. If a query
             is made in the reverse order, the results returned by the tagger for older versions might differ from the results 
             obtained originally for those versions.
             </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Operations.ITextSearchTagger`1.SearchSpans">
            <summary>
            Limits the scope of the tagger to the provided <see cref="T:Microsoft.VisualStudio.Text.NormalizedSnapshotSpanCollection" />.
            </summary>
            <remarks>
            If the value is set to <c>null</c> the entire range of the buffer will be searched.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Operations.ITextSearchTagger`1.TagTerm(System.String,Microsoft.VisualStudio.Text.Operations.FindOptions,System.Func{Microsoft.VisualStudio.Text.SnapshotSpan,`0})">
            <summary>
            Starts tagging occurences of the <paramref name="searchTerm" />.
            </summary>
            <param name="searchTerm">
            The term to search for.
            </param>
            <param name="searchOptions">
            The options to use for the search.
            </param>
            <param name="tagFactory">
            A factory delegate used to generate tags for matches. The delegate is passed as input
            a <see cref="T:Microsoft.VisualStudio.Text.SnapshotSpan" /> corresponding to a match and is expected to return the corresponding tag.
            </param>
            <exception cref="T:System.ArgumentException">If <paramref name="searchOptions" /> requests the search to be 
            performed in the reverse direction (see remarks).</exception>
            <exception cref="T:System.ArgumentException">If <paramref name="searchOptions" /> requests the search to be performed with
            wrap (see remarks).</exception>
            <remarks>
            In order to guarantee that the tagger finds all matches in a given span of text, the searches are always
            performed in the forwards direction with no wrap. If the <paramref name="searchOptions" /> passed to the
            tagger indicate otherwise, an exception will be thrown.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Operations.ITextSearchTagger`1.ClearTags">
            <summary>
            Clears any existing tags and all search terms that are being search for. Cancels any
            ongoing background searches.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Operations.ITextSearchTaggerFactoryService">
            <summary>
            Provides <see cref="T:Microsoft.VisualStudio.Text.Operations.ITextSearchTagger`1" /> objects.
            </summary>
            <remarks>
            This class is a Managed Extensibility Framework service provided by the editor.
            </remarks>
            <example>
            <code>
            [Import]
            ITextSearchTaggerFactoryService TextSearchTaggerProvider { get; set; }
            </code>
            </example>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Operations.ITextSearchTaggerFactoryService.CreateTextSearchTagger``1(Microsoft.VisualStudio.Text.ITextBuffer)">
            <summary>
            Creates an <see cref="T:Microsoft.VisualStudio.Text.Operations.ITextSearchTagger`1" /> that searches the <paramref name="buffer" />.
            </summary>
            <typeparam name="T">
            The type of tags the tagger will produce.
            </typeparam>
            <param name="buffer">
            The <see cref="T:Microsoft.VisualStudio.Text.ITextBuffer" /> the tagger will search.
            </param>
            <returns>
            A <see cref="T:Microsoft.VisualStudio.Text.Operations.ITextSearchTagger`1" /> that searches the contents of <paramref name="buffer" />.
            </returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Operations.FindScopeOptions">
            <summary>
            Represents the options that are used in a searchto represent the scope of the search.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Operations.FileCandidate">
            <summary>
            Struct to represent the return value of an Indexing Service search query.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Operations.FileCandidate.FilePath">
            <summary>
            The filePath of the candidate that might have a potential match for the search query
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Operations.FileCandidate.#ctor(System.String)">
            <summary>
            Constructor to create a file candidate 
            </summary>
            <param name="filePath">File path of the file candidate</param>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Operations.IIndexedTextSearchService">
            <summary>
            Service to get indexed full text search capabilities
            <remarks>This is a MEF component part, and should be imported as follows:
            [Import]
            IIndexedTextSearchService IndexedTextSearchService = null;
            </remarks>
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Operations.IIndexedTextSearchService.State">
            <summary>
            Gets whether the service is ready to accept queries
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Operations.IIndexedTextSearchService.GetPotentiallyMatchingFilesAsync(System.String,Microsoft.VisualStudio.Text.Operations.SearchFileOptions,System.Threading.CancellationToken)">
            <summary>
            Gets an asynchronous enumerable list of files that would possibly contain a match for the search term given the specified search options
            </summary>
            <param name="searchTerm">&gt;The term that needs to be searched</param>
            <param name="options">The <see cref="T:Microsoft.VisualStudio.Text.Operations.SearchFileOptions" /> that should be used while searching for the search term to narrow down the possible matches</param>
            <param name="cancellationToken">Cancellation token to cancel the request</param>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Operations.IIndexedTextSearchService.TotalFilesIndexed">
            <summary>
            Total number of files indexed by the service.
            </summary>
            <remarks>
            This may not be the same as the total number of files indexed by the indexing engine.
            A service may opt to track some files outside of the indexing engine as well.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Operations.IIndexedTextSearchService.GetAllExactMatchesAsync(System.String,Microsoft.VisualStudio.Text.Operations.SearchOptions,System.Threading.CancellationToken)">
            <summary>
            Gets an asynchronous enumerable list of all exact matches for the give search query
            </summary>
            <param name="searchTerm">The term that needs to be searched</param>
            <param name="options">The <see cref="T:Microsoft.VisualStudio.Text.Operations.SearchOptions" /> that should be used while searching for the search term to narrow down the possible matches</param>
            <param name="cancellationToken">Cancellation token to cancel the request</param>
        </member>
        <member name="E:Microsoft.VisualStudio.Text.Operations.IIndexedTextSearchService.ServiceReadyStateChangedAsync">
            <summary>
            Event that indicates that the service state has changed.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Operations.IndexSearchServiceState">
            <summary>
            An enum represeting the different states an <see cref="T:Microsoft.VisualStudio.Text.Operations.IIndexedTextSearchService" /> can be in.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Operations.IndexSearchServiceState.NotAvailable">
            <summary>
            Indexed search service is not available
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Operations.IndexSearchServiceState.InProgressAccurate">
            <summary>
            Indexed search service is available and will accept queries but might be slow
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Operations.IndexSearchServiceState.InProgressStale">
            <summary>
            Indexed search service is available and will accept queries but might be stale
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Operations.IndexSearchServiceState.Faulted">
            <summary>
            Indexed search service is not available due to a fault
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Operations.IndexSearchServiceState.Ready">
            <summary>
            Indexed search service is available and ready to accept queries.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Operations.SearchFileOptions">
            <summary>
            Parameters passed to indexing service to filter file find results
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Operations.SearchFileOptions.#ctor(System.Boolean,System.Boolean,System.Boolean,System.Nullable{System.Collections.Immutable.ImmutableArray{System.String}})">
            <summary>
            Constructor for Search File Options
            </summary>
            <param name="includeMiscellaneousItems">Include miscelleneous project files in index results</param>
            <param name="includeHiddenItems">Include hidden items in index results</param>
            <param name="includeExternalItems">Include external items in index results</param>
            <param name="filters">A list of file extension filters that the index results will include or exclude
            For eg: *.cs :- would mean that only matches with the file extension .cs should be considered
            !*.cs :- would mean that any files with the extension .cs should not be considered.
            Note the filter can be for file extension or ends with file path or contains directory path</param>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Operations.SearchFileOptions.IncludeMiscellaneousItems">
            <summary>
            Include miscelleneous project files in index results
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Operations.SearchFileOptions.IncludeHiddenItems">
            <summary>
            Include hidden items in index results
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Operations.SearchFileOptions.IncludeExternalItems">
            <summary>
            Include external items in index results
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Operations.SearchFileOptions.Filters">
            <summary>
            A list of file extension filters that the index results will include or exclude
            For eg: *.cs :- would mean that only matches with the file extension .cs should be considered
            !*.cs :- would mean that any files with the extension .cs should not be considered.
            Note the filter can be for file extension or ends with file path or contains directory path
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Operations.SearchMatch">
            <summary>
            A match result used for plain-text search /&gt;
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Operations.SearchMatch.LineNumber">
            <summary>
            The line at which the match occurs.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Operations.SearchMatch.ColumnNumber">
            <summary>
            The first character position at which the match occurs.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Operations.SearchMatch.FilePath">
            <summary>
            The file path of the match
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Operations.SearchMatch.MatchPreview">
            <summary>
            A line of text from the original document that contains the find result.
            </summary>
            <remarks>
            This should be truncated as needed to be no more than 200 or so characters.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Operations.SearchMatch.IsMatchPreviewTrimmedAtBeginning">
            <summary>
            Gets whether <see cref="P:Microsoft.VisualStudio.Text.Operations.SearchMatch.MatchPreview" /> is a substring of the complete line of text from the original document that
            contains the find result instead of being the whole line and indicates whether some text at the beginning of the line has been removed or not.
            Generally, this is an indication that the original line of text in the document is longer than 200 or so characters.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Operations.SearchMatch.IsMatchPreviewTrimmedAtEnd">
            <summary>
            Gets whether <see cref="P:Microsoft.VisualStudio.Text.Operations.SearchMatch.MatchPreview" /> is a substring of the complete line of text from the original document that
            contains the find result instead of being the whole line and indicates whether some text at the end of the line has been removed or not.
            the original line of text in the document is longer than 200 or so characters.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Operations.SearchMatch.MatchSpan">
            <summary>
            The location of the match in <see cref="P:Microsoft.VisualStudio.Text.Operations.SearchMatch.MatchPreview" /> 
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Operations.SearchOptions">
            <summary>
            Parameters passed to indexing service to define the search query.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Operations.SearchOptions.#ctor(System.Int32,Microsoft.VisualStudio.Text.Operations.SearchFileOptions)">
            <summary>
            Constructor to create the search query options
            </summary>
            <param name="maxNumberOfResultsToRetrieve">The top max number of results to be retrieved for the search query</param>
            <param name="fileOptions"></param>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Operations.SearchOptions.FileOptions">
            <summary>
            File filters passed to the indexing service
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Operations.SearchOptions.FindOptions">
            <summary>
            An enumeration specifying the options of the search query
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Operations.SearchOptions.MaxNumberOfResultsToRetrieve">
            <summary>
            The top max number of results to be retrieved for the search query 
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Operations.SearchOptions.ReturnOnlyIndexedMatches">
            <summary>
            Flag to enforce real time retrieval for indexed only matches. Items that are not indexed will be excluded from the results if the flag is true
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Operations.ServiceStateChangedEventArgs">
            <summary>
            An instance indicating the new state of the <see cref="T:Microsoft.VisualStudio.Text.Operations.IIndexedTextSearchService" /> when its <see cref="E:Microsoft.VisualStudio.Text.Operations.IIndexedTextSearchService.ServiceReadyStateChangedAsync" /> event is invoked
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Operations.ServiceStateChangedEventArgs.OldState">
            <summary>
            The old state of the service when the service state changed event was invoked
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Operations.ServiceStateChangedEventArgs.NewState">
            <summary>
            The new state of the service when the service state changed event was invoked
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Operations.ITextStructureNavigator">
            <summary>
            Provides methods to navigate text, such as getting word extents.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Operations.ITextStructureNavigator.GetExtentOfWord(Microsoft.VisualStudio.Text.SnapshotPoint)">
            <summary>
            Gets the extent of the word at the given position.
            </summary>
            <remarks><see cref="P:Microsoft.VisualStudio.Text.Operations.TextExtent.IsSignificant" /> should be set to <c>false</c> for words 
            consisting only of whitespace, unless the whitespace is a significant part of the document. If the 
            returned extent consists only of insignificant whitespace, it should include all of the adjacent whitespace, 
            including newline characters, spaces, and tabs.</remarks>
            <param name="currentPosition">
            The text position anywhere in the word for which a <see cref="T:Microsoft.VisualStudio.Text.Operations.TextExtent" /> is needed.
            </param>
            <returns>
            A <see cref="T:Microsoft.VisualStudio.Text.Operations.TextExtent" /> that represents the word. The <see cref="P:Microsoft.VisualStudio.Text.Operations.TextExtent.IsSignificant" /> field is set to <c>false</c> for whitespace or other 
            insignificant characters that should be ignored during navigation.
            </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Operations.ITextStructureNavigator.GetSpanOfEnclosing(Microsoft.VisualStudio.Text.SnapshotSpan)">
            <summary>
            Gets the span of the enclosing syntactic element of the specified snapshot span.
            </summary>
            <param name="activeSpan">
            The <see cref="T:Microsoft.VisualStudio.Text.SnapshotSpan" /> from which to get the enclosing syntactic element.
            </param>
            <returns>
            A <see cref="T:Microsoft.VisualStudio.Text.SnapshotSpan" /> that represents the enclosing syntactic element. If the specified snapshot
            span covers multiple syntactic elements, then the method returns the least common ancestor of the elements.
            If the snapshot span covers the root element (in other words, the whole document),
            then the method returns <see cref="T:Microsoft.VisualStudio.Text.SnapshotSpan" /> of the whole document.
            </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Operations.ITextStructureNavigator.GetSpanOfFirstChild(Microsoft.VisualStudio.Text.SnapshotSpan)">
            <summary>
            Gets the span of the first child syntactic element of the specified snapshot span. 
            If the snapshot span has zero length, then the behavior is the same as that of 
            <see cref="M:Microsoft.VisualStudio.Text.Operations.ITextStructureNavigator.GetSpanOfEnclosing(Microsoft.VisualStudio.Text.SnapshotSpan)" />.
            </summary>
            <param name="activeSpan">
            The <see cref="T:Microsoft.VisualStudio.Text.SnapshotSpan" /> from which to get the span of the first child syntactic element.
            </param>
            <returns>
            A <see cref="T:Microsoft.VisualStudio.Text.SnapshotSpan" /> that represents the first child syntactic element. If the specified snapshot 
            span covers multiple syntactic elements, then this method returns the span of the least common ancestor of 
            the elements. If the specified snapshot span covers the child element, then the 
            behavior is the same as that of <see cref="M:Microsoft.VisualStudio.Text.Operations.ITextStructureNavigator.GetSpanOfEnclosing(Microsoft.VisualStudio.Text.SnapshotSpan)" />.
            </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Operations.ITextStructureNavigator.GetSpanOfNextSibling(Microsoft.VisualStudio.Text.SnapshotSpan)">
            <summary>
            Gets the span of the next sibling syntactic element of the specified snapshot span. If the
            snapshot span has zero length, then the behavior is the same as that of 
            <see cref="M:Microsoft.VisualStudio.Text.Operations.ITextStructureNavigator.GetSpanOfEnclosing(Microsoft.VisualStudio.Text.SnapshotSpan)" />.
            </summary>
            <param name="activeSpan">
            The <see cref="T:Microsoft.VisualStudio.Text.SnapshotSpan" /> from which to get the span of the next sibling syntactic element.
            </param>
            <returns>
            A <see cref="T:Microsoft.VisualStudio.Text.SnapshotSpan" /> that represents the next sibling syntactic element. If the given active
            span covers multiple syntactic elements, then this method returns the span of the next sibling element.
            If the specified snapshot span covers a syntactic element that does not have a sibling element, then the 
            behavior is the same as that of <see cref="M:Microsoft.VisualStudio.Text.Operations.ITextStructureNavigator.GetSpanOfEnclosing(Microsoft.VisualStudio.Text.SnapshotSpan)" />.
            </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Operations.ITextStructureNavigator.GetSpanOfPreviousSibling(Microsoft.VisualStudio.Text.SnapshotSpan)">
            <summary>
            Gets the span of the previous sibling syntactic element of the specified snapshot span. 
            If the specified span has zero length, then the behavior is the same as that of 
            <see cref="M:Microsoft.VisualStudio.Text.Operations.ITextStructureNavigator.GetSpanOfEnclosing(Microsoft.VisualStudio.Text.SnapshotSpan)" />.
            </summary>
            <param name="activeSpan">
            The <see cref="T:Microsoft.VisualStudio.Text.SnapshotSpan" /> from which to get the span of the previous sibling syntactic element.
            </param>
            <returns>
            A <see cref="T:Microsoft.VisualStudio.Text.SnapshotSpan" /> that represents the previous sibling syntactic element. If the specified snapshot
            span covers multiple syntactic elements, then this method returns the span of the previous element. 
            If the specified snapshot span covers a syntactic element that does not have a sibling element, then the 
            behavior is the same as that of <see cref="M:Microsoft.VisualStudio.Text.Operations.ITextStructureNavigator.GetSpanOfEnclosing(Microsoft.VisualStudio.Text.SnapshotSpan)" />.
            </returns>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Operations.ITextStructureNavigator.ContentType">
            <summary>
            Gets the content type that this navigator supports.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Operations.ITextStructureNavigatorProvider">
            <summary>
            Gets an <see cref="T:Microsoft.VisualStudio.Text.Operations.ITextStructureNavigator" /> for a given <see cref="T:Microsoft.VisualStudio.Text.ITextBuffer" />.
            Component exporters must supply at least one content type attribute"/&gt; to specify the applicable content types.
            </summary>
            <remarks>
            <para>This is a MEF component part, and should be exported with the following attribute:
            [Export(typeof(ITextStructureNavigatorProvider))]</para>
            <para>Use the <see cref="T:Microsoft.VisualStudio.Text.Operations.ITextStructureNavigatorSelectorService" /> to import a provider for a particular content type.</para>
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Operations.ITextStructureNavigatorProvider.CreateTextStructureNavigator(Microsoft.VisualStudio.Text.ITextBuffer)">
            <summary>
            Creates a new <see cref="T:Microsoft.VisualStudio.Text.Operations.ITextStructureNavigator" /> for a given <see cref="T:Microsoft.VisualStudio.Text.ITextBuffer" />.
            </summary>
            <param name="textBuffer">The <see cref="T:Microsoft.VisualStudio.Text.ITextBuffer" /> for which to get the <see cref="T:Microsoft.VisualStudio.Text.Operations.ITextStructureNavigator" />.</param>
            <returns>The <see cref="T:Microsoft.VisualStudio.Text.Operations.ITextStructureNavigator" /> for <paramref name="textBuffer" />, or null.</returns>
            <remarks>
            Providers should expect the result of this call to be cached and made available through the
            <see cref="T:Microsoft.VisualStudio.Text.Operations.ITextStructureNavigatorSelectorService" />.
            </remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Operations.ITextStructureNavigatorSelectorService">
            <summary>
            Selects and caches <see cref="T:Microsoft.VisualStudio.Text.Operations.ITextStructureNavigator" /> objects based on content type.
            </summary>
            <remarks>This is a MEF component part, and should be imported as follows:
            [Import]
            ITextStructureNavigatorSelectorService navigator = null;
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Operations.ITextStructureNavigatorSelectorService.GetTextStructureNavigator(Microsoft.VisualStudio.Text.ITextBuffer)">
            <summary>
            Gets a <see cref="T:Microsoft.VisualStudio.Text.Operations.ITextStructureNavigator" /> for the specified <see cref="T:Microsoft.VisualStudio.Text.ITextBuffer" />, either by
            creating a new one or by using a cached value.
            </summary>
            <param name="textBuffer">
            The <see cref="T:Microsoft.VisualStudio.Text.ITextBuffer" /> that the <see cref="T:Microsoft.VisualStudio.Text.Operations.ITextStructureNavigator" /> will navigate.
            </param>
            <returns>
            A valid <see cref="T:Microsoft.VisualStudio.Text.Operations.ITextStructureNavigator" />. This value will never be <c>null</c>.
            </returns>
            <remarks>
            <para>
            If a navigator for the exact <see cref="T:Microsoft.VisualStudio.Utilities.IContentType" /> of the given <see cref="T:Microsoft.VisualStudio.Text.ITextBuffer" /> cannot be found, this method returns
            one for the parent <see cref="T:Microsoft.VisualStudio.Utilities.IContentType" />. If there is more than one parent <see cref="T:Microsoft.VisualStudio.Utilities.IContentType" /> for which 
            there is a matching <see cref="T:Microsoft.VisualStudio.Text.Operations.ITextStructureNavigator" />, then this method returns the <see cref="T:Microsoft.VisualStudio.Text.Operations.ITextStructureNavigator" />
            of an arbitrary parent.
            </para>
            <para>
            If a new navigator is created, it is cached together with <paramref name="textBuffer" />, and its lifetime is the same as that of <paramref name="textBuffer" />.
            </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"><paramref name="textBuffer" /> is <c>null</c>.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Operations.ITextStructureNavigatorSelectorService.CreateTextStructureNavigator(Microsoft.VisualStudio.Text.ITextBuffer,Microsoft.VisualStudio.Utilities.IContentType)">
            <summary>
            Creates a new <see cref="T:Microsoft.VisualStudio.Text.Operations.ITextStructureNavigator" /> for the specified <see cref="T:Microsoft.VisualStudio.Text.ITextBuffer" /> by using the
            specified <see cref="T:Microsoft.VisualStudio.Utilities.IContentType" /> to select the navigator.
            </summary>
            <param name="textBuffer">
            The <see cref="T:Microsoft.VisualStudio.Text.ITextBuffer" /> that the <see cref="T:Microsoft.VisualStudio.Text.Operations.ITextStructureNavigator" /> will navigate.
            </param>
            <param name="contentType">The content type to use.</param>
            <returns>
            A valid <see cref="T:Microsoft.VisualStudio.Text.Operations.ITextStructureNavigator" />. This value is never <c>null</c>).
            </returns>
            <remarks>
            <para>
            If a navigator for the given content type cannot be found, this method
            uses one for the parent <see cref="T:Microsoft.VisualStudio.Utilities.IContentType" />. If there is more than one parent <see cref="T:Microsoft.VisualStudio.Utilities.IContentType" /> for which 
            there is a matching <see cref="T:Microsoft.VisualStudio.Text.Operations.ITextStructureNavigator" />, then this method returns the <see cref="T:Microsoft.VisualStudio.Text.Operations.ITextStructureNavigator" />
            of an arbitrary parent.
            </para>
            <para>
            The navigator that is created is not cached; subsequent calls to this method for the same buffer and
            content type will return different <see cref="T:Microsoft.VisualStudio.Text.Operations.ITextStructureNavigator" /> objects.
            </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"><paramref name="textBuffer" /> is <c>null</c>.</exception>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Operations.TextExtent">
            <summary>
            Represents the extent of a word.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Operations.TextExtent.#ctor(Microsoft.VisualStudio.Text.SnapshotSpan,System.Boolean)">
            <summary>
            Initializes a new instance of <see cref="T:Microsoft.VisualStudio.Text.Operations.TextExtent" />.
            </summary>
            <param name="span">
            The <see cref="T:Microsoft.VisualStudio.Text.SnapshotSpan" /> that includes the extent.
            </param>
            <param name="isSignificant">
            <c>false</c> if the extent contains whitespace, unless whitespace should be treated like any other character.
            </param>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Operations.TextExtent.#ctor(Microsoft.VisualStudio.Text.Operations.TextExtent)">
            <summary>
            Initializes a new instance of a <see cref="T:Microsoft.VisualStudio.Text.Operations.TextExtent" /> from the specified <see cref="T:Microsoft.VisualStudio.Text.Operations.TextExtent" />.
            </summary>
            <param name="textExtent">The <see cref="T:Microsoft.VisualStudio.Text.Operations.TextExtent" /> from which to copy.
            </param>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Operations.TextExtent.Span">
            <summary>
            Gets the <see cref="T:Microsoft.VisualStudio.Text.SnapshotSpan" />.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Operations.TextExtent.IsSignificant">
            <summary>
            Determines whether the extent is significant.  <c>false</c> for whitespace or other 
            insignificant characters that should be ignored during navigation.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Operations.TextExtent.Equals(System.Object)">
            <summary>
            Determines whether two <see cref="T:Microsoft.VisualStudio.Text.Operations.TextExtent" /> objects are the same.
            </summary>
            <param name="obj">The <see cref="T:Microsoft.VisualStudio.Text.Operations.TextExtent" /> to compare.</param>
            <returns><c>true</c> if the two objects are the same, otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Operations.TextExtent.GetHashCode">
            <summary>
            Gets the hash code of the object.
            </summary>
            <returns>The hash code.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Operations.TextExtent.op_Equality(Microsoft.VisualStudio.Text.Operations.TextExtent,Microsoft.VisualStudio.Text.Operations.TextExtent)">
            <summary>
            Determines whether two <see cref="T:Microsoft.VisualStudio.Text.Operations.TextExtent" /> objects are the same.
            </summary>
            <param name="extent1">The first object.</param>
            <param name="extent2">The second object.</param>
            <returns><c>true</c> if the objects are the same, otherwise false.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Operations.TextExtent.op_Inequality(Microsoft.VisualStudio.Text.Operations.TextExtent,Microsoft.VisualStudio.Text.Operations.TextExtent)">
            <summary>
            Determines whether two <see cref="T:Microsoft.VisualStudio.Text.Operations.TextExtent" /> objects are different.
            </summary>
            <param name="extent1">The first object.</param>
            <param name="extent2">The second object.</param>
            <returns><c>true</c> if the two objects are different, otherwise <c>false</c>.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Operations.IEditOnlyTextUndoPrimitive">
            <summary>
            Represents undo primitive that consists only of text changes.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Operations.IMergeTextUndoTransactionPolicy">
            <summary>
            Provides the merge policy for undo transactions. 
            </summary>
            <remarks>
            These policies are
            used when transactions are completed and pushed onto the undo stack. Only adjacent
            <see cref="T:Microsoft.VisualStudio.Text.Operations.ITextUndoTransaction" /> objects can be merged.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Operations.IMergeTextUndoTransactionPolicy.TestCompatiblePolicy(Microsoft.VisualStudio.Text.Operations.IMergeTextUndoTransactionPolicy)">
            <summary>
            Determines whether one <see cref="T:Microsoft.VisualStudio.Text.Operations.IMergeTextUndoTransactionPolicy" /> is compatible with another.
            </summary>
            <param name="other">The <see cref="T:Microsoft.VisualStudio.Text.Operations.IMergeTextUndoTransactionPolicy" /> to test.</param>
            <returns><c>true</c> if the merge should proceed, otherwise <c>false</c>.</returns>
            <remarks>
            Merging happens only when merge policies in primitives are compatible. This function should be symmetric
            and ideally constant time. For instance, (this.GetType() == other.GetType()).
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Operations.IMergeTextUndoTransactionPolicy.CanMerge(Microsoft.VisualStudio.Text.Operations.ITextUndoTransaction,Microsoft.VisualStudio.Text.Operations.ITextUndoTransaction)">
            <summary>
            Determines whether two <see cref="T:Microsoft.VisualStudio.Text.Operations.ITextUndoTransaction" /> objects can be merged.
            </summary>
            <param name="newerTransaction">The newer transaction.</param>
            <param name="olderTransaction">The older transaction.</param>
            <returns><c>true</c> of the merge should proceed, otherwise <c>false</c>.</returns>
            <summary>
            If this method returns <c>true</c>, then the merge can proceed, given specific knowledge of the transactions in question. CanMerge
            is  called only when TestCompatiblePolicy succeeds.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Operations.IMergeTextUndoTransactionPolicy.PerformTransactionMerge(Microsoft.VisualStudio.Text.Operations.ITextUndoTransaction,Microsoft.VisualStudio.Text.Operations.ITextUndoTransaction)">
            <summary>
            Merges a new <see cref="T:Microsoft.VisualStudio.Text.Operations.ITextUndoTransaction" /> with an existing one.
            </summary>
            <param name="existingTransaction">The existing transaction.</param>
            <param name="newTransaction">The new transaction.</param>
            <remarks>
            Merges newTransaction into existingTransaction by adding, removing, or modifying the
            primitives in existingTransaction.UndoPrimitives.  A simple implementation could be to add
            each primitive in newTransaction.UndoPrimitives to existingTransaction.UndoPrimitives.
            </remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Operations.ITextBufferUndoManager">
            <summary>
            Registers the <see cref="T:Microsoft.VisualStudio.Text.Operations.ITextUndoHistory" /> for a <see cref="P:Microsoft.VisualStudio.Text.Operations.ITextBufferUndoManager.TextBuffer" />,  
            listens for change events on a <see cref="P:Microsoft.VisualStudio.Text.Operations.ITextBufferUndoManager.TextBuffer" />, 
            and adds <see cref="T:Microsoft.VisualStudio.Text.Operations.ITextUndoPrimitive" /> objects to the <see cref="T:Microsoft.VisualStudio.Text.Operations.ITextUndoHistory" />.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Operations.ITextBufferUndoManager.TextBuffer">
            <summary>
            Gets the <see cref="T:Microsoft.VisualStudio.Text.ITextBuffer" /> for which this <see cref="T:Microsoft.VisualStudio.Text.Operations.ITextBufferUndoManager" /> manages undo operations.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Operations.ITextBufferUndoManager.TextBufferUndoHistory">
            <summary>
            Gets the <see cref="T:Microsoft.VisualStudio.Text.Operations.ITextUndoHistory" /> for the underlying <see cref="T:Microsoft.VisualStudio.Text.ITextBuffer" />.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Operations.ITextBufferUndoManager.UnregisterUndoHistory">
            <summary>
            Unregisters the <see cref="T:Microsoft.VisualStudio.Text.Operations.ITextUndoHistory" /> for the underlying <see cref="T:Microsoft.VisualStudio.Text.ITextBuffer" /> from the <see cref="T:Microsoft.VisualStudio.Text.Operations.ITextUndoHistoryRegistry" />.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Operations.ITextBufferUndoManagerProvider">
            <summary>
            Provides an <see cref="T:Microsoft.VisualStudio.Text.Operations.ITextBufferUndoManager" /> for a given <see cref="T:Microsoft.VisualStudio.Text.ITextBuffer" />.  This is a cached factory, and only
            one <see cref="T:Microsoft.VisualStudio.Text.Operations.ITextBufferUndoManager" /> will ever be created for a given <see cref="T:Microsoft.VisualStudio.Text.ITextBuffer" />.
            </summary>
            <remarks>This is a MEF component part, and should be exported with the following attribute:
            [Export(typeof(ITextBufferUndoManagerProvider))]
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Operations.ITextBufferUndoManagerProvider.GetTextBufferUndoManager(Microsoft.VisualStudio.Text.ITextBuffer)">
            <summary>
            Gets the <see cref="T:Microsoft.VisualStudio.Text.Operations.ITextBufferUndoManager" /> for the specified <see cref="T:Microsoft.VisualStudio.Text.ITextBuffer" />. If no undo manager
            has been created for this text buffer, a new one is created.
            </summary>
            <param name="textBuffer">The <see cref="T:Microsoft.VisualStudio.Text.ITextBuffer" /> for which to get the <see cref="T:Microsoft.VisualStudio.Text.Operations.ITextBufferUndoManager" />.</param>
            <returns>The <see cref="T:Microsoft.VisualStudio.Text.Operations.ITextBufferUndoManager" /> for <paramref name="textBuffer" />.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="textBuffer" /> is null.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Operations.ITextBufferUndoManagerProvider.RemoveTextBufferUndoManager(Microsoft.VisualStudio.Text.ITextBuffer)">
            <summary>
            Removes the <see cref="T:Microsoft.VisualStudio.Text.Operations.ITextBufferUndoManager" />, if any, from <paramref name="textBuffer" />.
            </summary>
            <param name="textBuffer">The <see cref="T:Microsoft.VisualStudio.Text.ITextBuffer" /> to check.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="textBuffer" /> is null.</exception>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Operations.ITextUndoHistory">
            <summary>
            Contains undo transactions.
            </summary>
            <remarks>
            Typically only one undo transaction history at a time is available to the user.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Operations.ITextUndoHistory.UndoStack">
            <summary>
            The undo stack for this history. It does not include any currently open or redo transactions.
            </summary>
            <remarks>
            This stack includes the most recent transaction (the top item of the stack) to the oldest transaction (the bottom
            item of the stack).
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Operations.ITextUndoHistory.RedoStack">
            <summary>
            The redo stack for this history. It does not include any currently open or undo transactions.
            </summary>
            <remarks>
            This stack includes the most recent transaction (the top item of the stack) to the oldest transaction (the bottom
            item of the stack).
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Operations.ITextUndoHistory.LastUndoTransaction">
            <summary>
            Gets the most recent (top) item of the <see cref="P:Microsoft.VisualStudio.Text.Operations.ITextUndoHistory.UndoStack" />, or <c>null</c> if the stack is
            empty.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Operations.ITextUndoHistory.LastRedoTransaction">
            <summary>
            Gets the most recent (top) item of the <see cref="P:Microsoft.VisualStudio.Text.Operations.ITextUndoHistory.RedoStack" />, or <c>null</c> if the stack is
            empty.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Operations.ITextUndoHistory.CanUndo">
            <summary>
            Determines whether a single undo is possible.
            </summary>
            <remarks>
            This property corresponds to CanUndo for the most recent visible undo <see cref="T:Microsoft.VisualStudio.Text.Operations.ITextUndoTransaction" />. 
            If there are hidden transactions on top of the visible transaction, 
            this property returns true only if they are 
            undoable as well.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Operations.ITextUndoHistory.CanRedo">
            <summary>
            Determines whether a single redo is possible.
            </summary>
            <remarks>
            This property corresponds to CanRedo for the most recent visible redo <see cref="T:Microsoft.VisualStudio.Text.Operations.ITextUndoTransaction" />. 
            If there are hidden transactions on top of the visible transaction, this property returns <c>true</c> only if they are 
            redoable as well.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Operations.ITextUndoHistory.UndoDescription">
            <summary>
            Gets the description of the most recent visible undo <see cref="T:Microsoft.VisualStudio.Text.Operations.ITextUndoTransaction" />.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Operations.ITextUndoHistory.RedoDescription">
            <summary>
            Gets the description of the most recent visible redo <see cref="T:Microsoft.VisualStudio.Text.Operations.ITextUndoTransaction" />.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Operations.ITextUndoHistory.CurrentTransaction">
            <summary>
            Gets the current UndoTransaction in progress.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Operations.ITextUndoHistory.State">
            <summary>
            Gets the current state of the UndoHistory.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Operations.ITextUndoHistory.CreateTransaction(System.String)">
            <summary>
            Creates a new transaction, nests it in the previously current transaction, and marks it current.
            </summary>
            <param name="description">The description of the transaction.</param>
            <returns>The new transaction.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Operations.ITextUndoHistory.Undo(System.Int32)">
            <summary>
            Performs the specified number of undo operations and places the transactions on the redo stack.
            </summary>
            <param name="count">
            The number of undo operations to perform. 
            </param>        
            <remarks>
            At the end of the operation, the specified number of visible
            transactions are undone. Therefore, the actual number of transactions undone might be more than this number if there are 
            hidden transactions above or below the visible ones.
            After the last visible transaction is undone, the hidden transactions left on top the stack are undone as well, until a 
            visible or linked transaction is encountered, or the stack is completely emptied.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Operations.ITextUndoHistory.Redo(System.Int32)">
            <summary>
            Performs the specified number of redo operation and places the transactions on the undo stack.
            </summary>
            <param name="count">The number of redo operations to perform. At the end of the operation, the specified number of visible
            transactions are redone. Therefore, the actual number of transactions redone might be more than this number, if there are 
            hidden transactions above or below the visible ones.
            </param>        
            <remarks>
            After the last visible transaction is redone, the hidden transactions left on top the stack are redone as well, until a 
            visible or linked transaction is encountered, or the stack is completely emptied.
            </remarks>
        </member>
        <member name="E:Microsoft.VisualStudio.Text.Operations.ITextUndoHistory.UndoRedoHappened">
            <summary>
            Notifies consumers when an undo
            or a redo has happened on this history. 
            </summary>
            <remarks>
            The sender object is the <see cref="T:Microsoft.VisualStudio.Text.Operations.ITextUndoHistory" /> that originated
            it, and the event arguments are empty. The UndoHistory raises this event whenever an Undo() or
            Redo() is initiated properly, regardless of whether one of the particular transactions or
            primitives fails to perform that undo.
            </remarks>
        </member>
        <member name="E:Microsoft.VisualStudio.Text.Operations.ITextUndoHistory.UndoTransactionCompleted">
            <summary>
            Notifies consumers when an 
            <see cref="T:Microsoft.VisualStudio.Text.Operations.ITextUndoTransaction" /> is completed and added to the <see cref="P:Microsoft.VisualStudio.Text.Operations.ITextUndoHistory.UndoStack" />. 
            </summary>
            <remarks>
            The sender object is the <see cref="T:Microsoft.VisualStudio.Text.Operations.ITextUndoHistory" /> that originated it, and the event argumentss are an 
            instance of <see cref="T:Microsoft.VisualStudio.Text.Operations.TextUndoTransactionCompletedEventArgs" /> class. This event is fired for the 
            topmost <see cref="T:Microsoft.VisualStudio.Text.Operations.ITextUndoTransaction" /> objects only. Completion of nested transactions does not generate 
            this event.
            </remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Operations.ITextUndoHistory2">
            <summary>
            Contains undo transactions.
            </summary>
            <remarks>
            Typically only one undo transaction history at a time is available to the user.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Operations.ITextUndoHistory2.CreateInvisibleTransaction(System.String)">
            <summary>
            Creates a new transaction, invisible, nests it in the previously current transaction, and marks it current.
            </summary>
            <param name="description">The description of the transaction.</param>
            <returns>The new transaction.</returns>
            <remarks>
            <para>Invisible transactions are like normal undo transactions except that they are effectively invisible to the end user. They won't be displayed
            in the undo stack and if the user does an "undo" then all the invisible transactions leading up to the 1st non-invisible transaction are "skipped".</para>
            <para>Invisible transactions can only contain simple text edits (other types of undo actions will be lost and potentially corrupt the undo stack).</para>
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Operations.ITextUndoHistory2.IsUndoEnabled">
            <summary>
            Gets whether Undo is enabled in the context of this <see cref="T:Microsoft.VisualStudio.Text.Operations.ITextUndoHistory" /> instance.
            </summary>
            <returns><c>true</c> if Undo is enabled in the context of this <see cref="T:Microsoft.VisualStudio.Text.Operations.ITextUndoHistory" /> instance, <c>false</c> otherwise.</returns>
            <remarks>Undo is disabled for readonly text buffers such as in the Output Window.</remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Operations.ITextUndoHistoryRegistry">
            <summary>
            Maps context objects to <see cref="T:Microsoft.VisualStudio.Text.Operations.ITextUndoHistory" /> objects and is meant to be exposed by a component part.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Operations.ITextUndoHistoryRegistry.RegisterHistory(System.Object)">
            <summary>
            Gets, and if necessary creates, a history associated with the context. 
            </summary>
            <param name="context">An arbitrary context object.</param>
            <returns>A (possibly new) <see cref="T:Microsoft.VisualStudio.Text.Operations.ITextUndoHistory" /> associated with the context object.</returns>
            <remarks>Only a weak reference is held to the context.</remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Operations.ITextUndoHistoryRegistry.GetHistory(System.Object)">
            <summary>
            Gets a history associated with the context, but does not create a new one.
            </summary>
            <param name="context">An arbitrary context object.</param>
            <returns>An <see cref="T:Microsoft.VisualStudio.Text.Operations.ITextUndoHistory" /> associated with the context object.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Operations.ITextUndoHistoryRegistry.TryGetHistory(System.Object,Microsoft.VisualStudio.Text.Operations.ITextUndoHistory@)">
            <summary>
            Gets a history associated with the context, but does not create a new one.
            </summary>
            <param name="context">An arbitrary context object.</param>
            <param name="history">An <see cref="T:Microsoft.VisualStudio.Text.Operations.ITextUndoHistory" /> associated with the context object.</param>
            <returns><c>true</c> if a relevant <see cref="T:Microsoft.VisualStudio.Text.Operations.ITextUndoHistory" /> exists in this registry, otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Operations.ITextUndoHistoryRegistry.AttachHistory(System.Object,Microsoft.VisualStudio.Text.Operations.ITextUndoHistory)">
            <summary>
            Attaches an existing <see cref="T:Microsoft.VisualStudio.Text.Operations.ITextUndoHistory" /> to a new context. The context must not already be mapped in this registry. 
            </summary>
            <param name="context">An arbitrary context object.</param>
            <param name="history">An <see cref="T:Microsoft.VisualStudio.Text.Operations.ITextUndoHistory" /> object to associate with the context.</param>
            <remarks>Only a weak reference is held to the context.</remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Operations.ITextUndoHistoryRegistry.RemoveHistory(Microsoft.VisualStudio.Text.Operations.ITextUndoHistory)">
            <summary>
            Removes all mappings to a given <see cref="T:Microsoft.VisualStudio.Text.Operations.ITextUndoHistory" /> in this registry, if any exist.
            </summary>
            <param name="history">The <see cref="T:Microsoft.VisualStudio.Text.Operations.ITextUndoHistory" /> to remove from the registry.</param>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Operations.ITextUndoPrimitive">
            <summary>
            Represents an atomic operation that knows how to Do/Undo/Redo itself.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Operations.ITextUndoPrimitive.Parent">
            <summary>
            Gets or sets the <see cref="T:Microsoft.VisualStudio.Text.Operations.ITextUndoTransaction" /> that contains the primitive.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Operations.ITextUndoPrimitive.CanRedo">
            <summary>
            Determines whether it is currently possible to call Do() successfully.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Operations.ITextUndoPrimitive.CanUndo">
            <summary>
            Determines whether it is currently possible to call Undo() successfully.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Operations.ITextUndoPrimitive.Do">
            <summary>
            Performs or redoes the operation.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Operations.ITextUndoPrimitive.Undo">
            <summary>
            Performs rollback or undo on the operation.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Operations.ITextUndoPrimitive.CanMerge(Microsoft.VisualStudio.Text.Operations.ITextUndoPrimitive)">
            <summary>
            Determines whether this undo primitive can merge with the specified undo primitive.
            </summary>
            <param name="older">The older primitive.</param>
            <returns><c>true</c> if the given primitive can merge with this one, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Operations.ITextUndoPrimitive.Merge(Microsoft.VisualStudio.Text.Operations.ITextUndoPrimitive)">
            <summary>
            Performs the actual merge. 
            </summary>
            <param name="older">The older primitive to merge.</param>
            <returns>The replacement primitive.</returns>
            <remarks>
            The resulting <see cref="T:Microsoft.VisualStudio.Text.Operations.ITextUndoPrimitive" /> will be added to the transaction, and the
            two input primitives will be removed.
            </remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Operations.ITextUndoTransaction">
            <summary>
            Represents a container for <see cref="T:Microsoft.VisualStudio.Text.Operations.ITextUndoPrimitive" /> objects. UndoTransactions are tracked in an UndoHistory.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Operations.ITextUndoTransaction.Description">
            <summary>
            Gets or sets the description
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Operations.ITextUndoTransaction.State">
            <summary>
            Gets the <see cref="T:Microsoft.VisualStudio.Text.Operations.UndoTransactionState" /> for the <see cref="T:Microsoft.VisualStudio.Text.Operations.ITextUndoTransaction" />.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Operations.ITextUndoTransaction.History">
             <summary>
            Gets the <see cref="T:Microsoft.VisualStudio.Text.Operations.ITextUndoHistory" /> that contains this transaction.
             </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Operations.ITextUndoTransaction.UndoPrimitives">
            <summary>
            Gets the collection of <see cref="T:Microsoft.VisualStudio.Text.Operations.ITextUndoPrimitive" /> objects in this container.
            </summary>
            <remarks>
            <para>You should try to get these primitives only after the transaction has been completed.</para>
            <para>You cannot modify the list except during merging 
            (i.e. from your <see cref="M:Microsoft.VisualStudio.Text.Operations.IMergeTextUndoTransactionPolicy.PerformTransactionMerge(Microsoft.VisualStudio.Text.Operations.ITextUndoTransaction,Microsoft.VisualStudio.Text.Operations.ITextUndoTransaction)" /> implementation).</para>
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Operations.ITextUndoTransaction.Complete">
            <summary>
            Marks the transaction as finished and eligible for undo.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Operations.ITextUndoTransaction.Cancel">
            <summary>
            Marks an open transaction as canceled, and undoes and clears any primitives that have been added.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Operations.ITextUndoTransaction.AddUndo(Microsoft.VisualStudio.Text.Operations.ITextUndoPrimitive)">
            <summary>
            Adds a new primitive to the end of the list when the transaction is open.
            </summary>
            <param name="undo"></param>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Operations.ITextUndoTransaction.Parent">
            <summary>
            Gets the <see cref="T:Microsoft.VisualStudio.Text.Operations.ITextUndoTransaction" /> that contains this transaction. 
            </summary>
            <remarks>
            This property can be null if this is a root transaction. It is transient, since completed transactions are not nested.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Operations.ITextUndoTransaction.CanRedo">
            <summary>
            Determines whether it is currently possible to call Do() successfully.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Operations.ITextUndoTransaction.CanUndo">
            <summary>
            Determines whether it is currently possible to call Undo() successfully.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Operations.ITextUndoTransaction.Do">
            <summary>
            Performs a do or redo.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Operations.ITextUndoTransaction.Undo">
            <summary>
            Performs a rollback or undo.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Operations.ITextUndoTransaction.MergePolicy">
            <summary>
            Gets the <see cref="T:Microsoft.VisualStudio.Text.Operations.IMergeTextUndoTransactionPolicy" /> associated with this transaction.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Operations.TextUndoHistoryState">
            <summary>
            Provides information about the <see cref="T:Microsoft.VisualStudio.Text.Operations.ITextUndoHistory" />.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Operations.TextUndoHistoryState.Idle">
            <summary>
            The <see cref="T:Microsoft.VisualStudio.Text.Operations.ITextUndoHistory" /> is not in the process of performing an undo or redo.
            </summary>
            <remarks>
            If you care whether the <see cref="T:Microsoft.VisualStudio.Text.Operations.ITextUndoHistory" /> is altering its contents, be sure to check CurrentTransaction also.
            </remarks>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Operations.TextUndoHistoryState.Undoing">
            <summary>
            The <see cref="T:Microsoft.VisualStudio.Text.Operations.ITextUndoHistory" /> is in the process of executing its Undo method.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Operations.TextUndoHistoryState.Redoing">
            <summary>
            The <see cref="T:Microsoft.VisualStudio.Text.Operations.ITextUndoHistory" /> is in the process of executing its Redo method.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Operations.TextUndoRedoEventArgs">
            <summary>
            Provides information for the UndoRedoHappened event raised by <see cref="T:Microsoft.VisualStudio.Text.Operations.ITextUndoHistory" />, about the effect of the undo or redo operation.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Operations.TextUndoRedoEventArgs.#ctor(Microsoft.VisualStudio.Text.Operations.TextUndoHistoryState,Microsoft.VisualStudio.Text.Operations.ITextUndoTransaction)">
            <summary>
            Initializes a new instance of <see cref="T:Microsoft.VisualStudio.Text.Operations.TextUndoRedoEventArgs" />.
            </summary>
            <param name="state">The <see cref="T:Microsoft.VisualStudio.Text.Operations.TextUndoHistoryState" />.</param>
            <param name="transaction">The <see cref="T:Microsoft.VisualStudio.Text.Operations.ITextUndoTransaction" />.</param>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Operations.TextUndoRedoEventArgs.Transaction">
            <summary>
            Gets the transaction that was processed in this undo or redo.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Operations.TextUndoRedoEventArgs.State">
            <summary>
            Gets the state of the transaction.
            </summary>
            <remarks>
            The state is either UndoTransactionState.Undoing or UndoTransactionState.Redoing.
            </remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Operations.TextUndoTransactionCompletedEventArgs">
            <summary>
            Provides information for the <see cref="E:Microsoft.VisualStudio.Text.Operations.ITextUndoHistory.UndoTransactionCompleted" /> event raised by the <see cref="T:Microsoft.VisualStudio.Text.Operations.ITextUndoHistory" />. 
            </summary>
            <remarks>
            These event arguments contain the <see cref="T:Microsoft.VisualStudio.Text.Operations.ITextUndoTransaction" /> that has been added 
            and the result of the completion. This event is fired only for
            the topmost <see cref="T:Microsoft.VisualStudio.Text.Operations.ITextUndoTransaction" /> that is placed on the <see cref="P:Microsoft.VisualStudio.Text.Operations.ITextUndoHistory.UndoStack" />. Completion of nested
            transactions does not raise this event.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Operations.TextUndoTransactionCompletedEventArgs.#ctor(Microsoft.VisualStudio.Text.Operations.ITextUndoTransaction,Microsoft.VisualStudio.Text.Operations.TextUndoTransactionCompletionResult)">
            <summary>
            Initializes a new instance of <see cref="T:Microsoft.VisualStudio.Text.Operations.TextUndoTransactionCompletedEventArgs" />.
            </summary>        
            <param name="transaction">The <see cref="T:Microsoft.VisualStudio.Text.Operations.ITextUndoTransaction" />.</param>
            <param name="result">The <see cref="T:Microsoft.VisualStudio.Text.Operations.TextUndoTransactionCompletionResult" />.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="transaction" /> is null.</exception>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Operations.TextUndoTransactionCompletedEventArgs.Transaction">
            <summary>
            Gets the transaction that was added to the <see cref="T:Microsoft.VisualStudio.Text.Operations.ITextUndoHistory" />.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Operations.TextUndoTransactionCompletedEventArgs.Result">
            <summary>
            Gets the result of the completed transaction. 
            </summary>
            <remarks>
            See <see cref="T:Microsoft.VisualStudio.Text.Operations.TextUndoTransactionCompletionResult" /> for the possible outcomes.
            </remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Operations.TextUndoTransactionCompletionResult">
            <summary>
            Describes the possible results of a transaction completion for an <see cref="T:Microsoft.VisualStudio.Text.Operations.ITextUndoHistory" />.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Operations.TextUndoTransactionCompletionResult.TransactionAdded">
            <summary>
            The most recent transaction is added to the <see cref="P:Microsoft.VisualStudio.Text.Operations.ITextUndoHistory.UndoStack" /> of the <see cref="T:Microsoft.VisualStudio.Text.Operations.ITextUndoHistory" />.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Operations.TextUndoTransactionCompletionResult.TransactionMerged">
            <summary>
            The most recent transaction is merged with the transaction on the top of the <see cref="P:Microsoft.VisualStudio.Text.Operations.ITextUndoHistory.UndoStack" /> of 
            the associated <see cref="T:Microsoft.VisualStudio.Text.Operations.ITextUndoHistory" />.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Operations.UndoTransactionState">
            <summary>
            Holds the state of the transaction. 
            </summary>
            <remarks>
            There are five rough groups of transactions.
            Open transactions are being defined. Canceled transactions have been aborted and are empty. Completed and undone
            transactions have been defined and are ready for undo and redo, respectively. Undoing and redoing are
            transient states as the transaction passes between completed and undone. Invalid is a state for transactions that
            have expired.
            </remarks>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Operations.UndoTransactionState.Open">
            <summary>
            Represents the initial state of the transaction, after it has been created and before it is canceled or completed.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Operations.UndoTransactionState.Completed">
            <summary>
            Indicates that the transaction is no longer being defined, and is eligible for undo.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Operations.UndoTransactionState.Canceled">
            <summary>
            Indicates that the transaction is no longer being defined, but has been aborted and cleared.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Operations.UndoTransactionState.Redoing">
            <summary>
            Indicates a transient state set by Do(), between the undone state and the completed state.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Operations.UndoTransactionState.Undoing">
            <summary>
            Indicates a transient state set by Undo(), between the completed state and the Undone state.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Operations.UndoTransactionState.Undone">
            <summary>
            Indicates that Undo() was called after completion.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Operations.UndoTransactionState.Invalid">
            <summary>
            Indicates that the transaction has been removed the undo history stack, for example because it was on the redo stack when
            a new operation cleared the redo stack. Once a transaction is invalid it should not be used for anything.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.GlobMatching.GlobMatcher">
            <summary>
            A file glob pattern to match file paths against. This can either be a glob pattern string(like * */*.{ts,js} or *.{ts,js}) or a relative pattern.
            Glob patterns can have the following syntax:
            * to match one or more characters in a path segment
            ? to match on one character in a path segment
            ** to match any number of path segments, including none
            {} to group conditions (e.g. **/*.{ ts,js}
                       matches all TypeScript and JavaScript files)
            [] to declare a range of characters to match in a path segment(e.g., example.[0 - 9] to match on example.0, example.1, …)
            [!...] to negate a range of characters to match in a path segment(e.g., example.[!0 - 9] to match on example.a, example.b, but not example.0)
            Note: a backslash(\) is not valid within a glob pattern, make sure to convert any backslash to slash when creating the glob pattern.
            See https://code.visualstudio.com/api/references/vscode-api#GlobPattern
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Logic.IOpenDocumentTextSnapshotCachingService">
            <summary>
            A service to access last 50 text snapshot versions of documents open in VS
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Logic.IOpenDocumentTextSnapshotCachingService.TryGetTextSnapshotForVersionNumber(Microsoft.VisualStudio.Text.ITextBuffer2,System.Int32)">
            <summary>
            Try get a snapshot of the specified version for the given text buffer.
            If the snapshot is less than 50 versions old, it will be returned.
            </summary>
            <param name="textBuffer">The text buffer whose snapshot is being requested</param>
            <param name="textSnapshotVersion">The version of the snapshot being requested</param>
            <remarks>
            Can be called from any thread.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Logic.IOpenDocumentTextSnapshotCachingService.TryGetTextSnapshotForVersionNumber(System.String,System.Int32)">
            <summary>
            Try get a snapshot of the specified version for the given filePath
            If the snapshot is less than 50 versions old, it will be returned.
            </summary>
            <param name="filePath">The file path of the open document whose snapshot is being requested</param>
            <param name="textSnapshotVersion">The version of the snapshot being requested</param>
            <remarks>
            Can be called from any thread.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Logic.IOpenDocumentTextSnapshotCachingService.TryGetOldestSnapshotAvailable(Microsoft.VisualStudio.Text.ITextBuffer2)">
            <summary>
            Try get the oldest snapshot available for the specified textbuffer
            </summary>
            <param name="textBuffer">The text buffer whose snapshot is being requested</param>
            <remarks>
            Can be called from any thread.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Logic.IOpenDocumentTextSnapshotCachingService.TryGetOldestSnapshotAvailable(System.String)">
            <summary>
            Try get the oldest snapshot available for the specified file path of an open document
            </summary>
            <param name="filePath">The file path of the open document whose snapshot is being requested</param>
            <remarks>
            Can be called from any thread.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Logic.IOpenDocumentTextSnapshotCachingService.TryGetLatestSnapshot(System.String)">
            <summary>
            Try get the current snapshot for the specified file path of an open document
            </summary>
            <param name="filePath">The file path of the open document whose snapshot is being requested</param>
            <remarks>
            Can be called from any thread.
            </remarks>
        </member>
        <member name="E:Microsoft.VisualStudio.Text.Logic.IOpenDocumentTextSnapshotCachingService.CachedItemStateChanged">
            <summary>
            An event that is raised whenever the state of the open document cache changes
            </summary>
            <remarks>
            Is invoked on a background thread
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Logic.IOpenDocumentTextSnapshotCachingService.IsDocumentDirty(System.String)">
            <summary>
            Gets whether the file path of the open document is dirty
            </summary>
            <param name="filePath">File path of the open document whose dirty state needs to be checked</param>
            <returns>true if dirty, false if not, null if document is not present in OpenDocumentCache</returns>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Logic.IRemoteFileManager.IsRemoteClient">
            <summary>
            Returns <c>true</c> if this is a remoting session.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Logic.IRemoteFileManager.GetLocalDocumentNameAsync(System.Uri,System.Threading.CancellationToken)">
            <summary>
            Gets the local file path from the given remote uri.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Logic.IRemoteFileManager.GetLocalUriAsync(System.Uri,System.Threading.CancellationToken)">
            <summary>
            Converts the given remote uri to local uri. If conversion is not possible returns an instance of NoDocumentAssociatedUri.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Logic.IRemoteFileManager.GetRemoteUriAsync(System.Uri,System.Threading.CancellationToken)">
            <summary>
            Converts the given local uri to remote uri. Can throw if conversion is not possible.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Logic.IRemoteFileManager.GetDisplayNameFromRemoteMonikerAsync(System.Uri,System.Threading.CancellationToken)">
            <summary>
            Converts the given remote uri to a user-friendly path ready to be displayed in the UI.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Logic.TextModel.ChangeTypeAttribute">
            <summary>
            Used to declare supported <see cref="T:Microsoft.VisualStudio.Text.Document.ChangeTypes" /> by MEF components.
            A component can have multiple <see cref="T:Microsoft.VisualStudio.Text.Logic.TextModel.ChangeTypeAttribute" />s indicating
            it supports more than one change type.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Logic.TextModel.ChangeTypeAttribute.ChangeType">
            <summary>
            <see cref="T:Microsoft.VisualStudio.Text.Document.ChangeTypes" /> value declared by this attribute.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Logic.TextModel.ChangeTypeAttribute.#ctor(Microsoft.VisualStudio.Text.Document.ChangeTypes)">
            <summary>
            Creates new instance of the <see cref="T:Microsoft.VisualStudio.Text.Logic.TextModel.ChangeTypeAttribute" />.
            </summary>
            <param name="changeType"><see cref="T:Microsoft.VisualStudio.Text.Document.ChangeTypes" /> value declared by this attribute.</param>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.IEditDistanceService">
            <summary>
            A service that provides distance between two strings.
            </summary>
            <remarks>
            This interface is a MEF component part and can be imported with a MEF import attribute.
            <code>
            [Import]
            internal IEditDistanceService EditDistanceService;
            </code>
            </remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.PatternMatching.IPatternMatcher">
            <summary>
            Defines a pattern matcher that can compare a candidate string against a search pattern to identify relevance. <see cref="T:Microsoft.VisualStudio.Text.PatternMatching.IPatternMatcherFactory" /> defines
            the way to obtain an <see cref="T:Microsoft.VisualStudio.Text.PatternMatching.IPatternMatcher" /> given a search pattern and options.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.PatternMatching.IPatternMatcher.TryMatch(System.String)">
             <summary>
             Determines if, and how well a candidate string matches a search pattern and a set of <see cref="T:Microsoft.VisualStudio.Text.PatternMatching.PatternMatcherCreationOptions" />.
             </summary>
             <param name="candidate">The string to evaluate for relevancy.</param>
             <returns>A <see cref="T:Microsoft.VisualStudio.Text.PatternMatching.PatternMatch" /> object describing how well the candidate matched the pattern. If no match is found, this returns <see langword="null" /> instead.</returns>
             <remarks>
             This pattern matcher uses the concepts of a 'Pattern' and a 'Candidate' to to differentiate between what the user types to search
             and what the system compares against. The pattern and some <see cref="T:Microsoft.VisualStudio.Text.PatternMatching.PatternMatcherCreationOptions" /> are specified in <see cref="T:Microsoft.VisualStudio.Text.PatternMatching.IPatternMatcherFactory" /> in order to obtain an <see cref="T:Microsoft.VisualStudio.Text.PatternMatching.IPatternMatcher" />.
             
             The user can then call this method repeatedly with multiple candidates to filter out non-matches, and obtain sortable <see cref="T:Microsoft.VisualStudio.Text.PatternMatching.PatternMatch" /> objects to help decide
             what the user actually wanted.
             
             A few examples are useful here. Suppose the user obtains an IPatternMatcher using the following:
             Pattern = "PatMat"
            
             The following calls to TryMatch could expect these results:
             Candidate = "PatternMatcher"
             Returns a match containing <see cref="F:Microsoft.VisualStudio.Text.PatternMatching.PatternMatchKind.CamelCaseExact" />.
            
             Candidate = "IPatternMatcher"
             Returns a match containing <see cref="F:Microsoft.VisualStudio.Text.PatternMatching.PatternMatchKind.CamelCaseSubstring" />
            
             Candidate = "patmat"
             Returns a match containing <see cref="F:Microsoft.VisualStudio.Text.PatternMatching.PatternMatchKind.Exact" />, but <see cref="P:Microsoft.VisualStudio.Text.PatternMatching.PatternMatch.IsCaseSensitive" /> will be false.
            
             Candidate = "Not A Match"
             Returns <see langword="null" />.
            
             To determine sort order, call <see cref="M:Microsoft.VisualStudio.Text.PatternMatching.PatternMatch.CompareTo(Microsoft.VisualStudio.Text.PatternMatching.PatternMatch)" />.
             </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.PatternMatching.IPatternMatcher.HasInvalidPattern">
            <summary>
            Determines whether given pattern is invalid,
            in which case <see cref="M:Microsoft.VisualStudio.Text.PatternMatching.IPatternMatcher.TryMatch(System.String)" /> would return no <see cref="T:Microsoft.VisualStudio.Text.PatternMatching.PatternMatch" />es.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.PatternMatching.IPatternMatcherFactory">
            <summary>
            Provides instances of a <see cref="T:Microsoft.VisualStudio.Text.PatternMatching.IPatternMatcher" /> for a given
            search string and creation options.
            </summary>
            <remarks>This is a MEF component part, and should be imported as follows:
            [Import]
            IPatternMatcherFactory factory = null;
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.PatternMatching.IPatternMatcherFactory.CreatePatternMatcher(System.String,Microsoft.VisualStudio.Text.PatternMatching.PatternMatcherCreationOptions)">
             <summary>
             Gets an <see cref="T:Microsoft.VisualStudio.Text.PatternMatching.IPatternMatcher" /> given a search pattern and search options.
             </summary>
             <param name="pattern">Describes the search pattern that candidate strings will be compared against for relevancy.</param>
             <param name="creationOptions">Defines parameters for what should be considered relevant in a match.</param>
             <remarks>
             This pattern matcher uses the concepts of a 'Pattern' and a 'Candidate' to to differentiate between what the user types to search
             and what the system compares against. The pattern and some <see cref="T:Microsoft.VisualStudio.Text.PatternMatching.PatternMatcherCreationOptions" /> are specified in here in order to obtain an <see cref="T:Microsoft.VisualStudio.Text.PatternMatching.IPatternMatcher" />.
             
             The user can then call <see cref="M:Microsoft.VisualStudio.Text.PatternMatching.IPatternMatcher.TryMatch(System.String)" /> repeatedly with multiple candidates to filter out non-matches, and obtain sortable <see cref="T:Microsoft.VisualStudio.Text.PatternMatching.PatternMatch" /> objects to help decide
             what the user actually wanted.
             
             A few examples are useful here. Suppose the user obtains an IPatternMatcher using the following:
             Pattern = "PatMat"
            
             The following calls to TryMatch could expect these results:
             Candidate = "PatternMatcher"
             Returns a match containing <see cref="F:Microsoft.VisualStudio.Text.PatternMatching.PatternMatchKind.CamelCaseExact" />.
            
             Candidate = "IPatternMatcher"
             Returns a match containing <see cref="F:Microsoft.VisualStudio.Text.PatternMatching.PatternMatchKind.CamelCaseSubstring" />
            
             Candidate = "patmat"
             Returns a match containing <see cref="F:Microsoft.VisualStudio.Text.PatternMatching.PatternMatchKind.Exact" />, but <see cref="P:Microsoft.VisualStudio.Text.PatternMatching.PatternMatch.IsCaseSensitive" /> will be false.
            
             Candidate = "Not A Match"
             Returns <see langword="null" />.
            
             To determine sort order, call <see cref="M:Microsoft.VisualStudio.Text.PatternMatching.PatternMatch.CompareTo(Microsoft.VisualStudio.Text.PatternMatching.PatternMatch)" />.
             </remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.PatternMatching.IPatternMatcherFactory2">
            <summary>
            Provides instances of a <see cref="T:Microsoft.VisualStudio.Text.PatternMatching.IPatternMatcher" /> for a given
            search string and creation options.
            </summary>
            <remarks>This is a MEF component part, and should be imported as follows:
            [Import]
            IPatternMatcherFactory2 factory = null;
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.PatternMatching.IPatternMatcherFactory2.CreatePatternMatcher(System.String,Microsoft.VisualStudio.Text.PatternMatching.PatternMatcherCreationOptions,Microsoft.VisualStudio.Text.PatternMatching.IPatternMatcher)">
             <summary>
             Gets an <see cref="T:Microsoft.VisualStudio.Text.PatternMatching.IPatternMatcher" /> given a search pattern and search options.
             </summary>
             <param name="pattern">Describes the search pattern that candidate strings will be compared against for relevancy.</param>
             <param name="creationOptions">Defines parameters for what should be considered relevant in a match.</param>
             <param name="linkedMatcher">A matcher whose cache should be shared with the created matcher.</param>
             <remarks>
             <para>
             As opposed to <see cref="M:Microsoft.VisualStudio.Text.PatternMatching.IPatternMatcherFactory.CreatePatternMatcher(System.String,Microsoft.VisualStudio.Text.PatternMatching.PatternMatcherCreationOptions)" />, this overload
             creates a <see cref="T:Microsoft.VisualStudio.Text.PatternMatching.IPatternMatcher" /> with a shared cache. Use this overload in contexts with frequently changing <paramref name="pattern" />s
             to reduce allocations and throw-away work. Note that sharing the cache between <see cref="T:Microsoft.VisualStudio.Text.PatternMatching.IPatternMatcher" />s used from multiple
             threads may lead to lock contention. It's recommended to profile prior to opting in.
             </para>
             <para>
             This pattern matcher uses the concepts of a 'Pattern' and a 'Candidate' to to differentiate between what the user types to search
             and what the system compares against. The pattern and some <see cref="T:Microsoft.VisualStudio.Text.PatternMatching.PatternMatcherCreationOptions" /> are specified in here in order to obtain an <see cref="T:Microsoft.VisualStudio.Text.PatternMatching.IPatternMatcher" />.
             
             The user can then call <see cref="M:Microsoft.VisualStudio.Text.PatternMatching.IPatternMatcher.TryMatch(System.String)" /> repeatedly with multiple candidates to filter out non-matches, and obtain sortable <see cref="T:Microsoft.VisualStudio.Text.PatternMatching.PatternMatch" /> objects to help decide
             what the user actually wanted.
             
             A few examples are useful here. Suppose the user obtains an IPatternMatcher using the following:
             Pattern = "PatMat"
            
             The following calls to TryMatch could expect these results:
             Candidate = "PatternMatcher"
             Returns a match containing <see cref="F:Microsoft.VisualStudio.Text.PatternMatching.PatternMatchKind.CamelCaseExact" />.
            
             Candidate = "IPatternMatcher"
             Returns a match containing <see cref="F:Microsoft.VisualStudio.Text.PatternMatching.PatternMatchKind.CamelCaseSubstring" />
            
             Candidate = "patmat"
             Returns a match containing <see cref="F:Microsoft.VisualStudio.Text.PatternMatching.PatternMatchKind.Exact" />, but <see cref="P:Microsoft.VisualStudio.Text.PatternMatching.PatternMatch.IsCaseSensitive" /> will be false.
            
             Candidate = "Not A Match"
             Returns <see langword="null" />.
            
             To determine sort order, call <see cref="M:Microsoft.VisualStudio.Text.PatternMatching.PatternMatch.CompareTo(Microsoft.VisualStudio.Text.PatternMatching.PatternMatch)" />.
             </para>
             </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.PatternMatching.PatternMatch.IsCaseSensitive">
            <summary>
            True if this was a case sensitive match.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.PatternMatching.PatternMatch.Kind">
            <summary>
            The type of match that occurred.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.PatternMatching.PatternMatch.MatchedSpans">
            <summary>
            The spans in the original text that were matched.  Only returned if the 
            pattern matcher is asked to collect these spans.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.PatternMatching.PatternMatch.IsPunctuationStripped">
            <summary>
            True if punctuation was removed for this match.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.PatternMatching.PatternMatch.#ctor(Microsoft.VisualStudio.Text.PatternMatching.PatternMatchKind,System.Boolean,System.Boolean)">
            <summary>
            Creates a PatternMatch object with an optional single span.
            </summary>
            <param name="resultType">How is this match categorized?</param>
            <param name="punctuationStripped">Was punctuation removed?</param>
            <param name="isCaseSensitive">Was this a case sensitive match?</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.PatternMatching.PatternMatch.#ctor(Microsoft.VisualStudio.Text.PatternMatching.PatternMatchKind,System.Boolean,System.Boolean,System.Collections.Immutable.ImmutableArray{Microsoft.VisualStudio.Text.Span})">
            <summary>
            Creates a PatternMatch object with a set of spans
            </summary>
            <param name="resultType">How is this match categorized?</param>
            <param name="punctuationStripped">Was punctuation removed?</param>
            <param name="isCaseSensitive">Was this a case sensitive match?</param>
            <param name="matchedSpans">What spans of the candidate were matched? An empty array signifies no span information is given.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.PatternMatching.PatternMatch.WithMatchedSpans(System.Collections.Immutable.ImmutableArray{Microsoft.VisualStudio.Text.Span})">
            <summary>
            Get a PatternMatch object with additional spans added to it. This is an optimization to avoid having to call the whole constructor.
            </summary>
            <param name="matchedSpans">Spans to associate with this PatternMatch.</param>
            <returns>A new instance of a PatternMatch with the specified spans.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.PatternMatching.PatternMatch.CompareTo(Microsoft.VisualStudio.Text.PatternMatching.PatternMatch)">
            <summary>
            Compares two PatternMatch objects.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.PatternMatching.PatternMatch.CompareTo(Microsoft.VisualStudio.Text.PatternMatching.PatternMatch,System.Boolean)">
            <summary>
            Compares two PatternMatch objects with the specified behavior for ignoring capitalization.
            </summary>
            <param name="other"><see cref="T:Microsoft.VisualStudio.Text.PatternMatching.PatternMatch" /> to compare</param>
            <param name="ignoreCase">Should case be ignored?</param>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.PatternMatching.PatternMatcherCreationFlags">
            <summary>
            Specifies flags that control optional behavior of the pattern matching.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.PatternMatching.PatternMatcherCreationFlags.None">
            <summary>
            No options selected.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.PatternMatching.PatternMatcherCreationFlags.AllowFuzzyMatching">
            <summary>
            Signifies that strings differing from the initial pattern by minor spelling changes should be considered a match.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.PatternMatching.PatternMatcherCreationFlags.IncludeMatchedSpans">
            <summary>
            Signifies that spans indicating matched segments in candidate strings should be returned.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.PatternMatching.PatternMatcherCreationFlags.AllowSimpleSubstringMatching">
            <summary>
            Signifies that a case insensitive substring match, but not a prefix should be considered a match.
            This covers the case of non camel case naming conventions, for example matching
            'afxsettingsstore.h' when user types 'store.h'
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.PatternMatching.PatternMatcherCreationOptions">
            <summary>
            Defines context for what should be considered relevant in a pattern match.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.PatternMatching.PatternMatcherCreationOptions.CultureInfo">
            <summary>
            Used to tailor character comparisons to the correct culture.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.PatternMatching.PatternMatcherCreationOptions.Flags">
            <summary>
            A set of biniary options, used to control options like case-sensitivity.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.PatternMatching.PatternMatcherCreationOptions.ContainerSplitCharacters">
             <summary>
             Characters that should be considered as describing a container/contained boundary. When matching types, this can be the '.' character
             e.g. Namespace.Class.Property, so that the search can tailor behavior to better match Property first, then Class, then Namespace.
             This also can work with directory separators in filenames and any other logical container/contained pattern in candidate strings.
            
             <see langword="null" /> signifies no characters are container boundaries.
             </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.PatternMatching.PatternMatcherCreationOptions.#ctor(System.Globalization.CultureInfo,Microsoft.VisualStudio.Text.PatternMatching.PatternMatcherCreationFlags,System.Collections.Generic.IReadOnlyCollection{System.Char})">
             <summary>
             Creates an instance of <see cref="T:Microsoft.VisualStudio.Text.PatternMatching.PatternMatcherCreationOptions" />.
             </summary>
             <param name="cultureInfo">Used to tailor character comparisons to the correct culture.</param>
             <param name="flags">A set of biniary options, used to control options like case-sensitivity.</param>
             <param name="containerSplitCharacters">
             Characters that should be considered as describing a container/contained boundary. When matching types, this can be the '.' character
             e.g. Namespace.Class.Property, so that the search can tailor behavior to better match Property first, then Class, then Namespace.
             This also can work with directory separators in filenames and any other logical container/contained pattern in candidate strings.
            
             <see langword="null" /> signifies no characters are container boundaries.
             </param>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.PatternMatching.PatternMatchKind">
            <summary>
            This enum is NOT ordered. Sorting based on the PatternMatchKind is performed in <see cref="T:Microsoft.VisualStudio.Text.PatternMatching.PatternMatch" /> and is subject to change.
            Additional entries can be added at the bottom of this enumeration.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.PatternMatching.PatternMatchKind.Exact">
            <summary>
            The candidate string matched the pattern exactly.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.PatternMatching.PatternMatchKind.Prefix">
            <summary>
            The pattern was a prefix of the candidate string.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.PatternMatching.PatternMatchKind.Substring">
            <summary>
            The pattern was a substring of the candidate string, but in a way that wasn't a CamelCase match.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.PatternMatching.PatternMatchKind.CamelCaseExact">
            <summary>
            All camel-humps in the pattern matched a camel-hump in the candidate.  All camel-humps
            in the candidate were matched by a camel-hump in the pattern.
            
            Example: "CFPS" matching "CodeFixProviderService"
            Example: "cfps" matching "CodeFixProviderService"
            Example: "CoFiPrSe" matching "CodeFixProviderService"
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.PatternMatching.PatternMatchKind.CamelCasePrefix">
             <summary>
             All camel-humps in the pattern matched a camel-hump in the candidate.  The first camel-hump
             in the pattern matched the first camel-hump in the candidate.  There was no gap in the camel-
             humps in the candidate that were matched.
            
             Example: "CFP" matching "CodeFixProviderService"
             Example: "cfp" matching "CodeFixProviderService"
             Example: "CoFiPRo" matching "CodeFixProviderService"
             </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.PatternMatching.PatternMatchKind.CamelCaseNonContiguousPrefix">
             <summary>
             All camel-humps in the pattern matched a camel-hump in the candidate.  The first camel-hump
             in the pattern matched the first camel-hump in the candidate.  There was at least one gap in 
             the camel-humps in the candidate that were matched.
            
             Example: "CP" matching "CodeFixProviderService"
             Example: "cp" matching "CodeFixProviderService"
             Example: "CoProv" matching "CodeFixProviderService"
             </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.PatternMatching.PatternMatchKind.CamelCaseSubstring">
             <summary>
             All camel-humps in the pattern matched a camel-hump in the candidate.  The first camel-hump
             in the pattern did not match the first camel-hump in the pattern.  There was no gap in the camel-
             humps in the candidate that were matched.
            
             Example: "FP" matching "CodeFixProviderService"
             Example: "fp" matching "CodeFixProviderService"
             Example: "FixPro" matching "CodeFixProviderService"
             </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.PatternMatching.PatternMatchKind.CamelCaseNonContiguousSubstring">
             <summary>
             All camel-humps in the pattern matched a camel-hump in the candidate.  The first camel-hump
             in the pattern did not match the first camel-hump in the pattern.  There was at least one gap in 
             the camel-humps in the candidate that were matched.
            
             Example: "FS" matching "CodeFixProviderService"
             Example: "fs" matching "CodeFixProviderService"
             Example: "FixSer" matching "CodeFixProviderService"
             </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.PatternMatching.PatternMatchKind.Fuzzy">
            <summary>
            The pattern matches the candidate in a fuzzy manner.  Fuzzy matching allows for 
            a certain amount of misspellings, missing words, etc.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.PatternMatching.PatternMatchKindExtensions.CompareTo(Microsoft.VisualStudio.Text.PatternMatching.PatternMatchKind,Microsoft.VisualStudio.Text.PatternMatching.PatternMatchKind)">
            <summary>
            Compares two <see cref="T:Microsoft.VisualStudio.Text.PatternMatching.PatternMatchKind" /> values, suggesting which one is more likely to be what the user was searching for.
            </summary>
            <param name="kind1">Item to be compared.</param>
            <param name="kind2">Item to be compared.</param>
            <returns>A negative value means kind1 is preferable, positive means kind2 is preferable. Zero means they are equivalent.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Tagging.BatchedTagsChangedEventArgs">
            <summary>
            Provides a list of all mapping spans where tags have changed since the last BatchedTagsChanged event. 
            The BatchedTagsChanged event is raised on the same thread as the thread that created the tag aggregator.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Tagging.BatchedTagsChangedEventArgs.#ctor(System.Collections.Generic.IList{Microsoft.VisualStudio.Text.IMappingSpan})">
            <summary>
            Initializes a new instance of <see cref="T:Microsoft.VisualStudio.Text.Tagging.BatchedTagsChangedEventArgs" /> with the specified list of <see cref="T:Microsoft.VisualStudio.Text.IMappingSpan" />s.
            </summary>
            <param name="spans">The list of <see cref="T:Microsoft.VisualStudio.Text.IMappingSpan" />s where the tags have changed.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="spans" /> is null.</exception>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Tagging.BatchedTagsChangedEventArgs.Spans">
            <summary>
            The list of <see cref="T:Microsoft.VisualStudio.Text.IMappingSpan" />s where the tags have changed.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Tagging.IAccurateTagAggregator`1">
            <summary>
            Aggregates all the tag providers in a buffer graph for the specified type of tag.
            </summary>
            <typeparam name="T">The type of tag returned by the aggregator.</typeparam>
            <remarks>
            The default tag aggregator implementation also does the following:
            for each <see cref="T:Microsoft.VisualStudio.Text.Tagging.ITagger`1" />  over which it aggregates tags, if the tagger is
            <see cref="T:System.IDisposable" />, call Dispose() on it when the aggregator is disposed
            or when the taggers are dropped. For example, you should call Dispose() when 
            the content type of a text buffer changes or when a buffer is removed from the buffer graph.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Tagging.IAccurateTagAggregator`1.GetAllTags(Microsoft.VisualStudio.Text.SnapshotSpan,System.Threading.CancellationToken)">
            <summary>
            Gets all the tags that intersect the specified <paramref name="span" /> of the same type as the aggregator.
            </summary>
            <param name="span">The span to search.</param>
            <param name="cancel">Cancellation token</param>
            <returns>All the tags that intersect the region.</returns>
            <remarks>
            <para>This method is used when final results are needed (when, for example, when doing color printing) and is expected
            to return final results (however long it takes to compute) instead of quick but tentative results.</para>
            <para>The default tag aggregator lazily enumerates the tags of its <see cref="T:Microsoft.VisualStudio.Text.Tagging.ITagger`1" /> objects.
            Because of this, the ordering of the returned mapping spans cannot be predicted.
            If you need an ordered set of spans, you should collect the returned tag spans, after being mapped
            to the buffer of interest, into a sortable collection.</para>
            <para>If the underlying tagger does not support <see cref="T:Microsoft.VisualStudio.Text.Tagging.IAccurateTagger`1" />, then <see cref="T:Microsoft.VisualStudio.Text.Tagging.ITagger`1" />.GetTags(...) is used instead.</para>
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Tagging.IAccurateTagAggregator`1.GetAllTags(Microsoft.VisualStudio.Text.IMappingSpan,System.Threading.CancellationToken)">
            <summary>
            Gets all the tags that intersect the specified <paramref name="span" /> of the type of the aggregator.
            </summary>
            <param name="span">The span to search.</param>
            /// <param name="cancel">Cancellation token</param>
            <returns>All the tags that intersect the region.</returns>
            <remarks>
            <para>This method is used when final results are needed (when, for example, when doing color printing) and is expected
            to return final results (however long it takes to compute) instead of quick but tentative results.</para>
            <para>The default tag aggregator lazily enumerates the tags of its <see cref="T:Microsoft.VisualStudio.Text.Tagging.ITagger`1" /> objects.
            Because of this, the ordering of the returned mapping spans cannot be predicted.
            If you need an ordered set of spans, you should collect the returned tag spans, after being mapped
            to the buffer of interest, into a sortable collection.</para>
            <para>If the underlying tagger does not support <see cref="T:Microsoft.VisualStudio.Text.Tagging.IAccurateTagger`1" />, then <see cref="T:Microsoft.VisualStudio.Text.Tagging.ITagger`1" />.GetTags(...) is used instead.</para>
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Tagging.IAccurateTagAggregator`1.GetAllTags(Microsoft.VisualStudio.Text.NormalizedSnapshotSpanCollection,System.Threading.CancellationToken)">
            <summary>
            Gets all the tags that intersect the specified <paramref name="snapshotSpans" /> of the type of the aggregator.
            </summary>
            <param name="snapshotSpans">The spans to search.</param>
            <param name="cancel">Cancellation token</param>
            <returns>All the tags that intersect the region.</returns>
            <remarks>
            <para>This method is used when final results are needed (when, for example, when doing color printing) and is expected
            to return final results (however long it takes to compute) instead of quick but tentative results.</para>
            <para>The default tag aggregator lazily enumerates the tags of its <see cref="T:Microsoft.VisualStudio.Text.Tagging.ITagger`1" /> objects.
            Because of this, the ordering of the returned mapping spans cannot be predicted.
            If you need an ordered set of spans, you should collect the returned tag spans, after being mapped
            to the buffer of interest, into a sortable collection.</para>
            <para>If the underlying tagger does not support <see cref="T:Microsoft.VisualStudio.Text.Tagging.IAccurateTagger`1" />, then <see cref="T:Microsoft.VisualStudio.Text.Tagging.ITagger`1" />.GetTags(...) is used instead.</para>
            </remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Tagging.IAccurateTagger`1">
            <summary>
            A provider of tags over a buffer.
            </summary>
            <typeparam name="T">The type of tags to generate.</typeparam>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Tagging.IAccurateTagger`1.GetAllTags(Microsoft.VisualStudio.Text.NormalizedSnapshotSpanCollection,System.Threading.CancellationToken)">
            <summary>
            Gets all the tags that intersect the <paramref name="spans" />.
            </summary>
            <param name="spans">The spans to visit.</param>
            <param name="cancel">Cancellation token</param>
            <returns>A <see cref="T:Microsoft.VisualStudio.Text.Tagging.ITagSpan`1" /> for each tag.</returns>
            <remarks>
            <para>This method is used when final results are needed (when, for example, when doing color printing) and is expected
            to return final results (however long it takes to compute) instead of quick but tentative results.</para>
            <para>Taggers are not required to return their tags in any specific order.</para>
            <para>The recommended way to implement this method is by using generators ("yield return"),
            which allows lazy evaluation of the entire tagging stack.</para>
            </remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Tagging.IBufferTagAggregatorFactoryService">
            <summary>
            A factory that creates an <see cref="T:Microsoft.VisualStudio.Text.Tagging.ITagAggregator`1" /> for an <see cref="T:Microsoft.VisualStudio.Text.ITextBuffer" />.
            </summary>
            <remarks>This is a MEF component part, and implementations should use the following to import it:
            [Import]
            IBufferTagAggregatorFactoryService factory = null;
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Tagging.IBufferTagAggregatorFactoryService.CreateTagAggregator``1(Microsoft.VisualStudio.Text.ITextBuffer)">
            <summary>
            Creates a tag aggregator for a <paramref name="textBuffer" />.
            </summary>
            <param name="textBuffer">The <see cref="T:Microsoft.VisualStudio.Text.ITextBuffer" /> over which the aggregator should aggregate tags,
            including all source buffers if the buffer is a projection buffer.</param>
            <typeparam name="T">The type of tag to aggregate.</typeparam>
            <returns>The tag aggregator for <paramref name="textBuffer" />.</returns>
            <remarks>The ITagAggregatorr&lt;T&gt;.DispatchedTagsChanged event will be raised on the thread used to create the tag aggregator.</remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Tagging.IBufferTagAggregatorFactoryService.CreateTagAggregator``1(Microsoft.VisualStudio.Text.ITextBuffer,Microsoft.VisualStudio.Text.Tagging.TagAggregatorOptions)">
            <summary>
            Creates a tag aggregator for a <paramref name="textBuffer" />, using the given options.
            </summary>
            <param name="textBuffer">The <see cref="T:Microsoft.VisualStudio.Text.ITextBuffer" /> over which the aggregator should aggregate tags,
            including all source buffers if the buffer is a projection buffer.</param>
            <param name="options">The options to use for the newly created aggregator.</param>
            <typeparam name="T">The type of tag to aggregate.</typeparam>
            <returns>The tag aggregator for <paramref name="textBuffer" />.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Tagging.ITag">
            <summary>
            The base interface of all tags.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Tagging.ITagAggregator`1">
            <summary>
            Aggregates all the tag providers in a buffer graph for the specified type of tag.
            </summary>
            <typeparam name="T">The type of tag returned by the aggregator.</typeparam>
            <remarks>
            The default tag aggregator implementation also does the following:
            for each <see cref="T:Microsoft.VisualStudio.Text.Tagging.ITagger`1" />  over which it aggregates tags, if the tagger is
            <see cref="T:System.IDisposable" />, call Dispose() on it when the aggregator is disposed
            or when the taggers are dropped. For example, you should call Dispose() when 
            the content type of a text buffer changes or when a buffer is removed from the buffer graph.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Tagging.ITagAggregator`1.GetTags(Microsoft.VisualStudio.Text.SnapshotSpan)">
            <summary>
            Gets all the tags that intersect the specified <paramref name="span" /> of the same type as the aggregator.
            </summary>
            <param name="span">The span to search.</param>
            <returns>All the tags that intersect the region.</returns>
            <remarks>
            <para>The default tag aggregator lazily enumerates the tags of its <see cref="T:Microsoft.VisualStudio.Text.Tagging.ITagger`1" /> objects.
            Because of this, the ordering of the returned mapping spans cannot be predicted.
            If you need an ordered set of spans, you should collect the returned tag spans, after being mapped
            to the buffer of interest, into a sortable collection.</para>
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Tagging.ITagAggregator`1.GetTags(Microsoft.VisualStudio.Text.IMappingSpan)">
            <summary>
            Gets all the tags that intersect the specified <paramref name="span" /> of the type of the aggregator.
            </summary>
            <param name="span">The span to search.</param>
            <returns>All the tags that intersect the region.</returns>
            <remarks>
            <para>The default tag aggregator lazily enumerates the tags of its <see cref="T:Microsoft.VisualStudio.Text.Tagging.ITagger`1" /> objects.
            Because of this, the ordering of the returned mapping spans cannot be predicted.
            If you need an ordered set of spans, you should collect the returned tag spans, after being mapped
            to the buffer of interest, into a sortable collection.</para>
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Tagging.ITagAggregator`1.GetTags(Microsoft.VisualStudio.Text.NormalizedSnapshotSpanCollection)">
            <summary>
            Gets all the tags that intersect the specified <paramref name="snapshotSpans" /> of the type of the aggregator.
            </summary>
            <param name="snapshotSpans">The spans to search.</param>
            <returns>All the tags that intersect the region.</returns>
            <remarks>
            <para>The default tag aggregator lazily enumerates the tags of its <see cref="T:Microsoft.VisualStudio.Text.Tagging.ITagger`1" /> objects.
            Because of this, the ordering of the returned mapping spans cannot be predicted.
            If you need an ordered set of spans, you should collect the returned tag spans, after being mapped
            to the buffer of interest, into a sortable collection.</para>
            </remarks>
        </member>
        <member name="E:Microsoft.VisualStudio.Text.Tagging.ITagAggregator`1.TagsChanged">
            <summary>
            Occurs when tags are added to or removed from providers.
            </summary>
        </member>
        <member name="E:Microsoft.VisualStudio.Text.Tagging.ITagAggregator`1.BatchedTagsChanged">
            <summary>
            Occurs on idle after one or more TagsChanged events.
            </summary>
            <remarks>
            <para>
            This is a batched version of the TagsChanged event.  One or more TagsChanged events 
            are accumulated and then raised as a single BatchedTagsChanged event on idle using the 
            Dispatcher.CurrentDispatcher that was active when the ITagAggregator was
            created. 
            </para>
            <para>
            This event is less noisy than TagsChanged and is always raised on the thread
            that was active when the ITagAggregator was created.
            </para>
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Tagging.ITagAggregator`1.BufferGraph">
            <summary>
            The buffer graph over which this aggregator operates.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Tagging.ITagger`1">
            <summary>
            A provider of tags over a buffer.
            </summary>
            <typeparam name="T">The type of tags to generate.</typeparam>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Tagging.ITagger`1.GetTags(Microsoft.VisualStudio.Text.NormalizedSnapshotSpanCollection)">
            <summary>
            Gets all the tags that intersect the <paramref name="spans" />.
            </summary>
            <param name="spans">The spans to visit.</param>
            <returns>A <see cref="T:Microsoft.VisualStudio.Text.Tagging.ITagSpan`1" /> for each tag.</returns>
            <remarks>
            <para>Taggers are not required to return their tags in any specific order.</para>
            <para>The recommended way to implement this method is by using generators ("yield return"),
            which allows lazy evaluation of the entire tagging stack.</para>
            </remarks>
        </member>
        <member name="E:Microsoft.VisualStudio.Text.Tagging.ITagger`1.TagsChanged">
            <summary>
            Occurs when tags are added to or removed from the provider.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Tagging.ITaggerProvider">
            <summary>
            Creates an <see cref="T:Microsoft.VisualStudio.Text.Tagging.ITagger`1" /> for a given buffer.
            </summary>
            <remarks>This is a MEF component part, and implementers must use the following attributes:
            <code>
            [Export(typeof(ITaggerProvider))]
            [ContentType(...)]                  //Required, must have at least one <see cref="T:Microsoft.VisualStudio.Utilities.ContentTypeAttribute" /> (and can have multiple ContentType attributes)
                                                //  Specifies the <see cref="T:Microsoft.VisualStudio.Utilities.IContentType" />s which this provider provides taggers.
            [TagType(...))]                     //Required, must have at least one <see cref="T:Microsoft.VisualStudio.Text.Tagging.TagTypeAttribute" /> (and can have multiple TagType attributes)
                                                //  Specifies the types of taggers that can be created by this provider.
            [Name(...)]                         //Optional, can have only one <see cref="T:Microsoft.VisualStudio.Utilities.NameAttribute" />
                                                //  Specifies the name of the tagger provider.
                                                //  Providers with a name attribute can be replaced by another tagger provider that specifies
                                                //  the name in their <see cref="T:Microsoft.VisualStudio.Text.Editor.ReplacesAttribute" />.
                                                //  In addition, providers with the same name as an IViewTaggerProvider (defined is Microsoft.VisualStudio.Text.UI)
                                                //  will be suppressed if the view tagger provider created a tagger.
            [Replaces(...)]                     //Optional, can have zero or more <see cref="T:Microsoft.VisualStudio.Text.Editor.ReplacesAttribute" />
                                                //  Providers with a name attribute that matches replaces attribute of another provider will
                                                //  be suppressed. Note that the other tagger is suppressed even if the replacing provider does not
                                                //  supply a tagger.
            [DeferCreation(OptionName = ...)]   //Optional, can have only one <see cref="T:Microsoft.VisualStudio.Text.Editor.DeferCreationAttribute" />
                                                //  If specified, the tagger will not be created until the option (<see cref="T:Microsoft.VisualStudio.Text.Editor.IEditorOptions" />) specified
                                                //  in the defer creation attribute becomes true.
            </code>
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Tagging.ITaggerProvider.CreateTagger``1(Microsoft.VisualStudio.Text.ITextBuffer)">
            <summary>
            Creates a tag provider for the specified buffer.
            </summary>
            <param name="buffer">The <see cref="T:Microsoft.VisualStudio.Text.ITextBuffer" />.</param>
            <typeparam name="T">The type of the tag.</typeparam>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Tagging.IMappingTagSpan`1">
            <summary>
            Associates an <see cref="T:Microsoft.VisualStudio.Text.Tagging.ITag" /> with a specified <see cref="T:Microsoft.VisualStudio.Text.IMappingSpan" />.
            </summary>
            <typeparam name="T">The type, which must be a subtype of <see cref="T:Microsoft.VisualStudio.Text.Tagging.ITag" />.</typeparam>
            <remarks>
            Use <see cref="T:Microsoft.VisualStudio.Text.Tagging.MappingTagSpan`1" /> as the implementation of this
            interface.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Tagging.IMappingTagSpan`1.Tag">
            <summary>
            Gets the tag located in this span.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Tagging.IMappingTagSpan`1.Span">
            <summary>
            Gets the mapping span for this tag.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Tagging.MappingTagSpan`1">
            <summary>
            The implementation of IMappingTagSpan&lt;T&gt;.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Tagging.MappingTagSpan`1.Tag">
            <summary>
            Gets the tag located in this span.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Tagging.MappingTagSpan`1.Span">
            <summary>
            Gets the mapping span for this tag.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Tagging.MappingTagSpan`1.#ctor(Microsoft.VisualStudio.Text.IMappingSpan,`0)">
            <summary>
            Creates a mapping tag span.
            </summary>
            <param name="span">The mapping span with which to associate the tag.</param>
            <param name="tag">The tag associated with the span.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="span" /> or <paramref name="tag" /> is null.</exception>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Tagging.RefCountedSimpleTagger`1">
            <summary>
            Ref-counted version of <see cref="T:Microsoft.VisualStudio.Text.Tagging.SimpleTagger`1" /> that can be used to track the number of consumers of the tagger.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Tagging.RefCountedSimpleTagger`1.GetOrCreate(Microsoft.VisualStudio.Text.ITextBuffer)">
            <summary>
            Gets or creates a ref-counted tagger for the given buffer.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Tagging.RefCountedSimpleTagger`1.GetTagger(Microsoft.VisualStudio.Text.ITextBuffer)">
            <summary>
            Gets (but doesn't create) the ref-counted tagger for the given buffer. Throws if the tagger doesn't exist yet.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Tagging.SimpleTagger`1">
            <summary>
            Provides simple, thread-safe storage of and interaction with tags of the given type.
            </summary>
            <typeparam name="T">The type, which must be a subtype of <see cref="T:Microsoft.VisualStudio.Text.Tagging.ITag" />.</typeparam>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Tagging.SimpleTagger`1.#ctor(Microsoft.VisualStudio.Text.ITextBuffer)">
            <summary>
            Initializes a new instance of <see cref="T:Microsoft.VisualStudio.Text.Tagging.SimpleTagger`1" /> for the specified buffer.
            </summary>
            <param name="buffer">Subject buffer that will be tagged.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Tagging.SimpleTagger`1.CreateTagSpan(Microsoft.VisualStudio.Text.ITrackingSpan,`0)">
            <summary>
            Adds a tag over the given span.
            </summary>
            <param name="span">The <see cref="T:Microsoft.VisualStudio.Text.ITrackingSpan" /> that tracks the tag across text versions.</param>
            <param name="tag">The tag to associate with the given span.</param>
            <returns>The <see cref="T:Microsoft.VisualStudio.Text.Tagging.TrackingTagSpan`1" /> that was added, which can be used to remove the tag later on.</returns>
            <remarks>This method is safe to use from any thread.</remarks>
            <exception cref="T:System.ArgumentNullException"><paramref name="span" /> or <paramref name="tag" /> is null.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Tagging.SimpleTagger`1.RemoveTagSpan(Microsoft.VisualStudio.Text.Tagging.TrackingTagSpan{`0})">
            <summary>
            Removes a tag span that was created by calling <see cref="M:Microsoft.VisualStudio.Text.Tagging.SimpleTagger`1.CreateTagSpan(Microsoft.VisualStudio.Text.ITrackingSpan,`0)" />.
            </summary>
            <param name="tagSpan">The <see cref="T:Microsoft.VisualStudio.Text.Tagging.TrackingTagSpan`1" /> returned from a previous call to <see cref="M:Microsoft.VisualStudio.Text.Tagging.SimpleTagger`1.CreateTagSpan(Microsoft.VisualStudio.Text.ITrackingSpan,`0)" />.</param>
            <returns><c>true</c> if removed successfully, otherwise <c>false</c>.</returns>
            <remarks>This method is safe to use from any thread.</remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Tagging.SimpleTagger`1.RemoveTagSpans(System.Predicate{Microsoft.VisualStudio.Text.Tagging.TrackingTagSpan{`0}})">
            <summary>
            Removes all tag spans that match the conditions specified by the predicate.
            </summary>
            <param name="match">The <see cref="T:System.Predicate`1" /> that defines the match.</param>
            <returns>The number of tag spans removed.</returns>
            <remarks>This method is safe to use from any thread.</remarks>
            <exception cref="T:System.ArgumentNullException"><paramref name="match" /> is null.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Tagging.SimpleTagger`1.GetTaggedSpans(Microsoft.VisualStudio.Text.SnapshotSpan)">
            <summary>
            Gets the tagged spans that intersect the given <see cref="T:Microsoft.VisualStudio.Text.SnapshotSpan" />.
            </summary>
            <param name="span">The <see cref="T:Microsoft.VisualStudio.Text.SnapshotSpan" /> to use.</param>
            <returns>The set of <see cref="T:Microsoft.VisualStudio.Text.Tagging.TrackingTagSpan`1" /> objects that intersect the given span, in order.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Tagging.SimpleTagger`1.Update">
            <summary>
            Gets an IDisposable object that represents an update batch.
            </summary>
            <returns>An IDisposable object that represents an update batch.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Tagging.SimpleTagger`1.GetTags(Microsoft.VisualStudio.Text.NormalizedSnapshotSpanCollection)">
            <summary>
            Gets all the tags that intersect the spans in the specified snapshot
            of the desired type.
            </summary>
            <param name="spans">The spans to visit.</param>
            <returns>A <see cref="T:Microsoft.VisualStudio.Text.Tagging.ITagSpan`1" /> for each tag.</returns>
        </member>
        <member name="E:Microsoft.VisualStudio.Text.Tagging.SimpleTagger`1.TagsChanged">
            <summary>
            Occurs when one or more tags have been added or removed.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Tagging.TagAggregatorOptions">
            <summary>
            Tag Aggregator options.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Tagging.TagAggregatorOptions.None">
            <summary>
            Default behavior. The tag aggregator will map up and down through all projection buffers.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Tagging.TagAggregatorOptions.MapByContentType">
            <summary>
            Only map through projection buffers that have the "projection" content type.
            </summary>
            <remarks>
            <para>
            Normally, a tag aggregator will map up and down through all projection buffers (buffers
            that implement <see cref="T:Microsoft.VisualStudio.Text.Projection.IProjectionBufferBase" />).  This flag will cause the projection buffer
            to not map through buffers that are projection buffers but do not have a projection content type.
            </para>
            </remarks>
            <comment>This is used by the classifier aggregator, as classification depends on content type.</comment>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Tagging.TagAggregatorOptions2">
            <summary>
            Tag Aggregator options.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Tagging.TagAggregatorOptions2.None">
            <summary>
            Default behavior. The tag aggregator will map up and down through all projection buffers.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Tagging.TagAggregatorOptions2.MapByContentType">
            <summary>
            Only map through projection buffers that have the "projection" content type.
            </summary>
            <remarks>
            <para>
            Normally, a tag aggregator will map up and down through all projection buffers (buffers
            that implement <see cref="T:Microsoft.VisualStudio.Text.Projection.IProjectionBufferBase" />).  This flag will cause the projection buffer
            to not map through buffers that are projection buffers but do not have a projection content type.
            </para>
            </remarks>
            <comment>This is used by the classifier aggregator, as classification depends on content type.</comment>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Tagging.TagAggregatorOptions2.DeferTaggerCreation">
            <summary>
            Delay creating the taggers for the tag aggregator.
            </summary>
            <remarks>
            <para>A tag aggregator will, normally, create all of its taggers when it is created. This option
            will cause the tagger to defer the creation until idle time tasks are done.</para>
            <para>If this option is set, a TagsChanged event will be raised after the taggers have been created.</para>
            </remarks>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Tagging.TagAggregatorOptions2.NoProjection">
            <summary>
            Do not create taggers on child buffers.
            </summary>
            <remarks>
            <para>A common reason to use this flag would for a tagger that is creating its own tag aggregator
            (for example, to translate one tag into another type of tag). In that case, you can expect another
            instance of your tagger to be created on the child buffers (which would create its own tag aggregators)
            so you don't want to have your tag aggregator include those buffers/
            </para>
            </remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Tagging.TagsChangedEventArgs">
            <summary>
            Provides information about the <see cref="T:Microsoft.VisualStudio.Text.Tagging.ITagAggregator`1" />.TagsChanged event.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Tagging.TagsChangedEventArgs.Span">
            <summary>
            Gets the span over which tags have changed.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Tagging.TagsChangedEventArgs.#ctor(Microsoft.VisualStudio.Text.IMappingSpan)">
            <summary>
            Initializes a new instance of <see cref="T:Microsoft.VisualStudio.Text.Tagging.TagsChangedEventArgs" /> with the specified <see cref="T:Microsoft.VisualStudio.Text.IMappingSpan" />.
            </summary>
            <param name="span">The <see cref="T:Microsoft.VisualStudio.Text.IMappingSpan" />.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="span" /> is null.</exception>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Tagging.ITagSpan`1">
            <summary>
            Associates an <see cref="T:Microsoft.VisualStudio.Text.Tagging.ITag" /> with a given <see cref="T:Microsoft.VisualStudio.Text.SnapshotSpan" />.
            </summary>
            <typeparam name="T">The type, which must be a subclass of <see cref="T:Microsoft.VisualStudio.Text.Tagging.ITag" />.</typeparam>
            <remarks>
            Use <see cref="T:Microsoft.VisualStudio.Text.Tagging.TagSpan`1" /> as the implementation of this
            interface.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Tagging.ITagSpan`1.Tag">
            <summary>
            Gets the tag located in this span.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Tagging.ITagSpan`1.Span">
            <summary>
            Gets the snapshot span for this tag.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Tagging.TagSpan`1">
            <summary>
            The implementation of ITagSpan&lt;T&gt;.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Tagging.TagSpan`1.Tag">
            <summary>
            Gets the tag located in this span.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Tagging.TagSpan`1.Span">
            <summary>
            Gets the snapshot span for this tag.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Tagging.TagSpan`1.#ctor(Microsoft.VisualStudio.Text.SnapshotSpan,`0)">
            <summary>
            Initializes a new instance of a <see cref="T:Microsoft.VisualStudio.Text.Tagging.TagSpan`1" /> with the specified snapshot span and tag.
            </summary>
            <param name="span">The <see cref="T:Microsoft.VisualStudio.Text.SnapshotSpan" /> with which to associate the tag.</param>
            <param name="tag">The tag associated with the span.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="tag" /> is null.</exception>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Tagging.TagTypeAttribute">
            <summary>
            Declares the types of tags an <see cref="T:Microsoft.VisualStudio.Text.Tagging.ITagger`1" />
            produces. This attribute is placed on the provider of the tagger.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Tagging.TagTypeAttribute.#ctor(System.Type)">
            <summary>
            Initializes a new instance of a <see cref="T:Microsoft.VisualStudio.Text.Tagging.TagTypeAttribute" />.
            </summary>
            <param name="tagType">The tag type, which must derive from <see cref="T:Microsoft.VisualStudio.Text.Tagging.ITag" />.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="tagType" /> is null.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="tagType" /> does not derive from <see cref="T:Microsoft.VisualStudio.Text.Tagging.ITag" />.</exception>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Tagging.TagTypeAttribute.TagTypes">
            <summary>
            Gets the type of the tag.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Tagging.TrackingTagSpan`1">
            <summary>
            Associates an <see cref="T:Microsoft.VisualStudio.Text.Tagging.ITag" /> with a given <see cref="T:Microsoft.VisualStudio.Text.ITrackingSpan" />.
            This is used by SimpleTagger to provide buffer-level tracking and caching of tag spans.
            </summary>
            <typeparam name="T">The type, which must be a subclass of <see cref="T:Microsoft.VisualStudio.Text.Tagging.ITag" />.</typeparam>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Tagging.TrackingTagSpan`1.Tag">
            <summary>
            The tag located in this span.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Tagging.TrackingTagSpan`1.Span">
            <summary>
            The tracking span for this tag.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Tagging.TrackingTagSpan`1.#ctor(Microsoft.VisualStudio.Text.ITrackingSpan,`0)">
            <summary>
            Initializes a new instance of a <see cref="T:Microsoft.VisualStudio.Text.Tagging.TrackingTagSpan`1" />.
            </summary>
            <param name="span">The tracking span with which to associate the tag.</param>
            <param name="tag">The tag associated with the span.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="span" /> or <paramref name="tag" /> is null.</exception>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Tagging.BracePairTag">
            <summary>
            An implementation of <see cref="T:Microsoft.VisualStudio.Text.Tagging.IBracePairTag" />
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Tagging.BracePairTag.#ctor(System.Nullable{Microsoft.VisualStudio.Text.SnapshotSpan},System.Nullable{Microsoft.VisualStudio.Text.SnapshotSpan})">
            <summary>
            Create a tag associated with a brace pair.
            </summary>
            <param name="start">The position of the opening brace position. If null, indicates an invalid brace pair with only an ending brace.</param>
            <param name="end">The position of the closing brace position. If null, indicates an invalid brace pair with only an opening brace.</param>
            <exception cref="T:System.ArgumentNullException">thrown when both start and end position are null</exception>
            <remarks>
            This tag supports two pair types. When start and end positions are supplied, the tag indicates a valid brace pair match.
            If either start or end position is null, the tag indicates an invalid brace pair match.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Tagging.BracePairTag.Start">
            <summary>
            The position of the opening brace.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Tagging.BracePairTag.End">
            <summary>
            The position of the closing brace.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Tagging.BraceTag">
            <summary>
            An <see cref="T:Microsoft.VisualStudio.Text.Tagging.ITag" /> that denotes the location of a brace. 
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Tagging.BraceTag.Span">
            <summary>
            The location of the brace. Braces can be multiple characters
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Tagging.BraceTag.CloseMatch">
            <summary>
            The string closing brace match for an open brace. This is null when the brace is a close brace
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Tagging.BraceTag.IsOpenBrace">
            <summary>
            Identifies if a brace is an opening brace or a closing brace. 
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Tagging.ClassificationTag">
            <summary>
            An implementation of <see cref="T:Microsoft.VisualStudio.Text.Tagging.IClassificationTag" />.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Tagging.ClassificationTag.#ctor(Microsoft.VisualStudio.Text.Classification.IClassificationType)">
            <summary>
            Create a new tag associated with the given type of
            classification.
            </summary>
            <param name="type">The type of classification</param>
            <exception cref="T:System.ArgumentNullException">If the type is passed in as null</exception>
            <remarks>
            <see cref="T:Microsoft.VisualStudio.Text.Classification.ILayeredClassificationType" /> can be used instead of <see cref="T:Microsoft.VisualStudio.Text.Classification.IClassificationType" />
            to enable one component's classifications to categorically supersede another's classifications.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Tagging.ClassificationTag.ClassificationType">
            <summary>
            The classification type associated with this tag.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Tagging.IBracePairTag">
            <summary>
            An <see cref="T:Microsoft.VisualStudio.Text.Tagging.ITag" /> that denotes the location of a brace pair
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Tagging.IBracePairTag.Start">
            <summary>
            The location of the opening brace. When property is null, the tag indicates an invalid brace pair match with only a closing brace.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Tagging.IBracePairTag.End">
            <summary>
            The location of the closing brace. When property is null, the tag indicates an invalid brace pair match with only an opening brace.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Tagging.IClassificationTag">
            <summary>
            A tag that represents a classification type.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Tagging.IClassificationTag.ClassificationType">
            <summary>
            The classification type associated with this tag.
            </summary>
            <remarks>
            <see cref="T:Microsoft.VisualStudio.Text.Classification.ILayeredClassificationType" /> can be used instead of <see cref="T:Microsoft.VisualStudio.Text.Classification.IClassificationType" />
            to enable one component's classifications to categorically supersede another's classifications.
            </remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Tagging.IUrlTag">
            <summary>
            A tag that represents a URL.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Tagging.IUrlTag.Url">
            <summary>
            The URL.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Tagging.UrlTag">
            <summary>
            An implementation of <see cref="T:Microsoft.VisualStudio.Text.Tagging.IUrlTag" />.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Tagging.UrlTag.#ctor(System.Uri)">
            <summary>
            Create a new tag with the given URL.
            </summary>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="url" /> is <c>null</c></exception>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Document.ChangedSnapshotSpan">
            <summary>
            Associates a <see cref="T:Microsoft.VisualStudio.Text.Document.ChangeTypes" /> witgh a <see cref="T:Microsoft.VisualStudio.Text.SnapshotSpan" /> of text.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Document.ChangedSnapshotSpan.Span">
            <summary>
            <see cref="T:Microsoft.VisualStudio.Text.SnapshotSpan" /> of text that has a change.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Document.ChangedSnapshotSpan.ChangeType">
            <summary>
            A kind of a change.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Document.ChangedSnapshotSpan.#ctor(Microsoft.VisualStudio.Text.SnapshotSpan,Microsoft.VisualStudio.Text.Document.ChangeTypes)">
            <summary>
            Creates a new instance of <see cref="T:Microsoft.VisualStudio.Text.Document.ChangedSnapshotSpan" />, associating a span of changed text with a change type.
            </summary>
            <param name="span"><see cref="T:Microsoft.VisualStudio.Text.SnapshotSpan" /> of text that has a change.</param>
            <param name="changeType">A kind of a change.</param>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Document.ChangeTag">
            <summary>
            A tag associated with a span of modified text. 
            </summary>
            <remarks>
            <para>Use the CreateTagAggregator method of IViewTagAggregatorFactoryService to instantiate an aggregator of change tags.</para>
            <para>Change taggers lose their change history when they are no longer consumed by any tag aggregators. They resume
            tracking changes if a new aggregator is created.</para>
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Document.ChangeTag.ChangeTypes">
            <summary>
            Gets the type of change for the tag.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Document.ChangeTag.#ctor(Microsoft.VisualStudio.Text.Document.ChangeTypes)">
            <summary>
            Initializes a new instance of <see cref="T:Microsoft.VisualStudio.Text.Document.ChangeTag" /> with the specified change type.
            </summary>
            <param name="type">The type of change for the tag.</param>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Document.ChangeTypes">
            <summary>
            Specifies the types of changes for modified text.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Document.ChangeTypes.None">
            <summary>
            No change types are set.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Document.ChangeTypes.ChangedSinceOpened">
            <summary>
            The change occurred after the document was opened.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Document.ChangeTypes.ChangedSinceSaved">
            <summary>
            The change occurred after the document was saved.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Document.ChangeTypes.SourceControlAdded">
            <summary>
            The change represents an addition in a document under source control.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Document.ChangeTypes.SourceControlDeleted">
            <summary>
            The change represents a deletion in a document under source control.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Document.ChangeTypes.SourceControlModified">
            <summary>
            The change represents a modification in a document under source control.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Document.ChangeTypes.SourceControlChangeSaved">
            <summary>
            A change in a document under source control was saved.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Document.IChangeSource">
            <summary>
            Represents a component that is a source of alternative (external to the core editor) information
            about modifications in a given <see cref="T:Microsoft.VisualStudio.Text.ITextBuffer" />, for example changes against baseline source controlled version.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Document.IChangeSource.IsActive">
            <summary>
            Indicates whether this <see cref="T:Microsoft.VisualStudio.Text.Document.IChangeSource" /> instance is currently active and can provide change data.
            </summary>
            <remarks>Some <see cref="T:Microsoft.VisualStudio.Text.Document.IChangeSource" /> can change its active status dynamically, for example when a document is
            added or removed from source control.</remarks>
        </member>
        <member name="E:Microsoft.VisualStudio.Text.Document.IChangeSource.ChangedSpansChanged">
            <summary>
            Occurs when text buffer's changes data has changed and need to be requried.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Document.IChangeSource.GetChangedSpans(Microsoft.VisualStudio.Text.NormalizedSnapshotSpanCollection)">
            <summary>
            Gets all changes that intersect the <paramref name="spans" />.
            </summary>
            <param name="spans">The spans to provide change data for.</param>
            <returns></returns>
            <remarks>Change data doesn't need to be in any particular order.</remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Document.IChangeSourceProvider">
            <summary>
            Represents a provider of a <see cref="T:Microsoft.VisualStudio.Text.Document.IChangeSource" /> component, which is a source of alternative (external to the core editor) information
            about modifications in a given <see cref="T:Microsoft.VisualStudio.Text.ITextBuffer" />, for example changes against baseline source controlled version.
            Component exporters must supply <see cref="T:Microsoft.VisualStudio.Utilities.NameAttribute" /> and at least one <see cref="T:Microsoft.VisualStudio.Utilities.ContentTypeAttribute" /> attribute to specify the applicable content types.
            </summary>
            <remarks>
            This is a MEF component part, and should be exported with the following attribute:
            <code>
            [Export(typeof(IChangeSourceProvider))]
            [ContentType(StandardContentTypeNames.Text)]
            [Name("My External Change DataSource Provider")]
            </code>
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Document.IChangeSourceProvider.Create(Microsoft.VisualStudio.Text.ITextBuffer)">
            <summary>
            Creates an instance of <see cref="T:Microsoft.VisualStudio.Text.Document.IChangeSource" /> for a given <see cref="T:Microsoft.VisualStudio.Text.ITextBuffer" />.
            </summary>
            <param name="textBuffer">A text buffer to create an instance of <see cref="T:Microsoft.VisualStudio.Text.Document.IChangeSource" />.</param>
            <returns>An instance of <see cref="T:Microsoft.VisualStudio.Text.Document.IChangeSource" /> or null if it cannot be created.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.ITextDataModel">
            <summary>
            Prepares the <see cref="T:Microsoft.VisualStudio.Text.ITextBuffer" /> for presentation in the editor. Typically the <see cref="T:Microsoft.VisualStudio.Text.ITextDataModel" />
            comprises a single <see cref="T:Microsoft.VisualStudio.Text.ITextBuffer" /> that is exposed as both the <see cref="P:Microsoft.VisualStudio.Text.ITextDataModel.DocumentBuffer" /> and
            the <see cref="P:Microsoft.VisualStudio.Text.ITextDataModel.DataBuffer" />. However, in some cases, a graph of <see cref="T:Microsoft.VisualStudio.Text.Projection.IProjectionBuffer" />s is useful to
            present as it if were a single document. In that case, the <see cref="P:Microsoft.VisualStudio.Text.ITextDataModel.DataBuffer" /> will be an <see cref="T:Microsoft.VisualStudio.Text.Projection.IProjectionBuffer" />
            that uses the <see cref="P:Microsoft.VisualStudio.Text.ITextDataModel.DocumentBuffer" /> as a source buffer, directly or indirectly. 
            </summary>
            <remarks>
            The <see cref="P:Microsoft.VisualStudio.Text.ITextDataModel.ContentType" /> usually is the same as that of the <see cref="P:Microsoft.VisualStudio.Text.ITextDataModel.DocumentBuffer" />
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.ITextDataModel.ContentType">
            <summary>
            The <see cref="T:Microsoft.VisualStudio.Utilities.IContentType" /> of the text data model. Usually this is the same as the <see cref="T:Microsoft.VisualStudio.Utilities.IContentType" />
            of the <see cref="P:Microsoft.VisualStudio.Text.ITextDataModel.DocumentBuffer" /> but it need not be.
            </summary>
        </member>
        <member name="E:Microsoft.VisualStudio.Text.ITextDataModel.ContentTypeChanged">
            <summary>
            Raised when the <see cref="P:Microsoft.VisualStudio.Text.ITextDataModel.ContentType" /> of this text data model changes.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.ITextDataModel.DocumentBuffer">
            <summary>
            Gets the <see cref="T:Microsoft.VisualStudio.Text.ITextBuffer" /> corresponding to a document in the file system.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.ITextDataModel.DataBuffer">
            <summary>
            Gets the <see cref="T:Microsoft.VisualStudio.Text.ITextBuffer" /> that should be presented in the editor.
            </summary>
            <remarks>
            This text buffer may be the same as the <see cref="P:Microsoft.VisualStudio.Text.ITextDataModel.DocumentBuffer" />, or it may be a projection buffer 
            whose ultimate source is the <see cref="P:Microsoft.VisualStudio.Text.ITextDataModel.DocumentBuffer" />. The data buffer is the highest buffer that
            is shared among different views.
            </remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.TextDataModelContentTypeChangedEventArgs">
            <summary>
            Provides information about a change to the <see cref="T:Microsoft.VisualStudio.Utilities.IContentType" /> of an <see cref="T:Microsoft.VisualStudio.Text.ITextDataModel" />.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.TextDataModelContentTypeChangedEventArgs.BeforeContentType">
            <summary>
            The <see cref="T:Microsoft.VisualStudio.Utilities.IContentType" /> of the <see cref="T:Microsoft.VisualStudio.Text.ITextDataModel" /> before the change.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.TextDataModelContentTypeChangedEventArgs.AfterContentType">
            <summary>
            The <see cref="T:Microsoft.VisualStudio.Utilities.IContentType" /> of the <see cref="T:Microsoft.VisualStudio.Text.ITextDataModel" /> after the change.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.TextDataModelContentTypeChangedEventArgs.#ctor(Microsoft.VisualStudio.Utilities.IContentType,Microsoft.VisualStudio.Utilities.IContentType)">
            <summary>
            Constructs a <see cref="T:Microsoft.VisualStudio.Text.TextDataModelContentTypeChangedEventArgs" />.
            </summary>
            <param name="beforeContentType">The <see cref="T:Microsoft.VisualStudio.Utilities.IContentType" /> before the change.</param>
            <param name="afterContentType">The <see cref="T:Microsoft.VisualStudio.Utilities.IContentType" /> after the change.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.TextSnapshotExtensions.StartsWith(Microsoft.VisualStudio.Text.ITextSnapshot,System.String)">
            <summary>
            Determines whether the snapshot starts with the given text.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.TextSnapshotExtensions.StartsWith(Microsoft.VisualStudio.Text.ITextSnapshot,System.String,System.Int32)">
            <summary>
            Determines whether the snapshot starts with the given text.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.TextSnapshotExtensions.StartsWith(Microsoft.VisualStudio.Text.SnapshotSpan,System.String)">
            <summary>
            Determines whether the span starts with the given text.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.TextSnapshotExtensions.StartsWith(Microsoft.VisualStudio.Text.ITextSnapshot,System.Char)">
            <summary>
            Determines whether the snapshot starts with the given character.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.TextSnapshotExtensions.StartsWith(Microsoft.VisualStudio.Text.ITextSnapshot,System.Char,System.Int32)">
            <summary>
            Determines whether the snapshot starts with the given character.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.TextSnapshotExtensions.StartsWith(Microsoft.VisualStudio.Text.SnapshotSpan,System.Char)">
            <summary>
            Determines whether the span starts with the given character.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.TextSnapshotExtensions.CreateTrackingSpan(Microsoft.VisualStudio.Text.SnapshotSpan,Microsoft.VisualStudio.Text.SpanTrackingMode,Microsoft.VisualStudio.Text.TrackingFidelityMode)">
            <summary>
            Creates an ITrackingSpan from the SnapshotSpan.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.TextSnapshotExtensions.StartsWith(Microsoft.VisualStudio.Text.SnapshotPoint,System.String)">
            <summary>
            Determines whether the text at the snapshot point starts with the given text.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.TextSnapshotExtensions.StartsWith(Microsoft.VisualStudio.Text.SnapshotPoint,System.Char)">
            <summary>
            Determines whether the text at the snapshot point starts with the given character.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.TextSnapshotExtensions.EndsWith(Microsoft.VisualStudio.Text.ITextSnapshot,System.String)">
            <summary>
            Determines whether the snapshot ends with the given text.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.TextSnapshotExtensions.EndsWith(Microsoft.VisualStudio.Text.ITextSnapshot,System.String,System.Int32)">
            <summary>
            Determines whether the snapshot ends with the given text.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.TextSnapshotExtensions.EndsWith(Microsoft.VisualStudio.Text.SnapshotSpan,System.String)">
            <summary>
            Determines whether the span ends with the given text.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.TextSnapshotExtensions.EndsWith(Microsoft.VisualStudio.Text.SnapshotPoint,System.String)">
            <summary>
            Determines whether the text before the snapshot point ends with the given text.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.TextSnapshotExtensions.IndexOf(Microsoft.VisualStudio.Text.SnapshotPoint,System.String)">
            <summary>
            Determines the position of the given text from the given snapshot point. Returns -1 if the text can't be found.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.TextSnapshotExtensions.IndexOf(Microsoft.VisualStudio.Text.SnapshotSpan,System.String)">
            <summary>
            Determines the position of the given text in the span. Returns -1 if the text can't be found.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.TextSnapshotExtensions.IndexOf(Microsoft.VisualStudio.Text.SnapshotSpan,System.String,System.Int32)">
            <summary>
            Determines the position of the given text in the span. Returns -1 if the text can't be found.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.TextSnapshotExtensions.IndexOf(Microsoft.VisualStudio.Text.ITextSnapshot,System.String)">
            <summary>
            Determines the position of the given text in the text snapshot. Returns -1 if the text can't be found.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.TextSnapshotExtensions.IndexOf(Microsoft.VisualStudio.Text.ITextSnapshot,System.String,System.Int32)">
            <summary>
            Determines the position of the given text in the text snapshot. Returns -1 if the text can't be found.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.TextSnapshotExtensions.IndexOf(Microsoft.VisualStudio.Text.SnapshotPoint,System.Char)">
            <summary>
            Determines the position of the given character from the given snapshot point. Returns -1 if the character can't be found.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.TextSnapshotExtensions.IndexOf(Microsoft.VisualStudio.Text.SnapshotSpan,System.Char)">
            <summary>
            Determines the position of the given character in the span. Returns -1 if the character can't be found.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.TextSnapshotExtensions.IndexOf(Microsoft.VisualStudio.Text.SnapshotSpan,System.Char,System.Int32)">
            <summary>
            Determines the position of the given character in the span. Returns -1 if the character can't be found.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.TextSnapshotExtensions.IndexOf(Microsoft.VisualStudio.Text.ITextSnapshot,System.Char)">
            <summary>
            Determines the position of the given character in the text snapshot. Returns -1 if the character can't be found.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.TextSnapshotExtensions.IndexOf(Microsoft.VisualStudio.Text.ITextSnapshot,System.Char,System.Int32)">
            <summary>
            Determines the position of the given text in the text snapshot. Returns -1 if the text can't be found.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.TextSnapshotExtensions.IndexOf(Microsoft.VisualStudio.Text.ITextSnapshot,System.String,System.Int32,System.Int32)">
            <summary>
            Determines the position of the given text from the text snapshot. Returns -1 if the text can't be found.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.TextSnapshotExtensions.IndexOf(Microsoft.VisualStudio.Text.ITextSnapshot,System.Char,System.Int32,System.Int32)">
            <summary>
            Determines the position of the given character from the text snapshot. Returns -1 if the character can't be found.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.TextSnapshotExtensions.LastIndexOf(Microsoft.VisualStudio.Text.SnapshotPoint,System.String)">
            <summary>
            Determines the position of the last occurrence of the given text. Returns -1 if the text can't be found.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.TextSnapshotExtensions.LastIndexOf(Microsoft.VisualStudio.Text.SnapshotSpan,System.String)">
            <summary>
            Determines the position of the last occurrence of the given text. Returns -1 if the text can't be found.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.TextSnapshotExtensions.LastIndexOf(Microsoft.VisualStudio.Text.ITextSnapshot,System.String)">
            <summary>
            Determines the position of the last occurrence of the given text. Returns -1 if the text can't be found.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.TextSnapshotExtensions.LastIndexOf(Microsoft.VisualStudio.Text.ITextSnapshot,System.String,System.Int32)">
            <summary>
            Determines the position of the last occurrence of the given text. Returns -1 if the text can't be found.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.TextSnapshotExtensions.LastIndexOf(Microsoft.VisualStudio.Text.ITextSnapshot,System.String,System.Int32,System.Int32)">
            <summary>
            Determines the position of the last occurrence of the given text. Returns -1 if the text can't be found.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.TextSnapshotExtensions.GetPreviousNonWhitespace(Microsoft.VisualStudio.Text.ITextSnapshotLine,Microsoft.VisualStudio.Text.SnapshotPoint)">
            <summary>
            Given a snapshot point, gets the first occurrence of the non-whitespace character to the left of the point, within the range of the given line.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.TextSnapshotExtensions.GetPreviousNonWhitespace(Microsoft.VisualStudio.Text.SnapshotPoint)">
            <summary>
            Given a snapshot point, gets the first occurrence of the non-whitespace character to the left of the point.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.TextSnapshotExtensions.GetPreviousNonWhitespace(Microsoft.VisualStudio.Text.SnapshotPoint,System.Boolean)">
            <summary>
            Given a snapshot point, gets the first occurrence of the non-whitespace character to the left of the point.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.TextSnapshotExtensions.GetPreviousNonWhitespace(Microsoft.VisualStudio.Text.SnapshotSpan)">
            <summary>
            Given a snapshot point, gets the first occurrence of the non-whitespace character to the left of the point, within the range of the given span.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.TextSnapshotExtensions.GetPreviousNonWhitespace(Microsoft.VisualStudio.Text.SnapshotSpan,System.Boolean)">
            <summary>
            Given a snapshot point, gets the first occurrence of the non-whitespace character to the left of the point, within the range of the given span.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.TextSnapshotExtensions.GetPreviousNonWhitespace(Microsoft.VisualStudio.Text.SnapshotSpan,Microsoft.VisualStudio.Text.SnapshotPoint)">
            <summary>
            Given a snapshot point, gets the first occurrence of the non-whitespace character to the left of the point, within the range of the given span.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.TextSnapshotExtensions.GetPreviousNonWhitespace(Microsoft.VisualStudio.Text.SnapshotSpan,Microsoft.VisualStudio.Text.SnapshotPoint,System.Boolean)">
            <summary>
            Given a snapshot point, gets the first occurrence of the non-whitespace character to the left of the point, within the range of the given span.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.TextSnapshotExtensions.GetFirstNonWhitespace(Microsoft.VisualStudio.Text.ITextSnapshotLine)">
            <summary>
            Given a snapshot line, gets the first occurrence of the non-whitespace character, within the range of the given line.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.TextSnapshotExtensions.GetFirstNonWhitespace(Microsoft.VisualStudio.Text.SnapshotPoint)">
            <summary>
            Given a snapshot point, gets the first occurrence of the non-whitespace character.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.TextSnapshotExtensions.GetFirstNonWhitespace(Microsoft.VisualStudio.Text.SnapshotPoint,System.Boolean)">
            <summary>
            Given a snapshot point, gets the first occurrence of the non-whitespace character.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.TextSnapshotExtensions.GetFirstNonWhitespace(Microsoft.VisualStudio.Text.SnapshotSpan)">
            <summary>
            Given a snapshot point, gets the first occurrence of the non-whitespace character, within the range of the given span.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.TextSnapshotExtensions.GetFirstNonWhitespace(Microsoft.VisualStudio.Text.SnapshotSpan,System.Boolean)">
            <summary>
            Given a snapshot point, gets the first occurrence of the non-whitespace character, within the range of the given span.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.TextSnapshotExtensions.GetFirstNonWhitespace(Microsoft.VisualStudio.Text.SnapshotSpan,Microsoft.VisualStudio.Text.SnapshotPoint)">
            <summary>
            Given a snapshot point, gets the first occurrence of the non-whitespace character, within the range of the given span.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.TextSnapshotExtensions.GetFirstNonWhitespace(Microsoft.VisualStudio.Text.SnapshotSpan,Microsoft.VisualStudio.Text.SnapshotPoint,System.Boolean)">
            <summary>
            Given a snapshot point, gets the first occurrence of the non-whitespace character, within the range of the given span.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.TextSnapshotExtensions.GetNextLine(Microsoft.VisualStudio.Text.ITextSnapshotLine)">
            <summary>
            Gets the line below the current one, or the current line if there is no line below.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.TextSnapshotExtensions.GetPreviousLine(Microsoft.VisualStudio.Text.ITextSnapshotLine)">
            <summary>
            Gets the line above the current one, or the current line if there is no line above.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.TextSnapshotExtensions.GetPreviousNonEmptyLine(Microsoft.VisualStudio.Text.ITextSnapshotLine)">
            <summary>
            Gets the previous non-empty line, or the current line if there is no line above.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.TextSnapshotExtensions.IsEmptyOrWhitespace(Microsoft.VisualStudio.Text.ITextSnapshotLine)">
            <summary>
            Determines whether the given line is empty or has only whitespaces and tabs.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.TextSnapshotExtensions.IsEmptyOrWhitespace(Microsoft.VisualStudio.Text.SnapshotSpan)">
            <summary>
            Determines whether the given span is empty or has only whitespaces and tabs.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.TextSnapshotExtensions.IsEmptyOrWhitespace(Microsoft.VisualStudio.Text.SnapshotSpan,System.Boolean)">
            <summary>
            Determines whether the given span is empty or has only whitespaces and tabs.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.TextSnapshotExtensions.GetLineNumber(Microsoft.VisualStudio.Text.SnapshotPoint)">
            <summary>
            Gets the line number where the given snapshot point is.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.TextSnapshotExtensions.GetCurrentIndentation(Microsoft.VisualStudio.Text.ITextSnapshotLine,System.Int32)">
            <summary>
            Gets the amount of whitespaces that is at the beginning of the line
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.VirtualSnapshotPoint">
            <summary>
            Represents a <see cref="T:Microsoft.VisualStudio.Text.SnapshotPoint" /> that may have virtual spaces.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.VirtualSnapshotPoint.#ctor(Microsoft.VisualStudio.Text.SnapshotPoint)">
            <summary>
            Initializes a new instance of a <see cref="T:Microsoft.VisualStudio.Text.VirtualSnapshotPoint" /> at <paramref name="position" />, with zero virtual spaces.
            </summary>
            <param name="position">The position the point in the snapshot.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.VirtualSnapshotPoint.#ctor(Microsoft.VisualStudio.Text.ITextSnapshot,System.Int32)">
            <summary>
            Initializes a new instance of a <see cref="T:Microsoft.VisualStudio.Text.VirtualSnapshotPoint" /> at <paramref name="position" /> in a <paramref name="snapshot" />, with zero virtual spaces.
            </summary>
            <param name="snapshot">The snapshot to use.</param>
            <param name="position">The position of the snapshot point.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.VirtualSnapshotPoint.#ctor(Microsoft.VisualStudio.Text.SnapshotPoint,System.Int32)">
            <summary>
            Initializes a new instance of a <see cref="T:Microsoft.VisualStudio.Text.VirtualSnapshotPoint" /> at <paramref name="position" />, with the specified number of virtual spaces.
            </summary>
            <param name="position">The position of the virtual snapshot point.</param>
            <param name="virtualSpaces">The number of virtual spaces after <paramref name="position" />.</param>
            <remarks><paramref name="virtualSpaces" /> must be zero unless 
            <paramref name="position" /> corresponds to a location at the end
            of a <see cref="T:Microsoft.VisualStudio.Text.ITextSnapshotLine" />.</remarks>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="virtualSpaces" /> is negative.</exception>
            <remarks>If <paramref name="position" /> specifies a location that is not at the end of a line, then <paramref name="virtualSpaces" /> is set to 0.</remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.VirtualSnapshotPoint.#ctor(Microsoft.VisualStudio.Text.ITextSnapshotLine,System.Int32)">
            <summary>
            Initializes a new instance of a <see cref="T:Microsoft.VisualStudio.Text.VirtualSnapshotPoint" /> 
            at <paramref name="offset" /> of <paramref name="line" />, placing the point in virtual space if necessary.
            </summary>
            <param name="line">The line on which to place the point.</param>
            <param name="offset">The offset (zero-based) of the point.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="line" /> is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="offset" /> is negative.</exception>
            <remarks>
            <paramref name="offset" /> is a character offset from the start of the line. It does not correspond to a column position (for example, if the line consists of a single tab and the offset is 2, then
            the resulting VirtualSnapshotPoint will be one "space" past the end of the line).</remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.VirtualSnapshotPoint.Position">
            <summary>
            Gets the position of the snapshot point.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.VirtualSnapshotPoint.VirtualSpaces">
            <summary>
            Gets the number of virtual spaces.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.VirtualSnapshotPoint.IsInVirtualSpace">
            <summary>
            Determines whether the snapshot point has virtual spaces.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.VirtualSnapshotPoint.GetHashCode">
            <summary>
            Gets the hash code for the object.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.VirtualSnapshotPoint.TranslateTo(Microsoft.VisualStudio.Text.ITextSnapshot)">
            <summary>
            Translates this point to the <paramref name="snapshot" />.
            </summary>
            <param name="snapshot">The target snapshot.</param>
            <returns>The corresponding <see cref="T:Microsoft.VisualStudio.Text.VirtualSnapshotPoint" /> in <paramref name="snapshot" />.</returns>
            <exception cref="T:System.ArgumentException"><paramref name="snapshot" /> is for an earlier snapshot.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.VirtualSnapshotPoint.TranslateTo(Microsoft.VisualStudio.Text.ITextSnapshot,Microsoft.VisualStudio.Text.PointTrackingMode)">
            <summary>
            Translates this point to the <paramref name="snapshot" /> with the given tracking mode.
            </summary>
            <param name="snapshot">The target snapshot.</param>
            <param name="trackingMode">The tracking mode to use.</param>
            <returns>The corresponding <see cref="T:Microsoft.VisualStudio.Text.VirtualSnapshotPoint" /> in <paramref name="snapshot" />.</returns>
            <exception cref="T:System.ArgumentException"><paramref name="snapshot" /> is for an earlier snapshot.</exception>
            <remarks>
            <para>
            The tracking mode is relative to the virtual point, not the snapshot point.  If
            the point is in virtual space, it will behave as if the underlying (non-virtual)
            point is always tracking positive, as any text inserted at the point (at the
            end of the line it is on) will still be inserted "before" the virtual point.
            </para>
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.VirtualSnapshotPoint.ToString">
            <summary>
            Converts the object to a string.
            </summary>
            <returns>The string form of this object.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.VirtualSnapshotPoint.Equals(System.Object)">
            <summary>
            Determines whether two <see cref="T:Microsoft.VisualStudio.Text.VirtualSnapshotPoint" /> objects are the same.
            </summary>
            <param name="obj">The object to compare.</param>
            <returns><c>true</c> if the objects are the same, otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.VirtualSnapshotPoint.op_Equality(Microsoft.VisualStudio.Text.VirtualSnapshotPoint,Microsoft.VisualStudio.Text.VirtualSnapshotPoint)">
            <summary>
            Determines whether two <see cref="T:Microsoft.VisualStudio.Text.VirtualSnapshotPoint" /> objects are the same.
            </summary>
            <param name="left">The first object.</param>
            <param name="right">The second object.</param>
            <returns><c>true</c> if the two objects are the same, otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.VirtualSnapshotPoint.op_Inequality(Microsoft.VisualStudio.Text.VirtualSnapshotPoint,Microsoft.VisualStudio.Text.VirtualSnapshotPoint)">
            <summary>
            Determines whether two <see cref="T:Microsoft.VisualStudio.Text.VirtualSnapshotPoint" /> objects are different.
            </summary>
            <param name="left">The first object.</param>
            <param name="right">The second object.</param>
            <returns><c>true</c> if the two objects are different, otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.VirtualSnapshotPoint.op_GreaterThan(Microsoft.VisualStudio.Text.VirtualSnapshotPoint,Microsoft.VisualStudio.Text.VirtualSnapshotPoint)">
            <summary>
            Determines whether the position of the left point is greater than the position of the right point.
            </summary>
            <returns><c>true</c> if left.Position is greater than right.Position, otherwise <c>false</c>.</returns>
            <exception cref="T:System.ArgumentException">The snapshots of the two points do not match.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.VirtualSnapshotPoint.op_GreaterThanOrEqual(Microsoft.VisualStudio.Text.VirtualSnapshotPoint,Microsoft.VisualStudio.Text.VirtualSnapshotPoint)">
            <summary>
            Determines whether the position of the left point is greater than or equal to the position of the right point.
            </summary>
            <returns><c>true</c> if left.Position is greater than or equal to right.Position, otherwise <c>false</c>.</returns>
            <exception cref="T:System.ArgumentException">The snapshots of the two points do not match.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.VirtualSnapshotPoint.op_LessThan(Microsoft.VisualStudio.Text.VirtualSnapshotPoint,Microsoft.VisualStudio.Text.VirtualSnapshotPoint)">
            <summary>
            Determines whether the position of the left point is less than the position of the right point.
            </summary>
            <returns><c>true</c> if left.Position is less than right.Position, otherwise <c>false</c>.</returns>
            <exception cref="T:System.ArgumentException">If the snapshots of the points do not match.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.VirtualSnapshotPoint.op_LessThanOrEqual(Microsoft.VisualStudio.Text.VirtualSnapshotPoint,Microsoft.VisualStudio.Text.VirtualSnapshotPoint)">
            <summary>
            Determines whether the position of the left point is less than or equal to the position of the right point.
            </summary>
            <returns><c>true</c> if left.Position is less than or equal to right.Position, otherwise <c>false</c>.</returns>
            <exception cref="T:System.ArgumentException">If the snapshots of the points do not match.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.VirtualSnapshotPoint.CompareTo(Microsoft.VisualStudio.Text.VirtualSnapshotPoint)">
            <summary>
            Compares one <see cref="T:Microsoft.VisualStudio.Text.VirtualSnapshotPoint" /> to another.
            </summary>
            <param name="other">The second <see cref="T:Microsoft.VisualStudio.Text.VirtualSnapshotPoint" />.</param>
            <returns>Compares the position and number of virtual spaces of the two points.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.VirtualSnapshotSpan">
            <summary>
            Represents two <see cref="T:Microsoft.VisualStudio.Text.VirtualSnapshotPoint" />s
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.VirtualSnapshotSpan.#ctor(Microsoft.VisualStudio.Text.SnapshotSpan)">
            <summary>
            Initializes a new instance of a <see cref="T:Microsoft.VisualStudio.Text.VirtualSnapshotSpan" /> at <paramref name="snapshotSpan" />, with no virtual spaces.
            </summary>
            <param name="snapshotSpan">A snapshot span.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.VirtualSnapshotSpan.#ctor(Microsoft.VisualStudio.Text.VirtualSnapshotPoint,Microsoft.VisualStudio.Text.VirtualSnapshotPoint)">
            <summary>
            Initializes a new instance of a <see cref="T:Microsoft.VisualStudio.Text.VirtualSnapshotSpan" /> from the given
            <see cref="T:Microsoft.VisualStudio.Text.VirtualSnapshotPoint" />s.
            </summary>
            <param name="start">The start point.</param>
            <param name="end">The end point, which must be from the same <see cref="T:Microsoft.VisualStudio.Text.ITextSnapshot" />
            as the start point.</param>
            <exception cref="T:System.ArgumentException">The snapshot points belong to different 
            <see cref="T:Microsoft.VisualStudio.Text.ITextSnapshot" /> objects.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">The end point comes before the start
            point.</exception>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.VirtualSnapshotSpan.Start">
            <summary>
            Gets the starting virtual point.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.VirtualSnapshotSpan.End">
            <summary>
            Gets the ending virtual point.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.VirtualSnapshotSpan.Snapshot">
            <summary>
            The <see cref="T:Microsoft.VisualStudio.Text.ITextSnapshot" /> to which this snapshot span refers.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.VirtualSnapshotSpan.Length">
            <summary>
            The length of this span, taking into account virtual space.
            </summary>
            <remarks>
            If neither endpoint is in virtual space or only the start point is
            in virtual space, this will be equivalent to SnapshotSpan.Length.
            Otherwise, it will include virtual space.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.VirtualSnapshotSpan.GetText">
            <summary>
            The text contained by this virtual snapshot span.
            </summary>
            <returns>A non-null string.</returns>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.VirtualSnapshotSpan.SnapshotSpan">
            <summary>
            Gets the non-virtual SnapshotSpan that this corresponds to.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.VirtualSnapshotSpan.IsInVirtualSpace">
            <summary>
            Determines whether the start or end points are in virtual space.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.VirtualSnapshotSpan.IsEmpty">
            <summary>
            Determines whether the start and end points are in the same place.
            </summary>
            <remarks>
            Because the start and end can both be in virtual space, the non-virtual
            span that this corresponds to can be non-empty at the same time that this
            property returns <c>true</c>.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.VirtualSnapshotSpan.Contains(Microsoft.VisualStudio.Text.VirtualSnapshotPoint)">
            <summary>
            Determines whether or not the given virtual point is contained
            within this virtual span.
            </summary>
            <param name="virtualPoint">
            The virtual point to check.
            </param>
            <returns>
            <c>true</c> if the position is greater than or equal to Start and strictly less 
            than End, otherwise <c>false</c>.
            </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.VirtualSnapshotSpan.Contains(Microsoft.VisualStudio.Text.VirtualSnapshotSpan)">
            <summary>
            Determines whether <paramref name="virtualSpan" /> falls completely within 
            this virtual span.
            </summary>
            <param name="virtualSpan">
            The virtual span to check.
            </param>
            <returns>
            <c>true</c> if the specified span falls completely within this span,
            otherwise <c>false</c>.
            </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.VirtualSnapshotSpan.OverlapsWith(Microsoft.VisualStudio.Text.VirtualSnapshotSpan)">
            <summary>
            Determines whether <paramref name="virtualSpan" /> overlaps this span. Two spans are considered to overlap 
            if they have positions in common and neither is empty. Empty spans do not overlap with any 
            other span.
            </summary>
            <param name="virtualSpan">
            The virtual span to check.
            </param>
            <returns>
            <c>true</c> if the spans overlap, otherwise <c>false</c>.
            </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.VirtualSnapshotSpan.Overlap(Microsoft.VisualStudio.Text.VirtualSnapshotSpan)">
            <summary>
            Returns the overlap with the given virtual span, or null if there is no overlap.
            </summary>
            <param name="virtualSpan">
            The virtual span to check.
            </param>
            <returns>
            The overlap of the spans, or null if the overlap is empty.
            </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.VirtualSnapshotSpan.IntersectsWith(Microsoft.VisualStudio.Text.VirtualSnapshotSpan)">
            <summary>
            Determines whether <paramref name="virtualSpan" /> intersects this span. Two spans are considered to 
            intersect if they have positions in common or the end of one span 
            coincides with the start of the other span.
            </summary>
            <param name="virtualSpan">
            The virtual span to check.
            </param>
            <returns>
            <c>true</c> if the spans intersect, otherwise <c>false</c>.
            </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.VirtualSnapshotSpan.Intersection(Microsoft.VisualStudio.Text.VirtualSnapshotSpan)">
            <summary>
            Returns the intersection with the given virtual span, or null if there is no intersection.
            </summary>
            <param name="virtualSpan">
            The virtual span to check.
            </param>
            <returns>
            The intersection of the spans, or null if the intersection is empty.
            </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.VirtualSnapshotSpan.GetHashCode">
            <summary>
            Gets the hash code for the object.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.VirtualSnapshotSpan.TranslateTo(Microsoft.VisualStudio.Text.ITextSnapshot)">
            <summary>
            Translates this span to the <paramref name="snapshot" />.
            </summary>
            <param name="snapshot">The target snapshot.</param>
            <returns>The corresponding <see cref="T:Microsoft.VisualStudio.Text.VirtualSnapshotSpan" /> in <paramref name="snapshot" />.</returns>
            <exception cref="T:System.ArgumentException"><paramref name="snapshot" /> is for an earlier snapshot.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.VirtualSnapshotSpan.TranslateTo(Microsoft.VisualStudio.Text.ITextSnapshot,Microsoft.VisualStudio.Text.SpanTrackingMode)">
            <summary>
            Translates this span to the <paramref name="snapshot" /> with the given tracking mode.
            </summary>
            <param name="snapshot">The target snapshot.</param>
            <param name="trackingMode">The span tracking mode.</param>
            <returns>The corresponding <see cref="T:Microsoft.VisualStudio.Text.VirtualSnapshotSpan" /> in <paramref name="snapshot" />.</returns>
            <exception cref="T:System.ArgumentException"><paramref name="snapshot" /> is for an earlier snapshot.</exception>
            <remarks>
            <para>
            See <see cref="M:Microsoft.VisualStudio.Text.VirtualSnapshotPoint.TranslateTo(Microsoft.VisualStudio.Text.ITextSnapshot,Microsoft.VisualStudio.Text.PointTrackingMode)" /> for a description of
            how <see cref="T:Microsoft.VisualStudio.Text.VirtualSnapshotPoint" /> translation behaves.
            </para>
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.VirtualSnapshotSpan.GetStartPointMode(Microsoft.VisualStudio.Text.SpanTrackingMode)">
            <summary>
            Get the equivalent PointTrackingMode for our start point for
            the given SpanTrackingMode.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.VirtualSnapshotSpan.GetEndPointMode(Microsoft.VisualStudio.Text.SpanTrackingMode)">
            <summary>
            Get the equivalent PointTrackingMode for our end point for
            the given SpanTrackingMode.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.VirtualSnapshotSpan.ToString">
            <summary>
            Converts the object to a string.
            </summary>
            <returns>The string form of this object.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.VirtualSnapshotSpan.Equals(System.Object)">
            <summary>
            Determines whether two <see cref="T:Microsoft.VisualStudio.Text.VirtualSnapshotSpan" /> objects are the same.
            </summary>
            <param name="obj">The object to compare.</param>
            <returns><c>true</c> if the objects are the same, otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.VirtualSnapshotSpan.op_Equality(Microsoft.VisualStudio.Text.VirtualSnapshotSpan,Microsoft.VisualStudio.Text.VirtualSnapshotSpan)">
            <summary>
            Determines whether two <see cref="T:Microsoft.VisualStudio.Text.VirtualSnapshotSpan" /> objects are the same.
            </summary>
            <param name="left">The first object.</param>
            <param name="right">The second object.</param>
            <returns><c>true</c> if the two objects are the same, otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.VirtualSnapshotSpan.op_Inequality(Microsoft.VisualStudio.Text.VirtualSnapshotSpan,Microsoft.VisualStudio.Text.VirtualSnapshotSpan)">
            <summary>
            Determines whether two <see cref="T:Microsoft.VisualStudio.Text.VirtualSnapshotSpan" /> objects are different.
            </summary>
            <param name="left">The first object.</param>
            <param name="right">The second object.</param>
            <returns><c>true</c> if the two objects are different, otherwise <c>false</c>.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Editor.CommonEditorConstants">
            <summary>
            Constants for interacting with <see cref="T:Microsoft.VisualStudio.Editor.ICommonEditorAssetService" /> and Common Editor languages.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Editor.CommonEditorConstants.AssetName">
            <summary>
            Name used to identify all Common Editor assets.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Editor.CommonEditorConstants.BraceHighlightingTagger">
            <summary>
            Name of the TextMate's brace higlighting tagger provider.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Editor.CommonEditorConstants.ContentTypeName">
            <summary>
            Name of the content type under from which all TextMate based languages are derived.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Editor.CommonEditorConstants.TextMateRepositoryKey">
            <summary>
            Name of the registry key under which new repositories for TextMate grammars can be defined.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Editor.CommonEditorConstants.TextMateLanguageConfigurationGrammarMappingKey">
            <summary>
            Name of the registry key under which new language configuration file for TextMate can be defined when mapping it to a TextMate grammar.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Editor.CommonEditorConstants.TextMateLanguageConfigurationContentTypeMappingKey">
            <summary>
            Name of the registry key under which new language configuration file for TextMate can be defined when mapping it to a content type.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Editor.CommonEditorConstants.TextMateCommentUncommentCommandsContentTypeName">
            <summary>
            Comment/uncomment selection ContentType name. Activates TextMate comment and uncomment selection commands.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Editor.CommonEditorConstants.TextMateIndentationContentTypeName">
            <summary>
            Activates TextMate smart indentation.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Editor.CommonEditorConstants.TextMateBraceContentTypeName">
            <summary>
            Activates TextMate brace completion.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Editor.ICommonEditorAssetMetadata">
            <summary>
            Common Editor asset metadata.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Editor.ICommonEditorAssetMetadata.TagTypes">
            <summary>
            The type of tags supported by the Common Editor asset.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Editor.ICommonEditorAssetService">
            <summary>
            Service produced by <see cref="T:Microsoft.VisualStudio.Editor.ICommonEditorAssetServiceFactory" /> that provides common language service assets.
            </summary>
            <remarks>This class supports the Visual Studio 
            infrastructure and in general is not intended to be used directly from your code.</remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Editor.ICommonEditorAssetService.FindAsset``1(System.Predicate{Microsoft.VisualStudio.Editor.ICommonEditorAssetMetadata})">
            <summary>
            Produces common language service asset.
            </summary>
            <typeparam name="T">
            The type of language service asset to produce. Can be ITaggerProvider, IViewTaggerProvider,
            or ICompletionSource. Use <paramref name="isMatch" /> to find a tagger of the desired type.
            </typeparam>
            <param name="isMatch">Returns true if the <see cref="T:Microsoft.VisualStudio.Editor.ICommonEditorAssetMetadata" /> matches the desired feature.</param>
            <remarks>
            This method supports the Visual Studio infrastructure and in
            general is not intended to be used directly from your code.
            </remarks>
            <returns>A feature of <typeparamref name="T" /> or null if unknown.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Editor.ICommonEditorAssetServiceFactory">
            <summary>
            Service for getting a service that provides common language service elements.
            </summary>
            <remarks>This class supports the Visual Studio 
            infrastructure and in general is not intended to be used directly from your code.</remarks>
            <example>
            This is a MEF component part. Use the code below in your MEF exported class to import an
            instance of the service factory.
            <code>
            [Import]
            private ICommonEditorAssetServiceFactory assetServiceFactory = null;
            </code>
            Then, you can use the code below to get the ITaggerProvider for the Common Editor's
            IClassificationTagger. Modify as needed to get the desired asset.
            <code>
            var factory = this.assetServiceFactory.GetOrCreate(buffer);
            var tagger = factory.FindAsset&lt;ITaggerProvider&gt;(
                (metadata) =&gt; metadata.TagTypes.Any(tagType =&gt; typeof(IClassificationTagger).IsAssignableFrom(tagType)))
                ?.CreateTagger&lt;T&gt;(buffer);
            </code>
            </example>
        </member>
        <member name="M:Microsoft.VisualStudio.Editor.ICommonEditorAssetServiceFactory.GetOrCreate(Microsoft.VisualStudio.Text.ITextBuffer)">
            <summary>
            Gets a service that provides common language service elements.
            </summary>
            <param name="textBuffer">The <see cref="T:Microsoft.VisualStudio.Text.ITextBuffer" /> for which to initialize TextMate.</param>
            <remarks>
            This method supports the Visual Studio infrastructure and in
            general is not intended to be used directly from your code.
            </remarks>
            <returns>An instance of <see cref="T:Microsoft.VisualStudio.Editor.ICommonEditorAssetService" />.</returns>
        </member>
    </members>
<Signature xmlns="http://www.w3.org/2000/09/xmldsig#"><SignedInfo><CanonicalizationMethod Algorithm="http://www.w3.org/TR/2001/REC-xml-c14n-20010315" /><SignatureMethod Algorithm="http://www.w3.org/2001/04/xmldsig-more#rsa-sha256" /><Reference URI=""><Transforms><Transform Algorithm="http://www.w3.org/2000/09/xmldsig#enveloped-signature" /><Transform Algorithm="http://www.w3.org/TR/2001/REC-xml-c14n-20010315" /></Transforms><DigestMethod Algorithm="http://www.w3.org/2001/04/xmlenc#sha256" /><DigestValue>WjTS1wU4M/pTtC2ItVKEtZpn0WhD5UgN1uxrp7SUSiQ=</DigestValue></Reference></SignedInfo><SignatureValue>arDXr92+K64v4aPH2f38gFcyiQWpwojNMVVqR/LAjae1omWigBU+4AoUBBjqWHq/Y0S8mcJwjuUBYyRiueSkKsi2eK5MQAtvwYADb7Ib6wnInZGycLArSQq4ZaKwUDD8Rj/c6zPgjVaRYIJjInCaILbQkqu0R+K64y1dTVmzP8VAbF0Vk7JJPLFoV6Xyyq9MNMkRvtghauV1Hq7k2/qs5hyovjFvZabtL0Zol+9zrDIllOpkqjpWM0aBPlAEs8nIGA2bCyIizocrogqbt2hyD1PjI4VpWykC1hMKfEUf/9cjM4zpV9c+/xZ1ZYFBILsTlfeLNaaL4WtUdKLQO9zj+w==</SignatureValue><KeyInfo><KeyValue><RSAKeyValue><Modulus>zkvLNa2un9GBrYNDoRGkGv7d0PqtTBB4ViYakFbjuWpmF0KcvDAzzaCWJPhVgIXjz+S8cHEoHuWnp/n+UOljT3ehA8Rs6Lb1aTYub3tB/e0txewv2sQ3yscjYdtTBtFvEm9L8Yv76K3Cxzi/Yvrdg+sr7w8y5RHn1Am0Ff8xggY1xpWCXFI+kQM18njQDcUqSlwBnexYfqHBhzz6YXA/S0EziYBu2O2mM7R6gSyYkEOHgIGTVOGnOvvC5xBgC4KNcnQuQSRLiUI2CmzU8vefR6ykruyzt1rNMPI8OqWHQtSDKXU5JNqbk4GNjwzcwbSzOHrxuxWHq91l/vLdVDGDUw==</Modulus><Exponent>AQAB</Exponent></RSAKeyValue></KeyValue><X509Data><X509Certificate>MIIF9DCCA9ygAwIBAgITMwAAA68wQA5Mo00FQQAAAAADrzANBgkqhkiG9w0BAQsFADB+MQswCQYDVQQGEwJVUzETMBEGA1UECBMKV2FzaGluZ3RvbjEQMA4GA1UEBxMHUmVkbW9uZDEeMBwGA1UEChMVTWljcm9zb2Z0IENvcnBvcmF0aW9uMSgwJgYDVQQDEx9NaWNyb3NvZnQgQ29kZSBTaWduaW5nIFBDQSAyMDExMB4XDTIzMTExNjE5MDkwMFoXDTI0MTExNDE5MDkwMFowdDELMAkGA1UEBhMCVVMxEzARBgNVBAgTCldhc2hpbmd0b24xEDAOBgNVBAcTB1JlZG1vbmQxHjAcBgNVBAoTFU1pY3Jvc29mdCBDb3Jwb3JhdGlvbjEeMBwGA1UEAxMVTWljcm9zb2Z0IENvcnBvcmF0aW9uMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAzkvLNa2un9GBrYNDoRGkGv7d0PqtTBB4ViYakFbjuWpmF0KcvDAzzaCWJPhVgIXjz+S8cHEoHuWnp/n+UOljT3ehA8Rs6Lb1aTYub3tB/e0txewv2sQ3yscjYdtTBtFvEm9L8Yv76K3Cxzi/Yvrdg+sr7w8y5RHn1Am0Ff8xggY1xpWCXFI+kQM18njQDcUqSlwBnexYfqHBhzz6YXA/S0EziYBu2O2mM7R6gSyYkEOHgIGTVOGnOvvC5xBgC4KNcnQuQSRLiUI2CmzU8vefR6ykruyzt1rNMPI8OqWHQtSDKXU5JNqbk4GNjwzcwbSzOHrxuxWHq91l/vLdVDGDUwIDAQABo4IBczCCAW8wHwYDVR0lBBgwFgYKKwYBBAGCN0wIAQYIKwYBBQUHAwMwHQYDVR0OBBYEFEcccTTyBDxkjvJKs/m4AgEFhl7BMEUGA1UdEQQ+MDykOjA4MR4wHAYDVQQLExVNaWNyb3NvZnQgQ29ycG9yYXRpb24xFjAUBgNVBAUTDTIzMDAxMis1MDE4MjYwHwYDVR0jBBgwFoAUSG5k5VAF04KqFzc3IrVtqMp1ApUwVAYDVR0fBE0wSzBJoEegRYZDaHR0cDovL3d3dy5taWNyb3NvZnQuY29tL3BraW9wcy9jcmwvTWljQ29kU2lnUENBMjAxMV8yMDExLTA3LTA4LmNybDBhBggrBgEFBQcBAQRVMFMwUQYIKwYBBQUHMAKGRWh0dHA6Ly93d3cubWljcm9zb2Z0LmNvbS9wa2lvcHMvY2VydHMvTWljQ29kU2lnUENBMjAxMV8yMDExLTA3LTA4LmNydDAMBgNVHRMBAf8EAjAAMA0GCSqGSIb3DQEBCwUAA4ICAQCEsRbf80dn60xTweOWHZoWaQdpzSaDqIvqpYHE5ZzuEMJWDdcP72MGw8v6BSaJQ+a+hTCXdERnIBDPKvU4ENjgu4EBJocHlSe8riiZUAR+z+z4OUYqoFd3EqJyfjjOJBR2z94Dy4ss7LEkHUbj2NZiFqBoPYu2OGQvEk+1oaUsnNKZ7Nl7FHtV7CI2lHBru83e4IPe3glIi0XVZJT5qV6Gx/QhAFmpEVBjSAmDdgII4UUwuI9yiX6jJFNOEek6MoeP06LMJtbqA3Bq+ZWmJ033F97uVpyaiS4bj3vFI/ZBgDnMqNDtZjcA2vi4RRMweggd9vsHyTLpn6+nXoLy03vMeebq0C3k44pgUIEuPQUlJIRTe6IrN3GcjaZ6zHGuQGWgu6SyO9r7qkrEpS2pRjnGZjx2RmCamdAWnDdu+DmfNEPAddYjaJJ7PTnd+PGzG+WeH4ocWgVnm5fJFhItjj70CJjgHqt57e1FiQcyWCwBhKX2rGgN2UICHBF3Q/rsKOspjMw2OlGphTn2KmFl5J7cQxru54A9roClLnHGCiSUYos/iwFHI/dAVXEh0S0KKfTfM6AC6/9bCbsD61QLcRzRIElvgCgaiMWFjOBL99pemoElAHsyzG6uX93fMfas09N9YzA0/rFAKAsNDOcFbQlEHKiDT7mI20tVoCcmSIhJAQ==</X509Certificate><X509Certificate>MIIHejCCBWKgAwIBAgIKYQ6Q0gAAAAAAAzANBgkqhkiG9w0BAQsFADCBiDELMAkGA1UEBhMCVVMxEzARBgNVBAgTCldhc2hpbmd0b24xEDAOBgNVBAcTB1JlZG1vbmQxHjAcBgNVBAoTFU1pY3Jvc29mdCBDb3Jwb3JhdGlvbjEyMDAGA1UEAxMpTWljcm9zb2Z0IFJvb3QgQ2VydGlmaWNhdGUgQXV0aG9yaXR5IDIwMTEwHhcNMTEwNzA4MjA1OTA5WhcNMjYwNzA4MjEwOTA5WjB+MQswCQYDVQQGEwJVUzETMBEGA1UECBMKV2FzaGluZ3RvbjEQMA4GA1UEBxMHUmVkbW9uZDEeMBwGA1UEChMVTWljcm9zb2Z0IENvcnBvcmF0aW9uMSgwJgYDVQQDEx9NaWNyb3NvZnQgQ29kZSBTaWduaW5nIFBDQSAyMDExMIICIjANBgkqhkiG9w0BAQEFAAOCAg8AMIICCgKCAgEAq/D6chAcLq3YbqqCEE00uvK2WCGfQhsqa+laUKq4BjgaBEm6f8MMHt03a8YS2AvwOMKZBrDIOdUBFDFC04kNeWSHfpRgJGyvnkmc6Whe0t+bU7IKLMOv2akrrnoJr9eWWcpgGgXpZnboMlImEi/nqwhQz7NEt13YxC4Ddato88tt8zpcoRb0RrrgOGSsbmQ1eKagYw8t00CT+OPeBw3VXHmlSSnnDb6gE3e+lD3v++MrWhAfTVYoonpy4BI6t0le2O3tQ5GD2Xuye4Yb2T6xjF3oiU+EGvKhL1nkkDstrjNYxbc+/jLTswM9sbKvkjh+0p2ALPVOVpEhNSXDOW5kf1O6nA+tGSOEy/S6A4aN91/w0FK/jJSHvMAhdCVfGCi2zCcoOCWYOUo2z3yxkq4cI6epZuxhH2rhKEmdX4jiJV3TIUs+UsS1Vz8kA/DRelsv1SPjcF0PUUZ3s/gA4bysAoJf28AVs70b1FVL5zmhD+kjSbwYuER8ReTBw3J64HLnJN+/RpnF78IcV9uDjexNSTCnq47f7Fufr/zdsGbiwZeBe+3W7UvnSSmnEyimp31ngOaKYnhfsi+E11ecXL93KCjx7W3DKI8sj0A3T8HhhUSJxAlMxdSlQy90lfdu+HggWCwTXWCVmj5PM4TasIgX3p5O9JawvEagbJjS4NaIjAsCAwEAAaOCAe0wggHpMBAGCSsGAQQBgjcVAQQDAgEAMB0GA1UdDgQWBBRIbmTlUAXTgqoXNzcitW2oynUClTAZBgkrBgEEAYI3FAIEDB4KAFMAdQBiAEMAQTALBgNVHQ8EBAMCAYYwDwYDVR0TAQH/BAUwAwEB/zAfBgNVHSMEGDAWgBRyLToCMZBDuRQFTuHqp8cx0SOJNDBaBgNVHR8EUzBRME+gTaBLhklodHRwOi8vY3JsLm1pY3Jvc29mdC5jb20vcGtpL2NybC9wcm9kdWN0cy9NaWNSb29DZXJBdXQyMDExXzIwMTFfMDNfMjIuY3JsMF4GCCsGAQUFBwEBBFIwUDBOBggrBgEFBQcwAoZCaHR0cDovL3d3dy5taWNyb3NvZnQuY29tL3BraS9jZXJ0cy9NaWNSb29DZXJBdXQyMDExXzIwMTFfMDNfMjIuY3J0MIGfBgNVHSAEgZcwgZQwgZEGCSsGAQQBgjcuAzCBgzA/BggrBgEFBQcCARYzaHR0cDovL3d3dy5taWNyb3NvZnQuY29tL3BraW9wcy9kb2NzL3ByaW1hcnljcHMuaHRtMEAGCCsGAQUFBwICMDQeMiAdAEwAZQBnAGEAbABfAHAAbwBsAGkAYwB5AF8AcwB0AGEAdABlAG0AZQBuAHQALiAdMA0GCSqGSIb3DQEBCwUAA4ICAQBn8oalmOBUeRou09h0ZyKbC5YR4WOSmUKWfdJ5DJDBZV8uLD74w3LRbYP+vj/oCso7v0epo/Np22O/IjWll11lhJB9i0ZQVdgMknzSGksc8zxCi1LQsP1r4z4HLimb5j0bpdS1HXeUOeLpZMlEPXh6I/MTfaaQdION9MsmAkYqwooQu6SpBQyb7Wj6aC6VoCo/KmtYSWMfCWluWpiW5IP0wI/zRive/DvQvTXvbiWu5a8n7dDd8w6vmSiXmE0OPQvyCInWH8MyGOLwxS3OW560STkKxgrCxq2u5bLZ2xWIUUVYODJxJxp/sfQn+N4sOiBpmLJZiWhub6e3dMNABQamASooPoI/E01mC8CzTfXhj38cbxV9Rad25UAqZaPDXVJihsMdYzaXht/a8/jyFqGaJ+HNpZfQ7l1jQeNbB5yHPgZ3BtEGsXUfFL5hYbXw3MYbBL7fQccOKO7eZS/sl/ahXJbYANahRr1Z85elCUtIEJmAH9AAKcWxm6U/RXceNcbSoqKfenoi+kiVH6v7RyOA9Z74v2u3S5fi63V4GuzqN5l5GEv/1rMjaHXmr/r8i+sLgOppO6/8MO0ETI7f33VtY5E90Z1WTk+/gFcioXgRMiF670EKsT/7qMykXcGhiJtXcVZOSEXAQsmbdlsKgEhr/Xmfwb1tbWrJUnMTDXpQzQ==</X509Certificate><X509Certificate>MIIF7TCCA9WgAwIBAgIQP4vItfyfspZDtWnWbELhRDANBgkqhkiG9w0BAQsFADCBiDELMAkGA1UEBhMCVVMxEzARBgNVBAgTCldhc2hpbmd0b24xEDAOBgNVBAcTB1JlZG1vbmQxHjAcBgNVBAoTFU1pY3Jvc29mdCBDb3Jwb3JhdGlvbjEyMDAGA1UEAxMpTWljcm9zb2Z0IFJvb3QgQ2VydGlmaWNhdGUgQXV0aG9yaXR5IDIwMTEwHhcNMTEwMzIyMjIwNTI4WhcNMzYwMzIyMjIxMzA0WjCBiDELMAkGA1UEBhMCVVMxEzARBgNVBAgTCldhc2hpbmd0b24xEDAOBgNVBAcTB1JlZG1vbmQxHjAcBgNVBAoTFU1pY3Jvc29mdCBDb3Jwb3JhdGlvbjEyMDAGA1UEAxMpTWljcm9zb2Z0IFJvb3QgQ2VydGlmaWNhdGUgQXV0aG9yaXR5IDIwMTEwggIiMA0GCSqGSIb3DQEBAQUAA4ICDwAwggIKAoICAQCygEGqNThNE3IyaCJNuLLx/9VSvGzH9dJKjDbu0cJcfoyKrq8TKG/Ac+M6ztAlqFo6be+ouFmrEyNozQwph9FvgFyPRH9dkAFSWKxRxV8qh9zc2AodwQO5e7BW6KPeZGHCnvjzfLnsDbVU/ky2ZU+I8JxImQxCCwl8MVkXeQZ4KI2JOkwDJb5xalwL54RgpJki49KvhKSn+9GY7Qyp3pSJ4Q6g3MDOmT3qCFK7VnnkH4S6Hri0xElcTzFLh93dBWcmmYDgcRGjuKVB4qRTufcyKYMME782XgSzS0NHL2vikR7TmE/dQgfI6B0S/Jmpaz6SfsjWaTr8ZL22CZ3K/QwLopt3YEsDlKQwaRLWQi3BQUzK3Kr9j1uDRprZ/LHR47PJf0h6zSTwQY9cdNCssBAgBkm3xy0hyFfj0IbzA2j70M5xwYmZSmQBbP3sMJHPQTySx+W6hh1hhMdfgzlirrSSL0fzC/hV66AfWdC7dJse0Hbm8ukG1xDo+mTeacY1logC8Ea4PyeZb8txiSk190gWAjWP1Xl8TQLPX+uKg09FcYj5qQ1OcunCnAfPSRtOBA5jUYxe2ADBVSy2xuDCZU7JNDn1nLPEfuhhbhNfFcRf2X7tHc7uROzLLoax7Dj2cO2rXBPB2Q8Nx4CyVe0096yb5MPa50c8prWPMd/FS6/r8QIDAQABo1EwTzALBgNVHQ8EBAMCAYYwDwYDVR0TAQH/BAUwAwEB/zAdBgNVHQ4EFgQUci06AjGQQ7kUBU7h6qfHMdEjiTQwEAYJKwYBBAGCNxUBBAMCAQAwDQYJKoZIhvcNAQELBQADggIBAH9yzw+3xRXbm8BJyiZb/p4T5tPw0tuXX/JLP02zrhmu7deXoKzvqTqjwkGw5biRnhOBJAPmCf0/V0A5ISRW0RAvS0CpNoZLtFNXmvvxfomPEf4YbFGq6O0JlbXlccmh6Yd1phV/yX43VF50k8XDZ8wNT2uoFwxtCJJ+i92Bqi1wIcM9BhS7vyRep4TXPw8hIr1LAAbblxzYXtTFC1yHblCk6MM4pPvLLMWSZpuFXst6bJN8gClYW1e1QGm6CHmmZGIVnYeWRbVmIyADixxzoNOieTPgUFmG2y/lAiXqcyqfABTINseSO+lOAOzYVgm5M0kS0lQLAausR7aRKX1MtHWAUgHoyoL2n8ysnI8X6i8msKtyrAv+nlEex0NVZ09Rs1fWtuzuUrc66U7h14GIvE+OdbtLqPA1qibUZ2dJsnBMO5PcHd94kIZysjik0dySTclY6ysSXNQ7roxrsIPlAT/4CTL2kzU0Iq/dNw13CYArzUgA8YyZGUcFAenRv9FO0OYoQzeZpApKCNmacXPSqs0xE2N2oTdvkjgefRI8ZjLny23h/FKJ3crWZgWalmG+oijHHKOnNlA8OqTfSm7mhzvO6/DggTedEzxSjr25HTTGHdUKaj2YKXCMiSrRq4IQSB/c9O+lxbtVGjhjhE63bK2VVOxlIhBJF7jAHscPrFRH</X509Certificate></X509Data></KeyInfo><Object Id="ts-countersig"><X509Data><X509Certificate>MIIHIDCCBQigAwIBAgITMwAAAe3hX8vV96VdcwABAAAB7TANBgkqhkiG9w0BAQsFADB8MQswCQYDVQQGEwJVUzETMBEGA1UECBMKV2FzaGluZ3RvbjEQMA4GA1UEBxMHUmVkbW9uZDEeMBwGA1UEChMVTWljcm9zb2Z0IENvcnBvcmF0aW9uMSYwJAYDVQQDEx1NaWNyb3NvZnQgVGltZS1TdGFtcCBQQ0EgMjAxMDAeFw0yMzEyMDYxODQ1NDFaFw0yNTAzMDUxODQ1NDFaMIHLMQswCQYDVQQGEwJVUzETMBEGA1UECBMKV2FzaGluZ3RvbjEQMA4GA1UEBxMHUmVkbW9uZDEeMBwGA1UEChMVTWljcm9zb2Z0IENvcnBvcmF0aW9uMSUwIwYDVQQLExxNaWNyb3NvZnQgQW1lcmljYSBPcGVyYXRpb25zMScwJQYDVQQLEx5uU2hpZWxkIFRTUyBFU046ODkwMC0wNUUwLUQ5NDcxJTAjBgNVBAMTHE1pY3Jvc29mdCBUaW1lLVN0YW1wIFNlcnZpY2UwggIiMA0GCSqGSIb3DQEBAQUAA4ICDwAwggIKAoICAQCoMMJskrrqapycLxPC1H7zD7g88NpbEaQ6SjcTIRbzCVyYQNsz8TaL1pqFTEAPL1X7ojL4/EaEW+UjNqZs/ayMyW4YIpFPZP2x4FBMVCddseF2i+aMMjDHi0LcTQZxM2s3mFMrCZAWSfLYXYDIimFBz8j0oLWGy3VgLmBTKM4xLqv7DZUz8B2SoAmbEtp62ngSl0hOoN73SFwE+Y24SvGQMWhykpG+vXDwcpWvwDe+TgnrLR7ATRFXN5JS26dm2yy6SYFMRYnME3dMHCQ/UQIQQNC8nLmIvdKkAoWEMXtJsGEo3QrM2S2SBv4PpHRzRukzTtP+UAceGxM9JyrwUQP5OCEmW6YchEyRDSwP4hU9f7B0Ayh14Pw9vJo7jewNjeMPIkmneyLSi0ruv2ox/xRGtcJ9yBNC5BaRktjz7stPaojR+PDA2fuBtCo8xKlkt53mUb7AY+CZHHqhLm76pdMF6BHv2TvwlVBeQRN22XjaVVRwCgjgJnNewt7PejcrpUn0qHLgLq+1BN1DzYukWkTr7wT0zl0iXr+NtqUkWSOnWRfe8N21tB6uv3VkW8nFdChtbbZZz24peLtJEZuNrN8Xf9PTPMzZXDJBI1EciR/91QcGoZFmVbFVb2rUIAs01+ZkewvbhmGVDefX9oZG4/K4gGUsTvTW+r1JZMxUT2MwqQIDAQABo4IBSTCCAUUwHQYDVR0OBBYEFM4b8Oz33hAqBEfKlAZf0NKh4CIZMB8GA1UdIwQYMBaAFJ+nFV0AXmJdg/Tl0mWnG1M1GelyMF8GA1UdHwRYMFYwVKBSoFCGTmh0dHA6Ly93d3cubWljcm9zb2Z0LmNvbS9wa2lvcHMvY3JsL01pY3Jvc29mdCUyMFRpbWUtU3RhbXAlMjBQQ0ElMjAyMDEwKDEpLmNybDBsBggrBgEFBQcBAQRgMF4wXAYIKwYBBQUHMAKGUGh0dHA6Ly93d3cubWljcm9zb2Z0LmNvbS9wa2lvcHMvY2VydHMvTWljcm9zb2Z0JTIwVGltZS1TdGFtcCUyMFBDQSUyMDIwMTAoMSkuY3J0MAwGA1UdEwEB/wQCMAAwFgYDVR0lAQH/BAwwCgYIKwYBBQUHAwgwDgYDVR0PAQH/BAQDAgeAMA0GCSqGSIb3DQEBCwUAA4ICAQCd1gK2Rd+eGL0eHi+iE6/qDY8sbbsO4emancp6KPN+xq5ZAatiBR4jmRRhm+9Vik0Fo0DLWi/N28bFI7dXYw09p3vCipbjy4Eoifm0Nud7/4U30i9+7RvW7XOQ3rx37+U7vq9lk6yYpGCNp0jlJ188/CuRPgqJnfq5EdeafH2AoG46hKWTeB7DuXasGt6spJOenGedSre34MWZqeTIQ0raOItZnFuGDy4+xoD1qRz2QW+u2gCHaG8AQjhYUM4uTi9t6kttj6c7Xamr2zrWuceDhz7sKLttLTJ7ws5YrA2I8cTlbMAf2KW0GVjKbYGd+LZGduEK7/7fs4GUkMqc51FsNdG1n+zgc7zHu2oGGeCBg4s8ZR0ZFyx7jsgm9sSFCKQ5CsbAvlr/60Ndk5TeMR8Js2kNUicu2CqZ03833TsvTgk7iD1KLgfS16HEvjN6m4VKJKgjJ7OJJzabtS4JQgUnJrIZfyosk4D18rZni9pUwN03WgTmd10WTwiZOu4g8Un6iKcPMY/iFqTu4ntkzFUxBBpbFG6k1CINZmoirEWmCtG3lyZ2IddmjtIefTkIvGWb4Jxzz7l2m/E2kGOixDJHsahZVmwsoNvhy5ku/inU++dXHzw+hlvqTSFT89rIFVhcmsWPDJPNRSSpMhoJ33V2Za/lkKcbkUM0SbQgS9qsdw==</X509Certificate><X509Certificate>MIIHcTCCBVmgAwIBAgITMwAAABXF52ueAptJmQAAAAAAFTANBgkqhkiG9w0BAQsFADCBiDELMAkGA1UEBhMCVVMxEzARBgNVBAgTCldhc2hpbmd0b24xEDAOBgNVBAcTB1JlZG1vbmQxHjAcBgNVBAoTFU1pY3Jvc29mdCBDb3Jwb3JhdGlvbjEyMDAGA1UEAxMpTWljcm9zb2Z0IFJvb3QgQ2VydGlmaWNhdGUgQXV0aG9yaXR5IDIwMTAwHhcNMjEwOTMwMTgyMjI1WhcNMzAwOTMwMTgzMjI1WjB8MQswCQYDVQQGEwJVUzETMBEGA1UECBMKV2FzaGluZ3RvbjEQMA4GA1UEBxMHUmVkbW9uZDEeMBwGA1UEChMVTWljcm9zb2Z0IENvcnBvcmF0aW9uMSYwJAYDVQQDEx1NaWNyb3NvZnQgVGltZS1TdGFtcCBQQ0EgMjAxMDCCAiIwDQYJKoZIhvcNAQEBBQADggIPADCCAgoCggIBAOThpkzntHIhC3miy9ckeb0O1YLT/e6cBwfSqWxOdcjKNVf2AX9sSuDivbk+F2Az/1xPx2b3lVNxWuJ+Slr+uDZnhUYjDLWNE893MsAQGOhgfWpSg0S3po5GawcU88V29YZQ3MFEyHFcUTE3oAo4bo3t1w/YJlN8OWECesSq/XJprx2rrPY2vjUmZNqYO7oaezOtgFt+jBAcnVL+tuhiJdxqD89d9P6OU8/W7IVWTe/dvI2k45GPsjksUZzpcGkNyjYtcI4xyDUoveO0hyTD4MmPfrVUj9z6BVWYbWg7mka97aSueik3rMvrg0XnRm7KMtXAhjBcTyziYrLNueKNiOSWrAFKu75xqRdbZ2De+JKRHh09/SDPc31BmkZ1zcRfNN0Sidb9pSB9fvzZnkXftnIv231fgLrbqn427DZM9ituqBJR6L8FA6PRc6ZNN3SUHDSCD/AQ8rdHGO2n6Jl8P0zbr17C89XYcz1DTsEzOUyOArxCaC4Q6oRRRuLRvWoYWmEBc8pnol7XKHYC4jMYctenIPDC+hIK12NvDMk2ZItboKaDIV1fMHSRlJTYuVD5C4lh8zYGNRiER9vcG9H9stQcxWv2XFJRXRLbJbqvUAV6bMURHXLvjflSxIUXk8A8FdsaN8cIFRg/eKtFtvUeh17aj54WcmnGrnu3tz5q4i6tAgMBAAGjggHdMIIB2TASBgkrBgEEAYI3FQEEBQIDAQABMCMGCSsGAQQBgjcVAgQWBBQqp1L+ZMSavoKRPEY1Kc8Q/y8E7jAdBgNVHQ4EFgQUn6cVXQBeYl2D9OXSZacbUzUZ6XIwXAYDVR0gBFUwUzBRBgwrBgEEAYI3TIN9AQEwQTA/BggrBgEFBQcCARYzaHR0cDovL3d3dy5taWNyb3NvZnQuY29tL3BraW9wcy9Eb2NzL1JlcG9zaXRvcnkuaHRtMBMGA1UdJQQMMAoGCCsGAQUFBwMIMBkGCSsGAQQBgjcUAgQMHgoAUwB1AGIAQwBBMAsGA1UdDwQEAwIBhjAPBgNVHRMBAf8EBTADAQH/MB8GA1UdIwQYMBaAFNX2VsuP6KJcYmjRPZSQW9fOmhjEMFYGA1UdHwRPME0wS6BJoEeGRWh0dHA6Ly9jcmwubWljcm9zb2Z0LmNvbS9wa2kvY3JsL3Byb2R1Y3RzL01pY1Jvb0NlckF1dF8yMDEwLTA2LTIzLmNybDBaBggrBgEFBQcBAQROMEwwSgYIKwYBBQUHMAKGPmh0dHA6Ly93d3cubWljcm9zb2Z0LmNvbS9wa2kvY2VydHMvTWljUm9vQ2VyQXV0XzIwMTAtMDYtMjMuY3J0MA0GCSqGSIb3DQEBCwUAA4ICAQCdVX38Kq3hLB9nATEkW+Geckv8qW/qXBS2Pk5HZHixBpOXPTEztTnXwnE2P9pkbHzQdTltuw8x5MKP+2zRoZQYIu7pZmc6U03dmLq2HnjYNi6cqYJWAAOwBb6J6Gngugnue99qb74py27YP0h1AdkY3m2CDPVtI1TkeFN1JFe53Z/zjj3G82jfZfakVqr3lbYoVSfQJL1AoL8ZthISEV09J+BAljis9/kpicO8F7BUhUKz/AyeixmJ5/ALaoHCgRlCGVJ1ijbCHcNhcy4sa3tuPywJeBTpkbKpW99Jo3QMvOyRgNI95ko+ZjtPu4b6MhrZlvSP9pEB9s7GdP32THJvEKt1MMU0sHrYUP4KWN1APMdUbZ1jdEgssU5HLcEUBHG/ZPkkvnNtyo4JvbMBV0lUZNlz138eW0QBjloZkWsNn6Qo3GcZKCS6OEuabvshVGtqRRFHqfG3rsjoiV5PndLQTHa1V1QJsWkBRH58oWFsc/4Ku+xBZj1p/cvBQUl+fpO+y/g75LcVv7TOPqUxUYS8vwLBgqJ7Fx0ViY1w/ue10CgaiQuPNtq6TPmb/wrpNPgkNWcr4A245oyZ1uEi6vAnQj0llOZ0dFtq0Z4+7X6gMTN9vMvpe784cETRkPHIqzqKOghif9lwY1NNje6CbaUFEMFxBmoQtB1VM1izoXBm8g==</X509Certificate></X509Data><CounterSignature ts-format="cms-timestamp-message" xmlns="http://schemas.microsoft.com/xmldsig/timestamp/2003"></CounterSignature></Object></Signature></doc>
