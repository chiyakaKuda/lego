<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Microsoft.VisualStudio.Language.Intellisense</name>
    </assembly>
    <members>
        <member name="T:Microsoft.VisualStudio.Language.Intellisense.BulkObservableCollection`1">
            <summary>
            Represents an ObservableCollection that allows the AddRange operation.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Language.Intellisense.BulkObservableCollection`1.#ctor">
            <summary>
            Initializes a new instance of a <see cref="T:Microsoft.VisualStudio.Language.Intellisense.BulkObservableCollection`1" />.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Language.Intellisense.BulkObservableCollection`1.AddRange(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Adds a list of items to the ObservableCollection without firing an event for each item.
            </summary>
            <param name="items">A list of items to add.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Language.Intellisense.BulkObservableCollection`1.BeginBulkOperation">
            <summary>
            Suspends change events on the collection in order to perform a bulk change operation.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Language.Intellisense.BulkObservableCollection`1.EndBulkOperation">
            <summary>
            Restores change events on the collection after a bulk change operation has been completed.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Language.Intellisense.BulkObservableCollection`1.AsReadOnly">
            <summary>
            Gets a read-only version of the collection.
            </summary>
            <returns>A read-only version of the collection.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Language.Intellisense.BulkObservableCollection`1.OnPropertyChanged(System.ComponentModel.PropertyChangedEventArgs)">
            <summary>
            Occurs when a property on the collection has changed.
            </summary>
            <param name="e">The event arguments.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Language.Intellisense.BulkObservableCollection`1.OnCollectionChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Occurs when the collection has changed.
            </summary>
            <param name="e">The event arguments.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Language.Intellisense.BulkObservableCollection`1.SetItem(System.Int32,`0)">
            <summary>
            Replaces the item at the specified index.
            </summary>
            <param name="index">The place at which to replace the item.</param>
            <param name="item">The item to replace.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Language.Intellisense.BulkObservableCollection`1.InsertItem(System.Int32,`0)">
            <summary>
            Inserts an item at the specified index.
            </summary>
            <param name="index">The location at which to insert the item.</param>
            <param name="item">The item to insert.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Language.Intellisense.BulkObservableCollection`1.MoveItem(System.Int32,System.Int32)">
            <summary>
            Moves the item from one location to another.
            </summary>
            <param name="oldIndex">The original location.</param>
            <param name="newIndex">The new location.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Language.Intellisense.BulkObservableCollection`1.RemoveItem(System.Int32)">
            <summary>
            Removes an item from the collection at the specified location.
            </summary>
            <param name="index">The location at which to remove the item.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Language.Intellisense.BulkObservableCollection`1.ClearItems">
            <summary>
            Removes all items from the collection.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Language.Intellisense.Completion">
            <summary>
            Represents an item in a completion set. 
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Language.Intellisense.Completion.#ctor">
            <summary>
            Initializes a new instance of <see cref="T:Microsoft.VisualStudio.Language.Intellisense.Completion" />.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Language.Intellisense.Completion.#ctor(System.String)">
            <summary>
            Initializes a new instance of <see cref="T:Microsoft.VisualStudio.Language.Intellisense.Completion" /> with the specified text and description.
            </summary>
            <param name="displayText">The text that is to be displayed by an IntelliSense presenter.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Language.Intellisense.Completion.#ctor(System.String,System.String,System.String,System.Windows.Media.ImageSource,System.String)">
            <summary>
            Initializes a new instance of <see cref="T:Microsoft.VisualStudio.Language.Intellisense.Completion" /> with the specified text and description.
            </summary>
            <param name="displayText">The text that is to be displayed by an IntelliSense presenter.</param>
            <param name="insertionText">The text that is to be inserted into the buffer if this completion is committed.</param>
            <param name="description">A description that could be displayed with the display text of the completion.</param>
            <param name="iconSource">The icon to describe the completion item.</param>
            <param name="iconAutomationText">The automation name for the icon.</param>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.Intellisense.Completion.DisplayText">
            <summary>
            Gets/Sets the text that is to be displayed by an IntelliSense presenter.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.Intellisense.Completion.InsertionText">
            <summary>
            Gets/Sets the text that is to be inserted into the buffer if this completion is committed.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.Intellisense.Completion.Description">
            <summary>
            Gets/Sets a description that could be displayed with the display text of the completion.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.Intellisense.Completion.IconSource">
            <summary>
            Gets/Sets an icon that could be used to describe the completion.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.Intellisense.Completion.IconAutomationText">
            <summary>
            Gets/Sets the text to be used as the automation name for the icon when it's displayed.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.Intellisense.Completion.Properties">
            <summary>
            Gets the properties of the completion.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Language.Intellisense.Completion2">
            <summary>
            Completion2 adds an additional context icon to the completion.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Language.Intellisense.Completion2.#ctor">
            <summary>
            Initializes a new instance of <see cref="T:Microsoft.VisualStudio.Language.Intellisense.Completion2" />.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Language.Intellisense.Completion2.#ctor(System.String,System.String,System.String,System.Windows.Media.ImageSource,System.String)">
            <summary>
            Initializes a new instance of <see cref="T:Microsoft.VisualStudio.Language.Intellisense.Completion2" /> with the specified text and description.
            </summary>
            <param name="displayText">The text that is to be displayed by an IntelliSense presenter.</param>
            <param name="insertionText">The text that is to be inserted into the buffer if this completion is committed.</param>
            <param name="description">A description that could be displayed with the display text of the completion.</param>
            <param name="iconSource">The icon to describe the completion item.</param>
            <param name="iconAutomationText">The automation name for the icon.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Language.Intellisense.Completion2.#ctor(System.String,System.String,System.String,System.Windows.Media.ImageSource,System.String,System.Collections.Generic.IEnumerable{Microsoft.VisualStudio.Language.Intellisense.CompletionIcon})">
            <summary>
            Initializes a new instance of <see cref="T:Microsoft.VisualStudio.Language.Intellisense.Completion2" /> with the specified text and description.
            </summary>
            <param name="displayText">The text that is to be displayed by an IntelliSense presenter.</param>
            <param name="insertionText">The text that is to be inserted into the buffer if this completion is committed.</param>
            <param name="description">A description that could be displayed with the display text of the completion.</param>
            <param name="iconSource">The icon to describe the completion item.</param>
            <param name="iconAutomationText">The automation name for the icon.</param>
            <param name="attributeIcons">Additional icons shown to the right of the DisplayText.</param>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.Intellisense.Completion2.AttributeIcons">
            <summary>
            Gets or sets the additional icons displayed for this completion item.
            </summary>
            <remarks>Returns null if no attribute icons were provided.</remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.Language.Intellisense.Completion3">
            <summary>
            Completion3 uses <see cref="T:Microsoft.VisualStudio.Imaging.Interop.ImageMoniker" />s instead of <see cref="T:System.Windows.Media.ImageSource" />s to reference icons.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Language.Intellisense.Completion3.#ctor">
            <summary>
            Initializes a new instance of <see cref="T:Microsoft.VisualStudio.Language.Intellisense.Completion3" />.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Language.Intellisense.Completion3.#ctor(System.String,System.String,System.String,Microsoft.VisualStudio.Imaging.Interop.ImageMoniker,System.String)">
            <summary>
            Initializes a new instance of <see cref="T:Microsoft.VisualStudio.Language.Intellisense.Completion3" /> with the specified text and description.
            </summary>
            <param name="displayText">The text that is to be displayed by an IntelliSense presenter.</param>
            <param name="insertionText">The text that is to be inserted into the buffer if this completion is committed.</param>
            <param name="description">A description that could be displayed with the display text of the completion.</param>
            <param name="iconMoniker">The icon to describe the completion item.</param>
            <param name="iconAutomationText">The automation name for the icon.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Language.Intellisense.Completion3.#ctor(System.String,System.String,System.String,Microsoft.VisualStudio.Imaging.Interop.ImageMoniker,System.String,System.Collections.Generic.IEnumerable{Microsoft.VisualStudio.Language.Intellisense.CompletionIcon2})">
            <summary>
            Initializes a new instance of <see cref="T:Microsoft.VisualStudio.Language.Intellisense.Completion3" /> with the specified text, description, and icon.
            </summary>
            <param name="displayText">The text that is to be displayed by an IntelliSense presenter.</param>
            <param name="insertionText">The text that is to be inserted into the buffer if this completion is committed.</param>
            <param name="description">A description that could be displayed with the display text of the completion.</param>
            <param name="iconMoniker">The icon to describe the completion item.</param>
            <param name="iconAutomationText">The automation name for the icon.</param>
            <param name="attributeIcons">Additional icons shown to the right of the DisplayText.</param>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.Intellisense.Completion3.IconMoniker">
            <summary>
            Gets or sets the moniker used to define a multi-resolution image.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.Intellisense.Completion3.IconSource">
            <summary>
            This property is not supported by <see cref="T:Microsoft.VisualStudio.Language.Intellisense.Completion3" /> and will always return <value>null</value>.
            To get the current icon use <see cref="P:Microsoft.VisualStudio.Language.Intellisense.Completion3.IconMoniker" />.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Language.Intellisense.Completion4">
            <summary>
            Completion4 adds the Suffix property, which is the text displayed to the right of the display text (with different text properties).
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Language.Intellisense.Completion4.#ctor">
            <summary>
            Initializes a new instance of <see cref="T:Microsoft.VisualStudio.Language.Intellisense.Completion4" />.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Language.Intellisense.Completion4.#ctor(System.String,System.String,System.String,Microsoft.VisualStudio.Imaging.Interop.ImageMoniker,System.String,System.Collections.Generic.IEnumerable{Microsoft.VisualStudio.Language.Intellisense.CompletionIcon2},System.String)">
            <summary>
            Initializes a new instance of <see cref="T:Microsoft.VisualStudio.Language.Intellisense.Completion4" /> with the specified text and description.
            </summary>
            <param name="displayText">The text that is to be displayed by an IntelliSense presenter.</param>
            <param name="insertionText">The text that is to be inserted into the buffer if this completion is committed.</param>
            <param name="description">A description that could be displayed with the display text of the completion.</param>
            <param name="iconMoniker">The icon to describe the completion item.</param>
            <param name="iconAutomationText">The automation name for the icon.</param>
            <param name="attributeIcons">Additional icons shown to the right of the DisplayText.</param>
            <param name="suffix">Additional text to be shown to the right of the DisplayText.</param>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.Intellisense.Completion4.Suffix">
            <summary>
            The text to be displayed to the right of the DisplayText (and before the attributeIcons).
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Language.Intellisense.CompletionIcon">
            <summary>
            Represents an icon used in the completion.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Language.Intellisense.CompletionIcon.#ctor">
            <summary>
            Initializes a new instance of <see cref="T:Microsoft.VisualStudio.Language.Intellisense.CompletionIcon" />.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Language.Intellisense.CompletionIcon.#ctor(System.Windows.Media.ImageSource,System.String,System.String,System.Int32)">
            <summary>
            Initializes a new instance of <see cref="T:Microsoft.VisualStudio.Language.Intellisense.CompletionIcon" /> with the given image, automation values, and position.
            </summary>
            <param name="imageSource">The icon to describe the completion item.</param>
            <param name="automationName">The automation name for the icon.</param>
            <param name="automationId">The automation id for the icon.</param>
            <param name="position">The display position of the icon. If no value is provided this will be zero.</param>
        </member>
        <member name="T:Microsoft.VisualStudio.Language.Intellisense.CompletionIcon2">
            <summary>
            CompletionIcon2 uses <see cref="T:Microsoft.VisualStudio.Imaging.Interop.ImageMoniker" />s instead of <see cref="T:System.Windows.Media.ImageSource" />s to reference icons.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Language.Intellisense.CompletionIcon2.#ctor">
            <summary>
            Initializes a new instance of <see cref="T:Microsoft.VisualStudio.Language.Intellisense.CompletionIcon2" />.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Language.Intellisense.CompletionIcon2.#ctor(Microsoft.VisualStudio.Imaging.Interop.ImageMoniker,System.String,System.String,System.Int32)">
            <summary>
            Initializes a new instance of <see cref="T:Microsoft.VisualStudio.Language.Intellisense.CompletionIcon2" /> with the given image, automation values, and position.
            </summary>
            <param name="imageMoniker">The moniker for the icon that describes the completion item.</param>
            <param name="automationName">The automation name for the icon.</param>
            <param name="automationId">The automation id for the icon.</param>
            <param name="position">The display position of the icon. If no value is provided this will be zero.</param>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.Intellisense.CompletionIcon2.IconMoniker">
            <summary>
            Gets or sets the moniker used to define a multi-resolution image.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.Intellisense.CompletionIcon2.IconSource">
            <summary>
            This property is not supported by <see cref="T:Microsoft.VisualStudio.Language.Intellisense.CompletionIcon2" /> and will always return <value>null</value>.
            To get the current icon use <see cref="P:Microsoft.VisualStudio.Language.Intellisense.CompletionIcon2.IconMoniker" />.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Language.Intellisense.CompletionMatchType">
            <summary>
            Defines the types of matching that can be done on completion items.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Language.Intellisense.CompletionMatchType.MatchDisplayText">
            <summary>
            Match the display text of the completion.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Language.Intellisense.CompletionMatchType.MatchInsertionText">
            <summary>
            Match the insertion text of the completion.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Language.Intellisense.CompletionPresenterStyle">
            <summary>
             Defines a set of properties that will be used to style the default completion presenter.
            </summary>
             <remarks>
             This is a MEF component part, and should be exported with the following attributes:
             [Export(typeof(CompletionPresenterStyle))]
             [ContentType]
             [Name]
             [Order]
             All exports of this component part should be ordered after the "default" completion presenter style.  At a minimum,
             this means adding [Order(After="default")] to the export metadata.
             </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.Intellisense.CompletionPresenterStyle.CompletionTextRunProperties">
            <summary>
            Gets a <see cref="T:System.Windows.Media.TextFormatting.TextRunProperties" /> that will be used to format the text of the individual completion items.
            </summary>
            <remarks>
            The individual completion items may override this value by implementing the <see cref="T:Microsoft.VisualStudio.Language.Intellisense.ITextFormattable" /> interface.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.Intellisense.CompletionPresenterStyle.BorderBrush">
            <summary>
            Gets a <see cref="T:System.Windows.Media.Brush" /> that will be used to paint the borders in the completion presenter.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.Intellisense.CompletionPresenterStyle.BackgroundBrush">
            <summary>
            Gets a <see cref="T:System.Windows.Media.Brush" /> that will be used to paint the background of the completion presenter.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.Intellisense.CompletionPresenterStyle.SelectionBorderBrush">
            <summary>
            Gets a <see cref="T:System.Windows.Media.Brush" /> that will be used to paint the border rectangle around the selected completion item.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.Intellisense.CompletionPresenterStyle.SelectionBackgroundBrush">
            <summary>
            Gets a <see cref="T:System.Windows.Media.Brush" /> that will be used to paint the background of the selected completion item.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.Intellisense.CompletionPresenterStyle.SuffixTextRunProperties">
            <summary>
            Gets a <see cref="T:System.Windows.Media.TextFormatting.TextRunProperties" /> that will be used to paint the foreground of the completion item's suffix text.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.Intellisense.CompletionPresenterStyle.SelectionTextRunProperties">
            <summary>
            Gets a <see cref="T:System.Windows.Media.TextFormatting.TextRunProperties" /> that will be used to paint the text of the selected completion item.
            </summary>
            <remarks>
            This <see cref="T:System.Windows.Media.TextFormatting.TextRunProperties" /> object should be constructed so as to keep from clashing with the
            SelectionBackgroundBrush.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.Intellisense.CompletionPresenterStyle.TooltipBorderBrush">
            <summary>
            Gets a <see cref="T:System.Windows.Media.Brush" /> that will be used to paint the border around the completion tooltip.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.Intellisense.CompletionPresenterStyle.TooltipBackgroundBrush">
            <summary>
            Gets a <see cref="T:System.Windows.Media.Brush" /> that will be used to paint the background of the completion tooltip.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.Intellisense.CompletionPresenterStyle.TooltipTextRunProperties">
            <summary>
            Gets a <see cref="T:System.Windows.Media.TextFormatting.TextRunProperties" /> that will be used to format the text in the completion tooltip.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.Intellisense.CompletionPresenterStyle.TabPanelBackgroundBrush">
            <summary>
            Gets a <see cref="T:System.Windows.Media.Brush" /> that will be used to paint the background of the completion tab panel.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.Intellisense.CompletionPresenterStyle.TabItemHotBorderBrush">
            <summary>
            Gets a <see cref="T:System.Windows.Media.Brush" /> that will be used to paint the border of a completion tab item when the mouse is
            hovering over it.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.Intellisense.CompletionPresenterStyle.TabItemHotBackgroundBrush">
            <summary>
            Gets a <see cref="T:System.Windows.Media.Brush" /> that will be used to paint the background of a completion tab item when the mouse is
            hovering over it.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.Intellisense.CompletionPresenterStyle.TabItemHotTextRunProperties">
            <summary>
            Gets a <see cref="T:System.Windows.Media.TextFormatting.TextRunProperties" /> that will be used to format the text of a completion tab item when the mouse is
            hovering over it.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.Intellisense.CompletionPresenterStyle.AreGradientsAllowed">
            <summary>
            Gets a value determining whether or not gradients should be used in the presentation of a
            <see cref="T:Microsoft.VisualStudio.Language.Intellisense.ICompletionSession" />.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.Intellisense.CompletionPresenterStyle.BitmapScalingMode">
            <summary>
            Gets a <see cref="P:Microsoft.VisualStudio.Language.Intellisense.CompletionPresenterStyle.BitmapScalingMode" /> value that indicates the desired scaling mode for items' images 
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Language.Intellisense.CompletionSelectionStatus">
            <summary>
            Represents the full selection status of a completion set. 
            </summary>
            <remarks>
            Completion sets maintain their own selection status, which is a
            combination of a completion item, a value indicating whether or not the completion is fully selected, and a value
            indicating whether or not the completion is a unique match.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Language.Intellisense.CompletionSelectionStatus.#ctor(Microsoft.VisualStudio.Language.Intellisense.Completion,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Language.Intellisense.CompletionSelectionStatus" />.
            </summary>
            <param name="completion">The selected completion in this selection status.</param>
            <param name="isSelected"><c>true</c> if the completion is fully-selected, <c>false</c> otherwise.</param>
            <param name="isUnique"><c>true</c> if the completion is a unique match, <c>false</c> otherwise.</param>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.Intellisense.CompletionSelectionStatus.Completion">
            <summary>
            Gets the selected completion represented by this selection status instance.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.Intellisense.CompletionSelectionStatus.IsSelected">
            <summary>
            Determines whether the completion is fully-selected.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.Intellisense.CompletionSelectionStatus.IsUnique">
            <summary>
            Determines whether the completion is a unique match.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Language.Intellisense.CompletionSelectionStatus.Equals(System.Object)">
            <summary>
            Determines whether two instances of <see cref="T:Microsoft.VisualStudio.Language.Intellisense.CompletionSelectionStatus" /> are the same.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Language.Intellisense.CompletionSelectionStatus.GetHashCode">
            <summary>
            Gets the hash code of this instance.
            </summary>
            <returns>The hash code.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Language.Intellisense.CompletionSelectionStatus.op_Equality(Microsoft.VisualStudio.Language.Intellisense.CompletionSelectionStatus,Microsoft.VisualStudio.Language.Intellisense.CompletionSelectionStatus)">
            <summary>
            Determines whether two instances of <see cref="T:Microsoft.VisualStudio.Language.Intellisense.CompletionSelectionStatus" /> are the same.
            </summary>
            <param name="status1">The first instance.</param>
            <param name="status2">The second instance.</param>
            <returns><c>true</c> if the instances are the same, otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Language.Intellisense.CompletionSelectionStatus.op_Inequality(Microsoft.VisualStudio.Language.Intellisense.CompletionSelectionStatus,Microsoft.VisualStudio.Language.Intellisense.CompletionSelectionStatus)">
            <summary>
            Determines whether two instances of <see cref="T:Microsoft.VisualStudio.Language.Intellisense.CompletionSelectionStatus" /> are different.
            </summary>
            <param name="status1">The first instance.</param>
            <param name="status2">The second instance.</param>
            <returns><c>true</c> if the instances are different, otherwise <c>false</c>.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Language.Intellisense.CompletionSet">
            <summary>
            Represents a set of completions.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Language.Intellisense.CompletionSet.CompletionMatchResult">
            <summary>
            Stores information about the completion match result.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.Intellisense.CompletionSet.CompletionMatchResult.SelectionStatus">
            <summary>
            The selection status of the completion set.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.Intellisense.CompletionSet.CompletionMatchResult.CharsMatchedCount">
            <summary>
            The number of characters matched in the completion set.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Language.Intellisense.CompletionSet.#ctor">
            <summary>
            Initializes a new instance of <see cref="T:Microsoft.VisualStudio.Language.Intellisense.CompletionSet" />.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Language.Intellisense.CompletionSet.#ctor(System.String,System.String,Microsoft.VisualStudio.Text.ITrackingSpan,System.Collections.Generic.IEnumerable{Microsoft.VisualStudio.Language.Intellisense.Completion},System.Collections.Generic.IEnumerable{Microsoft.VisualStudio.Language.Intellisense.Completion})">
            <summary>
            Initializes a new instance of <see cref="T:Microsoft.VisualStudio.Language.Intellisense.CompletionSet" /> with the specified name and text.
            </summary>
            <param name="moniker">The unique, non-localized identifier for the completion set.</param>
            <param name="displayName">The localized name of the completion set.</param>
            <param name="applicableTo">The tracking span to which the completions apply.</param>
            <param name="completions">The list of completions.</param>
            <param name="completionBuilders">The list of completion builders.</param>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.Intellisense.CompletionSet.Moniker">
            <summary>
            The unique, non-localized identifier for the completion set.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.Intellisense.CompletionSet.DisplayName">
            <summary>
            Gets or sets the localized name of this completion set.  
            </summary>
            <remarks>In the default presenter, the display name
            appears as the header of a tab item in a WPF TabControl.</remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.Intellisense.CompletionSet.ApplicableTo">
            <summary>
            Gets or sets the text tracking span to which this completion applies.  
            </summary>
            <remarks>If this completion is committed to the buffer, the
            span will be replaced with the completion insertion text.</remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.Intellisense.CompletionSet.Completions">
            <summary>
            Gets the list of completions that are part of this completion set.
            </summary>
            <remarks>
            When overriding this property, if you would like to provide a dynamic collection of completions,
            take care to implement <see cref="T:System.Collections.Specialized.INotifyCollectionChanged" /> for your collection of completions.
            The default completion presenter uses <see cref="T:System.Collections.Specialized.INotifyCollectionChanged" /> to listen for changes.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.Intellisense.CompletionSet.CompletionBuilders">
            <summary>
            Gets the list of completion builders that are part of this completion set.  
            </summary>
            <remarks>
            Completion builders are completions that are displayed separately from the other completions in the completion set.
            In the default presentation, completion builders appear in a non-scrolled list above the scrolled list of completions.
            When overriding this property, if you would like to provide a dynamic collection of completion builders,
            take care to implement <see cref="T:System.Collections.Specialized.INotifyCollectionChanged" /> for your collection of completion builders.
            The default completion presenter uses <see cref="T:System.Collections.Specialized.INotifyCollectionChanged" /> to listen for changes.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Language.Intellisense.CompletionSet.SelectBestMatch">
            <summary>
            Determines the best match in the completion set.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Language.Intellisense.CompletionSet.Filter">
            <summary>
            Filters the set of completions to those that match the applicability text of the completion
            set and determines the best match.
            </summary>
            <exception cref="T:System.InvalidOperationException">Both the completions and the completion builders have been overridden.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Language.Intellisense.CompletionSet.Recalculate">
            <summary>
            Recalculates the set of completions for this completion set. 
            </summary>
            <remarks>
            The base implementation of Recalculate() does nothing.  
            Derived classes should override this method to implement custom
            recalculation behavior.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Language.Intellisense.CompletionSet.GetHighlightedSpansInDisplayText(System.String)">
            <summary>
            Returns a list of spans (of character positions) that should be highlighted in the display text.
            </summary>
            <returns>A list of spans (e.g. {[0,1), [4,6)} to highlight the 1st, 5th and 6th characters) or null if no highlighting is desired</returns>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.Intellisense.CompletionSet.SelectionStatus">
            <summary>
            Gets or sets the <see cref="T:Microsoft.VisualStudio.Language.Intellisense.CompletionSelectionStatus" />.
            </summary>
            <exception cref="T:System.ArgumentNullException">The value is null.</exception>
            <exception cref="T:System.ArgumentException">The <see cref="T:Microsoft.VisualStudio.Language.Intellisense.CompletionSelectionStatus" /> is not contained in either the 
            completions or the completion builders.</exception>
        </member>
        <member name="E:Microsoft.VisualStudio.Language.Intellisense.CompletionSet.SelectionStatusChanged">
            <summary>
            Occurs when the selection status has changed.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.Intellisense.CompletionSet.WritableCompletions">
            <summary>
            Gets the ObservableCollection of writable completions.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.Intellisense.CompletionSet.WritableCompletionBuilders">
            <summary>
            Gets the ObservableCollection of writable completion builders.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Language.Intellisense.CompletionSet.Filter(Microsoft.VisualStudio.Language.Intellisense.CompletionMatchType,System.Boolean)">
            <summary>
            Filters the set of completions to those that match the applicability text of the completion
            set and determines the best match.
            </summary>
            <param name="matchType">The <see cref="T:Microsoft.VisualStudio.Language.Intellisense.CompletionMatchType" />.</param>
            <param name="caseSensitive"><c>true</c> if the match is case-sensitive, otherwise <c>false</c>.</param>
            <exception cref="T:System.InvalidOperationException">Both the completions and the completion builders have been overridden.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Language.Intellisense.CompletionSet.SelectBestMatch(Microsoft.VisualStudio.Language.Intellisense.CompletionMatchType,System.Boolean)">
            <summary>
            Redetermines the best matching completion in the completion set.
            </summary>
            <param name="matchType">The <see cref="T:Microsoft.VisualStudio.Language.Intellisense.CompletionMatchType" />.</param>
            <param name="caseSensitive"><c>true</c> if the match is case-sensitive, otherwise <c>false</c>.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Language.Intellisense.CompletionSet.MatchCompletionList(System.Collections.Generic.IList{Microsoft.VisualStudio.Language.Intellisense.Completion},Microsoft.VisualStudio.Language.Intellisense.CompletionMatchType,System.Boolean)">
            <summary>
            Matches the completion list.
            </summary>
            <param name="completionList">The list of completions.</param>
            <param name="matchType">The <see cref="T:Microsoft.VisualStudio.Language.Intellisense.CompletionMatchType" />.</param>
            <param name="caseSensitive"><c>true</c> if the match is case-sensitive, otherwise <c>false</c>.</param>
            <returns>A <see cref="T:Microsoft.VisualStudio.Language.Intellisense.CompletionSet.CompletionMatchResult" />.</returns>
            <exception cref="T:System.InvalidOperationException">The span to which this completion applies is null.</exception>
        </member>
        <member name="T:Microsoft.VisualStudio.Language.Intellisense.CompletionSet2">
            <summary>
            Represents a set of completions that supports a row of filter buttons displayed at the bottom on the intellisense popup.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Language.Intellisense.CompletionSet2.#ctor">
            <summary>
            Initializes a new instance of <see cref="T:Microsoft.VisualStudio.Language.Intellisense.CompletionSet2" />.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Language.Intellisense.CompletionSet2.#ctor(System.String,System.String,Microsoft.VisualStudio.Text.ITrackingSpan,System.Collections.Generic.IEnumerable{Microsoft.VisualStudio.Language.Intellisense.Completion},System.Collections.Generic.IEnumerable{Microsoft.VisualStudio.Language.Intellisense.Completion},System.Collections.Generic.IReadOnlyList{Microsoft.VisualStudio.Language.Intellisense.IIntellisenseFilter})">
            <summary>
            Initializes a new instance of <see cref="T:Microsoft.VisualStudio.Language.Intellisense.CompletionSet2" /> with the specified name, text and filters.
            </summary>
            <param name="moniker">The unique, non-localized identifier for the completion set.</param>
            <param name="displayName">The localized name of the completion set.</param>
            <param name="applicableTo">The tracking span to which the completions apply.</param>
            <param name="completions">The list of completions.</param>
            <param name="completionBuilders">The list of completion builders.</param>
            <param name="filters">The list of <see cref="T:Microsoft.VisualStudio.Language.Intellisense.IIntellisenseFilter" />s that will be displayed at the bottom of the completion dialog.</param>
        </member>
        <member name="T:Microsoft.VisualStudio.Language.Intellisense.CompletionStartedEventArgs">
            <summary>
            This class is used to notify about new <see cref="T:Microsoft.VisualStudio.Language.Intellisense.ICompletionSession" /> being triggered
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.Intellisense.CompletionStartedEventArgs.CompletionSession">
            <summary>
            Newly created <see cref="T:Microsoft.VisualStudio.Language.Intellisense.ICompletionSession" />.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Language.Intellisense.CompletionStartedEventArgs.#ctor(Microsoft.VisualStudio.Language.Intellisense.ICompletionSession)">
            <summary>
            Constructs instance of <see cref="T:Microsoft.VisualStudio.Language.Intellisense.CompletionStartedEventArgs" />.
            </summary>
            <param name="completionSession">Newly created <see cref="T:Microsoft.VisualStudio.Language.Intellisense.ICompletionSession" /></param>
        </member>
        <member name="T:Microsoft.VisualStudio.Language.Intellisense.CurrentParameterChangedEventArgs">
            <summary>
            Provides information about the change of the current parameter in a signature help session.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Language.Intellisense.CurrentParameterChangedEventArgs.#ctor(Microsoft.VisualStudio.Language.Intellisense.IParameter,Microsoft.VisualStudio.Language.Intellisense.IParameter)">
            <summary>
            Initializes a new instance of <see cref="T:Microsoft.VisualStudio.Language.Intellisense.CurrentParameterChangedEventArgs" />.
            </summary>
            <param name="previousCurrentParameter">The parameter that was previously the current parameter.</param>
            <param name="newCurrentParameter">The parameter that is now the current parameter.</param>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.Intellisense.CurrentParameterChangedEventArgs.PreviousCurrentParameter">
            <summary>
            Gets the parameter that was previously the current parameter.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.Intellisense.CurrentParameterChangedEventArgs.NewCurrentParameter">
            <summary>
            Gets the parameter that is now the current parameter.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Language.Intellisense.IAsyncLightBulbSession">
            <summary>
            <see cref="T:Microsoft.VisualStudio.Language.Intellisense.ILightBulbSession" /> which supports obtaining <see cref="T:Microsoft.VisualStudio.Language.Intellisense.SuggestedActionSet" />s asynchronously
            using the <see cref="T:Microsoft.VisualStudio.Language.Intellisense.IAsyncSuggestedActionsSource" />.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Language.Intellisense.IAsyncLightBulbSession.PopulateWithData(Microsoft.VisualStudio.Language.Intellisense.ISuggestedActionCategorySet,Microsoft.VisualStudio.Utilities.IUIThreadOperationContext)">
            <summary>
            Gets <see cref="T:Microsoft.VisualStudio.Language.Intellisense.SuggestedActionSet" />s through synchronous API
            and enqueues work to get <see cref="T:Microsoft.VisualStudio.Language.Intellisense.SuggestedActionSet" />s through asynchronous API.
            Displays the received actions in the UI and communicates updates through the <see cref="E:Microsoft.VisualStudio.Language.Intellisense.IAsyncLightBulbSession.SuggestedActionsUpdated" /> event.
            </summary>
            <param name="overrideRequestedActionCategories">Set of suggested action categories to provide instead of <see cref="P:Microsoft.VisualStudio.Language.Intellisense.ILightBulbSession.ActionCategories" />.</param>
            <param name="operationContext">Supports cancellation and reporting progress</param>
            <remarks>
            When no data is available, the <see cref="T:Microsoft.VisualStudio.Language.Intellisense.ILightBulbSession" /> dismisses.
            </remarks>
            <remarks>
            This method supersedes <see cref="M:Microsoft.VisualStudio.Language.Intellisense.ILightBulbSession.TryGetSuggestedActionSets(System.Collections.Generic.IEnumerable{Microsoft.VisualStudio.Language.Intellisense.SuggestedActionSet}@)" /> and should be used instead.
            </remarks>
            <remarks>
            Must be called on the UI thread.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Language.Intellisense.IAsyncLightBulbSession.PopulateWithDataAsync(Microsoft.VisualStudio.Language.Intellisense.ISuggestedActionCategorySet,Microsoft.VisualStudio.Utilities.IUIThreadOperationContext)">
            <summary>
            Gets <see cref="T:Microsoft.VisualStudio.Language.Intellisense.SuggestedActionSet" />s through synchronous API
            and enqueues work to get <see cref="T:Microsoft.VisualStudio.Language.Intellisense.SuggestedActionSet" />s through the asynchronous API.
            Displays the received actions in the UI and communicates updates through the <see cref="E:Microsoft.VisualStudio.Language.Intellisense.IAsyncLightBulbSession.SuggestedActionsUpdated" /> event.
            </summary>
            <param name="overrideRequestedActionCategories">Set of suggested action categories to provide instead of <see cref="P:Microsoft.VisualStudio.Language.Intellisense.ILightBulbSession.ActionCategories" />.</param>
            <param name="operationContext">Supports cancellation and reporting progress</param>
            <returns>The <see cref="T:Microsoft.VisualStudio.Language.Intellisense.SuggestedActionSet" />s collected from all sources</returns>
            <remarks>
            When no data is available, the <see cref="T:Microsoft.VisualStudio.Language.Intellisense.ILightBulbSession" /> dismisses. If CurrentStatus is already
            <see cref="F:Microsoft.VisualStudio.Language.Intellisense.QuerySuggestedActionCompletionStatus.Completed" /> and <paramref name="overrideRequestedActionCategories" /> is unspecified,
            this will synchronously return a completed Task.
            </remarks>
            <remarks>
            This method supersedes <see cref="M:Microsoft.VisualStudio.Language.Intellisense.ILightBulbSession.TryGetSuggestedActionSets(System.Collections.Generic.IEnumerable{Microsoft.VisualStudio.Language.Intellisense.SuggestedActionSet}@)" /> and should be used instead.
            </remarks>
            <remarks>
            Must be called on the UI thread.
            </remarks>
        </member>
        <member name="E:Microsoft.VisualStudio.Language.Intellisense.IAsyncLightBulbSession.SuggestedActionsUpdated">
            <summary>
            Notifies of synchronous and asynchronous updates to available <see cref="T:Microsoft.VisualStudio.Language.Intellisense.SuggestedActionSet" />s
            </summary>
            <remarks>
            May be called on any thread.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.Intellisense.IAsyncLightBulbSession.CurrentStatus">
            <summary>
            Gets current status aggregating the synchronous and asynchronous operation.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Language.Intellisense.ICompletionBroker">
            <summary>
            Represents the central broker responsible for statement completion.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Language.Intellisense.ICompletionBroker.TriggerCompletion(Microsoft.VisualStudio.Text.Editor.ITextView)">
            <summary>
            Starts the process of statement completion, assuming the caret position to be the position at which completions should
            be inserted.  
            </summary>
            <param name="textView">The <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView" /> over which to trigger statement completion.</param>
            <returns>A valid statement completion session. May be null if no session could be created.</returns>
            <remarks>When the caret leaves the
            applicability span of all the completions in this session, the session will be automatically dismissed.</remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Language.Intellisense.ICompletionBroker.TriggerCompletion(Microsoft.VisualStudio.Text.Editor.ITextView,Microsoft.VisualStudio.Text.ITrackingPoint,System.Boolean)">
            <summary>
            Starts the process of statement completion at a particular position. When called with a specific trigger point, caret
            movements will be ignored and the broker will not be responsible for dismissing the session.
            </summary>
            <param name="textView">The <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView" /> over which to trigger statement completion.</param>
            <param name="triggerPoint">The point in the text buffer at which statement completion is requested.</param>
            <param name="trackCaret">
            <c>true</c> if this session should track the caret, <c>false</c> otherwise. When the caret is tracked, only completion items whose
            applicability span contains the caret will be displayed.
            </param>
            <returns>A valid statement completion session.  May be null if no session could be created.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Language.Intellisense.ICompletionBroker.CreateCompletionSession(Microsoft.VisualStudio.Text.Editor.ITextView,Microsoft.VisualStudio.Text.ITrackingPoint,System.Boolean)">
            <summary>
            Creates a completion session, but does not start it.  
            </summary>
            <param name="textView">The <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView" /> over which to create a completion session.</param>
            <param name="triggerPoint">The point in the text buffer at which statement completion is requested.</param>
            <param name="trackCaret">
            <c>true</c> if this session should track the caret, <c>false</c> otherwise. When the caret is tracked, only completion items whose
            applicability span contains the caret will be displayed.
            </param>
            <returns>A valid statement completion session.  May be null if no session could be created.</returns>
            <remarks>This method is useful if you want to set some properties on the session
            before starting it.</remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Language.Intellisense.ICompletionBroker.DismissAllSessions(Microsoft.VisualStudio.Text.Editor.ITextView)">
            <summary>
            Dismisses all active statement completion sessions.
            </summary>
            <param name="textView">The <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView" /> over which to dismiss all sessions.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Language.Intellisense.ICompletionBroker.IsCompletionActive(Microsoft.VisualStudio.Text.Editor.ITextView)">
            <summary>
            Determines whether or not statement completion is active over the specified <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView" />.
            </summary>
            <param name="textView">The <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView" /> for which to determine if statement completion is active.</param>
            <remarks>This property is <c>true</c> when Sessions.Count &gt; 0 and <c>false</c>
            otherwise.</remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Language.Intellisense.ICompletionBroker.GetSessions(Microsoft.VisualStudio.Text.Editor.ITextView)">
            <summary>
            Gets the list of active statement completion sessions.
            </summary>
            <param name="textView">The <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView" /> for which to get completions.</param>
        </member>
        <member name="T:Microsoft.VisualStudio.Language.Intellisense.ICompletionBrokerInternal">
            <summary>
            Represents the central broker responsible for statement completion.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Language.Intellisense.ICompletionDefaults">
            <summary>
            Provides completions for a given content type.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.Intellisense.ICompletionDefaults.SuggestedDefaults">
            <summary>
            Gets possible values for a default selection for an <see cref="T:Microsoft.VisualStudio.Language.Intellisense.ICompletionSession" />.
            </summary>
            <remarks>
            <see cref="P:Microsoft.VisualStudio.Language.Intellisense.ICompletionDefaults.SuggestedDefaults" /> is a, possibly empty, list of suggested default selections for an
            <see cref="T:Microsoft.VisualStudio.Language.Intellisense.ICompletionSession" />. The default selection should be set to the first entry in <see cref="P:Microsoft.VisualStudio.Language.Intellisense.ICompletionDefaults.SuggestedDefaults" />
            that matches an item in the completion list. Note that <see cref="P:Microsoft.VisualStudio.Language.Intellisense.ICompletionDefaults.SuggestedDefaults" /> can contain items that are
            not in the completion list.
            </remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.Language.Intellisense.ICompletionDefaultsSource">
            <summary>
            Provides a list of possible default selections for an <see cref="T:Microsoft.VisualStudio.Language.Intellisense.ICompletionSession" />.
            </summary>
            <remarks>
            This is a MEF component that is exported by the IntelliCode component. IntelliCode is an optional component
            so you must import using:
            <example>
            <code>
            [Import(AllowDefault=true)]
            </code>
            </example>
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Language.Intellisense.ICompletionDefaultsSource.GetSessionDefaults(Microsoft.VisualStudio.Language.Intellisense.ICompletionSession)">
            <summary>
            Gets a list of possible default items for the completion session.
            </summary>
            <param name="session">Session for which the defaults are desired.</param>
            <returns>A list of possible default item insertion texts for the completion session.</returns>
            <remarks>The returned list can contain items that are not items in the completion list.</remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.Language.Intellisense.ICompletionSession">
            <summary>
            Defines a statement completion session, which is a type of IntelliSense session.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.Intellisense.ICompletionSession.CompletionSets">
            <summary>
            Gets the collection of <see cref="T:Microsoft.VisualStudio.Language.Intellisense.CompletionSet" /> objects.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.Intellisense.ICompletionSession.SelectedCompletionSet">
            <summary>
            Gets or sets the selected <see cref="T:Microsoft.VisualStudio.Language.Intellisense.CompletionSet" />.
            </summary>
        </member>
        <member name="E:Microsoft.VisualStudio.Language.Intellisense.ICompletionSession.SelectedCompletionSetChanged">
            <summary>
            Occurs when the SelectedCompletionSet property changes.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Language.Intellisense.ICompletionSession.Filter">
            <summary>
            Filters the session's completion items, based on the current state of the text buffer.  
            </summary>
            <remarks>
            If a completion's display text
            or insertion text contains the text in its applicability span, it remains part of the CompletionSets
            collection, otherwise it will be removed. The underlying providers will not be asked for additional completion
            information because of this call.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Language.Intellisense.ICompletionSession.Commit">
            <summary>
            Commits a completion session. The selected completion's insertion text is inserted into the buffer in place of
            its applicability span.
            </summary>
        </member>
        <member name="E:Microsoft.VisualStudio.Language.Intellisense.ICompletionSession.Committed">
            <summary>
            Occurs after a completion session is committed.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.Intellisense.ICompletionSession.IsStarted">
            <summary>
            Determines whether the completion session has been started.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Language.Intellisense.ICompletionSource">
            <summary>
            Provides completions for a given content type.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Language.Intellisense.ICompletionSource.AugmentCompletionSession(Microsoft.VisualStudio.Language.Intellisense.ICompletionSession,System.Collections.Generic.IList{Microsoft.VisualStudio.Language.Intellisense.CompletionSet})">
            <summary>
            Determines which <see cref="T:Microsoft.VisualStudio.Language.Intellisense.CompletionSet" />s should be part of the specified <see cref="T:Microsoft.VisualStudio.Language.Intellisense.ICompletionSession" />.
            </summary>
            <param name="session">The session for which completions are to be computed.</param>
            <param name="completionSets">The set of the completionSets to be added to the session.</param>
            <remarks>
            Each applicable <see cref="M:Microsoft.VisualStudio.Language.Intellisense.ICompletionSource.AugmentCompletionSession(Microsoft.VisualStudio.Language.Intellisense.ICompletionSession,System.Collections.Generic.IList{Microsoft.VisualStudio.Language.Intellisense.CompletionSet})" /> instance will be called in-order to
            (re)calculate a <see cref="T:Microsoft.VisualStudio.Language.Intellisense.ICompletionSession" />.  <see cref="T:Microsoft.VisualStudio.Language.Intellisense.CompletionSet" />s can be added to the session by adding
            them to the completionSets collection passed-in as a parameter.  In addition, by removing items from the collection, a
            source may filter <see cref="T:Microsoft.VisualStudio.Language.Intellisense.CompletionSet" />s provided by <see cref="T:Microsoft.VisualStudio.Language.Intellisense.ICompletionSource" />s earlier in the calculation
            chain.
            </remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.Language.Intellisense.ICompletionSourceProvider">
            <summary>
            Provides completion sources.  
            </summary>
            <remarks>
            This is a MEF component part, and should be exported with the following attribute:
            [Export(typeof(ICompletionSourceProvider))]
            You must provide the ContentType and Order
            attributes.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Language.Intellisense.ICompletionSourceProvider.TryCreateCompletionSource(Microsoft.VisualStudio.Text.ITextBuffer)">
            <summary>
            Creates a completion provider for the given context.
            </summary>
            <param name="textBuffer">The text buffer over which to create a provider.</param>
            <returns>A valid <see cref="T:Microsoft.VisualStudio.Language.Intellisense.ICompletionSource" /> instance, or null if none could be created.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Language.Intellisense.IconDescription">
            <summary>
            Describes the icon to use for displaying items in statement completion.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.Intellisense.IconDescription.Group">
            <summary>
            Gets the <see cref="T:Microsoft.VisualStudio.Language.Intellisense.StandardGlyphGroup" /> of the icon to be displayed.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.Intellisense.IconDescription.Item">
            <summary>
            Gets the specific <see cref="T:Microsoft.VisualStudio.Language.Intellisense.StandardGlyphItem" /> within the icon group to be displayed.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Language.Intellisense.IconDescription.#ctor(Microsoft.VisualStudio.Language.Intellisense.StandardGlyphGroup,Microsoft.VisualStudio.Language.Intellisense.StandardGlyphItem)">
            <summary>
            Initializes a new instance of an <see cref="T:Microsoft.VisualStudio.Language.Intellisense.IconDescription" /> from a group and an item within the group.
            </summary>
            <param name="group">The icon group of the icon to be displayed.</param>
            <param name="item">The specific icon within the icon group to be displayed.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Language.Intellisense.IconDescription.ToString">
            <summary>
            Provides a description of the specific icon. 
            </summary>
            <returns>Group.Item</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Language.Intellisense.ICustomCommit">
            <summary>
            Provides custom commit operations for completions.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Language.Intellisense.ICustomCommit.Commit">
            <summary>
            Commits the completion using the completion's own commit logic.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Language.Intellisense.ICustomIntellisensePresenter">
            <summary>
            Defines a custom IntelliSense presenter.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Language.Intellisense.ICustomIntellisensePresenter.Render">
            <summary>
            Renders the IntelliSense session.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Language.Intellisense.ICustomKeyboardHandler">
            <summary>
            Defines a custom handler of keyboard events
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Language.Intellisense.ICustomKeyboardHandler.CaptureKeyboard">
            <summary>
            Signals the handler that it's ok to begin capturing keyboard events.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Language.Intellisense.ICustomKeyboardHandler.ReleaseKeyboard">
            <summary>
            Signals the handler that it should cease capturing keyboard events.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Language.Intellisense.IFocusableIntellisensePresenter">
            <summary>
            Defines a focusable presenter of IntelliSense information.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Language.Intellisense.IFocusableIntellisensePresenter.Focus">
            <summary>
            Sets focus within the presentation that this presenter is rendering.
            </summary>
            <returns><c>true</c> if focus set successfully, <c>false</c> otherwise.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Language.Intellisense.IGlyphService">
            <summary>
            Gets a standard set of glyphs.
            </summary>
            <remarks>
            This is a MEF component part, and should be exported with the following attribute:
            [Export(typeof(IGlyphService))]
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Language.Intellisense.IGlyphService.GetGlyph(Microsoft.VisualStudio.Language.Intellisense.StandardGlyphGroup,Microsoft.VisualStudio.Language.Intellisense.StandardGlyphItem)">
            <summary>
            Gets a glyph in the form of a WPF <see cref="T:System.Windows.Media.ImageSource" />.
            </summary>
            <param name="group">The group description for this glyph.</param>
            <param name="item">The item description for this glyph.</param>
            <returns>A valid WPF <see cref="T:System.Windows.Media.ImageSource" /> that contains the requested glyph.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Language.Intellisense.IIntellisenseCommandTarget">
            <summary>
            Provides a way to intercede in the command-handling chain to handle keyboard commands.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Language.Intellisense.IIntellisenseCommandTarget.ExecuteKeyboardCommand(Microsoft.VisualStudio.Language.Intellisense.IntellisenseKeyboardCommand)">
            <summary>
            Executes a user-initiated keyboard command.  
            </summary>
            <param name="command">The keyboard command to execute.</param>
            <returns><c>true</c> if the command was handled, <c>false</c> otherwise.</returns>
            <remarks>
            Keyboard commands are normally handled by the underlying view, but
            IntelliSense presenters may intercede in the command-handling chain in order to handle certain keyboard commands.
            </remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.Language.Intellisense.IIntellisenseController">
            <summary>
            Controls the IntelliSense process for one or more subject <see cref="T:Microsoft.VisualStudio.Text.ITextBuffer" /> objects
            exposed through a single <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView" />.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Language.Intellisense.IIntellisenseController.Detach(Microsoft.VisualStudio.Text.Editor.ITextView)">
            <summary>
            Detaches the controller from the specified <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView" />.
            </summary>
            <param name="textView">The <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView" /> from which the controller should detach.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Language.Intellisense.IIntellisenseController.ConnectSubjectBuffer(Microsoft.VisualStudio.Text.ITextBuffer)">
            <summary>
            Called when a new subject <see cref="T:Microsoft.VisualStudio.Text.ITextBuffer" /> appears in the graph of buffers associated with
            the <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView" />, due to a change in projection or content type.
            </summary>
            <param name="subjectBuffer">The newly-connected text buffer.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Language.Intellisense.IIntellisenseController.DisconnectSubjectBuffer(Microsoft.VisualStudio.Text.ITextBuffer)">
            <summary>
            Called when a subject <see cref="T:Microsoft.VisualStudio.Text.ITextBuffer" /> is removed from the graph of buffers associated with
            the <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView" />, due to a change in projection or content type. 
            </summary>
            <param name="subjectBuffer">The disconnected text buffer.</param>
            <remarks>
            It is not guaranteed that
            the subject buffer was previously connected to this controller.
            </remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.Language.Intellisense.IIntellisenseControllerProvider">
            <summary>
            Creates IntelliSense controllers for individual <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView" /> instances.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Language.Intellisense.IIntellisenseControllerProvider.TryCreateIntellisenseController(Microsoft.VisualStudio.Text.Editor.ITextView,System.Collections.Generic.IList{Microsoft.VisualStudio.Text.ITextBuffer})">
            <summary>
            Attempts to create an IntelliSense controller for a specific text view opened in a specific context.
            </summary>
            <param name="textView">The text view for which a controller should be created.</param>
            <param name="subjectBuffers">The set of text buffers with matching content types that are potentially visible in the view.</param>
            <returns>A valid IntelliSense controller, or null if none could be created.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Language.Intellisense.IIntellisenseFilter">
            <summary>
            Defines a filter used to add a row of filter buttons to the bottom
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.Intellisense.IIntellisenseFilter.Moniker">
            <summary>
            The icon shown on the filter's button.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.Intellisense.IIntellisenseFilter.ToolTip">
            <summary>
            The tooltip shown when the mouse hovers over the button.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.Intellisense.IIntellisenseFilter.AccessKey">
            <summary>
            The key used to toggle the filter's state.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.Intellisense.IIntellisenseFilter.AutomationText">
            <summary>
            String used to represent the button for automation.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.Intellisense.IIntellisenseFilter.IsChecked">
            <summary>
            Has the user turned the filter on?
            </summary>
            <remarks>
            The setter will be called when the user toggles the corresponding filter button.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.Intellisense.IIntellisenseFilter.IsEnabled">
            <summary>
            Is the filter enabled?
            </summary>
            <remarks>
            Disabled filters are shown but are grayed out.
            </remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.Language.Intellisense.IIntellisensePresenter">
            <summary>
            Defines a presenter of IntelliSense information.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.Intellisense.IIntellisensePresenter.Session">
            <summary>
            Gets the session that this presenter is rendering.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Language.Intellisense.IIntellisensePresenterProvider">
            <summary>
            Creates IntelliSense presenters over a given IntelliSense session.  
            </summary>
            <remarks>
            This is a MEF component part, and should be exported with the following attribute:
            [Export(typeof(IIntellisensePresenterProvider))]
            Component exporters must add the Order attribute to define the order of the presenter in the presenter chain.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Language.Intellisense.IIntellisensePresenterProvider.TryCreateIntellisensePresenter(Microsoft.VisualStudio.Language.Intellisense.IIntellisenseSession)">
            <summary>
            Attempts to create an IntelliSense presenter for a given IntelliSense session.
            </summary>
            <param name="session">The session for which a presenter should be created.</param>
            <returns>A valid IntelliSense presenter, or null if none could be created.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Language.Intellisense.IIntellisenseSession">
            <summary>
            Represents an IntelliSense session, or a single instance of the IntelliSense process.  
            </summary>
            <remarks>
            A session is returned by each
            IntelliSense triggering operation, and can be used to control the process of IntelliSense operations. IntelliSense sessions
            are aggregated into a stack, managed by an <see cref="T:Microsoft.VisualStudio.Language.Intellisense.IIntellisenseSessionStack" /> instance.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Language.Intellisense.IIntellisenseSession.GetTriggerPoint(Microsoft.VisualStudio.Text.ITextBuffer)">
            <summary>
            Gets the <see cref="T:Microsoft.VisualStudio.Text.ITrackingPoint" /> at which this IntelliSense session was triggered in terms of the specified
            <see cref="T:Microsoft.VisualStudio.Text.ITextBuffer" />.
            </summary>
            <remarks>
            Callers should take care to pass only <see cref="T:Microsoft.VisualStudio.Text.ITextBuffer" />s that are part of the session.TextView.BufferGraph
            </remarks>
            <param name="textBuffer">The <see cref="T:Microsoft.VisualStudio.Text.ITextBuffer" /> for which a trigger point should be returned.</param>
            <returns>
            The trigger point of the session as a <see cref="T:Microsoft.VisualStudio.Text.ITrackingSpan" /> in terms of the specified <see cref="T:Microsoft.VisualStudio.Text.ITextBuffer" />.
            </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Language.Intellisense.IIntellisenseSession.GetTriggerPoint(Microsoft.VisualStudio.Text.ITextSnapshot)">
            <summary>
            Gets the <see cref="T:Microsoft.VisualStudio.Text.SnapshotPoint" /> at which this IntelliSense session was triggered in terms of the specified
            <see cref="T:Microsoft.VisualStudio.Text.ITextSnapshot" />.
            </summary>
            <remarks>
            Callers should take care to pass only <see cref="T:Microsoft.VisualStudio.Text.ITextSnapshot" />s that are part of the session.TextView.BufferGraph
            </remarks>
            <param name="textSnapshot">The <see cref="T:Microsoft.VisualStudio.Text.ITextSnapshot" /> for which a trigger point should be returned.</param>
            <returns>
            The trigger point of the session as a <see cref="T:Microsoft.VisualStudio.Text.SnapshotPoint" /> in terms of the specified <see cref="T:Microsoft.VisualStudio.Text.ITextSnapshot" />.
            </returns>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.Intellisense.IIntellisenseSession.TextView">
            <summary>
            Gets the <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView" /> inside of which this IntelliSense session was triggered.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.Intellisense.IIntellisenseSession.Presenter">
            <summary>
            Gets the <see cref="T:Microsoft.VisualStudio.Language.Intellisense.IIntellisensePresenter" /> that is used to render IntelliSense for this session.  
            </summary>
            <remarks>This property can
            change due to session updates.</remarks>
        </member>
        <member name="E:Microsoft.VisualStudio.Language.Intellisense.IIntellisenseSession.PresenterChanged">
            <summary>
            Occurs when the IntelliSense presenter for this session changes.  
            </summary>
            <remarks>
            Any consumers of the presenter should re-render the presenter at this time.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Language.Intellisense.IIntellisenseSession.Start">
            <summary>
            Starts the session.  
            </summary>
            <remarks>
            Before this method is called, the session is in an initialization state. It begins processing only when Start()
            is called.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Language.Intellisense.IIntellisenseSession.Dismiss">
            <summary>
            Dismisses the session, causing the presenter to be destroyed and the session to be removed from the session stack.
            </summary>
        </member>
        <member name="E:Microsoft.VisualStudio.Language.Intellisense.IIntellisenseSession.Dismissed">
            <summary>
            Occurs when the session is dismissed.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.Intellisense.IIntellisenseSession.IsDismissed">
            <summary>
            Determines whether the session is dismissed.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Language.Intellisense.IIntellisenseSession.Recalculate">
            <summary>
            Recalculates the underlying IntelliSense items pertaining to this session, using the same trigger point.
            </summary>
        </member>
        <member name="E:Microsoft.VisualStudio.Language.Intellisense.IIntellisenseSession.Recalculated">
            <summary>
            Occurs when the session is recalculated.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Language.Intellisense.IIntellisenseSession.Match">
            <summary>
            Determines the best matching item in the session and sets the selection to this item.  
            </summary>
            <remarks>
            The best match is determined by
            querying the highest-priority provider for the buffer over which this session is running.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Language.Intellisense.IIntellisenseSession.Collapse">
            <summary>
            Collapses the session to an unobtrusive state in which it doesn't get in the way of the user.  If the session has no
            such state, the session will be dismissed.
            </summary>
            <remarks>
            <see cref="T:Microsoft.VisualStudio.Language.Intellisense.ILightBulbSession" />s are the only default <see cref="T:Microsoft.VisualStudio.Language.Intellisense.IIntellisenseSession" />s that have a collapsed state.
            All other default sessions (<see cref="T:Microsoft.VisualStudio.Language.Intellisense.ICompletionSession" />s, <see cref="T:Microsoft.VisualStudio.Language.Intellisense.ISignatureHelpSession" />s, and
            <see cref="T:Microsoft.VisualStudio.Language.Intellisense.IQuickInfoSession" />s) will be dismissed when collapsed.
            </remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.Language.Intellisense.IIntellisenseSessionStack">
            <summary>
            Defines a stack of IntelliSense sessions that manages session activation and currency.  
            </summary>
            <remarks>
            Each IntelliSense session is
            part of the stack, whether or not it appears in a TextView popup. The topmost session on the stack has
            special privileges, such as being able to capture the keyboard.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Language.Intellisense.IIntellisenseSessionStack.PushSession(Microsoft.VisualStudio.Language.Intellisense.IIntellisenseSession)">
            <summary>
            Adds a session to the top of the stack.
            </summary>
            <param name="session">An <see cref="T:Microsoft.VisualStudio.Language.Intellisense.IIntellisenseSession" /> to add to the top of the stack.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Language.Intellisense.IIntellisenseSessionStack.PopSession">
            <summary>
            Removes the topmost session from the stack and returns it.
            </summary>
            <returns>The session that was removed.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Language.Intellisense.IIntellisenseSessionStack.MoveSessionToTop(Microsoft.VisualStudio.Language.Intellisense.IIntellisenseSession)">
            <summary>
            Moves a session already in the session stack to the top of the stack.  The keyboard session will be re-evaluated.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.Intellisense.IIntellisenseSessionStack.Sessions">
            <summary>
            Gets the list of sessions in the stack, ordered from bottom to top.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.Intellisense.IIntellisenseSessionStack.TopSession">
            <summary>
            Gets the topmost session in the stack.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Language.Intellisense.IIntellisenseSessionStack.CollapseAllSessions">
            <summary>
            Reduces all sessions in the session stack to their collapsed state, or dismisses them if they have no such state.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Language.Intellisense.IIntellisenseSessionStackMapService">
            <summary>
            Provides access to all the IntelliSense session stacks created for all the different
            <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView" /> instances in the application.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Language.Intellisense.IIntellisenseSessionStackMapService.GetStackForTextView(Microsoft.VisualStudio.Text.Editor.ITextView)">
            <summary>
            Gets an <see cref="T:Microsoft.VisualStudio.Language.Intellisense.IIntellisenseSessionStack" /> for a specific <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView" /> instance.
            </summary>
            <param name="textView">The <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView" />.</param>
            <returns>The <see cref="T:Microsoft.VisualStudio.Language.Intellisense.IIntellisenseSessionStack" />.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Language.Intellisense.ILightBulbBroker">
            <summary>
            Represents a LightBulb broker, which is globally responsible for managing <see cref="T:Microsoft.VisualStudio.Language.Intellisense.ILightBulbSession" />s.
            </summary>
            <remarks>This is a MEF component, and should be imported as follows:
            [Import]
            ILightBulbBroker lightBulbBroker = null;
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Language.Intellisense.ILightBulbBroker.IsLightBulbSessionActive(Microsoft.VisualStudio.Text.Editor.ITextView)">
            <summary>
            Determines whether or not an <see cref="T:Microsoft.VisualStudio.Language.Intellisense.ILightBulbSession" /> is active over the specified <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView" />.
            </summary>
            <param name="textView">The <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView" /> for which to determine if an <see cref="T:Microsoft.VisualStudio.Language.Intellisense.ILightBulbSession" /> is active.</param>
            <returns><c>true</c> if an active <see cref="T:Microsoft.VisualStudio.Language.Intellisense.ILightBulbSession" /> exists for the given <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView" />, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Language.Intellisense.ILightBulbBroker.GetSession(Microsoft.VisualStudio.Text.Editor.ITextView)">
            <summary>
            Gets the active <see cref="T:Microsoft.VisualStudio.Language.Intellisense.ILightBulbSession" /> for the specified <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView" />.
            </summary>
            <param name="textView">The <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView" /> for which to get an <see cref="T:Microsoft.VisualStudio.Language.Intellisense.ILightBulbSession" />.</param>
            <returns>The valid active <see cref="T:Microsoft.VisualStudio.Language.Intellisense.ILightBulbSession" /> for the given <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView" /> or null if it doesn't exist.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Language.Intellisense.ILightBulbBroker.HasSuggestedActionsAsync(Microsoft.VisualStudio.Language.Intellisense.ISuggestedActionCategorySet,Microsoft.VisualStudio.Text.Editor.ITextView,System.Threading.CancellationToken)">
            <summary>
            Asynchronously determines whether any <see cref="T:Microsoft.VisualStudio.Language.Intellisense.ISuggestedAction" />s are associated with the current caret 
            position in a given <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView" />.
            </summary>
            <param name="requestedActionCategories">A set of suggested action categories requested.</param>
            <param name="textView">The <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView" /> over which to determine whether any <see cref="T:Microsoft.VisualStudio.Language.Intellisense.ISuggestedAction" />s 
            are associated with the current caret position.</param>
            <param name="cancellationToken">Cancellation token to cancel this asynchronous operation.</param>
            <returns>A task that returns <c>true</c> if any <see cref="T:Microsoft.VisualStudio.Language.Intellisense.ISuggestedAction" />s are associated with the current caret 
            position in a given <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView" />, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Language.Intellisense.ILightBulbBroker.HasSuggestedActionsAsync(Microsoft.VisualStudio.Language.Intellisense.ISuggestedActionCategorySet,Microsoft.VisualStudio.Text.Editor.ITextView,Microsoft.VisualStudio.Text.ITrackingPoint,Microsoft.VisualStudio.Text.ITrackingSpan,System.Threading.CancellationToken)">
            <summary>
            Asynchronously determines whether any <see cref="T:Microsoft.VisualStudio.Language.Intellisense.ISuggestedAction" />s are associated with a given trigger point
            position and span in a given <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView" />.
            </summary>
            <param name="requestedActionCategories">A set of suggested action categories requested.</param>
            <param name="textView">The <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView" /> over which to determine whether any <see cref="T:Microsoft.VisualStudio.Language.Intellisense.ISuggestedAction" />s are associated \
            with a given trigger point position and span.</param>
            <param name="triggerPoint">The <see cref="T:Microsoft.VisualStudio.Text.ITrackingPoint" /> in the text buffer at which to determine whether any <see cref="T:Microsoft.VisualStudio.Language.Intellisense.ISuggestedAction" />s are
            associated with a given point position and span in a given <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView" />.</param>
            <param name="triggerSpan">The <see cref="T:Microsoft.VisualStudio.Text.ITrackingSpan" /> in the text buffer for which to determine whether any <see cref="T:Microsoft.VisualStudio.Language.Intellisense.ISuggestedAction" />s are 
            associated with a given trigger point position and span in a given <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView" />.</param>
            <param name="cancellationToken"></param>
            <returns>A task that returns <c>true</c> if any <see cref="T:Microsoft.VisualStudio.Language.Intellisense.ISuggestedAction" />s are associated with the current caret 
            position in a given <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView" />, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Language.Intellisense.ILightBulbBroker.CanCreateSession(Microsoft.VisualStudio.Language.Intellisense.ISuggestedActionCategorySet,Microsoft.VisualStudio.Text.Editor.ITextView)">
            <summary>
            Determines whether a <see cref="T:Microsoft.VisualStudio.Language.Intellisense.ILightBulbSession" /> can be created for a given <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView" />
            with current caret position as a trigger point.
            </summary>
            <param name="requestedActionCategories">A set of suggested action categories requested.</param>
            <param name="textView">The <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView" /> over which to determine if an <see cref="T:Microsoft.VisualStudio.Language.Intellisense.ILightBulbSession" /> can be created.</param>
            <returns><c>true</c> if a session can be created, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Language.Intellisense.ILightBulbBroker.CanCreateSession(Microsoft.VisualStudio.Language.Intellisense.ISuggestedActionCategorySet,Microsoft.VisualStudio.Text.Editor.ITextView,Microsoft.VisualStudio.Text.ITrackingPoint)">
            <summary>
            Determines whether a <see cref="T:Microsoft.VisualStudio.Language.Intellisense.ILightBulbSession" /> can be created for a given <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView" />
            at given trigger point.
            </summary>
            <param name="requestedActionCategories">A set of suggested action categories requested.</param>
            <param name="textView">The <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView" /> over which to determine if an <see cref="T:Microsoft.VisualStudio.Language.Intellisense.ILightBulbSession" /> can be created.</param>
            <param name="triggerPoint">The <see cref="T:Microsoft.VisualStudio.Text.ITrackingPoint" /> in the text buffer at which to determine if an <see cref="T:Microsoft.VisualStudio.Language.Intellisense.ILightBulbSession" /> can be created.</param>
            <returns><c>true</c> if a session can be created, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Language.Intellisense.ILightBulbBroker.CreateSession(Microsoft.VisualStudio.Language.Intellisense.ISuggestedActionCategorySet,Microsoft.VisualStudio.Text.Editor.ITextView)">
            <summary>
            Creates, but doesn't expand a <see cref="T:Microsoft.VisualStudio.Language.Intellisense.ILightBulbSession" /> for a given <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView" /> with current caret position
            as a trigger point.
            </summary>
            <param name="requestedActionCategories">A set of suggested action categories requested.</param>
            <param name="textView">The <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView" /> over which to create an <see cref="T:Microsoft.VisualStudio.Language.Intellisense.ILightBulbSession" />.</param>
            <returns>A valid instance of <see cref="T:Microsoft.VisualStudio.Language.Intellisense.ILightBulbSession" /> or null if no <see cref="T:Microsoft.VisualStudio.Language.Intellisense.ILightBulbSession" /> can be created for
            given text view and caret position.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Language.Intellisense.ILightBulbBroker.CreateSession(Microsoft.VisualStudio.Language.Intellisense.ISuggestedActionCategorySet,Microsoft.VisualStudio.Text.Editor.ITextView,Microsoft.VisualStudio.Text.ITrackingPoint,Microsoft.VisualStudio.Text.ITrackingSpan,System.Boolean)">
            <summary>
            Creates, but doesn't expand a <see cref="T:Microsoft.VisualStudio.Language.Intellisense.ILightBulbSession" /> for a given <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView" /> with current caret position
            as a trigger point.
            </summary>
            <param name="requestedActionCategories">A set of suggested action categories requested.</param>
            <param name="textView">The <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView" /> over which to create an <see cref="T:Microsoft.VisualStudio.Language.Intellisense.ILightBulbSession" />.</param>
            <param name="triggerPoint">The <see cref="T:Microsoft.VisualStudio.Text.ITrackingPoint" /> in the text buffer at which to create an <see cref="T:Microsoft.VisualStudio.Language.Intellisense.ILightBulbSession" />.</param>
            <param name="triggerSpan">The <see cref="T:Microsoft.VisualStudio.Text.ITrackingSpan" /> in the text buffer for which to create an <see cref="T:Microsoft.VisualStudio.Language.Intellisense.ILightBulbSession" />.</param>
            <param name="trackMouse">Determines whether the session should track the mouse.</param>
            <returns>A valid instance of <see cref="T:Microsoft.VisualStudio.Language.Intellisense.ILightBulbSession" /> or null if no <see cref="T:Microsoft.VisualStudio.Language.Intellisense.ILightBulbSession" /> can be created for
            given text view and caret position.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Language.Intellisense.ILightBulbBroker.TryExpandSession(Microsoft.VisualStudio.Language.Intellisense.ISuggestedActionCategorySet,Microsoft.VisualStudio.Text.Editor.ITextView)">
            <summary>
            Tries to create and expand <see cref="T:Microsoft.VisualStudio.Language.Intellisense.ILightBulbSession" /> for the specified <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView" />.
            If the session already exists, this method expands it.
            </summary>
            <param name="requestedActionCategories">A set of suggested action categories requested.</param>
            <param name="textView">The <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView" /> for which to create and expand an <see cref="T:Microsoft.VisualStudio.Language.Intellisense.ILightBulbSession" />.</param>
            <returns><c>true</c> if <see cref="T:Microsoft.VisualStudio.Language.Intellisense.ILightBulbSession" /> was successfully created and expanded, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Language.Intellisense.ILightBulbBroker.TryExpandSession(Microsoft.VisualStudio.Language.Intellisense.ISuggestedActionCategorySet,Microsoft.VisualStudio.Text.Editor.ITextView,Microsoft.VisualStudio.Text.ITrackingPoint,Microsoft.VisualStudio.Text.ITrackingSpan,System.Boolean)">
            <summary>
            Tries to create and expand <see cref="T:Microsoft.VisualStudio.Language.Intellisense.ILightBulbSession" /> for the specified <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView" />.
            </summary>
            <param name="requestedActionCategories">A set of suggested action categories requested.</param>
            <param name="textView">The <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView" /> for which to create and expand an <see cref="T:Microsoft.VisualStudio.Language.Intellisense.ILightBulbSession" />.</param>
            <param name="triggerPoint">The <see cref="T:Microsoft.VisualStudio.Text.ITrackingPoint" /> in the text buffer at which to create an <see cref="T:Microsoft.VisualStudio.Language.Intellisense.ILightBulbSession" />.</param>
            <param name="triggerSpan">The <see cref="T:Microsoft.VisualStudio.Text.ITrackingSpan" /> in the text buffer for which to create an <see cref="T:Microsoft.VisualStudio.Language.Intellisense.ILightBulbSession" />.</param>
            <param name="trackMouse">Determines whether the session should track the mouse.</param>
            <returns><c>true</c> if <see cref="T:Microsoft.VisualStudio.Language.Intellisense.ILightBulbSession" /> was successfully created and expanded, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Language.Intellisense.ILightBulbBroker.DismissSession(Microsoft.VisualStudio.Text.Editor.ITextView)">
            <summary>
            Dismisses an active <see cref="T:Microsoft.VisualStudio.Language.Intellisense.ILightBulbSession" /> for a particular <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView" />.
            </summary>
            <param name="textView">The <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView" /> over which to dismiss an active <see cref="T:Microsoft.VisualStudio.Language.Intellisense.ILightBulbSession" /> (if any).</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Language.Intellisense.ILightBulbBroker.IsSupportedContentType(Microsoft.VisualStudio.Utilities.IContentType)">
            <summary>
            Determines whether there is at least one <see cref="T:Microsoft.VisualStudio.Language.Intellisense.ISuggestedActionsSourceProvider" /> supporting
            given content type.
            </summary>
            <param name="contentType">The content type to check if there is at least one <see cref="T:Microsoft.VisualStudio.Language.Intellisense.ISuggestedActionsSourceProvider" /> supporting it.</param>
            <returns><c>true</c> if there is at least one <see cref="T:Microsoft.VisualStudio.Language.Intellisense.ISuggestedActionsSourceProvider" /> supporting given content type, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Language.Intellisense.ILightBulbBroker.GetSuggestedActionsSources(Microsoft.VisualStudio.Text.Editor.ITextView,Microsoft.VisualStudio.Text.ITextBuffer)">
            <summary>
            Gets a list of <see cref="T:Microsoft.VisualStudio.Language.Intellisense.ISuggestedActionsSource" />s for given <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView" /> and <see cref="T:Microsoft.VisualStudio.Text.ITextBuffer" />.
            </summary>
            <param name="textView">The <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView" /> for which to get the list of <see cref="T:Microsoft.VisualStudio.Language.Intellisense.ISuggestedActionsSource" />s.</param>
            <param name="buffer">The <see cref="T:Microsoft.VisualStudio.Text.ITextBuffer" /> for which to get the list of <see cref="T:Microsoft.VisualStudio.Language.Intellisense.ISuggestedActionsSource" />s.</param>
            <returns>A list of <see cref="T:Microsoft.VisualStudio.Language.Intellisense.ISuggestedActionsSource" />s for given <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView" /> and <see cref="T:Microsoft.VisualStudio.Text.ITextBuffer" />
            or null if no <see cref="T:Microsoft.VisualStudio.Language.Intellisense.ISuggestedActionsSource" />s support given <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView" /> and <see cref="T:Microsoft.VisualStudio.Text.ITextBuffer" />.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Language.Intellisense.ILightBulbBroker2">
            <summary>
            Represents a LightBulb broker, which is globally responsible for managing <see cref="T:Microsoft.VisualStudio.Language.Intellisense.ILightBulbSession" />s.
            </summary>
            <remarks>This is a MEF component, and should be imported as follows:
            [Import]
            ILightBulbBroker2 lightBulbBroker = null;
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Language.Intellisense.ILightBulbBroker2.GetSuggestedActionCategoriesAsync(Microsoft.VisualStudio.Language.Intellisense.ISuggestedActionCategorySet,Microsoft.VisualStudio.Text.Editor.ITextView,System.Threading.CancellationToken)">
            <summary>
            Asynchronously gets an <see cref="T:Microsoft.VisualStudio.Language.Intellisense.ISuggestedActionCategorySet" /> containing all categories with applicable actions.
            </summary>
            <param name="requestedActionCategories">A set of suggested action categories requested.</param>
            <param name="textView">The <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView" /> over which to determine whether any <see cref="T:Microsoft.VisualStudio.Language.Intellisense.ISuggestedAction" />s 
            are associated with the current caret position.</param>
            <param name="cancellationToken">Cancellation token to cancel this asynchronous operation.</param>
            <returns>
            A task that returns the <see cref="T:Microsoft.VisualStudio.Language.Intellisense.ISuggestedActionCategorySet" /> of categories with applicable actions.
            </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Language.Intellisense.ILightBulbBroker2.GetSuggestedActionCategoriesAsync(Microsoft.VisualStudio.Language.Intellisense.ISuggestedActionCategorySet,Microsoft.VisualStudio.Text.Editor.ITextView,Microsoft.VisualStudio.Text.ITrackingPoint,Microsoft.VisualStudio.Text.ITrackingSpan,System.Threading.CancellationToken)">
            <summary>
            Asynchronously gets an <see cref="T:Microsoft.VisualStudio.Language.Intellisense.ISuggestedActionCategorySet" /> containing all categories with applicable actions.
            </summary>
            <param name="requestedActionCategories">A set of suggested action categories requested.</param>
            <param name="textView">The <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView" /> over which to determine whether any <see cref="T:Microsoft.VisualStudio.Language.Intellisense.ISuggestedAction" />s 
            are associated with the current caret position.</param>
            <param name="triggerPoint">The <see cref="T:Microsoft.VisualStudio.Text.ITrackingPoint" /> in the text buffer at which to determine whether any <see cref="T:Microsoft.VisualStudio.Language.Intellisense.ISuggestedAction" />s are
            associated with a given point position and span in a given <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView" />.</param>
            <param name="trackingSpan">The <see cref="T:Microsoft.VisualStudio.Text.ITrackingSpan" /> in the text buffer for which to determine whether any <see cref="T:Microsoft.VisualStudio.Language.Intellisense.ISuggestedAction" />s are 
            associated with a given trigger point position and span in a given <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView" />.</param>
            <param name="cancellationToken">Cancellation token to cancel this asynchronous operation.</param>
            <returns>
            A task that returns the <see cref="T:Microsoft.VisualStudio.Language.Intellisense.ISuggestedActionCategorySet" /> of categories with applicable actions.
            </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Language.Intellisense.ILightBulbBroker2.CreateSession(Microsoft.VisualStudio.Language.Intellisense.ISuggestedActionCategorySet,Microsoft.VisualStudio.Text.Editor.ITextView,Microsoft.VisualStudio.Language.Intellisense.ISuggestedActionCategorySet)">
            <summary>
            Creates, but doesn't expand an <see cref="T:Microsoft.VisualStudio.Language.Intellisense.ILightBulbSession" /> for a given <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView" /> with current caret position
            as a trigger point.
            </summary>
            <param name="requestedActionCategories">A set of suggested action categories requested.</param>
            <param name="textView">The <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView" /> over which to create an <see cref="T:Microsoft.VisualStudio.Language.Intellisense.ILightBulbSession" />.</param>
            <param name="applicableCategories">
            The <see cref="T:Microsoft.VisualStudio.Language.Intellisense.ISuggestedActionCategorySet" /> of categories with applicable actions.
            </param>
            <returns>A valid instance of <see cref="T:Microsoft.VisualStudio.Language.Intellisense.ILightBulbSession" /> or null if no <see cref="T:Microsoft.VisualStudio.Language.Intellisense.ILightBulbSession" /> can be created for
            given text view and caret position.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Language.Intellisense.ILightBulbBroker2.CreateSession(Microsoft.VisualStudio.Language.Intellisense.ISuggestedActionCategorySet,Microsoft.VisualStudio.Text.Editor.ITextView,Microsoft.VisualStudio.Text.ITrackingPoint,Microsoft.VisualStudio.Text.ITrackingSpan,Microsoft.VisualStudio.Language.Intellisense.ISuggestedActionCategorySet,System.Boolean)">
            <summary>
            Creates, but doesn't expand an <see cref="T:Microsoft.VisualStudio.Language.Intellisense.ILightBulbSession" /> for a given <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView" /> with current caret position
            as a trigger point.
            </summary>
            <param name="requestedActionCategories">A set of suggested action categories requested.</param>
            <param name="textView">The <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView" /> over which to create an <see cref="T:Microsoft.VisualStudio.Language.Intellisense.ILightBulbSession" />.</param>
            <param name="triggerPoint">The <see cref="T:Microsoft.VisualStudio.Text.ITrackingPoint" /> in the text buffer at which to create an <see cref="T:Microsoft.VisualStudio.Language.Intellisense.ILightBulbSession" />.</param>
            <param name="trackingSpan">The <see cref="T:Microsoft.VisualStudio.Text.ITrackingSpan" /> in the text buffer for which to create an <see cref="T:Microsoft.VisualStudio.Language.Intellisense.ILightBulbSession" />.</param>
            <param name="applicableCategories">
            The <see cref="T:Microsoft.VisualStudio.Language.Intellisense.ISuggestedActionCategorySet" /> of categories with applicable actions.
            </param>
            <param name="trackMouse">Determines whether the session should track the mouse.</param>
            <returns>A valid instance of <see cref="T:Microsoft.VisualStudio.Language.Intellisense.ILightBulbSession" /> or null if no <see cref="T:Microsoft.VisualStudio.Language.Intellisense.ILightBulbSession" /> can be created for
            given text view and caret position.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Language.Intellisense.ILightBulbBroker3">
            <summary>
            Represents a LightBulb broker, which is globally responsible for managing <see cref="T:Microsoft.VisualStudio.Language.Intellisense.ILightBulbSession" />s.
            </summary>
            <remarks>This is a MEF component, and should be imported as follows:
            [Import]
            ILightBulbBroker3 lightBulbBroker = null;
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Language.Intellisense.ILightBulbBroker3.TryExpandSession(Microsoft.VisualStudio.Language.Intellisense.ISuggestedActionCategorySet,Microsoft.VisualStudio.Text.Editor.ITextView,Microsoft.VisualStudio.Utilities.IUIThreadOperationContext)">
            <summary>
            Tries to create and expand <see cref="T:Microsoft.VisualStudio.Language.Intellisense.ILightBulbSession" /> for the specified <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView" />.
            If the session already exists, this method expands it.
            </summary>
            <param name="requestedActionCategories">A set of suggested action categories requested.</param>
            <param name="textView">The <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView" /> for which to create and expand an <see cref="T:Microsoft.VisualStudio.Language.Intellisense.ILightBulbSession" />.</param>
            <param name="operationContext">Operation context of executing this method on the UI thread. Provides access to user cancellation token.</param>
            <returns><c>true</c> if <see cref="T:Microsoft.VisualStudio.Language.Intellisense.ILightBulbSession" /> was successfully created and expanded, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Language.Intellisense.ILightBulbBroker3.TryExpandSession(Microsoft.VisualStudio.Language.Intellisense.ISuggestedActionCategorySet,Microsoft.VisualStudio.Text.Editor.ITextView,Microsoft.VisualStudio.Text.ITrackingPoint,Microsoft.VisualStudio.Text.ITrackingSpan,System.Boolean,Microsoft.VisualStudio.Utilities.IUIThreadOperationContext)">
            <summary>
            Tries to create and expand <see cref="T:Microsoft.VisualStudio.Language.Intellisense.ILightBulbSession" /> for the specified <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView" />.
            </summary>
            <param name="requestedActionCategories">A set of suggested action categories requested.</param>
            <param name="textView">The <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView" /> for which to create and expand an <see cref="T:Microsoft.VisualStudio.Language.Intellisense.ILightBulbSession" />.</param>
            <param name="triggerPoint">The <see cref="T:Microsoft.VisualStudio.Text.ITrackingPoint" /> in the text buffer at which to create an <see cref="T:Microsoft.VisualStudio.Language.Intellisense.ILightBulbSession" />.</param>
            <param name="triggerSpan">The <see cref="T:Microsoft.VisualStudio.Text.ITrackingSpan" /> in the text buffer for which to create an <see cref="T:Microsoft.VisualStudio.Language.Intellisense.ILightBulbSession" />.</param>
            <param name="trackMouse">Determines whether the session should track the mouse.</param>
            <param name="operationContext">Operation context of executing this method on the UI thread. Provides access to user cancellation token.</param>
            <returns><c>true</c> if <see cref="T:Microsoft.VisualStudio.Language.Intellisense.ILightBulbSession" /> was successfully created and expanded, <c>false</c> otherwise.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Language.Intellisense.ILightBulbSession">
            <summary>
            Defines a Light Bulb session, which encapsulates all the information about a particular Light Bulb instance.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.Intellisense.ILightBulbSession.IsCollapsed">
            <summary>
            Determines whether the session is in the collapsed state.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.Intellisense.ILightBulbSession.IsExpanded">
            <summary>
            Determines whether the session is in the expanded state.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Language.Intellisense.ILightBulbSession.TryGetSuggestedActionSets(System.Collections.Generic.IEnumerable{Microsoft.VisualStudio.Language.Intellisense.SuggestedActionSet}@)">
            <summary>
            Tries to get the list of <see cref="T:Microsoft.VisualStudio.Language.Intellisense.ISuggestedAction" />s (grouped into <see cref="T:Microsoft.VisualStudio.Language.Intellisense.SuggestedActionSet" />s)
            this session displays.
            </summary>
            <param name="actionSets">Resulting list of <see cref="T:Microsoft.VisualStudio.Language.Intellisense.SuggestedActionSet" />s.</param>
            <returns><see cref="T:Microsoft.VisualStudio.Language.Intellisense.QuerySuggestedActionCompletionStatus" /> indicating whether the operation completed successfully
            or was canceled.</returns>
            <remarks>
            Note that this method is intended to be called in response to a user action (such as Light Bulb expansion)
            and will show a wait dialog if it takes too long to complete.
            </remarks>
            <remarks>
            This method queries synchronous providers only.
            Use <see cref="M:Microsoft.VisualStudio.Language.Intellisense.IAsyncLightBulbSession.PopulateWithDataAsync(Microsoft.VisualStudio.Language.Intellisense.ISuggestedActionCategorySet,Microsoft.VisualStudio.Utilities.IUIThreadOperationContext)" /> to correctly query all providers.
            </remarks>
            <remarks>
            Must be called on the UI thread
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Language.Intellisense.ILightBulbSession.Expand">
            <summary>
            Expands the session.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Language.Intellisense.ILightBulbSession.Reset">
            <summary>
            Resets the session content.
            </summary>
        </member>
        <member name="E:Microsoft.VisualStudio.Language.Intellisense.ILightBulbSession.Collapsed">
            <summary>
            Fires when the session is collapsed.
            </summary>
        </member>
        <member name="E:Microsoft.VisualStudio.Language.Intellisense.ILightBulbSession.Expanded">
            <summary>
            Fires when the session is expanded.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.Intellisense.ILightBulbSession.TrackMouse">
            <summary>
            Determines whether this session tracks the mouse.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.Intellisense.ILightBulbSession.ApplicableToSpan">
            <summary>
            Gets the visual span to which this session is applicable in the text buffer. This is used to position the Light Bulb presentation
            that is rendered by Light Bulb presenters.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.Intellisense.ILightBulbSession.ActionCategories">
            <summary>
            Gets a set of suggested action categories this session was requested to provide.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Language.Intellisense.IntellisenseFilter.#ctor(Microsoft.VisualStudio.Imaging.Interop.ImageMoniker,System.String,System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
            Create an instance of an IntellisenseFilter with the specified attributes.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.Intellisense.IntellisenseFilter.Moniker">
            <summary>
            The icon shown on the filter's button.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.Intellisense.IntellisenseFilter.ToolTip">
            <summary>
            The tooltip shown when the mouse hovers over the button.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.Intellisense.IntellisenseFilter.AccessKey">
            <summary>
            The key used to toggle the filter's state.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.Intellisense.IntellisenseFilter.AutomationText">
            <summary>
            String used to represent the button for automation.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.Intellisense.IntellisenseFilter.IsChecked">
            <summary>
            Has the user turned the filter on?
            </summary>
            <remarks>
            The setter will be called when the user toggles the corresponding filter button.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.Intellisense.IntellisenseFilter.IsEnabled">
            <summary>
            Is the filter enabled?
            </summary>
            <remarks>
            <para>Disabled filters are shown but are grayed out.</para>
            <para>Intellisense will never call the setter but the <see cref="T:Microsoft.VisualStudio.Language.Intellisense.CompletionSet2" /> owner may and the Intellisense popup will respect the changes.</para>
            </remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.Language.Intellisense.IntellisenseKeyboardCommand">
            <summary>
            Represents the set of keyboard commands that can be issued to IntelliSense presenters.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Language.Intellisense.IntellisenseKeyboardCommand.Up">
            <summary>
            The up arrow command.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Language.Intellisense.IntellisenseKeyboardCommand.Down">
            <summary>
            The down arrow command.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Language.Intellisense.IntellisenseKeyboardCommand.PageUp">
            <summary>
            The page up command.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Language.Intellisense.IntellisenseKeyboardCommand.PageDown">
            <summary>
            The page down command.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Language.Intellisense.IntellisenseKeyboardCommand.TopLine">
            <summary>
            The go to the top line command
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Language.Intellisense.IntellisenseKeyboardCommand.BottomLine">
            <summary>
            The go to the bottom line command.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Language.Intellisense.IntellisenseKeyboardCommand.Home">
            <summary>
            The home command.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Language.Intellisense.IntellisenseKeyboardCommand.End">
            <summary>
            The end command.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Language.Intellisense.IntellisenseKeyboardCommand.Enter">
            <summary>
            The enter, or return, command.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Language.Intellisense.IntellisenseKeyboardCommand.Escape">
            <summary>
            The escape command.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Language.Intellisense.IntellisenseKeyboardCommand.IncreaseFilterLevel">
            <summary>
            The increase filter level command. 
            </summary>
            <remarks>
             This command is most often used in tabbed completion to switch between the completion tabs.
            </remarks>
        </member>
        <member name="F:Microsoft.VisualStudio.Language.Intellisense.IntellisenseKeyboardCommand.DecreaseFilterLevel">
            <summary>
            The decrease filter level command.  
            </summary>
            <remarks>
            This command is most often used in tabbed completion to switch between the completion tabs.
            </remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.Language.Intellisense.IntellisenseSpaceReservationManagerNames">
            <summary>
            Defines the names of the space reservation managers used by the default IntelliSense presenters.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Language.Intellisense.IntellisenseSpaceReservationManagerNames.CompletionSpaceReservationManagerName">
            <summary>
            The space reservation manager name for statement completion.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Language.Intellisense.IntellisenseSpaceReservationManagerNames.SignatureHelpSpaceReservationManagerName">
            <summary>
            The space reservation manager name for signature help.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Language.Intellisense.IntellisenseSpaceReservationManagerNames.QuickInfoSpaceReservationManagerName">
            <summary>
            The space reservation manager name for Quick Info.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Language.Intellisense.IntellisenseSpaceReservationManagerNames.SmartTagSpaceReservationManagerName">
            <summary>
            The space reservation manager name for smart tags.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Language.Intellisense.IParameter">
            <summary>
            Represents an individual parameter description inside the description of a signature.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.Intellisense.IParameter.Signature">
            <summary>
            Gets the signature of which this parameter is a part.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.Intellisense.IParameter.Name">
            <summary>
            Gets the name of this parameter. 
            </summary>
            <remarks>
            This is displayed to identify the parameter.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.Intellisense.IParameter.Documentation">
            <summary>
            Gets the documentation associated with the parameter.  
            </summary>
            <remarks>
            This is displayed to describe
            the parameter.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.Intellisense.IParameter.Locus">
            <summary>
            Gets the text location of this parameter relative to the signature's content.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.Intellisense.IParameter.PrettyPrintedLocus">
            <summary>
            Gets the text location of this parameter relative to the signature's pretty-printed content.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Language.Intellisense.IPopupIntellisensePresenter">
            <summary>
            Defines an IntelliSense presenter that is rendered as a popup within an
            <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView" />.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.Intellisense.IPopupIntellisensePresenter.SurfaceElement">
            <summary>
            Gets the WPF <see cref="T:System.Windows.UIElement" /> that the presenter wants to be displayed inside a
            <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView" /> popup.
            </summary>
        </member>
        <member name="E:Microsoft.VisualStudio.Language.Intellisense.IPopupIntellisensePresenter.SurfaceElementChanged">
            <summary>
            Occurs when the WPF SurfaceElement is changed.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.Intellisense.IPopupIntellisensePresenter.PresentationSpan">
            <summary>
            Gets the <see cref="T:Microsoft.VisualStudio.Text.ITrackingSpan" /> to which this presenter is related.  
            </summary>
            <remarks>
            This property is used to determine where to
            place the <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView" /> popup inside of which the presenter's
            SurfaceElement is hosted.
            </remarks>
        </member>
        <member name="E:Microsoft.VisualStudio.Language.Intellisense.IPopupIntellisensePresenter.PresentationSpanChanged">
            <summary>
            Occurs when the PresentationSpan property changes.  
            </summary>
            <remarks>
            This is the way popup presenters signal that they should be moved.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.Intellisense.IPopupIntellisensePresenter.PopupStyles">
            <summary>
            Gets a set of flags that determine the popup style.
            </summary>
        </member>
        <member name="E:Microsoft.VisualStudio.Language.Intellisense.IPopupIntellisensePresenter.PopupStylesChanged">
            <summary>
            Occurs when the PopupStyles property changes.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.Intellisense.IPopupIntellisensePresenter.SpaceReservationManagerName">
            <summary>
            Gets the name of the space reservation manager that should be used to create popups for this presenter.  
            </summary>
            <remarks>
            Space reservation
            managers can be ordered, thus ensuring predictable popup placement.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.Intellisense.IPopupIntellisensePresenter.Opacity">
            <summary>
            Gets or sets the opacity of this popup presenter.  
            </summary>
            <remarks>
            The presenter should use this property to set the
            opacity of its surface element and of any other text-obscuring UI elements it has provided.
            </remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.Language.Intellisense.ISignature">
            <summary>
            Represents an individual signature displayed in a tool, such as the signature help tool.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.Intellisense.ISignature.ApplicableToSpan">
            <summary>
            Gets the span of text in the buffer to which this signature help is applicable.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.Intellisense.ISignature.Content">
            <summary>
            Gets the content of the signature, including all the characters to be displayed.  
            </summary>
            <remarks>
            This text may appear in a text view, and can be colored using a standard classifier mechanism.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.Intellisense.ISignature.PrettyPrintedContent">
            <summary>
            Gets the content of the signature, pretty-printed into a form suitable for display on-screen.
            </summary>
            <remarks>
            Pretty-printed signatures are usually displayed in width-constrained environments when the regular signature content
            cannot be displayed on one line.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.Intellisense.ISignature.Documentation">
            <summary>
            Gets the content of the documentation associated with this signature.  
            </summary>
            <remarks>
            This text may appear
            alongside the signature in an IntelliSense tool.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.Intellisense.ISignature.Parameters">
            <summary>
            Gets the list of parameters that this signature knows about.  
            </summary>
            <remarks>
            Each parameter has information relating to its text position
            within the signature string.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.Intellisense.ISignature.CurrentParameter">
            <summary>
            Gets the current parameter for this signature.  
            </summary>
            <remarks>
            When the caret is within the signature's applicability
            span, this value is the parameter over which the caret is positioned. When the caret is not within the signature's
            applicability span, this value is undefined.
            </remarks>
        </member>
        <member name="E:Microsoft.VisualStudio.Language.Intellisense.ISignature.CurrentParameterChanged">
            <summary>
            Occurs when the current parameter changes.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Language.Intellisense.ISignatureHelpBroker">
            <summary>
            Defines the signature help broker, which is the primary component of the signature help process.  
            </summary>
            <remarks>
            The broker is responsible for
            handling each signature help session from beginning to end. IntelliSense controllers
            request this broker to trigger or dismiss signature help. The broker can also be used by other components to determine the
            state of signature help or to trigger the process.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Language.Intellisense.ISignatureHelpBroker.TriggerSignatureHelp(Microsoft.VisualStudio.Text.Editor.ITextView)">
            <summary>
            Begins the process of signature help at the position of the caret.
            </summary>
            <param name="textView">The <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView" /> over which to trigger signature help.</param>
            <returns>A valid signature help session. May be null if no session could be created.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Language.Intellisense.ISignatureHelpBroker.TriggerSignatureHelp(Microsoft.VisualStudio.Text.Editor.ITextView,Microsoft.VisualStudio.Text.ITrackingPoint,System.Boolean)">
            <summary>
            Starts the process of signature help at the specified point.
            </summary>
            <param name="textView">The <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView" /> over which to trigger signature help.</param>
            <param name="triggerPoint">The point in the text buffer at which signature help is requested.</param>
            <param name="trackCaret">
            <c>true</c> if this session should track the caret, <c>false</c> otherwise. When the caret is tracked,
            the only items to be displayed are those whose applicability
            span contains the caret.
            </param>
            <returns>A valid signature help session. May be null if no session could be created.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Language.Intellisense.ISignatureHelpBroker.CreateSignatureHelpSession(Microsoft.VisualStudio.Text.Editor.ITextView,Microsoft.VisualStudio.Text.ITrackingPoint,System.Boolean)">
            <summary>
            Creates a signature help session without starting it.
            </summary>
            <param name="textView">The <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView" /> over which signature help is requested.</param>
            <param name="triggerPoint">The point in the text buffer at which signature help is requested.</param>
            <param name="trackCaret">
            <c>true</c> if this session should track the caret, <c>false</c> otherwise. When the caret is tracked,
            the only items to be displayed are those whose applicability
            span contains the caret.
            </param>
            <returns>A valid, unstarted signature help session. May be null if no session could be created.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Language.Intellisense.ISignatureHelpBroker.DismissAllSessions(Microsoft.VisualStudio.Text.Editor.ITextView)">
            <summary>
            Dismisses any active signature help sessions in this broker's <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView" />. 
            </summary>
            <param name="textView">The <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView" /> over which all signature help sessions should be dismissed.</param>
            <remarks>
            This method is valid only when called while signature help is active.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Language.Intellisense.ISignatureHelpBroker.IsSignatureHelpActive(Microsoft.VisualStudio.Text.Editor.ITextView)">
            <summary>
            Determines whether signature help is active.
            </summary>
            <param name="textView">The <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView" /> over signature help status should be determined.</param>
            <returns>
            <c>true</c> if there is at least one signature help session over the specified <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView" />, <c>false</c>
            otherwise.
            </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Language.Intellisense.ISignatureHelpBroker.GetSessions(Microsoft.VisualStudio.Text.Editor.ITextView)">
            <summary>
            Gets the list of all signature help sessions for this broker's <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView" />.
            </summary>
            <param name="textView">The <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView" /> over which to retrieve signature help sessions.</param>
            <returns>A <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> of signature help sessions.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Language.Intellisense.ISignatureHelpSession">
            <summary>
            Defines an IntelliSense session used for displaying signature help.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.Intellisense.ISignatureHelpSession.Signatures">
            <summary>
            Gets the set of valid signatures for this session.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.Intellisense.ISignatureHelpSession.SelectedSignature">
            <summary>
            Gets the signature from among the set of valid signatures that is currently selected.
            </summary>
        </member>
        <member name="E:Microsoft.VisualStudio.Language.Intellisense.ISignatureHelpSession.SelectedSignatureChanged">
            <summary>
            Occurs when the SelectedSignature property changes.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Language.Intellisense.ISignatureHelpSource">
            <summary>
            Defines a provider of signature help information that is used in the IntelliSense process.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Language.Intellisense.ISignatureHelpSource.AugmentSignatureHelpSession(Microsoft.VisualStudio.Language.Intellisense.ISignatureHelpSession,System.Collections.Generic.IList{Microsoft.VisualStudio.Language.Intellisense.ISignature})">
            <summary>
            Determines which <see cref="T:Microsoft.VisualStudio.Language.Intellisense.ISignature" />s should be part of the specified <see cref="T:Microsoft.VisualStudio.Language.Intellisense.ISignatureHelpSession" />.
            </summary>
            <param name="session">The session for which completions are to be computed.</param>
            <param name="signatures">The set of the <see cref="T:Microsoft.VisualStudio.Language.Intellisense.ISignature" />s to be added to the session.</param>
            <remarks>
            Each applicable <see cref="M:Microsoft.VisualStudio.Language.Intellisense.ISignatureHelpSource.AugmentSignatureHelpSession(Microsoft.VisualStudio.Language.Intellisense.ISignatureHelpSession,System.Collections.Generic.IList{Microsoft.VisualStudio.Language.Intellisense.ISignature})" /> instance will be called in-order to
            (re)calculate a <see cref="T:Microsoft.VisualStudio.Language.Intellisense.ISignatureHelpSession" />.  <see cref="T:Microsoft.VisualStudio.Language.Intellisense.ISignature" />s can be added to the session by adding
            them to the signatures collection passed-in as a parameter.  In addition, by removing items from the collection, a
            source may filter <see cref="T:Microsoft.VisualStudio.Language.Intellisense.ISignature" />s provided by <see cref="T:Microsoft.VisualStudio.Language.Intellisense.ISignatureHelpSource" />s earlier in the calculation
            chain.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Language.Intellisense.ISignatureHelpSource.GetBestMatch(Microsoft.VisualStudio.Language.Intellisense.ISignatureHelpSession)">
            <summary>
            Computes the best matching <see cref="T:Microsoft.VisualStudio.Language.Intellisense.ISignature" /> instance for the given signature help session. Only the highest-
            priority signature help provider is asked for this information.
            </summary>
            <param name="session">
            The <see cref="T:Microsoft.VisualStudio.Language.Intellisense.ISignatureHelpSession" /> for which the best matching <see cref="T:Microsoft.VisualStudio.Language.Intellisense.ISignature" /> should be determined.
            </param>
            <returns>
            A valid <see cref="T:Microsoft.VisualStudio.Language.Intellisense.ISignature" /> that is also a member of the Signatures collection of the specified
            <see cref="T:Microsoft.VisualStudio.Language.Intellisense.ISignatureHelpSession" />. It can return null if no best match could be determined, 
            and the next highest-priority signature help provider will be asked to determine the best match.
            </returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Language.Intellisense.ISignatureHelpSourceProvider">
            <summary>
            Defines an extension used to create signature help providers from a given <see cref="T:Microsoft.VisualStudio.Text.ITextBuffer" /> opened in a given
            context.
            </summary>
            <remarks>
            This is a MEF component part, and should be exported with the following attribute:
            [Export(typeof(ISignaturehelpSourceProvider))]
            Component exporters must add at least one ContentType attribute to specify the
            content types for which the component is valid, and an Order to specify its order in the chain of signature help providers.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Language.Intellisense.ISignatureHelpSourceProvider.TryCreateSignatureHelpSource(Microsoft.VisualStudio.Text.ITextBuffer)">
            <summary>
            Attempts to create a signature help provider for the given text buffer opened in the given context.
            </summary>
            <param name="textBuffer">The text buffer for which to create a signature help provider.</param>
            <returns>A valid signature help provider, or null if none could be created.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Language.Intellisense.ITelemetryDiagnosticID`1">
            <summary>
            Represents an object that can provide a Diagnostic ID for telemetry purposes.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Language.Intellisense.ITelemetryDiagnosticID`1.GetDiagnosticID">
            <summary>
            Get Diagnostic ID for telemetry purposes.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Language.Intellisense.ITextFormattable">
            <summary>
            Defines a contract for implementors to override the text formatting properties for an object.
            </summary>
            <remarks>
            This will mainly be implemented by <see cref="T:Microsoft.VisualStudio.Language.Intellisense.Completion" /> instances that wish to override their textual presentation in
            the statement completion presenter.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Language.Intellisense.ITextFormattable.GetTextRunProperties(System.Windows.Media.TextFormatting.TextRunProperties)">
            <summary>
            Gets a set of <see cref="T:System.Windows.Media.TextFormatting.TextRunProperties" /> that will override the "default" <see cref="T:System.Windows.Media.TextFormatting.TextRunProperties" /> used to
            display this object's text.
            </summary>
            <param name="defaultTextRunProperties">
            The set of <see cref="T:System.Windows.Media.TextFormatting.TextRunProperties" /> that would have been used to present this object had no overriding taken
            place.
            </param>
            <returns>A set of <see cref="T:System.Windows.Media.TextFormatting.TextRunProperties" /> that should be used to display this object's text.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Language.Intellisense.ITextFormattable.GetHighlightedTextRunProperties(System.Windows.Media.TextFormatting.TextRunProperties)">
            <summary>
            Gets a set of <see cref="T:System.Windows.Media.TextFormatting.TextRunProperties" /> that will override the "default" <see cref="T:System.Windows.Media.TextFormatting.TextRunProperties" /> used to
            display this object's text when this object is highlighted.
            </summary>
            <param name="defaultHighlightedTextRunProperties">The set of <see cref="T:System.Windows.Media.TextFormatting.TextRunProperties" /> that would have been used to present the highlighted object had no
            overriding taken place.</param>
            <returns>A set of <see cref="T:System.Windows.Media.TextFormatting.TextRunProperties" /> that should be used to display this object's highlighted text.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Language.Intellisense.IUIElementProvider`2">
            <summary>
            Defines the provider of WPF UIElements for objects of a certain type, for a specified context.
            </summary>
            <typeparam name="TItem">The type of the item.</typeparam>
            <typeparam name="TContext">The type of the context.</typeparam>
            <remarks>
            This is a MEF component part, and should be exported with the following attribute:
            [Export(typeof(IUIElementProvider&lt;T&gt;))]
            [Name("")]
            [Order()]
            [ContentType("")]
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Language.Intellisense.IUIElementProvider`2.GetUIElement(`0,`1,Microsoft.VisualStudio.Language.Intellisense.UIElementType)">
            <summary>
            Gets a UIElement to display an item for the specified the context.
            </summary>
            <param name="itemToRender">The item for which to return a UIElement.</param>
            <param name="context">The context in which the item is to be rendered.</param>
            <param name="elementType">The type of UIElement to be returned.</param>
            <returns>A valid WPF UIElement, or null if none could be created.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Language.Intellisense.IWpfKeyboardTrackingService">
            <summary>
            Defines a MEF service responsible for tracking the keyboard in hosts of the WPF editor.  Keyboard tracking is necessary as
            some hosts (such as VisualStudio) do their own keyboard handling, causing inconsistent behavior of WPF elements, even when
            they have keyboard focus.  By tracking the keyboard, all keyboard events will be routed to WPF first, giving focused WPF
            controls a shot at handling keyboard events.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Language.Intellisense.IWpfKeyboardTrackingService.BeginTrackingKeyboard(System.IntPtr,System.Collections.Generic.IList{System.UInt32})">
            <summary>
            Starts tracking the keyboard.  Once called, all keyboard events will be routed to WPF first, before the host application
            sees them.
            </summary>
            <param name="handle">A valid Win32 window handle (HWND) to which messages should be redirected</param>
            <param name="messagesToCapture">A list of Win32 messages to redirect to the specified window handle</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Language.Intellisense.IWpfKeyboardTrackingService.EndTrackingKeyboard">
            <summary>
            Stops tracking the keyboard.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Language.Intellisense.IQuickInfoBroker">
            <summary>
            Defines a Quick Info broker.  
            </summary>
            <remarks>
            The broker is responsible for triggering Quick Info sessions
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Language.Intellisense.IQuickInfoBroker.IsQuickInfoActive(Microsoft.VisualStudio.Text.Editor.ITextView)">
            <summary>
            Determines whether there is at least one active Quick Info session in the specified <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView" />.
            </summary>
            <param name="textView">The <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView" /> for which Quick Info session status is to be determined.</param>
            <returns>
            <c>true</c> if there is at least one active Quick Info session over the specified <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView" />, <c>false</c>
            otherwise.
            </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Language.Intellisense.IQuickInfoBroker.TriggerQuickInfo(Microsoft.VisualStudio.Text.Editor.ITextView)">
            <summary>
            Triggers Quick Info at the position of the caret in the specified <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView" />.  
            </summary>
            <param name="textView">The <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView" /> for which Quick Info is to be triggered.</param>
            <returns>A valid Quick Info session, or null if none could be created.</returns>
            <remarks>
            Quick Info is triggered in the <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView" /> to which this
            broker is attached.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Language.Intellisense.IQuickInfoBroker.TriggerQuickInfo(Microsoft.VisualStudio.Text.Editor.ITextView,Microsoft.VisualStudio.Text.ITrackingPoint,System.Boolean)">
            <summary>
            Triggers Quick Info at the specified position in the buffer, either tracking or not tracking the mouse.
            </summary>
            <param name="textView">The <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView" /> for which Quick Info is to be triggered.</param>
            <param name="triggerPoint">
            The <see cref="T:Microsoft.VisualStudio.Text.ITrackingPoint" /> in the text buffer at which Quick Info should be triggered.
            </param>
            <param name="trackMouse">
            <c>true</c> if the session should be dismissed when the mouse leaves the applicability span of the session,
            <c>false</c> otherwise.
            </param>
            <returns>A valid Quick Info session, or null if none could be created.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Language.Intellisense.IQuickInfoBroker.CreateQuickInfoSession(Microsoft.VisualStudio.Text.Editor.ITextView,Microsoft.VisualStudio.Text.ITrackingPoint,System.Boolean)">
            <summary>
            Creates but does not start a Quick Info session at the specified location in the <see cref="T:Microsoft.VisualStudio.Text.ITextBuffer" />.
            </summary>
            <param name="textView">The <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView" /> for which a Quick Info should be created.</param>
            <param name="triggerPoint">
            The <see cref="T:Microsoft.VisualStudio.Text.ITrackingPoint" /> in the text buffer at which Quick Info should be triggered.
            </param>
            <param name="trackMouse">
            <c>true</c> if the session should be auto-dismissed when the mouse leaves the applicability span of the session,
            otherwise <c>false</c>.
            </param>
            <returns>A valid Quick Info session, or null if none could be created.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Language.Intellisense.IQuickInfoBroker.GetSessions(Microsoft.VisualStudio.Text.Editor.ITextView)">
            <summary>
            Gets the set of active Quick Info sessions for the <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView" /> in which this broker operates.
            </summary>
            <param name="textView">The <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView" /> for which Quick Info sessions should be returned.</param>
            <returns>The list of valid Quick Info sessions active over the specified <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView" />.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Language.Intellisense.IQuickInfoSession">
            <summary>
            Defines an IntelliSense session used to display Quick Info information.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.Intellisense.IQuickInfoSession.QuickInfoContent">
            <summary>
            Gets the content that will be displayed by this session.  
            </summary>
            <remarks>
            Several types of content are supported, including strings,
            <see cref="T:Microsoft.VisualStudio.Text.ITextBuffer" /> instances, and <see cref="T:System.Windows.UIElement" /> instances.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.Intellisense.IQuickInfoSession.ApplicableToSpan">
            <summary>
            Gets the applicability span for this session.  
            </summary>
            <remarks>
            The applicability span is the span of text in the <see cref="T:Microsoft.VisualStudio.Text.ITextBuffer" /> to which this
            session pertains. The default Quick Info presenter renders a popup near this location. If this session tracks the
            mouse, the session will be dismissed when the mouse leaves this <see cref="T:Microsoft.VisualStudio.Text.ITrackingSpan" />.
            </remarks>
        </member>
        <member name="E:Microsoft.VisualStudio.Language.Intellisense.IQuickInfoSession.ApplicableToSpanChanged">
            <summary>
            Occurs when the ApplicableToSpan property on this session changes.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.Intellisense.IQuickInfoSession.TrackMouse">
            <summary>
            Determines whether this session tracks the mouse.  
            </summary>
            <remarks>
            When the session tracks the mouse, it will be dismissed
            when the mouse pointer leaves the applicability span for this session.
            </remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.Language.Intellisense.IQuickInfoSession2">
            <summary>
            Extends <see cref="T:Microsoft.VisualStudio.Language.Intellisense.IQuickInfoSession" /> with support for an interactive Quick Info content. 
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.Intellisense.IQuickInfoSession2.HasInteractiveContent">
            <summary>
            This <see cref="T:Microsoft.VisualStudio.Language.Intellisense.IQuickInfoSession" /> contains an interactive content.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Language.Intellisense.IQuickInfoSource">
            <summary>
            Defines a QuickInfo provider, which acts as a provider of QuickInfo information over a text buffer.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Language.Intellisense.IQuickInfoSource.AugmentQuickInfoSession(Microsoft.VisualStudio.Language.Intellisense.IQuickInfoSession,System.Collections.Generic.IList{System.Object},Microsoft.VisualStudio.Text.ITrackingSpan@)">
            <summary>
            Determines which pieces of QuickInfo content should be part of the specified <see cref="T:Microsoft.VisualStudio.Language.Intellisense.IQuickInfoSession" />.
            </summary>
            <param name="session">The session for which completions are to be computed.</param>
            <param name="quickInfoContent">The QuickInfo content to be added to the session.</param>
            <param name="applicableToSpan">The <see cref="T:Microsoft.VisualStudio.Text.ITrackingSpan" /> to which this session applies.</param>
            <remarks>
            Each applicable <see cref="M:Microsoft.VisualStudio.Language.Intellisense.IQuickInfoSource.AugmentQuickInfoSession(Microsoft.VisualStudio.Language.Intellisense.IQuickInfoSession,System.Collections.Generic.IList{System.Object},Microsoft.VisualStudio.Text.ITrackingSpan@)" /> instance will be called in-order to (re)calculate a
            <see cref="T:Microsoft.VisualStudio.Language.Intellisense.IQuickInfoSession" />. Objects can be added to the session by adding them to the quickInfoContent collection
            passed-in as a parameter.  In addition, by removing items from the collection, a source may filter content provided by
            <see cref="T:Microsoft.VisualStudio.Language.Intellisense.IQuickInfoSource" />s earlier in the calculation chain.
            </remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.Language.Intellisense.IQuickInfoSourceProvider">
            <summary>
            Describes a factory of Quick Info providers.  
            </summary>
            <remarks>
            This is a MEF component part, and should be exported with the following attribute:
            [Export(typeof(IQuickInfoSourceProvider))]
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Language.Intellisense.IQuickInfoSourceProvider.TryCreateQuickInfoSource(Microsoft.VisualStudio.Text.ITextBuffer)">
            <summary>
            Creates a Quick Info provider for the specified context.
            </summary>
            <param name="textBuffer">The text buffer for which to create a provider.</param>
            <returns>A valid <see cref="T:Microsoft.VisualStudio.Language.Intellisense.IQuickInfoSource" /> instance, or null if none could be created.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Language.Intellisense.QuickInfoPresenterStyle">
            <summary>
             Defines a set of properties that will be used to style the default QuickInfo presenter.
            </summary>
             <remarks>
             This is a MEF component part, and should be exported with the following attributes:
             [Export(typeof(QuickInfoPresenterStyle))]
             [ContentType]
             [Name]
             [Order]
             All exports of this component part should be ordered after the "default" QuickInfo presenter style.  At a minimum, this
             means adding [Order(After="default")] to the export metadata.
             </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.Intellisense.QuickInfoPresenterStyle.BorderBrush">
            <summary>
            Gets a <see cref="T:System.Windows.Media.Brush" /> that will be used to paint the borders in the completion presenter.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.Intellisense.QuickInfoPresenterStyle.BackgroundBrush">
            <summary>
            Gets a <see cref="T:System.Windows.Media.Brush" /> that will be used to paint the background of the completion presenter.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.Intellisense.QuickInfoPresenterStyle.QuickInfoAppearanceCategory">
            <summary>
            Gets a string that identifies the appearance category for the <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView" />s displayed in the default
            QuickInfo presenter.
            </summary>
            <remarks>
            Manipulating this value will change the classification format map used in the translation of classification types to
            classification formats in the QuickInfo <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView" />.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.Intellisense.QuickInfoPresenterStyle.AreGradientsAllowed">
            <summary>
            Gets a value determining whether or not gradients should be used in the presentation of a
            <see cref="T:Microsoft.VisualStudio.Language.Intellisense.IQuickInfoSession" />.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Language.Intellisense.LightBulbPresenterStyle">
            <summary>
             Defines a set of properties that will be used to style the default LightBulb presenter.
            </summary>
             <remarks>
             This is a MEF component part, and should be exported with the following attributes:
             [Export(typeof(LightBulbPresenterStyle))]
             [ContentType]
             [Name]
             [Order]
             All exports of this component part should be ordered after the "default" LightBulb presenter style.  At a minimum,
             this means adding [Order(After="default")] to the export metadata.
             </remarks>
        </member>
        <member name="E:Microsoft.VisualStudio.Language.Intellisense.LightBulbPresenterStyle.PropertyChanged">
            <summary>
            Event raised when a property on this object's value changes.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.Intellisense.LightBulbPresenterStyle.ActuatorBackgroundBrush">
            <summary>
            Gets a <see cref="T:System.Windows.Media.Brush" /> that will be used to paint the background of the LightBulb actuator.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.Intellisense.LightBulbPresenterStyle.ActuatorBorderBrush">
            <summary>
            Gets a <see cref="T:System.Windows.Media.Brush" /> that will be used to paint the border of the LightBulb actuator.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.Intellisense.LightBulbPresenterStyle.ActuatorHoverBackgroundBrush">
            <summary>
            Gets a <see cref="T:System.Windows.Media.Brush" /> that will be used to paint the background of the LightBulb actuator in hover mode.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.Intellisense.LightBulbPresenterStyle.ActuatorHoverBorderBrush">
            <summary>
            Gets a <see cref="T:System.Windows.Media.Brush" /> that will be used to paint the border of the LightBulb actuator.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.Intellisense.LightBulbPresenterStyle.ActuatorDropdownChevronBrush">
            <summary>
            Gets a <see cref="T:System.Windows.Media.Brush" /> that will be used to paint the chevron of the LightBulb actuator.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.Intellisense.LightBulbPresenterStyle.PreviewBackgroundBrush">
            <summary>
            Gets a <see cref="T:System.Windows.Media.Brush" /> that will be used to paint the background of the LightBulb preview pane.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.Intellisense.LightBulbPresenterStyle.PreviewBorderBrush">
            <summary>
            Gets a <see cref="T:System.Windows.Media.Brush" /> that will be used to paint the border of the LightBulb preview pane.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.Intellisense.LightBulbPresenterStyle.PreviewFocusBackgroundBrush">
            <summary>
            Gets a <see cref="T:System.Windows.Media.Brush" /> that will be used to paint the background of the focused LightBulb preview pane.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.Intellisense.LightBulbPresenterStyle.DiscoveryModeBackgroundColor">
            <summary>
            Gets a <see cref="T:System.Windows.Media.Color" /> that will be used to paint the background of the LightBulb in discovery mode.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.Intellisense.LightBulbPresenterStyle.DiscoveryModeBorderColor">
            <summary>
            Gets a <see cref="T:System.Windows.Media.Color" /> that will be used to paint the border of the LightBulb in discovery mode.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.Intellisense.LightBulbPresenterStyle.ShowQuickFixesLinkBrush">
            <summary>
            Gets a <see cref="T:System.Windows.Media.Brush" /> that will be used to paint the hyperlink in QuickInfo that expands QuickInfo-based LightBulb.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.Intellisense.LightBulbPresenterStyle.ShowQuickFixesKeyBindingBrush">
            <summary>
            Gets a <see cref="T:System.Windows.Media.Brush" /> that will be used to paint the shortcut of the command that expands LightBulb.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.Intellisense.LightBulbPresenterStyle.DisplayTextSuffixForegroundBrush">
            <summary>
            Gets a <see cref="T:System.Windows.Media.Brush" /> that will be used to paint the suffix part of the LightBulb item's display text.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.Intellisense.LightBulbPresenterStyle.ShowQuickFixesKeyBinding">
            <summary>
            Gets a shortcut of the command that expands LightBulb.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Language.Intellisense.INavigableRelationship">
            <summary>
            Represents a relationship between an <see cref="T:Microsoft.VisualStudio.Language.Intellisense.INavigableSymbol" /> and its navigation target.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.Intellisense.INavigableRelationship.Name">
            <summary>
            Gets the unique name identifying this relastionship.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.Intellisense.INavigableRelationship.DisplayName">
            <summary>
            Gets the localized display name of this relationship.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Language.Intellisense.INavigableSymbol">
            <summary>
            Represents a navigable symbol in code document.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.Intellisense.INavigableSymbol.SymbolSpan">
            <summary>
            Gets the span of the symbol.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.Intellisense.INavigableSymbol.Relationships">
            <summary>
            Gets all the supported <see cref="T:Microsoft.VisualStudio.Language.Intellisense.INavigableRelationship" />s of this symbol.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Language.Intellisense.INavigableSymbol.Navigate(Microsoft.VisualStudio.Language.Intellisense.INavigableRelationship)">
            <summary>
            When invoked, navigates to the target of the specified relationship to the symbol.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Language.Intellisense.INavigableSymbolSource">
            <summary>
            Represents a source that provides <see cref="T:Microsoft.VisualStudio.Language.Intellisense.INavigableSymbol" /> over a text buffer of a given content type.
            </summary>
            <remarks>
            Providers implement <see cref="T:Microsoft.VisualStudio.Language.Intellisense.INavigableSymbolSource" /> and expose instances of this type via MEF export <see cref="T:Microsoft.VisualStudio.Language.Intellisense.INavigableSymbolSourceProvider" />.  
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Language.Intellisense.INavigableSymbolSource.GetNavigableSymbolAsync(Microsoft.VisualStudio.Text.SnapshotSpan,System.Threading.CancellationToken)">
            <summary>
            Asynchronously gets an <see cref="T:Microsoft.VisualStudio.Language.Intellisense.INavigableSymbol" /> at the trigger span position.
            </summary>
            <param name="triggerSpan">A 1-character length span over which navigable symbol is queried.</param>
            <param name="token">A <see cref="T:System.Threading.CancellationToken" /> used to cancel the task as needed.</param>
            <returns>
            A task that returns <see cref="T:Microsoft.VisualStudio.Language.Intellisense.INavigableSymbol" /> upon completion.
            </returns>
            <remarks>
            <para>
            This async method is called on background thread.
            </para>
            <para>
            The <paramref name="triggerSpan" /> is a 1-character span containing the character over which a symbol is queried.
            This is to disambiguate the case in a projection buffer where the trigger point is between two buffer boundaries
            and thus multiple symbol sources may be queried. A span eliminates this ambiguity because it can only fall in one buffer.
            </para>
            <para>
            Providers may return a <see cref="T:System.Threading.Tasks.Task" /> with null results if no navigable symbol is available over the queried <paramref name="triggerSpan" />.
            </para>
            </remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.Language.Intellisense.INavigableSymbolSourceProvider">
            <summary>
            Provides <see cref="T:Microsoft.VisualStudio.Language.Intellisense.INavigableSymbolSource" /> for an <see cref="T:Microsoft.VisualStudio.Text.ITextBuffer" /> of a given content type.
            </summary>
            <remarks>
            <para>This is a MEF component, and should be exported with the following attributes:</para>
            <code>
               [Export(typeof(INavigableSymbolSourceProvider))]
               [Name("name of the provider")]
               [ContentType("content type")]
            </code>
            <para>And optionally, the OrderAttribute.</para>
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Language.Intellisense.INavigableSymbolSourceProvider.TryCreateNavigableSymbolSource(Microsoft.VisualStudio.Text.Editor.ITextView,Microsoft.VisualStudio.Text.ITextBuffer)">
            <summary>
            Creates an <see cref="T:Microsoft.VisualStudio.Language.Intellisense.INavigableSymbolSource" /> for the given <see cref="T:Microsoft.VisualStudio.Text.ITextBuffer" /> 
            in the specified <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView" />.
            </summary>
            <param name="textView">The <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView" /> in which the text buffer was created.</param>
            <param name="buffer">The <see cref="T:Microsoft.VisualStudio.Text.ITextBuffer" /> for which the <see cref="T:Microsoft.VisualStudio.Language.Intellisense.INavigableSymbolSource" /> is created.</param>
            <returns>A valid <see cref="T:Microsoft.VisualStudio.Language.Intellisense.INavigableSymbolSource" />, or <c>null</c> if the provider could not create one.</returns>
            <remarks>
            <para>
            This method should only be called once on the <paramref name="buffer" /> whose content type matches the provider's.
            </para>
            <para>
            If there are multiple sources matching the content type of the given text buffer, the best match based on the
            Order is used when calling <see cref="M:Microsoft.VisualStudio.Language.Intellisense.INavigableSymbolSource.GetNavigableSymbolAsync(Microsoft.VisualStudio.Text.SnapshotSpan,System.Threading.CancellationToken)" />.
            </para>
            </remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.Language.Intellisense.PredefinedNavigableRelationships">
            <summary>
            Provides predefined <see cref="T:Microsoft.VisualStudio.Language.Intellisense.INavigableRelationship" />s.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Language.Intellisense.PredefinedNavigableRelationships.Definition">
            <summary>
            A definition relationship.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Language.Intellisense.ExceptionEventArgs">
            <summary>
            Provides exception data for an event.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Language.Intellisense.ExceptionEventArgs.#ctor(System.Exception)">
            <summary>
            Creates a new instance of <see cref="T:Microsoft.VisualStudio.Language.Intellisense.ExceptionEventArgs" />.
            </summary>
            <param name="e">The exception that details the cause of the failure.</param>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.Intellisense.ExceptionEventArgs.Exception">
            <summary>
            Gets the exception that details the cause of the failure.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Language.Intellisense.IDesiredHeightProvider">
            <summary>
            Indicates that an implementing object provides its height to a container.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.Intellisense.IDesiredHeightProvider.DesiredHeight">
            <summary>
            The desired height in pixels.
            </summary>
        </member>
        <member name="E:Microsoft.VisualStudio.Language.Intellisense.IDesiredHeightProvider.DesiredHeightChanged">
            <summary>
            Raised when the container should requery DesiredHeight.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Language.Intellisense.IDocumentPeekResult">
            <summary>
            Represents an <see cref="T:Microsoft.VisualStudio.Language.Intellisense.IPeekResult" /> that is based on a location in a document.
            </summary>
            <remarks>In a typical scenario Peek service creates <see cref="T:Microsoft.VisualStudio.Language.Intellisense.IDocumentPeekResult" /> instances 
            representing document based results supplied by Peek providers.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.Intellisense.IDocumentPeekResult.FilePath">
            <summary>
            The fully qualified file path identifying the document where the result is located.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.Intellisense.IDocumentPeekResult.Span">
            <summary>
            Gets a <see cref="T:Microsoft.VisualStudio.Text.IPersistentSpan" /> corresponding to the result location span. For example if this result corresponds
            to a method, this span is the span of the method definition.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.Intellisense.IDocumentPeekResult.IdentifyingSpan">
            <summary>
            Gets a <see cref="T:Microsoft.VisualStudio.Text.IPersistentSpan" /> corresponding to the span of the identifying
            token inside the result location span.
            For example if this result corresponds to a method, the identifying span is the 
            span of the method name token inside method definition span.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.Intellisense.IDocumentPeekResult.IsReadOnly">
            <summary>
            Gets whether this result is read-only.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.Intellisense.IDocumentPeekResult.DisplayInfo2">
            <summary>
            Gets the display info that represents the <see cref="T:Microsoft.VisualStudio.Language.Intellisense.IDocumentPeekResult" />, which is used to provide more indication
            on the symbol this <see cref="T:Microsoft.VisualStudio.Language.Intellisense.IDocumentPeekResult" /> represents.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.Intellisense.IDocumentPeekResult.Image">
            <summary>
            Gets an <see cref="T:Microsoft.VisualStudio.Imaging.Interop.ImageMoniker" /> representing an image equivalent for the 
            <see cref="T:Microsoft.VisualStudio.Language.Intellisense.IDocumentPeekResult" />.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.Intellisense.IDocumentPeekResult.DesiredEditorGuid">
            <summary>
            Gets the Guid for the desired editor to open when navigating.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Language.Intellisense.IDocumentPeekResultScrollState">
            <summary>
            Extends the capability of the <see cref="T:Microsoft.VisualStudio.Language.Intellisense.IPeekResultScrollState" /> to be
            able to scroll and zoom any text view, rather than only the currently visible
            presentation.
            </summary>
            <remarks>This interface is used in keeping the scroll state and zoom level consistent when a document
            presented in Peek is being promoted to a full frame.</remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Language.Intellisense.IDocumentPeekResultScrollState.RestoreScrollState(Microsoft.VisualStudio.Text.Editor.ITextView)">
            <summary>
            Scrolls any text view to the the <see cref="T:Microsoft.VisualStudio.Language.Intellisense.IPeekResultScrollState" /> that
            this inherits from.
            </summary>
            <param name="presentation">TextView to scroll.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Language.Intellisense.IDocumentPeekResultScrollState.RestoreZoomState(Microsoft.VisualStudio.Text.Editor.ITextView)">
            <summary>
            Restores zoom level in given text view.
            </summary>
            <param name="textView">TextView to restore zoom level in.</param>
        </member>
        <member name="T:Microsoft.VisualStudio.Language.Intellisense.IExternallyBrowsablePeekResult">
            <summary>
            Represents an <see cref="T:Microsoft.VisualStudio.Language.Intellisense.IPeekResult" /> that is not based on a location in a document, but can
            be browsed externally, for example a metadata class that can only be browsed in Object Browser.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Language.Intellisense.IFindPeekResultsCallback">
            <summary>
            Represents a callback object provided to <see cref="T:Microsoft.VisualStudio.Language.Intellisense.IPeekResultSource" />s to report
            the state of result querying.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Language.Intellisense.IFindPeekResultsCallback.ReportProgress(System.Int32)">
            <summary>
            Reports the progress of query processing.
            </summary>
            <param name="percentProgress">The percentage, from 0 to 100, of a work completion.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Language.Intellisense.IFindPeekResultsCallback.ReportFailure(System.Exception)">
            <summary>
            Reports a failure of query processing.
            </summary>
            <param name="failure">The exception representing the deails of the failure.</param>
        </member>
        <member name="T:Microsoft.VisualStudio.Language.Intellisense.IPeekableItem">
            <summary>
            Represents an object (for instance a symbol in a document) that can be a source of a <see cref="T:Microsoft.VisualStudio.Language.Intellisense.IPeekSession" />.
            </summary>
            <remarks>
            Content-type specific Peek providers define concrete <see cref="T:Microsoft.VisualStudio.Language.Intellisense.IPeekableItem" /> implementations holding onto
            all the context they need to provide <see cref="T:Microsoft.VisualStudio.Language.Intellisense.IPeekResult" />s for the item referenced at the
            <see cref="T:Microsoft.VisualStudio.Language.Intellisense.IPeekSession" />'s trigger point and relationship.
            When an <see cref="T:Microsoft.VisualStudio.Language.Intellisense.IPeekSession" /> is triggered, <see cref="T:Microsoft.VisualStudio.Language.Intellisense.IPeekableItemSource" />s matching the document's
            content type will be called in order (defined by the content type specificity and Order attributes) to analyze 
            the <see cref="T:Microsoft.VisualStudio.Language.Intellisense.IPeekSession" />'s trigger point and relationship. 
            If an <see cref="T:Microsoft.VisualStudio.Language.Intellisense.IPeekableItemSource" /> recognizes the trigger point as a location of an item the provider can provide
            <see cref="T:Microsoft.VisualStudio.Language.Intellisense.IPeekResult" />s for the relationship, it creates its concrete <see cref="T:Microsoft.VisualStudio.Language.Intellisense.IPeekableItem" /> instance
            capturing all the necessary context and adds it to the <see cref="T:Microsoft.VisualStudio.Language.Intellisense.IPeekSession" />. Then the Peek provider will 
            be called to provide <see cref="T:Microsoft.VisualStudio.Language.Intellisense.IPeekResult" />s given this <see cref="T:Microsoft.VisualStudio.Language.Intellisense.IPeekableItem" /> instance.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.Intellisense.IPeekableItem.DisplayName">
            <summary>
            Defines the localized string used for displaying this item to the user.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.Intellisense.IPeekableItem.Relationships">
            <summary>
            Gets an enumeration of all relationships supported by this <see cref="T:Microsoft.VisualStudio.Language.Intellisense.IPeekableItem" /> instance.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Language.Intellisense.IPeekableItem.GetOrCreateResultSource(System.String)">
            <summary>
            Gets or creates an <see cref="T:Microsoft.VisualStudio.Language.Intellisense.IPeekResultSource" /> instance representing a source of results of querying this
            <see cref="T:Microsoft.VisualStudio.Language.Intellisense.IPeekableItem" /> for the given relationship.
            </summary>
            <param name="relationshipName">The case insenitive name of the relationship to be queried for results.</param>
            <returns>A valid <see cref="T:Microsoft.VisualStudio.Language.Intellisense.IPeekResultSource" /> instance or null if this <see cref="T:Microsoft.VisualStudio.Language.Intellisense.IPeekableItem" /> instance 
            can not provide results for the given relationship.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Language.Intellisense.IPeekableItemSource">
            <summary>
            Provides <see cref="T:Microsoft.VisualStudio.Language.Intellisense.IPeekableItem" />s for a given content type.
            </summary>
            <remarks>Peek providers implement <see cref="T:Microsoft.VisualStudio.Language.Intellisense.IPeekableItemSource" /> interface and provide instances via exported 
            <see cref="T:Microsoft.VisualStudio.Language.Intellisense.IPeekableItemSourceProvider" /> MEF component part.</remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Language.Intellisense.IPeekableItemSource.AugmentPeekSession(Microsoft.VisualStudio.Language.Intellisense.IPeekSession,System.Collections.Generic.IList{Microsoft.VisualStudio.Language.Intellisense.IPeekableItem})">
            <summary>
            Determines which <see cref="T:Microsoft.VisualStudio.Language.Intellisense.IPeekableItem" />s should be part of the specified <see cref="T:Microsoft.VisualStudio.Language.Intellisense.IPeekSession" />.
            </summary>
            <param name="session">The session for which to compute <see cref="T:Microsoft.VisualStudio.Language.Intellisense.IPeekableItem" />s.</param>
            <param name="peekableItems">The list of <see cref="T:Microsoft.VisualStudio.Language.Intellisense.IPeekableItem" />s to add to the session.</param>
            <remarks>
            Each applicable <see cref="T:Microsoft.VisualStudio.Language.Intellisense.IPeekableItemSource" /> instance will be called in order when
            recalculating an <see cref="T:Microsoft.VisualStudio.Language.Intellisense.IPeekSession" />. <see cref="T:Microsoft.VisualStudio.Language.Intellisense.IPeekableItem" />s can be added to the session by adding
            them to the <paramref name="peekableItems" /> collection passed in as a parameter. In addition, by removing items 
            from the collection, a source may filter <see cref="T:Microsoft.VisualStudio.Language.Intellisense.IPeekableItem" />s provided by 
            <see cref="T:Microsoft.VisualStudio.Language.Intellisense.IPeekableItemSource" />s earlier in the calculation chain.
            </remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.Language.Intellisense.IPeekableItemSource2">
            <summary>
            Extends <see cref="T:Microsoft.VisualStudio.Language.Intellisense.IPeekableItemSource" /> with an ability to provide custom operation description and progress information when <see cref="M:Microsoft.VisualStudio.Language.Intellisense.IPeekableItemSource2.AugmentPeekSession(Microsoft.VisualStudio.Language.Intellisense.IPeekSession,System.Collections.Generic.IList{Microsoft.VisualStudio.Language.Intellisense.IPeekableItem},Microsoft.VisualStudio.Utilities.IUIThreadOperationContext)" /> is invoked.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Language.Intellisense.IPeekableItemSource2.AugmentPeekSession(Microsoft.VisualStudio.Language.Intellisense.IPeekSession,System.Collections.Generic.IList{Microsoft.VisualStudio.Language.Intellisense.IPeekableItem},Microsoft.VisualStudio.Utilities.IUIThreadOperationContext)">
            <summary>
            Determines which <see cref="T:Microsoft.VisualStudio.Language.Intellisense.IPeekableItem" />s should be part of the specified <see cref="T:Microsoft.VisualStudio.Language.Intellisense.IPeekSession2" />.
            </summary>
            <param name="session">The session for which to compute <see cref="T:Microsoft.VisualStudio.Language.Intellisense.IPeekableItem" />s.</param>
            <param name="peekableItems">The list of <see cref="T:Microsoft.VisualStudio.Language.Intellisense.IPeekableItem" />s to add to the session.</param>
            <param name="operationContext">A context of executing this operation on the UI thread, which allows to provide custom operation description and progress information.</param>
            <remarks>
            Each applicable <see cref="T:Microsoft.VisualStudio.Language.Intellisense.IPeekableItemSource" /> instance will be called in order when
            recalculating an <see cref="T:Microsoft.VisualStudio.Language.Intellisense.IPeekSession2" />. <see cref="T:Microsoft.VisualStudio.Language.Intellisense.IPeekableItem" />s can be added to the session by adding
            them to the <paramref name="peekableItems" /> collection passed in as a parameter. In addition, by removing items 
            from the collection, a source may filter <see cref="T:Microsoft.VisualStudio.Language.Intellisense.IPeekableItem" />s provided by 
            <see cref="T:Microsoft.VisualStudio.Language.Intellisense.IPeekableItemSource" />s earlier in the calculation chain.
            </remarks>
            <remarks>This method supersedes <see cref="M:Microsoft.VisualStudio.Language.Intellisense.IPeekableItemSource.AugmentPeekSession(Microsoft.VisualStudio.Language.Intellisense.IPeekSession,System.Collections.Generic.IList{Microsoft.VisualStudio.Language.Intellisense.IPeekableItem})" /> and is guaranteed to be called instead of that.</remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.Language.Intellisense.IPeekableItemSourceProvider">
            <summary>
            Provides <see cref="T:Microsoft.VisualStudio.Language.Intellisense.IPeekableItem" /> source for a text buffer.
            </summary>
            <remarks>
            Peek providers implement and export <see cref="T:Microsoft.VisualStudio.Language.Intellisense.IPeekableItemSourceProvider" /> for the
            content type they are interested to provide <see cref="T:Microsoft.VisualStudio.Language.Intellisense.IPeekableItem" />s for.
            This is a MEF component, and should be exported with the following attribute:
            [Export(typeof(IPeekableItemSourceProvider))]
            You must provide the ContentType and Name attributes. The Order, SupportsStandaloneFiles and SupportsPeekRelationshipAttribute 
            attributes are optional.
            The default value of the SupportsStandaloneFiles attribute is false so if not specified the provider will be considered
            not supporting standalone files.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Language.Intellisense.IPeekableItemSourceProvider.TryCreatePeekableItemSource(Microsoft.VisualStudio.Text.ITextBuffer)">
            <summary>
            Creates a <see cref="T:Microsoft.VisualStudio.Language.Intellisense.IPeekableItem" /> provider for the given text buffer.
            </summary>
            <param name="textBuffer">The text buffer to create a provider for.</param>
            <returns>A valid <see cref="T:Microsoft.VisualStudio.Language.Intellisense.IPeekableItemSource" /> instance, or null if none could be created.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Language.Intellisense.IPeekBroker">
            <summary>
            Represents a Peek broker, which is globally responsible for managing <see cref="T:Microsoft.VisualStudio.Language.Intellisense.IPeekSession" />s.
            </summary>
            <remarks>This is a MEF component, and should be imported as follows:
            [Import]
            IPeekBroker peekBroker = null;
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Language.Intellisense.IPeekBroker.TriggerPeekSession(Microsoft.VisualStudio.Text.Editor.ITextView,System.String)">
            <summary>
            Starts a Peek session, assuming the caret position to be the position of a peekable symbol
            on which a Peek session is requested.
            </summary>
            <param name="textView">The <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView" /> over which to trigger a Peek session.</param>
            <param name="relationshipName">The name of the requested relationship to be explored by a Peek session.</param>
            <returns>A valid Peek session. May be null if no session could be created at the caret position 
            for the given relationship.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Language.Intellisense.IPeekBroker.TriggerPeekSession(Microsoft.VisualStudio.Text.Editor.ITextView,Microsoft.VisualStudio.Text.ITrackingPoint,System.String)">
            <summary>
            Starts a Peek session at a particular position, which is assumed to be the position of a peekable symbol
            on which a Peek session is requested.
            </summary>
            <param name="textView">The <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView" /> over which to trigger a Peek session.</param>
            <param name="triggerPoint">The point in the text buffer at which a Peek session is requested.</param>
            <param name="relationshipName">The name of the requested relationship to be explored by a Peek session.</param>
            <returns>A valid Peek session. May be null if no session could be created at the trigger point
            for the given relationship.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Language.Intellisense.IPeekBroker.TriggerPeekSession(Microsoft.VisualStudio.Language.Intellisense.PeekSessionCreationOptions)">
            <summary>
            Starts a Peek session with the specified options.
            </summary>
            <param name="options">The options needed to create a Peek session.</param>
            <returns>
            A valid Peek session. May be null if no session could be created for the
            <see cref="P:Microsoft.VisualStudio.Language.Intellisense.PeekSessionCreationOptions.TriggerPoint" /> for the given <see cref="P:Microsoft.VisualStudio.Language.Intellisense.PeekSessionCreationOptions.RelationshipName" />.
            </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Language.Intellisense.IPeekBroker.TriggerNestedPeekSession(Microsoft.VisualStudio.Text.Editor.ITextView,System.String,Microsoft.VisualStudio.Language.Intellisense.IPeekSession)">
            <summary>
            Starts a nested Peek session, assuming the caret position to be the position of a peekable symbol
            on which a nested Peek session is requested. A Peek session is considered to be nested when it's
            started from a text view that represents an <see cref="T:Microsoft.VisualStudio.Language.Intellisense.IPeekResult" /> of a containing Peek session.
            This method doesn't create a new Peek session though, instead it adds another <see cref="T:Microsoft.VisualStudio.Language.Intellisense.IPeekableItem" /> to
            the containing session.
            </summary>
            <param name="textView">The <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView" /> over which to trigger a nested Peek session.</param>
            <param name="relationshipName">The name of the requested relationship to be explored by a nested Peek session.</param>
            <param name="containingSession">The containing Peek session.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Language.Intellisense.IPeekBroker.TriggerNestedPeekSession(Microsoft.VisualStudio.Text.Editor.ITextView,Microsoft.VisualStudio.Text.ITrackingPoint,System.String,Microsoft.VisualStudio.Language.Intellisense.IPeekSession)">
            <summary>
            Starts a nested Peek session at a particular position, which is assumed to be the position of a peekable symbol
            on which a nested Peek session is requested. A Peek session is considered to be nested when it's
            started from a text view that represents an <see cref="T:Microsoft.VisualStudio.Language.Intellisense.IPeekResult" /> of a containing Peek session.
            This method doesn't create a new Peek session though, instead it adds another <see cref="T:Microsoft.VisualStudio.Language.Intellisense.IPeekableItem" /> to
            the containing session.
            </summary>
            <param name="textView">The <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView" /> over which to trigger a Peek session.</param>
            <param name="triggerPoint">The point in the text buffer at which a Peek session is requested.</param>
            <param name="relationshipName">The name of the requested relationship to be explored by a Peek session.</param>
            <param name="containingSession">The containing Peek session.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Language.Intellisense.IPeekBroker.TriggerNestedPeekSession(Microsoft.VisualStudio.Language.Intellisense.PeekSessionCreationOptions,Microsoft.VisualStudio.Language.Intellisense.IPeekSession)">
            <summary>
            Starts a nested Peek session, assuming the options specify a peekable symbol
            on which a nested Peek session is requested. A Peek session is considered to be nested when it's
            started from a text view that represents an <see cref="T:Microsoft.VisualStudio.Language.Intellisense.IPeekResult" /> of a containing Peek session.
            This method doesn't create a new Peek session though, instead it adds another <see cref="T:Microsoft.VisualStudio.Language.Intellisense.IPeekableItem" /> to
            the containing session.
            </summary>
            <param name="options">The options needed to create a Peek session.</param>
            <param name="containingSession">The containing Peek session.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Language.Intellisense.IPeekBroker.CanTriggerPeekSession(Microsoft.VisualStudio.Text.Editor.ITextView,System.String,System.Predicate{System.String})">
            <summary>
            Determines whether a Peek session can be triggered at the caret position, without actually triggering it. 
            Note, that an ability to trigger a Peek session doesn't mean that when triggered the session will necessarily 
            provide results.
            </summary>
            <param name="textView">The <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView" /> over which to check if a Peek session can be triggered.</param>
            <param name="relationshipName">The name of the requested relationship to be explored by a Peek session.</param>
            <param name="isStandaloneFilePredicate">A predicate used to determine whether given file is a standalone (not part of a project) file.</param>
            <returns><c>true</c> if a Peek session can be triggered at the caret position, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Language.Intellisense.IPeekBroker.CanTriggerPeekSession(Microsoft.VisualStudio.Text.Editor.ITextView,Microsoft.VisualStudio.Text.ITrackingPoint,System.String,System.Predicate{System.String})">
            <summary>
            Determines whether a Peek session can be triggered at a particular position, without actually triggering it. 
            Note, that an ability to trigger a Peek session doesn't mean that when triggered the session will necessarily 
            provide results.
            </summary>
            <param name="textView">The <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView" /> over which to check if a Peek session can be triggered.</param>
            <param name="triggerPoint">The point in the text buffer at which a Peek session is requested.</param>
            <param name="relationshipName">The name of the requested relationship to be explored by a Peek session.</param>
            <param name="isStandaloneFilePredicate">A predicate used to determine whether given file is a standalone (not part of a project) file.</param>
            <returns><c>true</c> if a Peek session can be triggered at the position, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Language.Intellisense.IPeekBroker.CanTriggerPeekSession(Microsoft.VisualStudio.Language.Intellisense.PeekSessionCreationOptions,System.Predicate{System.String})">
            <summary>
            Determines whether a Peek session can be triggered with the specified options, without actually triggering it. 
            Note, that an ability to trigger a Peek session doesn't mean that when triggered the session will necessarily 
            provide results.
            </summary>
            <param name="options">The options needed to create a Peek session.</param>
            <param name="isStandaloneFilePredicate">A predicate used to determine whether given file is a standalone (not part of a project) file.</param>
            <returns><c>true</c> if a Peek session can be triggered at the position, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Language.Intellisense.IPeekBroker.CreatePeekSession(Microsoft.VisualStudio.Text.Editor.ITextView,Microsoft.VisualStudio.Text.ITrackingPoint,System.String)">
            <summary>
            Creates, but does not start a Peek session at a particular position, which is assumed to be 
            the position of a peekable symbol on which a Peek session is requested.
            </summary>
            <param name="textView">The <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView" /> over which to trigger a Peek session.</param>
            <param name="triggerPoint">The point in the text buffer at which a Peek session is requested.</param>
            <param name="relationshipName">The name of the requested relationship to be explored by a Peek session.</param>
            <returns>A valid Peek session. May be null if no session could be created at the trigger point 
            for the given relationship.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Language.Intellisense.IPeekBroker.CreatePeekSession(Microsoft.VisualStudio.Language.Intellisense.PeekSessionCreationOptions)">
            <summary>
            Creates, but does not start a Peek session with the specified options.
            </summary>
            <param name="options">The options needed to create a Peek session.</param>
            <returns>
            A valid Peek session. May be null if no session could be created for the
            <see cref="P:Microsoft.VisualStudio.Language.Intellisense.PeekSessionCreationOptions.TriggerPoint" /> for the given <see cref="P:Microsoft.VisualStudio.Language.Intellisense.PeekSessionCreationOptions.RelationshipName" />.
            </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Language.Intellisense.IPeekBroker.DismissPeekSession(Microsoft.VisualStudio.Text.Editor.ITextView)">
            <summary>
            Dismisses an active Peek session for a particular <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView" />.
            </summary>
            <param name="textView">The <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView" /> over which to dismiss an active Peek session (if any).</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Language.Intellisense.IPeekBroker.IsPeekSessionActive(Microsoft.VisualStudio.Text.Editor.ITextView)">
            <summary>
            Determines whether or not a Peek session is active over the specified <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView" />.
            </summary>
            <param name="textView">The <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView" /> for which to determine if Peek session is active.</param>
            <returns>true if an active Peek session exists for the given <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView" />, false otherwise.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Language.Intellisense.IPeekBroker.GetPeekSession(Microsoft.VisualStudio.Text.Editor.ITextView)">
            <summary>
            Gets the active Peek session.
            </summary>
            <param name="textView">The <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView" /> for which to get a Peek session.</param>
            <returns>The valid active Peek session for the given <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView" /> or null if it doesn't exist.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Language.Intellisense.IPeekBroker2">
            <summary>
            Extends <see cref="T:Microsoft.VisualStudio.Language.Intellisense.IPeekBroker" /> service with an ability to pass <see cref="T:Microsoft.VisualStudio.Utilities.IUIThreadOperationContext" /> when executing operations synchronously on the UI thread.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Language.Intellisense.IPeekBroker2.TriggerPeekSession(Microsoft.VisualStudio.Language.Intellisense.PeekSessionCreationOptions,Microsoft.VisualStudio.Utilities.IUIThreadOperationContext)">
            <summary>
            Starts a Peek session with the specified options.
            </summary>
            <param name="options">The options needed to create a Peek session.</param>
            <param name="operationContext">A context of executing this operation on the UI thread, which allows to provide custom operation description and progress information.</param>
            <returns>
            A valid Peek session. May be null if no session could be created for the
            <see cref="P:Microsoft.VisualStudio.Language.Intellisense.PeekSessionCreationOptions.TriggerPoint" /> for the given <see cref="P:Microsoft.VisualStudio.Language.Intellisense.PeekSessionCreationOptions.RelationshipName" />.
            </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Language.Intellisense.IPeekBroker2.TriggerNestedPeekSession(Microsoft.VisualStudio.Language.Intellisense.PeekSessionCreationOptions,Microsoft.VisualStudio.Language.Intellisense.IPeekSession2,Microsoft.VisualStudio.Utilities.IUIThreadOperationContext)">
            <summary>
            Starts a nested Peek session, assuming the options specify a peekable symbol
            on which a nested Peek session is requested. A Peek session is considered to be nested when it's
            started from a text view that represents an <see cref="T:Microsoft.VisualStudio.Language.Intellisense.IPeekResult" /> of a containing Peek session.
            This method doesn't create a new Peek session though, instead it adds another <see cref="T:Microsoft.VisualStudio.Language.Intellisense.IPeekableItem" /> to
            the containing session.
            </summary>
            <param name="options">The options needed to create a Peek session.</param>
            <param name="containingSession">The containing Peek session.</param>
            <param name="operationContext">A context of executing this operation on the UI thread, which allows to provide custom operation description and progress information.</param>
        </member>
        <member name="T:Microsoft.VisualStudio.Language.Intellisense.IPeekRelationship">
            <summary>
            Represents a relationship between <see cref="T:Microsoft.VisualStudio.Language.Intellisense.IPeekableItem" />s and <see cref="T:Microsoft.VisualStudio.Language.Intellisense.IPeekResult" />s.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.Intellisense.IPeekRelationship.Name">
            <summary>
            Gets the non-localized uniquely-identifying name of this relationship.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.Intellisense.IPeekRelationship.DisplayName">
            <summary>
            Gets a localizable description of this relationship used for displaying it to the user.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Language.Intellisense.IPeekResizeListener">
            <summary>
            Describes an object to be notified when the user resizes the Peek control.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Language.Intellisense.IPeekResizeListener.OnResized(System.Object,Microsoft.VisualStudio.Language.Intellisense.PeekResizeEventArgs)">
            <summary>
            Gets called after the user has manually resized the Peek control.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Language.Intellisense.IPeekResult">
            <summary>
            Represents a single result of querying an <see cref="T:Microsoft.VisualStudio.Language.Intellisense.IPeekableItem" /> for a particular relationship.
            </summary>
            <remarks>In a typical scenario Peek providers create <see cref="T:Microsoft.VisualStudio.Language.Intellisense.IPeekResult" /> instances 
            using <see cref="T:Microsoft.VisualStudio.Language.Intellisense.IPeekResultFactory" /> to populate <see cref="T:Microsoft.VisualStudio.Language.Intellisense.IPeekResultCollection" />.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.Intellisense.IPeekResult.DisplayInfo">
            <summary>
            Determines properties used for displaying this result to the user.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.Intellisense.IPeekResult.CanNavigateTo">
            <summary>
            Determines whether this result has a place to navigate to.
            </summary>
            <returns>true if can navigate, false otherwise.</returns>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.Intellisense.IPeekResult.PostNavigationCallback">
            <summary>
            This function will be called directly after navigation completes (if navigation was successful).
            </summary>
            <remarks>
            Argument 1: this <see cref="T:Microsoft.VisualStudio.Language.Intellisense.IPeekResult" />.
            Argument 2: data that this <see cref="T:Microsoft.VisualStudio.Language.Intellisense.IPeekResult" /> decides to pass in from
            the results of its navigation (e.g. a handle to a newly opened text view).
            Note: Argument 2 can be null if this <see cref="T:Microsoft.VisualStudio.Language.Intellisense.IPeekResult" /> has nothing to pass in.
            Argument 3: data that is set by the caller of <see cref="M:Microsoft.VisualStudio.Language.Intellisense.IPeekResult.NavigateTo(System.Object)" />.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Language.Intellisense.IPeekResult.NavigateTo(System.Object)">
            <summary>
            Navigate to the location of this result. If the navigation is succesful, then the PostNavigationCallback
            will be called.
            </summary>
            <param name="data">
            The data that is to be passed directly into the third argument of <see cref="P:Microsoft.VisualStudio.Language.Intellisense.IPeekResult.PostNavigationCallback" />, 
            if navigation is successful.
            </param>
        </member>
        <member name="E:Microsoft.VisualStudio.Language.Intellisense.IPeekResult.Disposed">
            <summary>
            Occurs when an <see cref="T:Microsoft.VisualStudio.Language.Intellisense.IPeekResult" /> is disposed.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Language.Intellisense.IPeekResultCollection">
            <summary>
            Represents a collection of <see cref="T:Microsoft.VisualStudio.Language.Intellisense.IPeekResult" />s populated by content-type specific <see cref="T:Microsoft.VisualStudio.Language.Intellisense.IPeekResultSource" />
            implementations when they are being queried for <see cref="T:Microsoft.VisualStudio.Language.Intellisense.IPeekResult" />s.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.Intellisense.IPeekResultCollection.Count">
            <summary>
            Gets the number of elements contained in the <see cref="T:Microsoft.VisualStudio.Language.Intellisense.IPeekResultCollection" />.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Language.Intellisense.IPeekResultCollection.Add(Microsoft.VisualStudio.Language.Intellisense.IPeekResult)">
            <summary>
             Adds an item to the <see cref="T:Microsoft.VisualStudio.Language.Intellisense.IPeekResultCollection" />.
            </summary>
            <param name="peekResult">The object to add to the <see cref="T:Microsoft.VisualStudio.Language.Intellisense.IPeekResultCollection" />.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Language.Intellisense.IPeekResultCollection.Clear">
            <summary>
            Removes all results from the <see cref="T:Microsoft.VisualStudio.Language.Intellisense.IPeekResultCollection" />.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Language.Intellisense.IPeekResultCollection.Contains(Microsoft.VisualStudio.Language.Intellisense.IPeekResult)">
            <summary>
            Determines whether the <see cref="T:Microsoft.VisualStudio.Language.Intellisense.IPeekResultCollection" /> contains a specific result.
            </summary>
            <param name="peekResult">The object to locate in the <see cref="T:Microsoft.VisualStudio.Language.Intellisense.IPeekResultCollection" />.</param>
            <returns><c>true</c> if the result is found in the <see cref="T:Microsoft.VisualStudio.Language.Intellisense.IPeekResultCollection" />; <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Language.Intellisense.IPeekResultCollection.Insert(System.Int32,Microsoft.VisualStudio.Language.Intellisense.IPeekResult)">
            <summary>
            Inserts a result into the collection at the specified index.
            </summary>
            <param name="index">The zero-based index at which the result should be inserted.</param>
            <param name="peekResult">The result to insert.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Language.Intellisense.IPeekResultCollection.IndexOf(Microsoft.VisualStudio.Language.Intellisense.IPeekResult,System.Int32)">
            <summary>
            Finds the index of the result or returns -1 if the result was not found.
            </summary>
            <param name="peekResult">The result to search for in the list.</param>
            <param name="startAt">The start index for the search.</param>
            <returns>The index of the result in the list, or -1 if the result was not found.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Language.Intellisense.IPeekResultCollection.Move(System.Int32,System.Int32)">
            <summary>
            Moves the result at the specified index to a new location in the collection.
            </summary>
            <param name="oldIndex">The zero-based index specifying the location of the result to be moved.</param>
            <param name="newIndex">The zero-based index specifying the new location of the result.</param>
            <remarks>This method inserts the result in the new location.</remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Language.Intellisense.IPeekResultCollection.Remove(Microsoft.VisualStudio.Language.Intellisense.IPeekResult)">
            <summary>
            Removes the first occurrence of a specific result from the <see cref="T:Microsoft.VisualStudio.Language.Intellisense.IPeekResultCollection" />.
            </summary>
            <param name="item">The result to remove from the <see cref="T:Microsoft.VisualStudio.Language.Intellisense.IPeekResultCollection" /></param>
            <returns><c>true</c> if the result was successfully removed from the <see cref="T:Microsoft.VisualStudio.Language.Intellisense.IPeekResultCollection" />; <c>false</c> otherwise.
            This method also returns <c>false</c> if the result is not found in the <see cref="T:Microsoft.VisualStudio.Language.Intellisense.IPeekResultCollection" />.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Language.Intellisense.IPeekResultCollection.RemoveAt(System.Int32)">
            <summary>
            Removes the result at the specified index of the collection.
            </summary>
            <param name="index">The zero-based index of the result to remove.</param>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.Intellisense.IPeekResultCollection.Item(System.Int32)">
            <summary>
            Gets or sets the result at the specified index.
            </summary>
            <param name="index">The zero-based index of the element to get or set.</param>
            <returns>The result at the specified index.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Language.Intellisense.IPeekResultDisplayInfo">
            <summary>
            Defines elements of <see cref="T:Microsoft.VisualStudio.Language.Intellisense.IPeekResult" /> display information.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.Intellisense.IPeekResultDisplayInfo.Label">
            <summary>
            Defines the localized label used for displaying this result to the user.
            This value will be used to represent <see cref="T:Microsoft.VisualStudio.Language.Intellisense.IPeekResult" /> in the Peek control's result list.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.Intellisense.IPeekResultDisplayInfo.LabelTooltip">
            <summary>
            Defines the localized label tooltip used for displaying this result to the user.
            </summary>
            <remarks>
            Supported content types are strings and <see cref="T:System.Windows.UIElement" /> instances.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.Intellisense.IPeekResultDisplayInfo.Title">
            <summary>
            Defines the localized title used for displaying this result to the user.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.Intellisense.IPeekResultDisplayInfo.TitleTooltip">
            <summary>
            Defines the localized title tooltip used for displaying this result to the user.
            </summary>
            // <remarks>
            Supported content types are strings and <see cref="T:System.Windows.UIElement" /> instances.
            </remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.Language.Intellisense.IPeekResultDisplayInfo2">
            <summary>
            Defines extensions to <see cref="T:Microsoft.VisualStudio.Language.Intellisense.IPeekResultDisplayInfo" /> to provide
            more information about an <see cref="T:Microsoft.VisualStudio.Language.Intellisense.IPeekResult" />.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.Intellisense.IPeekResultDisplayInfo2.StartIndexOfTokenInLabel">
            <summary>
            Defines the first character's index of the "interesting" token in the label.
            For instance, if Peek references was triggered on a method,
            this would be the first character's index in the label that contains the method
            name.
            </summary>
            <remarks>
            This index is bound to <see cref="P:Microsoft.VisualStudio.Language.Intellisense.IPeekResultDisplayInfo.Label" />.
            It has nothing to do with the span of text that initialized peek.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.Intellisense.IPeekResultDisplayInfo2.LengthOfTokenInLabel">
            <summary>
            Defines the length of the "interesting" token in the label.
            For instance, if Peek references was triggered on a method,
            this would be the length of the method name.
            </summary>
            <remarks>
            This length is bound to <see cref="P:Microsoft.VisualStudio.Language.Intellisense.IPeekResultDisplayInfo.Label" />.
            It has nothing to do with the span of text that initialized Peek session.
            </remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.Language.Intellisense.IPeekResultFactory">
            <summary>
            Represents a factory for creating <see cref="T:Microsoft.VisualStudio.Language.Intellisense.IPeekResult" />s.
            </summary>
            <remarks>This is a MEF Component, and should be imported with the following attribute:
            [Import(typeof(IPeekResultFactory))]
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Language.Intellisense.IPeekResultFactory.Create(Microsoft.VisualStudio.Language.Intellisense.IPeekResultDisplayInfo,System.String,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Creates an instance of <see cref="T:Microsoft.VisualStudio.Language.Intellisense.IPeekResult" /> that is based on a location in a document.
            </summary>
            <param name="displayInfo">Defines properties used for displaying this result to the user.</param>
            <param name="filePath">The fully qualified file path identifying the document where the result is located.</param>
            <param name="startLine">Line number of the result location's start position.</param>
            <param name="startIndex">Character index of the result location's start position.</param>
            <param name="endLine">Line number of the result location's end position.</param>
            <param name="endIndex">Character index of the result location's end position.</param>
            <param name="idLine">Line number of the result's identifying position (e.g a position of method's name token).</param>
            <param name="idIndex">Character index of the result's identifying position (e.g a position of method's name token).</param>
            <returns>A valid instance of the <see cref="T:Microsoft.VisualStudio.Language.Intellisense.IDocumentPeekResult" />.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Language.Intellisense.IPeekResultFactory.Create(Microsoft.VisualStudio.Language.Intellisense.IPeekResultDisplayInfo,System.String,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Creates an instance of <see cref="T:Microsoft.VisualStudio.Language.Intellisense.IPeekResult" /> that is based on a location in a document.
            </summary>
            <param name="displayInfo">Defines properties used for displaying this result to the user.</param>
            <param name="filePath">The fully qualified file path identifying the document where the result is located.</param>
            <param name="startLine">Line number of the result location's start position.</param>
            <param name="startIndex">Character index of the result location's start position.</param>
            <param name="endLine">Line number of the result location's end position.</param>
            <param name="endIndex">Character index of the result location's end position.</param>
            <param name="idLine">Line number of the result's identifying position (e.g a position of method's name token).</param>
            <param name="idIndex">Character index of the result's identifying position (e.g a position of method's name token).</param>
            <param name="isReadOnly">Defines whether this result is read-only.</param>
            <returns>A valid instance of the <see cref="T:Microsoft.VisualStudio.Language.Intellisense.IDocumentPeekResult" />.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Language.Intellisense.IPeekResultFactory.Create(Microsoft.VisualStudio.Language.Intellisense.IPeekResultDisplayInfo2,Microsoft.VisualStudio.Imaging.Interop.ImageMoniker,System.String,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Creates an instance of <see cref="T:Microsoft.VisualStudio.Language.Intellisense.IPeekResult" /> that is based on a location in a document.
            </summary>
            <param name="displayInfo">Defines properties used for displaying this result to the user.</param>
            <param name="image">An image representing the <see cref="T:Microsoft.VisualStudio.Language.Intellisense.IDocumentPeekResult" />.</param>
            <param name="filePath">The fully qualified file path identifying the document where the result is located.</param>
            <param name="startLine">Line number of the result location's start position.</param>
            <param name="startIndex">Character index of the result location's start position.</param>
            <param name="endLine">Line number of the result location's end position.</param>
            <param name="endIndex">Character index of the result location's end position.</param>
            <param name="idStartLine">Line number of the result's identifying span's start position (e.g a position of method's name token).</param>
            <param name="idStartIndex">Character index of the result's identifying span's start position (e.g a position of method's name token).</param>
            <param name="idEndLine">Line number of the result's identifying span's end position.</param>
            <param name="idEndIndex">Character index of the result's identifying span's end position.</param>
            <returns>A valid instance of the <see cref="T:Microsoft.VisualStudio.Language.Intellisense.IDocumentPeekResult" />.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Language.Intellisense.IPeekResultFactory.Create(Microsoft.VisualStudio.Language.Intellisense.IPeekResultDisplayInfo2,Microsoft.VisualStudio.Imaging.Interop.ImageMoniker,System.String,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Creates an instance of <see cref="T:Microsoft.VisualStudio.Language.Intellisense.IPeekResult" /> that is based on a location in a document.
            </summary>
            <param name="displayInfo">Defines properties used for displaying this result to the user.</param>
            <param name="image">An image representing the <see cref="T:Microsoft.VisualStudio.Language.Intellisense.IDocumentPeekResult" />.</param>
            <param name="filePath">The fully qualified file path identifying the document where the result is located.</param>
            <param name="startLine">Line number of the result location's start position.</param>
            <param name="startIndex">Character index of the result location's start position.</param>
            <param name="endLine">Line number of the result location's end position.</param>
            <param name="endIndex">Character index of the result location's end position.</param>
            <param name="idStartLine">Line number of the result's identifying span's start position (e.g a position of method's name token).</param>
            <param name="idStartIndex">Character index of the result's identifying span's start position (e.g a position of method's name token).</param>
            <param name="idEndLine">Line number of the result's identifying span's end position.</param>
            <param name="idEndIndex">Character index of the result's identifying span's end position.</param>
            <param name="isReadOnly">Defines whether this result is read-only.</param>
            <returns>A valid instance of the <see cref="T:Microsoft.VisualStudio.Language.Intellisense.IDocumentPeekResult" />.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Language.Intellisense.IPeekResultFactory.Create(Microsoft.VisualStudio.Language.Intellisense.IPeekResultDisplayInfo2,Microsoft.VisualStudio.Imaging.Interop.ImageMoniker,System.String,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean,System.Guid)">
            <summary>
            Creates an instance of <see cref="T:Microsoft.VisualStudio.Language.Intellisense.IPeekResult" /> that is based on a location in a document.
            </summary>
            <param name="displayInfo">Defines properties used for displaying this result to the user.</param>
            <param name="image">An image representing the <see cref="T:Microsoft.VisualStudio.Language.Intellisense.IDocumentPeekResult" />.</param>
            <param name="filePath">The fully qualified file path identifying the document where the result is located.</param>
            <param name="startLine">Line number of the result location's start position.</param>
            <param name="startIndex">Character index of the result location's start position.</param>
            <param name="endLine">Line number of the result location's end position.</param>
            <param name="endIndex">Character index of the result location's end position.</param>
            <param name="idStartLine">Line number of the result's identifying span's start position (e.g a position of method's name token).</param>
            <param name="idStartIndex">Character index of the result's identifying span's start position (e.g a position of method's name token).</param>
            <param name="idEndLine">Line number of the result's identifying span's end position.</param>
            <param name="idEndIndex">Character index of the result's identifying span's end position.</param>
            <param name="isReadOnly">Defines whether this result is read-only.</param>
            <param name="editorDestination">A Guid representing the editor the <see cref="T:Microsoft.VisualStudio.Language.Intellisense.IDocumentPeekResult" /> should navigate to.</param>
            <returns>A valid instance of the <see cref="T:Microsoft.VisualStudio.Language.Intellisense.IDocumentPeekResult" />.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Language.Intellisense.IPeekResultFactory.Create(Microsoft.VisualStudio.Language.Intellisense.IPeekResultDisplayInfo2,Microsoft.VisualStudio.Imaging.Interop.ImageMoniker,System.String,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean,System.Guid,System.Action{Microsoft.VisualStudio.Language.Intellisense.IPeekResult,System.Object,System.Object})">
            <summary>
            Creates an instance of <see cref="T:Microsoft.VisualStudio.Language.Intellisense.IPeekResult" /> that is based on a location in a document.
            </summary>
            <param name="displayInfo">Defines properties used for displaying this result to the user.</param>
            <param name="image">An image representing the <see cref="T:Microsoft.VisualStudio.Language.Intellisense.IDocumentPeekResult" />.</param>
            <param name="filePath">The fully qualified file path identifying the document where the result is located.</param>
            <param name="startLine">Line number of the result location's start position.</param>
            <param name="startIndex">Character index of the result location's start position.</param>
            <param name="endLine">Line number of the result location's end position.</param>
            <param name="endIndex">Character index of the result location's end position.</param>
            <param name="idStartLine">Line number of the result's identifying span's start position (e.g a position of method's name token).</param>
            <param name="idStartIndex">Character index of the result's identifying span's start position (e.g a position of method's name token).</param>
            <param name="idEndLine">Line number of the result's identifying span's end position.</param>
            <param name="idEndIndex">Character index of the result's identifying span's end position.</param>
            <param name="isReadOnly">Defines whether this result is read-only.</param>
            <param name="editorDestination">A Guid representing the editor the <see cref="T:Microsoft.VisualStudio.Language.Intellisense.IDocumentPeekResult" /> should navigate to.</param>
            <param name="postNavigationCallback">Pass in a callback function to the <see cref="T:Microsoft.VisualStudio.Language.Intellisense.IPeekResult" />.<seealso cref="P:Microsoft.VisualStudio.Language.Intellisense.IPeekResult.PostNavigationCallback" /></param>
            <returns>A valid instance of the <see cref="T:Microsoft.VisualStudio.Language.Intellisense.IDocumentPeekResult" />.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Language.Intellisense.IPeekResultFactory.Create(Microsoft.VisualStudio.Language.Intellisense.IPeekResultDisplayInfo,System.String,Microsoft.VisualStudio.Text.Span,System.Int32,System.Boolean)">
            <summary>
            Creates an instance of <see cref="T:Microsoft.VisualStudio.Language.Intellisense.IPeekResult" /> that is based on a location in a document.
            </summary>
            <param name="displayInfo">Defines properties used for displaying this result to the user.</param>
            <param name="filePath">The fully qualified file path identifying the document where the result is located.</param>
            <param name="eoiSpan">Span of the entity of interest as a character offset from the start of the buffer.</param>
            <param name="idPosition">Position of the identifying position as a character offset from the start of the buffer.</param>
            <param name="isReadOnly">Defines whether this result is read-only.</param>
            <returns>A valid instance of the <see cref="T:Microsoft.VisualStudio.Language.Intellisense.IDocumentPeekResult" />.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Language.Intellisense.IPeekResultFactory.Create(Microsoft.VisualStudio.Language.Intellisense.IPeekResultDisplayInfo,System.Action)">
            <summary>
            Creates an instance of <see cref="T:Microsoft.VisualStudio.Language.Intellisense.IPeekResult" /> that is not based on a location in a document, but can
            be browsed externally, for example a metadata class that can only be browsed in Object Browser.
            </summary>
            <param name="displayInfo">Defines properties used for displaying this result to the user.</param>
            <param name="browseAction">An action to browse the result externally (outside of Peek).</param>
            <returns>A valid instance of the <see cref="T:Microsoft.VisualStudio.Language.Intellisense.IExternallyBrowsablePeekResult" />.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Language.Intellisense.IPeekResultPresentation">
            <summary>
            Defines WPF visual representation of an <see cref="T:Microsoft.VisualStudio.Language.Intellisense.IPeekResult" />.
            </summary>
            <remarks>
            A visual representation of an <see cref="T:Microsoft.VisualStudio.Language.Intellisense.IDocumentPeekResult" /> for example is
            a WPF control of the IWpfTextViewHost containing an <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView" />
            with an open document.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Language.Intellisense.IPeekResultPresentation.TryOpen(Microsoft.VisualStudio.Language.Intellisense.IPeekResult)">
             <summary>
             Tries to open another <see cref="T:Microsoft.VisualStudio.Language.Intellisense.IPeekResult" /> while keeping the same presentation.
             For example document result presentation might check if <paramref name="otherResult" />
             represents a result in the same document and would reuse already open document.
             </summary>
             <param name="otherResult">Another result to be opened.</param>
            <returns><c>true</c> if succeeded in opening <paramref name="otherResult" />, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Language.Intellisense.IPeekResultPresentation.TryPrepareToClose">
            <summary>
            Prepare to close the presentation.
            </summary>
            <returns>Returns <c>true</c> if the presentation is allowed to close; <c>false</c> otherwise.</returns>
            <remarks>
            <para>
            This method is called with the presentation is explicitly being closed to give the user, if the presentation
            corresponds to a modified document, the opportunity to save the document if desired.
            </para>
            <para>
            If this method returns <c>true</c>, the caller must close the presentation (typically by dismissing the
            containing peek session).
            </para>
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Language.Intellisense.IPeekResultPresentation.Create(Microsoft.VisualStudio.Language.Intellisense.IPeekSession,Microsoft.VisualStudio.Language.Intellisense.IPeekResultScrollState)">
            <summary>
            Creates WPF visual representation of the Peek result.
            </summary>
            <remarks>
            An <see cref="T:Microsoft.VisualStudio.Language.Intellisense.IPeekResultPresentation" /> for an <see cref="T:Microsoft.VisualStudio.Language.Intellisense.IDocumentPeekResult" /> would
            for example open document and return a WPF control of the IWpfTextViewHost.
            </remarks>
            <param name="session">The <see cref="T:Microsoft.VisualStudio.Language.Intellisense.IPeekSession" /> containing the Peek result.</param>
            <param name="scrollState">The state that defines the desired scroll state of the result. May be null (in which case the default scroll state is used).</param>
            <returns>A valid <see cref="T:System.Windows.UIElement" /> representing the Peek result.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Language.Intellisense.IPeekResultPresentation.ScrollIntoView(Microsoft.VisualStudio.Language.Intellisense.IPeekResultScrollState)">
            <summary>
            Scrolls open representation of the Peek result into view.
            </summary>
            <param name="scrollState">The state that defines the desired scroll state of the result. May be null (in which case the default scroll state is used).</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Language.Intellisense.IPeekResultPresentation.CaptureScrollState">
            <summary>
            Captures any information about the result prior to navigating to another frame (by using the peek navigation history
            or doing a recursive peek).
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Language.Intellisense.IPeekResultPresentation.Close">
            <summary>
            Closes the represenation of the Peek result.
            </summary>
            <remarks>
            An <see cref="T:Microsoft.VisualStudio.Language.Intellisense.IPeekResultPresentation" /> for an <see cref="T:Microsoft.VisualStudio.Language.Intellisense.IDocumentPeekResult" /> would
            for example close the document in this method.
            </remarks>
        </member>
        <member name="E:Microsoft.VisualStudio.Language.Intellisense.IPeekResultPresentation.RecreateContent">
            <summary>
            Raised when the content of the presentation needs to be recreated. 
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Language.Intellisense.IPeekResultPresentation.SetKeyboardFocus">
            <summary>
            Sets keyboard focus to the open representation of the Peek result.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.Intellisense.IPeekResultPresentation.ZoomLevel">
            <summary>
            The ZoomLevel factor associated with the presentation.
            </summary>
            <remarks>
            Represented as a percentage (100.0 == default).
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.Intellisense.IPeekResultPresentation.IsDirty">
            <summary>
            Gets a value indicating whether or not this presentation is dirty.
            </summary>
        </member>
        <member name="E:Microsoft.VisualStudio.Language.Intellisense.IPeekResultPresentation.IsDirtyChanged">
            <summary>
            Raised when <see cref="P:Microsoft.VisualStudio.Language.Intellisense.IPeekResultPresentation.IsDirty" /> changes.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.Intellisense.IPeekResultPresentation.IsReadOnly">
            <summary>
            Gets a value indicating whether or not this presentation is read-only.
            </summary>
        </member>
        <member name="E:Microsoft.VisualStudio.Language.Intellisense.IPeekResultPresentation.IsReadOnlyChanged">
            <summary>
            Raised when <see cref="P:Microsoft.VisualStudio.Language.Intellisense.IPeekResultPresentation.IsReadOnly" /> changes.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Language.Intellisense.IPeekResultPresentation.CanSave(System.String@)">
            <summary>
            Can this presentation be saved?
            </summary>
            <param name="defaultPath">Location the presentation will be saved to by default (will be null if returning false).</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Language.Intellisense.IPeekResultPresentation.TrySave(System.Boolean)">
            <summary>
            Save the current version of this presentation.
            </summary>
            <param name="saveAs">If true, ask the user for a save location.</param>
            <returns>true if the save succeeded.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Language.Intellisense.IPeekResultPresenter">
            <summary>
            Defines <see cref="T:Microsoft.VisualStudio.Language.Intellisense.IPeekResult" /> presenter, which can create WPF visual representation of a Peek result.
            </summary>
            <remarks>
            <para>
            Each specific <see cref="T:Microsoft.VisualStudio.Language.Intellisense.IPeekResult" /> implementation needs an <see cref="T:Microsoft.VisualStudio.Language.Intellisense.IPeekResultPresenter" /> that 
            can create a visual representation of the result to be shown inside the Peek control. The Peek service exports 
            default <see cref="T:Microsoft.VisualStudio.Language.Intellisense.IPeekResultPresenter" />s for known <see cref="T:Microsoft.VisualStudio.Language.Intellisense.IPeekResult" /> implementations such as 
            <see cref="T:Microsoft.VisualStudio.Language.Intellisense.IDocumentPeekResult" /> and <see cref="T:Microsoft.VisualStudio.Language.Intellisense.IExternallyBrowsablePeekResult" />. When a content type specific 
            Peek provider provides a custom <see cref="T:Microsoft.VisualStudio.Language.Intellisense.IPeekResult" /> implementation it should also export an 
            <see cref="T:Microsoft.VisualStudio.Language.Intellisense.IPeekResultPresenter" /> that can create its visual representation. It is also possible to override
            existing <see cref="T:Microsoft.VisualStudio.Language.Intellisense.IPeekResultPresenter" /> using the Order attribute.
            </para>
            <para>
            This is a MEF component part, and should be exported with the following attributes:
            [Export(typeof(IPeekResultPresenter))]
            [Name("presenter name")]
            [Order()]
            Name attribute is required and Order attribute is optional.
            </para>
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Language.Intellisense.IPeekResultPresenter.TryCreatePeekResultPresentation(Microsoft.VisualStudio.Language.Intellisense.IPeekResult)">
            <summary>
            Creates <see cref="T:Microsoft.VisualStudio.Language.Intellisense.IPeekResultPresentation" /> instance for the given <see cref="T:Microsoft.VisualStudio.Language.Intellisense.IPeekResult" />.
            </summary>
            <param name="result">The Peek result for which to create a visual representation.</param>
            <returns>A valid <see cref="T:Microsoft.VisualStudio.Language.Intellisense.IPeekResultPresentation" /> instance or null if none could be created by this presenter.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Language.Intellisense.IPeekResultQuery">
            <summary>
            Represents an asynchronous query for <see cref="T:Microsoft.VisualStudio.Language.Intellisense.IPeekResult" />s.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.Intellisense.IPeekResultQuery.Results">
            <summary>
            An observable collection of <see cref="T:Microsoft.VisualStudio.Language.Intellisense.IPeekResult" />s for the given query.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Language.Intellisense.IPeekResultQuery.Start">
            <summary>
            Starts the query.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Language.Intellisense.IPeekResultQuery.Cancel">
            <summary>
            Cancels the query.
            </summary>
        </member>
        <member name="E:Microsoft.VisualStudio.Language.Intellisense.IPeekResultQuery.Completed">
            <summary>
            Raised when the query is successfully completed.
            </summary>
        </member>
        <member name="E:Microsoft.VisualStudio.Language.Intellisense.IPeekResultQuery.Failed">
            <summary>
            Raised when the query failed.
            </summary>
        </member>
        <member name="E:Microsoft.VisualStudio.Language.Intellisense.IPeekResultQuery.ProgressChanged">
            <summary>
            Raised when the query progress has changed.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Language.Intellisense.IPeekResultScrollState">
            <summary>
            Class that captures the state of some result displayed in Peek.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Language.Intellisense.IPeekResultScrollState.RestoreScrollState(Microsoft.VisualStudio.Language.Intellisense.IPeekResultPresentation)">
            <summary>
            Restore the presentation to the captured state.
            </summary>
            <param name="presentation">Result Presentation to scroll.</param>
            <remarks>
            <paramref name="presentation" /> will always be the presentation
            that created this via presentation.CaptureScrollState().</remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.Language.Intellisense.IPeekResultSource">
            <summary>
            Represents an object instance that can be queried for supported relationships
            and results for a particular relationship.
            </summary>
            <remarks>
            Content-type specific Peek providers implement this interface to provide results of
            querying <see cref="T:Microsoft.VisualStudio.Language.Intellisense.IPeekableItem" /> instances.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Language.Intellisense.IPeekResultSource.FindResults(System.String,Microsoft.VisualStudio.Language.Intellisense.IPeekResultCollection,System.Threading.CancellationToken,Microsoft.VisualStudio.Language.Intellisense.IFindPeekResultsCallback)">
            <summary>
            Populates the collection of <see cref="T:Microsoft.VisualStudio.Language.Intellisense.IPeekResult" />s for the given relationship.
            </summary>
            <param name="relationshipName">The case insenitive name of the relationship to be queried for results.</param>
            <param name="resultCollection">Represents a collection of <see cref="T:Microsoft.VisualStudio.Language.Intellisense.IPeekResult" />s to be populated.</param>
            <param name="cancellationToken">The cancellation token used by the caller to cancel the operation.</param>
            <param name="callback">The <see cref="T:Microsoft.VisualStudio.Language.Intellisense.IFindPeekResultsCallback" /> instance used to report progress and failures.</param>
        </member>
        <member name="T:Microsoft.VisualStudio.Language.Intellisense.IPeekSession">
            <summary>
            Defines a Peek session, which is a type of IntelliSense session.
            </summary>
            <remarks><see cref="T:Microsoft.VisualStudio.Language.Intellisense.IPeekSession" /> instances are created and managed by the <see cref="T:Microsoft.VisualStudio.Language.Intellisense.IPeekBroker" /> service.</remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.Intellisense.IPeekSession.PeekableItems">
            <summary>
            Gets the collection of <see cref="T:Microsoft.VisualStudio.Language.Intellisense.IPeekableItem" /> objects.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.Intellisense.IPeekSession.RelationshipName">
            <summary>
            Case insensitive name of the relationship to which this session pertains.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Language.Intellisense.IPeekSession.QueryPeekResults(Microsoft.VisualStudio.Language.Intellisense.IPeekableItem,System.String)">
            <summary>
            Starts asynchronous query for <see cref="T:Microsoft.VisualStudio.Language.Intellisense.IPeekResult" />s for the given relationship on the given <see cref="T:Microsoft.VisualStudio.Language.Intellisense.IPeekableItem" />.
            </summary>
            <param name="peekableItem">A <see cref="T:Microsoft.VisualStudio.Language.Intellisense.IPeekableItem" /> to be queried for results.</param>
            <param name="relationshipName">The case insenitive name of the relationship.</param>
            <returns>The <see cref="T:Microsoft.VisualStudio.Language.Intellisense.IPeekResultQuery" /> instance representing the results and state of the query.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Language.Intellisense.IPeekSession.TriggerNestedPeekSession(Microsoft.VisualStudio.Language.Intellisense.IPeekSession)">
            <summary>
            Starts the nested Peek session, queries <see cref="T:Microsoft.VisualStudio.Language.Intellisense.IPeekableItemSource" />s
            for <see cref="T:Microsoft.VisualStudio.Language.Intellisense.IPeekableItem" />s and raises <see cref="E:Microsoft.VisualStudio.Language.Intellisense.IPeekSession.NestedPeekTriggered" /> event on success.
            </summary>
            <param name="nestedSession">The nested Peek session.</param>
        </member>
        <member name="E:Microsoft.VisualStudio.Language.Intellisense.IPeekSession.NestedPeekTriggered">
            <summary>
            Occurs when nested Peek command is triggered. In a typical case this event occurs
            when Peek command is invoked on a text view that represents one of Peek results
            pertaining to this Peek session.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.Intellisense.IPeekSession.CreationOptions">
            <summary>
            Gets the <see cref="T:Microsoft.VisualStudio.Language.Intellisense.PeekSessionCreationOptions" /> that was used to create this Peek session.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Language.Intellisense.IPeekSession2">
            <summary>
            Extends <see cref="T:Microsoft.VisualStudio.Language.Intellisense.IPeekSession" /> with an ability to pass <see cref="T:Microsoft.VisualStudio.Utilities.IUIThreadOperationContext" /> when executing operations synchronously on the UI thread.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Language.Intellisense.IPeekSession2.TriggerNestedPeekSession(Microsoft.VisualStudio.Language.Intellisense.IPeekSession2,Microsoft.VisualStudio.Utilities.IUIThreadOperationContext)">
            <summary>
            Starts the nested Peek session, queries <see cref="T:Microsoft.VisualStudio.Language.Intellisense.IPeekableItemSource" />s
            for <see cref="T:Microsoft.VisualStudio.Language.Intellisense.IPeekableItem" />s and raises <see cref="E:Microsoft.VisualStudio.Language.Intellisense.IPeekSession.NestedPeekTriggered" /> event on success.
            </summary>
            <param name="nestedSession">The nested Peek session.</param>
            <param name="operationContext">A context of executing this operation on the UI thread, which allows to provide custom operation description and progress information.</param>
        </member>
        <member name="T:Microsoft.VisualStudio.Language.Intellisense.NestedPeekTriggeredEventArgs">
            <summary>
            Provides information about nested Peek invocation.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.Intellisense.NestedPeekTriggeredEventArgs.RelationshipName">
            <summary>
            Case insensitive name of the relationship that was used to invoke nested Peek.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.Intellisense.NestedPeekTriggeredEventArgs.PeekableItems">
            <summary>
            Gets the collection of <see cref="T:Microsoft.VisualStudio.Language.Intellisense.IPeekableItem" /> objects.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.Intellisense.NestedPeekTriggeredEventArgs.TrackingPoint">
            <summary>
            Gets the <see cref="T:Microsoft.VisualStudio.Text.ITrackingPoint" /> at which nested Peek was invoked.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Language.Intellisense.NestedPeekTriggeredEventArgs.#ctor(System.String,Microsoft.VisualStudio.Text.ITrackingPoint,System.Collections.Generic.IEnumerable{Microsoft.VisualStudio.Language.Intellisense.IPeekableItem})">
            <summary>
            Creates new instance of the <see cref="T:Microsoft.VisualStudio.Language.Intellisense.NestedPeekTriggeredEventArgs" />.
            </summary>
            <param name="relationshipName">Case insensitive name of the relationship that was used to invoke nested Peek.</param>
            <param name="trackingPoint"><see cref="T:Microsoft.VisualStudio.Text.ITrackingPoint" /> at which nested Peek was invoked.</param>
            <param name="peekableItems">The list of the <see cref="T:Microsoft.VisualStudio.Language.Intellisense.IPeekableItem" /> objects that can provide results of the 
            nested Peek invocation.</param>
        </member>
        <member name="T:Microsoft.VisualStudio.Language.Intellisense.PeekResizeEventArgs">
            <summary>
            Contains information describing how a user has resized the Peek control.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Language.Intellisense.PeekResizeEventArgs.#ctor(System.Double,System.Double)">
            <summary>
            Constructs a new instance of <see cref="T:Microsoft.VisualStudio.Language.Intellisense.PeekResizeEventArgs" /> with the current height of the Peek control
            both in pixels and as a percentage of the containing <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView" />."
            </summary>
            <param name="newHeightAbsolute">The height of the Peek control in pixels.</param>
            <param name="newHeightProportion">The height of the Peek control as a proportion of the containing
            <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView" />. Valid values are between 0 and 1.</param>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.Intellisense.PeekResizeEventArgs.NewHeightAbsolute">
            <summary>
            Gets the height of the Peek control in pixels.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.Intellisense.PeekResizeEventArgs.NewHeightProportion">
            <summary>
            Gets the height of the Peek control as a proportion of the containing <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView" />.
            Values returned should fall into the range between 0 and 1.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Language.Intellisense.PeekResultDisplayInfo">
            <summary>
            Defines elements of <see cref="T:Microsoft.VisualStudio.Language.Intellisense.IPeekResult" /> display information.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.Intellisense.PeekResultDisplayInfo.Label">
            <summary>
            Defines the localized label used for displaying this result to the user.
            This value will be used to represent <see cref="T:Microsoft.VisualStudio.Language.Intellisense.IPeekResult" /> in the Peek control's result list.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.Intellisense.PeekResultDisplayInfo.LabelTooltip">
            <summary>
            Defines the localized label tooltip used for displaying this result to the user.
            </summary>
            <remarks>
            Supported content types are strings and <see cref="T:System.Windows.UIElement" /> instances.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.Intellisense.PeekResultDisplayInfo.Title">
            <summary>
            Defines the localized title used for displaying this result to the user.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.Intellisense.PeekResultDisplayInfo.TitleTooltip">
            <summary>
            Defines the localized title tooltip used for displaying this result to the user.
            </summary>
            // <remarks>
            Supported content types are strings and <see cref="T:System.Windows.UIElement" /> instances.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Language.Intellisense.PeekResultDisplayInfo.#ctor(System.String,System.Object,System.String,System.String)">
            <summary>
            Creates new instance of the <see cref="T:Microsoft.VisualStudio.Language.Intellisense.PeekResultDisplayInfo" /> class.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Language.Intellisense.PeekResultDisplayInfo.Dispose">
            <summary>
            Disposes the <see cref="T:Microsoft.VisualStudio.Language.Intellisense.PeekResultDisplayInfo" /> instance.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.Intellisense.PeekResultDisplayInfo2.StartIndexOfTokenInLabel">
            <summary>
            Defines the first character's index of the "interesting" token in the label.
            For instance, if peek references was triggered on a method,
            this would be the first character's index in the label that contains the method
            name.
            </summary>
            <remarks>
            This index is bound to <see cref="P:Microsoft.VisualStudio.Language.Intellisense.IPeekResultDisplayInfo.Label" />.
            It has nothing to do with the span of text that initialized peek.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.Intellisense.PeekResultDisplayInfo2.LengthOfTokenInLabel">
            <summary>
            Defines the length of the "interesting" token in the label.
            For instance, if peek references was triggered on a method,
            this would be the length of the method name.
            </summary>
            <remarks>
            This length is bound to <see cref="P:Microsoft.VisualStudio.Language.Intellisense.IPeekResultDisplayInfo.Label" />.
            It has nothing to do with the span of text that initialized peek.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Language.Intellisense.PeekResultDisplayInfo2.#ctor(System.String,System.Object,System.String,System.String,System.Int32,System.Int32)">
            <summary>
            Creates new instance of the <see cref="T:Microsoft.VisualStudio.Language.Intellisense.PeekResultDisplayInfo2" /> class.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Language.Intellisense.PeekSessionCreationOptions">
            <summary>
            Represents a set of parameters that control <see cref="T:Microsoft.VisualStudio.Language.Intellisense.IPeekSession" /> creation.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Language.Intellisense.PeekSessionCreationOptions.#ctor(Microsoft.VisualStudio.Text.Editor.ITextView,System.String,Microsoft.VisualStudio.Text.ITrackingPoint,System.Nullable{System.Double},System.Boolean,Microsoft.VisualStudio.Language.Intellisense.IPeekResizeListener,System.Boolean)">
            <summary>
            This constructor produces <see cref="T:Microsoft.VisualStudio.Language.Intellisense.PeekSessionCreationOptions" /> that will create a Peek session
            using the default sizing behavior.
            </summary>
            <param name="textView">The <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView" /> over which to trigger a Peek session.</param>
            <param name="triggerPoint">
            The point in the text buffer at which a Peek session is requested. If set to <value>null</value> the
            current carat position is assumed.
            </param>
            <param name="defaultHeight">The default height of the Peek control.</param>
            <param name="relationshipName">The name of the requested relationship to be explored by a Peek session.</param>
            <param name="allowUserResize">Specifies whether the Peek control resizers should be enabled.</param>
            <param name="resizeListener">A callback object that will be notified when the user resizes the Peek control.</param>
            <param name="shouldFocusOnLoad">Specifies whether the Peek control should get focus when it is first loaded.</param>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.Intellisense.PeekSessionCreationOptions.TextView">
            <summary>
            The <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView" /> over which to create a Peek session.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.Intellisense.PeekSessionCreationOptions.TriggerPoint">
            <summary>
            The point in the text buffer at which a Peek session is requested.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.Intellisense.PeekSessionCreationOptions.RelationshipName">
            <summary>
            The name of the requested relationship to be explored by a Peek session.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.Intellisense.PeekSessionCreationOptions.DefaultHeight">
            <summary>
            The default height, in pixels, for the Peek control. This height
            will be overridden by presentations which implement <see cref="T:Microsoft.VisualStudio.Language.Intellisense.IDesiredHeightProvider" />. If this
            is <value>null</value> then the Peek control will attempt to guess an ideal height as a
            percentage of the view instead of an absolute pixel height.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.Intellisense.PeekSessionCreationOptions.AllowUserResize">
            <summary>
            Indicates whether the top and bottom resizers on the Peek control should be enabled.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.Intellisense.PeekSessionCreationOptions.ResizeListener">
            <summary>
            If set, this contains an object that will be notified when the user resizes the Peek control.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.Intellisense.PeekSessionCreationOptions.ShouldFocusOnLoad">
            <summary>
            Indicates whether or not the Peek control should get the user's focus when it is first loaded.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Language.Intellisense.PredefinedPeekRelationships">
            <summary>
            Predefined Peek relationships.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Language.Intellisense.PredefinedPeekRelationships.Definitions">
            <summary>
            A relationship describing a connection between an <see cref="T:Microsoft.VisualStudio.Language.Intellisense.IPeekableItem" /> and its definition.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Language.Intellisense.PredefinedPeekRelationships.DefinitionsRelationshipName">
            <summary>
            Name of the <see cref="F:Microsoft.VisualStudio.Language.Intellisense.PredefinedPeekRelationships.Definitions" /> relationship.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Language.Intellisense.PredefinedPeekRelationships.Differences">
            <summary>
            A relationship describing a connection between an <see cref="T:Microsoft.VisualStudio.Language.Intellisense.IPeekableItem" /> and its difference against a basic version.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Language.Intellisense.PredefinedPeekRelationships.DifferencesRelationshipName">
            <summary>
            Name of the <see cref="F:Microsoft.VisualStudio.Language.Intellisense.PredefinedPeekRelationships.Differences" /> relationship.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Language.Intellisense.RecreateContentEventArgs">
            <summary>
            Provides information about a request to recreate a content of <see cref="T:Microsoft.VisualStudio.Language.Intellisense.IPeekResultPresentation" />.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.Intellisense.RecreateContentEventArgs.IsResultContentDeleted">
            <summary>
            Gets whether the Peek result's content presented by <see cref="T:Microsoft.VisualStudio.Language.Intellisense.IPeekResultPresentation" /> was deleted.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Language.Intellisense.RecreateContentEventArgs.#ctor(System.Boolean)">
            <summary>
            Creates new instance of the <see cref="T:Microsoft.VisualStudio.Language.Intellisense.RecreateContentEventArgs" /> class.
            </summary>
            <param name="isResultContentDeleted">Indicates whether the Peek result's content presented by <see cref="T:Microsoft.VisualStudio.Language.Intellisense.IPeekResultPresentation" /> was deleted.</param>
        </member>
        <member name="T:Microsoft.VisualStudio.Language.Intellisense.SupportsPeekRelationshipAttribute">
            <summary>
            Use this attribute to specify that an <see cref="T:Microsoft.VisualStudio.Language.Intellisense.IPeekableItemSourceProvider" /> supports a specific <see cref="T:Microsoft.VisualStudio.Language.Intellisense.IPeekRelationship" />.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Language.Intellisense.SupportsPeekRelationshipAttribute.#ctor(System.String)">
            <summary>
            Construct a new instance of the attribute.
            </summary>
            <param name="relationshipName">The name of the relationship that we want to mark as supported.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="relationshipName" /> is null or empty.</exception>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.Intellisense.SupportsPeekRelationshipAttribute.SupportedRelationships">
            <summary>
            The supported relationship
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Language.Intellisense.SupportsStandaloneFilesAttribute">
            <summary>
            Indicates that an <see cref="T:Microsoft.VisualStudio.Language.Intellisense.IPeekableItemSourceProvider" /> supports standalone (not part of a project) files.
            The default value is false so the absense of this attribute on an <see cref="T:Microsoft.VisualStudio.Language.Intellisense.IPeekableItemSourceProvider" /> means
            it doesn't support standalone files.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.Intellisense.SupportsStandaloneFilesAttribute.SupportsStandaloneFiles">
            <summary>
            Gets whether an <see cref="T:Microsoft.VisualStudio.Language.Intellisense.IPeekableItemSourceProvider" /> supports standalone (not part of a project) files.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Language.Intellisense.SupportsStandaloneFilesAttribute.#ctor(System.Boolean)">
            <summary>
            Creates new insatnce of the <see cref="T:Microsoft.VisualStudio.Language.Intellisense.SupportsStandaloneFilesAttribute" /> class.
            </summary>
            <param name="supportsStandaloneFiles">Sets whether an <see cref="T:Microsoft.VisualStudio.Language.Intellisense.IPeekableItemSourceProvider" /> supports 
            standalone (not part of a project) files.</param>
        </member>
        <member name="T:Microsoft.VisualStudio.Language.Intellisense.QuerySuggestedActionCompletionStatus">
            <summary>
            Represents the completion status of querying LightBulb providers for suggested actions.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Language.Intellisense.QuerySuggestedActionCompletionStatus.Completed">
            <summary>
            Querying LightBulb providers for suggested actions completed and produced actions.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Language.Intellisense.QuerySuggestedActionCompletionStatus.Canceled">
            <summary>
            Querying LightBulb providers for suggested actions was cancelled.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Language.Intellisense.QuerySuggestedActionCompletionStatus.InProgress">
            <summary>
            Querying LightBulb providers for suggested actions is in progress.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Language.Intellisense.QuerySuggestedActionCompletionStatus.CompletedWithoutData">
            <summary>
            Querying LightBulb providers for suggested actions completed without yielding any actions.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Language.Intellisense.QuerySuggestedActionCompletionStatus.Idle">
            <summary>
            Lightbulb providers were not queried yet
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Language.Intellisense.SelectedSignatureChangedEventArgs">
            <summary>
            Provides information about selected signature changes in signature help IntelliSense sessions.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Language.Intellisense.SelectedSignatureChangedEventArgs.#ctor(Microsoft.VisualStudio.Language.Intellisense.ISignature,Microsoft.VisualStudio.Language.Intellisense.ISignature)">
            <summary>
            Initializes a new instance of <see cref="T:Microsoft.VisualStudio.Language.Intellisense.SelectedSignatureChangedEventArgs" />.
            </summary>
            <param name="previousSelectedSignature">The signature that was previously selected.</param>
            <param name="newSelectedSignature">The signature that is currently selected.</param>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.Intellisense.SelectedSignatureChangedEventArgs.PreviousSelectedSignature">
            <summary>
            Gets the signature that was previously selected.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.Intellisense.SelectedSignatureChangedEventArgs.NewSelectedSignature">
            <summary>
            Gets the signature that is currently selected.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Language.Intellisense.SignatureHelpPresenterStyle">
            <summary>
             Defines a set of properties that will be used to style the default signature help presenter.
            </summary>
             <remarks>
             This is a MEF component part, and should be exported with the following attributes:
             [Export(typeof(SignatureHelpPresenterStyle))]
             [ContentType]
             [Name]
             [Order]
             All exports of this component part should be ordered after the "default" signature help presenter style.  At a minimum,
             this means adding [Order(After="default")] to the export metadata.
             </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.Intellisense.SignatureHelpPresenterStyle.ForegroundBrush">
            <summary>
            Gets a <see cref="T:System.Windows.Media.Brush" /> that will be used to paint the foreground of the signature help presenter.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.Intellisense.SignatureHelpPresenterStyle.BorderBrush">
            <summary>
            Gets a <see cref="T:System.Windows.Media.Brush" /> that will be used to paint the borders in the signature help presenter.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.Intellisense.SignatureHelpPresenterStyle.BackgroundBrush">
            <summary>
            Gets a <see cref="T:System.Windows.Media.Brush" /> that will be used to paint the background of the signature help presenter.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.Intellisense.SignatureHelpPresenterStyle.SignatureAppearanceCategory">
            <summary>
            Gets a string that identifies the appearance category for the <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView" />s displayed in the default
            signature help presenter.
            </summary>
            <remarks>
            Manipulating this value will change the classification format map used in the translation of classification types to
            classification formats in the signature <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView" />.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.Intellisense.SignatureHelpPresenterStyle.UpDownSignatureTextRunProperties">
            <summary>
            Gets a <see cref="T:System.Windows.Media.TextFormatting.TextRunProperties" /> that will be used to format the text of up/down signature spinner.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.Intellisense.SignatureHelpPresenterStyle.SignatureDocumentationTextRunProperties">
            <summary>
            Gets a <see cref="T:System.Windows.Media.TextFormatting.TextRunProperties" /> that will be used to format the text of the signature documentation.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.Intellisense.SignatureHelpPresenterStyle.CurrentParameterNameTextRunProperties">
            <summary>
            Gets a <see cref="T:System.Windows.Media.TextFormatting.TextRunProperties" /> that will be used to format the text of the current parameter name.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.Intellisense.SignatureHelpPresenterStyle.CurrentParameterDocumentationTextRunProperties">
            <summary>
            Gets a <see cref="T:System.Windows.Media.TextFormatting.TextRunProperties" /> that will be used to format the text of the current parameter documentation.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.Intellisense.SignatureHelpPresenterStyle.AreGradientsAllowed">
            <summary>
            Gets a value determining whether or not gradients should be used in the presentation of a
            <see cref="T:Microsoft.VisualStudio.Language.Intellisense.ISignatureHelpSession" />.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Language.Intellisense.StandardGlyphGroup">
            <summary>
            Describes the different types of glyphs that can be displayed in the default completion tool implementation.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Language.Intellisense.StandardGlyphGroup.GlyphGroupClass">
            <summary>
            Describes symbols for classes.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Language.Intellisense.StandardGlyphGroup.GlyphGroupConstant">
            <summary>
            Describes symbols for constants.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Language.Intellisense.StandardGlyphGroup.GlyphGroupDelegate">
            <summary>
            Describes symbols for delegates.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Language.Intellisense.StandardGlyphGroup.GlyphGroupEnum">
            <summary>
            Describes symbols for enumerations.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Language.Intellisense.StandardGlyphGroup.GlyphGroupEnumMember">
            <summary>
            Describes symbols for enumeration members.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Language.Intellisense.StandardGlyphGroup.GlyphGroupEvent">
            <summary>
            Describes symbols for events.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Language.Intellisense.StandardGlyphGroup.GlyphGroupException">
            <summary>
            Describes symbols for exceptions.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Language.Intellisense.StandardGlyphGroup.GlyphGroupField">
            <summary>
            Describes symbols for fields.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Language.Intellisense.StandardGlyphGroup.GlyphGroupInterface">
            <summary>
            Describes symbols for interfaces.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Language.Intellisense.StandardGlyphGroup.GlyphGroupMacro">
            <summary>
            Describes symbols for macros.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Language.Intellisense.StandardGlyphGroup.GlyphGroupMap">
            <summary>
            Describes symbols for maps.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Language.Intellisense.StandardGlyphGroup.GlyphGroupMapItem">
            <summary>
            Describes symbols for map items.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Language.Intellisense.StandardGlyphGroup.GlyphGroupMethod">
            <summary>
            Describes symbols for methods.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Language.Intellisense.StandardGlyphGroup.GlyphGroupOverload">
            <summary>
            Describes symbols for overloads.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Language.Intellisense.StandardGlyphGroup.GlyphGroupModule">
            <summary>
            Describes symbols for modules.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Language.Intellisense.StandardGlyphGroup.GlyphGroupNamespace">
            <summary>
            Describes symbols for namespaces.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Language.Intellisense.StandardGlyphGroup.GlyphGroupOperator">
            <summary>
            Describes symbols for operators.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Language.Intellisense.StandardGlyphGroup.GlyphGroupProperty">
            <summary>
            Describes symbols for properties.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Language.Intellisense.StandardGlyphGroup.GlyphGroupStruct">
            <summary>
            Describes symbols for structs.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Language.Intellisense.StandardGlyphGroup.GlyphGroupTemplate">
            <summary>
            Describes symbols for templates.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Language.Intellisense.StandardGlyphGroup.GlyphGroupTypedef">
            <summary>
            Describes symbols for typedefs.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Language.Intellisense.StandardGlyphGroup.GlyphGroupType">
            <summary>
            Describes symbols for types.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Language.Intellisense.StandardGlyphGroup.GlyphGroupUnion">
            <summary>
            Describes symbols for unions.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Language.Intellisense.StandardGlyphGroup.GlyphGroupVariable">
            <summary>
            Describes symbols for variables.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Language.Intellisense.StandardGlyphGroup.GlyphGroupValueType">
            <summary>
            Describes symbols for value types.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Language.Intellisense.StandardGlyphGroup.GlyphGroupIntrinsic">
            <summary>
            Describes intrinsic symbols.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Language.Intellisense.StandardGlyphGroup.GlyphGroupJSharpMethod">
            <summary>
            Describes symbols for J# methods.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Language.Intellisense.StandardGlyphGroup.GlyphGroupJSharpField">
            <summary>
            Describes symbols for J# fields.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Language.Intellisense.StandardGlyphGroup.GlyphGroupJSharpClass">
            <summary>
            Describes symbols for J# classes.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Language.Intellisense.StandardGlyphGroup.GlyphGroupJSharpNamespace">
            <summary>
            Describes symbols for J# namespaces.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Language.Intellisense.StandardGlyphGroup.GlyphGroupJSharpInterface">
            <summary>
            Describes symbols for J# interfaces.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Language.Intellisense.StandardGlyphGroup.GlyphGroupError">
            <summary>
            Describes symbols for errors.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Language.Intellisense.StandardGlyphGroup.GlyphBscFile">
            <summary>
            Describes symbols for BSC files.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Language.Intellisense.StandardGlyphGroup.GlyphAssembly">
            <summary>
            Describes symbols for assemblies.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Language.Intellisense.StandardGlyphGroup.GlyphLibrary">
            <summary>
            Describes symbols for libraries.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Language.Intellisense.StandardGlyphGroup.GlyphVBProject">
            <summary>
            Describes symbols for VB projects.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Language.Intellisense.StandardGlyphGroup.GlyphCoolProject">
            <summary>
            Describes symbols for C# projects.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Language.Intellisense.StandardGlyphGroup.GlyphCppProject">
            <summary>
            Describes symbols for C++ projects.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Language.Intellisense.StandardGlyphGroup.GlyphDialogId">
            <summary>
            Describes symbols for dialog identifiers.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Language.Intellisense.StandardGlyphGroup.GlyphOpenFolder">
            <summary>
            Describes symbols for open folders.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Language.Intellisense.StandardGlyphGroup.GlyphClosedFolder">
            <summary>
            Describes symbols for closed folders.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Language.Intellisense.StandardGlyphGroup.GlyphArrow">
            <summary>
            Describes arrow symbols.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Language.Intellisense.StandardGlyphGroup.GlyphCSharpFile">
            <summary>
            Describes symbols for C# files.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Language.Intellisense.StandardGlyphGroup.GlyphCSharpExpansion">
            <summary>
            Describes symbols for C# expansions.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Language.Intellisense.StandardGlyphGroup.GlyphKeyword">
            <summary>
            Describes symbols for keywords.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Language.Intellisense.StandardGlyphGroup.GlyphInformation">
            <summary>
            Describes symbols for information.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Language.Intellisense.StandardGlyphGroup.GlyphReference">
            <summary>
            Describes symbols for references.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Language.Intellisense.StandardGlyphGroup.GlyphRecursion">
            <summary>
            Describes symbols for recursion.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Language.Intellisense.StandardGlyphGroup.GlyphXmlItem">
            <summary>
            Describes symbols for XML items.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Language.Intellisense.StandardGlyphGroup.GlyphJSharpProject">
            <summary>
            Describes symbols for J# projects.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Language.Intellisense.StandardGlyphGroup.GlyphJSharpDocument">
            <summary>
            Describes symbols for J# documents.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Language.Intellisense.StandardGlyphGroup.GlyphForwardType">
            <summary>
            Describes symbols for forwarded types.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Language.Intellisense.StandardGlyphGroup.GlyphCallersGraph">
            <summary>
            Describes symbols for callers graphs.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Language.Intellisense.StandardGlyphGroup.GlyphCallGraph">
            <summary>
            Describes symbols for call graphs.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Language.Intellisense.StandardGlyphGroup.GlyphWarning">
            <summary>
            Describes symbols for build warnings.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Language.Intellisense.StandardGlyphGroup.GlyphMaybeReference">
            <summary>
            Describes symbols for something that may be a reference.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Language.Intellisense.StandardGlyphGroup.GlyphMaybeCaller">
            <summary>
            Describes symbols for something that may be a caller.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Language.Intellisense.StandardGlyphGroup.GlyphMaybeCall">
            <summary>
            Describes symbols for something that may be a call.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Language.Intellisense.StandardGlyphGroup.GlyphExtensionMethod">
            <summary>
            Describes symbols for extension methods.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Language.Intellisense.StandardGlyphGroup.GlyphExtensionMethodInternal">
            <summary>
            Describes symbols for internal extension methods.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Language.Intellisense.StandardGlyphGroup.GlyphExtensionMethodFriend">
            <summary>
            Describes symbols for friend extension methods.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Language.Intellisense.StandardGlyphGroup.GlyphExtensionMethodProtected">
            <summary>
            Describes symbols for protected extension methods.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Language.Intellisense.StandardGlyphGroup.GlyphExtensionMethodPrivate">
            <summary>
            Describes symbols for private extension methods.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Language.Intellisense.StandardGlyphGroup.GlyphExtensionMethodShortcut">
            <summary>
            Describes symbols for extension method shortcuts.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Language.Intellisense.StandardGlyphGroup.GlyphXmlAttribute">
            <summary>
            Describes symbols for XML attributes.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Language.Intellisense.StandardGlyphGroup.GlyphXmlChild">
            <summary>
            Describes symbols for child XML elements.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Language.Intellisense.StandardGlyphGroup.GlyphXmlDescendant">
            <summary>
            Describes symbols for descendant XML elements.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Language.Intellisense.StandardGlyphGroup.GlyphXmlNamespace">
            <summary>
            Describes symbols for XML namespaces.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Language.Intellisense.StandardGlyphGroup.GlyphXmlAttributeQuestion">
            <summary>
            Describes symbols with a question mark for XML attributes. 
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Language.Intellisense.StandardGlyphGroup.GlyphXmlAttributeCheck">
            <summary>
            Describes symbols with a check mark for XML attributes. 
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Language.Intellisense.StandardGlyphGroup.GlyphXmlChildQuestion">
            <summary>
            Describes symbols with a question mark for XML child elements.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Language.Intellisense.StandardGlyphGroup.GlyphXmlChildCheck">
            <summary>
            Describes symbols with a check mark for XML child elements.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Language.Intellisense.StandardGlyphGroup.GlyphXmlDescendantQuestion">
            <summary>
            Describes symbols with a question mark for XML descendant elements.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Language.Intellisense.StandardGlyphGroup.GlyphXmlDescendantCheck">
            <summary>
            Describes symbols with a check mark for XML descendant elements.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Language.Intellisense.StandardGlyphGroup.GlyphCompletionWarning">
            <summary>
            Describes symbols for completion warnings.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Language.Intellisense.StandardGlyphGroup.GlyphGroupUnknown">
            <summary>
            Describes symbols for unknown types.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Language.Intellisense.StandardGlyphItem">
            <summary>
            Describes icons or glyphs that are used in statement completion.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Language.Intellisense.StandardGlyphItem.GlyphItemPublic">
            <summary>
            Describes a public symbol.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Language.Intellisense.StandardGlyphItem.GlyphItemInternal">
            <summary>
            Describes an internal symbol.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Language.Intellisense.StandardGlyphItem.GlyphItemFriend">
            <summary>
            Describes a friend symbol.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Language.Intellisense.StandardGlyphItem.GlyphItemProtected">
            <summary>
            Describes a protected symbol.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Language.Intellisense.StandardGlyphItem.GlyphItemPrivate">
            <summary>
            Describes a private symbol.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Language.Intellisense.StandardGlyphItem.GlyphItemShortcut">
            <summary>
            Describes a shortcut symbol.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Language.Intellisense.StandardGlyphItem.TotalGlyphItems">
            <summary>
            Describes a symbol that has all (or none) of the standard attributes.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Language.Intellisense.IAsyncSuggestedActionsSource">
            <summary>
            Extends <see cref="T:Microsoft.VisualStudio.Language.Intellisense.ISuggestedActionsSource2" /> to add an ability to
            asynchronously stream the <see cref="T:Microsoft.VisualStudio.Language.Intellisense.SuggestedActionSet" />s.
            </summary>
            <remarks>
            Besides standard attributes, the providing <see cref="T:Microsoft.VisualStudio.Language.Intellisense.ISuggestedActionsSourceProvider" /> should be decorated
            with one or more <see cref="T:Microsoft.VisualStudio.Language.Intellisense.SuggestedActionPriorityAttribute" />s to enable support for deterministic ordering
            with respect to other <see cref="T:Microsoft.VisualStudio.Language.Intellisense.ISuggestedActionsSourceProvider" />s.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Language.Intellisense.IAsyncSuggestedActionsSource.GetSuggestedActionsAsync(Microsoft.VisualStudio.Language.Intellisense.ISuggestedActionCategorySet,Microsoft.VisualStudio.Text.SnapshotSpan,System.Collections.Immutable.ImmutableArray{Microsoft.VisualStudio.Language.Intellisense.ISuggestedActionSetCollector},System.Threading.CancellationToken)">
            <summary>
            Allows <see cref="T:Microsoft.VisualStudio.Language.Intellisense.IAsyncSuggestedActionsSource" /> to provide suggested actions for a given span of text
            by passing <see cref="T:Microsoft.VisualStudio.Language.Intellisense.SuggestedActionSet" />s into <paramref name="suggestedActionSetCollectors" />
            </summary>
            <remarks>
            This method can be invoked from any thread.
            </remarks>
            <param name="requestedActionCategories">A set of suggested action categories requested.</param>
            <param name="range">A span of text in the <see cref="T:Microsoft.VisualStudio.Text.ITextBuffer" /> over which to return suggested actions.</param>
            <param name="suggestedActionSetCollectors">Gets <see cref="T:Microsoft.VisualStudio.Language.Intellisense.SuggestedActionSet" />s using
            <see cref="M:Microsoft.VisualStudio.Language.Intellisense.ISuggestedActionSetCollector.Add(Microsoft.VisualStudio.Language.Intellisense.SuggestedActionSet)" /> and <see cref="M:Microsoft.VisualStudio.Language.Intellisense.ISuggestedActionSetCollector.Complete" />.
            </param>
            <param name="cancellationToken">Faciliates cancellation.</param>
        </member>
        <member name="T:Microsoft.VisualStudio.Language.Intellisense.ISuggestedAction">
            <summary>
            A possible action suggested to be performed. Examples of such suggested
            actions include quick fixes for syntax errors, suggestions aimed on improving
            code quality or refactorings.
            Suggested actions are provided by <see cref="T:Microsoft.VisualStudio.Language.Intellisense.ISuggestedActionsSource" /> instances
            and represented by a LightBulb presenter as menu items in a LightBulb dropdown menu.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.Intellisense.ISuggestedAction.HasActionSets">
            <summary>
            Gets whether this action has nested suggested action sets.
            </summary>
            <remarks>This property is expected to be fast so if calculating the return value is not trivial it's recommended to
            just return <c>true</c> and delay evaluating real list of nested actions until 
            <see cref="M:Microsoft.VisualStudio.Language.Intellisense.ISuggestedAction.GetActionSetsAsync(System.Threading.CancellationToken)" /> method is called. In other words, the scenario of <see cref="P:Microsoft.VisualStudio.Language.Intellisense.ISuggestedAction.HasActionSets" /> 
            returning <c>true</c> and <see cref="M:Microsoft.VisualStudio.Language.Intellisense.ISuggestedAction.GetActionSetsAsync(System.Threading.CancellationToken)" /> returning null or empty list is supported.
            On the other hand, if this property returns <c>false</c>, <see cref="M:Microsoft.VisualStudio.Language.Intellisense.ISuggestedAction.GetActionSetsAsync(System.Threading.CancellationToken)" /> method 
            will not be called.</remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Language.Intellisense.ISuggestedAction.GetActionSetsAsync(System.Threading.CancellationToken)">
            <summary>
            Gets a list of nested sets of suggested actions.
            </summary>
            <returns>A task whose result is either a list of <see cref="T:Microsoft.VisualStudio.Language.Intellisense.SuggestedActionSet" />s representing nested suggested actions, 
            or null if this <see cref="T:Microsoft.VisualStudio.Language.Intellisense.ISuggestedAction" /> instance has no nested suggested actions.</returns>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.Intellisense.ISuggestedAction.DisplayText">
            <summary>
            Gets the localized text representing the suggested action.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.Intellisense.ISuggestedAction.IconMoniker">
            <summary>
            Gets an optional icon representing the suggested action or null if this suggested
            action doesn't have an icon.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.Intellisense.ISuggestedAction.IconAutomationText">
            <summary>
            Gets the text to be used as the automation name for the icon when it's displayed.
            </summary>
            <remarks>For accessibility reasons this property should not be null if the icon is specified.</remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.Intellisense.ISuggestedAction.InputGestureText">
            <summary>
            Gets the text describing an input gesture that will apply the suggested action.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.Intellisense.ISuggestedAction.HasPreview">
            <summary>
            Gets whether this suggested action can provide a preview via <see cref="M:Microsoft.VisualStudio.Language.Intellisense.ISuggestedAction.GetPreviewAsync(System.Threading.CancellationToken)" /> method call.
            </summary>
            <remarks>This property is expected to be fast so if calculating the return value is not trivial it's recommended to
            just return <c>true</c> and delay evaluating whether a preview can be provided until
            <see cref="M:Microsoft.VisualStudio.Language.Intellisense.ISuggestedAction.GetPreviewAsync(System.Threading.CancellationToken)" /> method is called. In other words, the scenario of <see cref="P:Microsoft.VisualStudio.Language.Intellisense.ISuggestedAction.HasPreview" /> 
            returning <c>true</c> and <see cref="M:Microsoft.VisualStudio.Language.Intellisense.ISuggestedAction.GetPreviewAsync(System.Threading.CancellationToken)" /> returning null is supported.
            On the other hand, if this property returns <c>false</c>, <see cref="M:Microsoft.VisualStudio.Language.Intellisense.ISuggestedAction.GetPreviewAsync(System.Threading.CancellationToken)" /> method 
            will not be called.</remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Language.Intellisense.ISuggestedAction.GetPreviewAsync(System.Threading.CancellationToken)">
            <summary>
            Gets an object visually representing a preview of the suggested action.  
            </summary>
            <param name="cancellationToken">A cancellation token that allows to cancel preview creation.</param>
            <remarks>
            <para>The only currently supported type of preview object is <see cref="T:System.Windows.UIElement" />.</para>
            <para>By default preview panel gets highlighted when focused by setting background color to 
            <see cref="P:Microsoft.VisualStudio.Language.Intellisense.LightBulbPresenterStyle.PreviewFocusBackgroundBrush" />. When providing a preview object make sure
            it doesn't set different background for the whole preview content, otherwise it's recommended that preview
            object indicates focused state using <see cref="P:Microsoft.VisualStudio.Language.Intellisense.LightBulbPresenterStyle.PreviewFocusBackgroundBrush" /> color.</para>
            </remarks>
            <returns>A task whose result is an object visually representing a preview of the suggested action, or null if no preview can be provided.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Language.Intellisense.ISuggestedAction.Invoke(System.Threading.CancellationToken)">
            <summary>
            Invokes the suggested action.
            </summary>
            <param name="cancellationToken">A cancellation token that allows cancel of action invocation.</param>
        </member>
        <member name="T:Microsoft.VisualStudio.Language.Intellisense.ISuggestedAction2">
            <summary>
            Extends <see cref="T:Microsoft.VisualStudio.Language.Intellisense.ISuggestedAction" /> by providing support for <see cref="P:Microsoft.VisualStudio.Language.Intellisense.ISuggestedAction2.DisplayTextSuffix" /> property.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.Intellisense.ISuggestedAction2.DisplayTextSuffix">
            <summary>
            Gets the localized text representing a suffix to be added to the <see cref="P:Microsoft.VisualStudio.Language.Intellisense.ISuggestedAction.DisplayText" />.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Language.Intellisense.ISuggestedAction3">
            <summary>
            Extends <see cref="T:Microsoft.VisualStudio.Language.Intellisense.ISuggestedAction2" /> with an ability to provide custom operation description and progress information when <see cref="T:Microsoft.VisualStudio.Language.Intellisense.ISuggestedAction3" /> is invoked.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Language.Intellisense.ISuggestedAction3.Invoke(Microsoft.VisualStudio.Utilities.IUIThreadOperationContext)">
            <summary>
            Invokes the suggested action.
            </summary>
            <param name="operationContext">A context of executing this operation on the UI thread, which allows to provide custom operation description and progress information.</param>
            <remarks>This method supersedes <see cref="M:Microsoft.VisualStudio.Language.Intellisense.ISuggestedAction.Invoke(System.Threading.CancellationToken)" /> and is guaranteed to be called instead of that.</remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.Intellisense.ISuggestedActionCategory.CategoryName">
            <summary>
            The unique name of the <see cref="T:Microsoft.VisualStudio.Language.Intellisense.ISuggestedActionCategory" />.
            </summary>
            <value>This name must be unique, and must not be null.</value>
            <remarks>Comparisons performed on this name are case-insensitive.</remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.Intellisense.ISuggestedActionCategory.DisplayName">
            <summary>
            The localized display name of the <see cref="T:Microsoft.VisualStudio.Language.Intellisense.ISuggestedActionCategory" />.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Language.Intellisense.ISuggestedActionCategory.IsOfCategory(System.String)">
            <summary>
            Returns <c>true</c> if this <see cref="T:Microsoft.VisualStudio.Language.Intellisense.ISuggestedActionCategory" />
            derives from the category specified by <paramref name="category" />.
            </summary>
            <param name="category">The name of the base category.</param>
            <returns><c>true</c> if this category derives from the one specified by <paramref name="category" />, otherwise <c>false</c>.</returns>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.Intellisense.ISuggestedActionCategory.BaseCategories">
            <summary>
            The set of all categories from which the current <see cref="T:Microsoft.VisualStudio.Language.Intellisense.ISuggestedActionCategory"></see> is derived.
            </summary>
            <value>This value is never null, though it may be an empty set.</value>
        </member>
        <member name="T:Microsoft.VisualStudio.Language.Intellisense.ISuggestedActionCategoryRegistryService">
            <summary>
            The service that maintains the collection of suggested action categories.
            </summary>
            <remarks>This is a MEF component part, and should be exported with the following attribute:
            [Export(typeof(ISuggestedActionCategoryRegistryService))]
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Language.Intellisense.ISuggestedActionCategoryRegistryService.GetCategory(System.String)">
            <summary>
            Gets the <see cref="T:Microsoft.VisualStudio.Language.Intellisense.ISuggestedActionCategory"></see> object with the specified <paramref name="categoryName" />.
            </summary>
            <param name="categoryName">The name of the category. Name comparisons are case-insensitive.</param>
            <returns>The category, or null if no category is found.</returns>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.Intellisense.ISuggestedActionCategoryRegistryService.Categories">
            <summary>
            Gets an enumeration of all categories, including the "unknown" category.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Language.Intellisense.ISuggestedActionCategoryRegistryService.CreateSuggestedActionCategorySet(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Creates a new <see cref="T:Microsoft.VisualStudio.Language.Intellisense.ISuggestedActionCategorySet" /> containing given categories.
            </summary>
            <param name="categories">A list of categories to be included into the set.</param>
            <returns>An instance of <see cref="T:Microsoft.VisualStudio.Language.Intellisense.ISuggestedActionCategorySet" /> containing given categories.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Language.Intellisense.ISuggestedActionCategoryRegistryService.CreateSuggestedActionCategorySet(System.String[])">
            <summary>
            Creates a new <see cref="T:Microsoft.VisualStudio.Language.Intellisense.ISuggestedActionCategorySet" /> containing given categories.
            </summary>
            <param name="categories">A list of categories to be included into the set.</param>
            <returns>An instance of <see cref="T:Microsoft.VisualStudio.Language.Intellisense.ISuggestedActionCategorySet" /> containing given categories.</returns>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.Intellisense.ISuggestedActionCategoryRegistryService.Any">
            <summary>
            A predefined <see cref="T:Microsoft.VisualStudio.Language.Intellisense.ISuggestedActionCategorySet" /> containing any category.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.Intellisense.ISuggestedActionCategoryRegistryService.AllCodeFixes">
            <summary>
            A predefined <see cref="T:Microsoft.VisualStudio.Language.Intellisense.ISuggestedActionCategorySet" /> containing code fixes category.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.Intellisense.ISuggestedActionCategoryRegistryService.AllRefactorings">
            <summary>
            A predefined <see cref="T:Microsoft.VisualStudio.Language.Intellisense.ISuggestedActionCategorySet" /> containing all refactorings category.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.Intellisense.ISuggestedActionCategoryRegistryService.AllCodeFixesAndRefactorings">
            <summary>
            A predefined <see cref="T:Microsoft.VisualStudio.Language.Intellisense.ISuggestedActionCategorySet" /> containing all code fixes and refactorings category.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Language.Intellisense.ISuggestedActionCategoryRegistryService2">
            <summary>
            The service that maintains the collection of suggested action categories.
            </summary>
            <remarks>This is a MEF component part, and should be exported with the following attribute:
            [Export(typeof(ISuggestedActionCategoryRegistryService2))]
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Language.Intellisense.ISuggestedActionCategoryRegistryService2.OrderCategoriesByPrecedence(Microsoft.VisualStudio.Language.Intellisense.ISuggestedActionCategorySet)">
            <summary>
            Accepts an <see cref="T:Microsoft.VisualStudio.Language.Intellisense.ISuggestedActionCategorySet" /> of <see cref="T:Microsoft.VisualStudio.Language.Intellisense.ISuggestedActionCategory" />s and
            sorts them in order from highest to lowest precedence.
            </summary>
            <remarks>
            Precedence is defined by <see cref="T:Microsoft.VisualStudio.Utilities.OrderAttribute" />s present on <see cref="T:Microsoft.VisualStudio.Language.Intellisense.SuggestedActionCategoryDefinition" />s.
            </remarks>
            <param name="categorySet">A set of categories to sort.</param>
            <returns>An enumerable of sorted categories.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Language.Intellisense.ISuggestedActionCategorySet">
            <summary>
            Represents a set of suggested action category names.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Language.Intellisense.ISuggestedActionCategorySet.Contains(System.String)">
            <summary>
            Determines whether the given suggested action category is a member of the set.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Language.Intellisense.ISuggestedActionPriorityRegistryService">
            <summary>
            <para>
            The service that maintains the collection of request priorities for obtaining
            <see cref="T:Microsoft.VisualStudio.Language.Intellisense.SuggestedActionSet" /> using the <see cref="T:Microsoft.VisualStudio.Language.Intellisense.IAsyncSuggestedActionsSource" />.
            </para>
            <para>
            Combines default priorities with names defined in <see cref="T:Microsoft.VisualStudio.Utilities.DefaultOrderings" />
            with custom priorities exported using <see cref="T:Microsoft.VisualStudio.Language.Intellisense.SuggestedActionPriorityDefinition" />.
            </para>
            </summary>
            <remarks>This is a MEF component part, and should be exported with the following attribute:
            [Export(typeof(ISuggestedActionPriorityRegistryService))]
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.Intellisense.ISuggestedActionPriorityRegistryService.Priorities">
            <summary>
            Gets an enumeration of all registered request priorities.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.Intellisense.ISuggestedActionPriorityRegistryService.PriorityComparer">
            <summary>
            Gets a <see cref="T:System.Collections.Generic.IComparer`1" /> which compares names of request priorities in order of their precedence.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Language.Intellisense.ISuggestedActionSetCollector">
            <summary>
            Faciliates getting <see cref="T:Microsoft.VisualStudio.Language.Intellisense.SuggestedActionSet" />s
            using <see cref="M:Microsoft.VisualStudio.Language.Intellisense.ISuggestedActionSetCollector.Add(Microsoft.VisualStudio.Language.Intellisense.SuggestedActionSet)" />.
            When all or none <see cref="T:Microsoft.VisualStudio.Language.Intellisense.SuggestedActionSet" />s of the <see cref="P:Microsoft.VisualStudio.Language.Intellisense.ISuggestedActionSetCollector.Priority" />
            are returned, call <see cref="M:Microsoft.VisualStudio.Language.Intellisense.ISuggestedActionSetCollector.Complete" /> to allow lightbulb to display
            <see cref="T:Microsoft.VisualStudio.Language.Intellisense.SuggestedActionSet" />s returned by all <see cref="T:Microsoft.VisualStudio.Language.Intellisense.IAsyncSuggestedActionsSource" /> for that priority.
            </summary>
            <remarks>
            All methods are thread safe and may be invoked from any thread.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.Intellisense.ISuggestedActionSetCollector.Priority">
            <summary>
            Priority of the collector, which matches priority declared on <see cref="T:Microsoft.VisualStudio.Language.Intellisense.ISuggestedActionsSourceProvider" />
            using <see cref="T:Microsoft.VisualStudio.Language.Intellisense.SuggestedActionPriorityAttribute" />.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Language.Intellisense.ISuggestedActionSetCollector.Add(Microsoft.VisualStudio.Language.Intellisense.SuggestedActionSet)">
            <summary>
            Adds <see cref="T:Microsoft.VisualStudio.Language.Intellisense.SuggestedActionSet" /> to be displayed at <see cref="P:Microsoft.VisualStudio.Language.Intellisense.ISuggestedActionSetCollector.Priority" />. Might be invoked from any thread.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Language.Intellisense.ISuggestedActionSetCollector.Complete">
            <summary>
            Marks this collector as complete, allowing lightbulb to display <see cref="T:Microsoft.VisualStudio.Language.Intellisense.SuggestedActionSet" />s
            of <see cref="P:Microsoft.VisualStudio.Language.Intellisense.ISuggestedActionSetCollector.Priority" />. Might be invoked from any thread.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Language.Intellisense.ISuggestedActionsSource">
            <summary>
            Represents a provider of suggested actions for a span of text in a <see cref="T:Microsoft.VisualStudio.Text.ITextBuffer" />.
            <see cref="T:Microsoft.VisualStudio.Language.Intellisense.ISuggestedActionsSource" /> instances are created by <see cref="T:Microsoft.VisualStudio.Language.Intellisense.ISuggestedActionsSourceProvider" /> 
            MEF components matching text buffer's content type.
            </summary>
        </member>
        <member name="E:Microsoft.VisualStudio.Language.Intellisense.ISuggestedActionsSource.SuggestedActionsChanged">
            <summary>
            Raised when a list of available suggested actions have changed.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Language.Intellisense.ISuggestedActionsSource.GetSuggestedActions(Microsoft.VisualStudio.Language.Intellisense.ISuggestedActionCategorySet,Microsoft.VisualStudio.Text.SnapshotSpan,System.Threading.CancellationToken)">
            <summary>
            Synchronously returns a list of suggested actions for a given span of text.
            </summary>
            <param name="requestedActionCategories">A set of suggested action categories requested.</param>
            <param name="range">A span of text in the <see cref="T:Microsoft.VisualStudio.Text.ITextBuffer" /> over which to return suggested actions.</param>
            <param name="cancellationToken">A cancellation token that allows to cancel getting list of suggested actions.</param>
            <returns>A list of suggested actions or null if no actions can be suggested for a given span of text in the <see cref="T:Microsoft.VisualStudio.Text.ITextBuffer" /></returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Language.Intellisense.ISuggestedActionsSource.HasSuggestedActionsAsync(Microsoft.VisualStudio.Language.Intellisense.ISuggestedActionCategorySet,Microsoft.VisualStudio.Text.SnapshotSpan,System.Threading.CancellationToken)">
            <summary>
            Asynchronously indicates whether this provider can provide any suggested actions for a given span of text in the <see cref="T:Microsoft.VisualStudio.Text.ITextBuffer" />.
            </summary>
            <param name="requestedActionCategories">A set of suggested action categories requested.</param>
            <param name="range">A span of text in the <see cref="T:Microsoft.VisualStudio.Text.ITextBuffer" /> over which to check for suggested actions.</param>
            <param name="cancellationToken">A cancellation token that allows to cancel checking for suggested actions.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task" /> instance that when completed returns true if any suggested
            actions can be provided or false otherwise.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Language.Intellisense.ISuggestedActionsSource2">
            <summary>
            Represents a provider of suggested actions for a span of text in a <see cref="T:Microsoft.VisualStudio.Text.ITextBuffer" />.
            <see cref="T:Microsoft.VisualStudio.Language.Intellisense.ISuggestedActionsSource" /> instances are created by <see cref="T:Microsoft.VisualStudio.Language.Intellisense.ISuggestedActionsSourceProvider" /> 
            MEF components matching text buffer's content type.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Language.Intellisense.ISuggestedActionsSource2.GetSuggestedActionCategoriesAsync(Microsoft.VisualStudio.Language.Intellisense.ISuggestedActionCategorySet,Microsoft.VisualStudio.Text.SnapshotSpan,System.Threading.CancellationToken)">
            <summary>
            Gets a <see cref="T:Microsoft.VisualStudio.Language.Intellisense.ISuggestedActionCategorySet" /> which are known to have <see cref="T:Microsoft.VisualStudio.Language.Intellisense.ISuggestedAction" />s
            which are applicable to the span of text defined by <paramref name="range" />.
            </summary>
            <param name="requestedActionCategories">A set of suggested action categories requested.</param>
            <param name="range">A span of text in the <see cref="T:Microsoft.VisualStudio.Text.ITextBuffer" /> over which to return suggested actions.</param>
            <param name="cancellationToken">A cancellation token that allows to cancel getting list of suggested actions.</param>
            <returns>
            A <see cref="T:Microsoft.VisualStudio.Language.Intellisense.ISuggestedActionCategorySet" /> containing the set of categories with actions applicable to <paramref name="range" />.
            Implementers are encouraged to use the predefined sets on <see cref="T:Microsoft.VisualStudio.Language.Intellisense.ISuggestedActionCategoryRegistryService" />.
            </returns>
            <remarks>
            Usage of this method supersedes
            <see cref="M:Microsoft.VisualStudio.Language.Intellisense.ISuggestedActionsSource.HasSuggestedActionsAsync(Microsoft.VisualStudio.Language.Intellisense.ISuggestedActionCategorySet,Microsoft.VisualStudio.Text.SnapshotSpan,System.Threading.CancellationToken)" />.
            Implementers must return this same set of categories from
            <see cref="M:Microsoft.VisualStudio.Language.Intellisense.ISuggestedActionsSource.GetSuggestedActions(Microsoft.VisualStudio.Language.Intellisense.ISuggestedActionCategorySet,Microsoft.VisualStudio.Text.SnapshotSpan,System.Threading.CancellationToken)" />,
            mapping each category to an ISuggestedActionSet containing all of the actions for that category.
            </remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.Language.Intellisense.ISuggestedActionsSource3">
            <summary>
            Extends <see cref="T:Microsoft.VisualStudio.Language.Intellisense.ISuggestedActionsSource2" /> to add an ability to provide custom operation description and progress information when calculating <see cref="T:Microsoft.VisualStudio.Language.Intellisense.SuggestedActionSet" />s.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Language.Intellisense.ISuggestedActionsSource3.GetSuggestedActions(Microsoft.VisualStudio.Language.Intellisense.ISuggestedActionCategorySet,Microsoft.VisualStudio.Text.SnapshotSpan,Microsoft.VisualStudio.Utilities.IUIThreadOperationContext)">
            <summary>
            Synchronously returns a list of suggested actions for a given span of text.
            </summary>
            <param name="requestedActionCategories">A set of suggested action categories requested.</param>
            <param name="range">A span of text in the <see cref="T:Microsoft.VisualStudio.Text.ITextBuffer" /> over which to return suggested actions.</param>
            <param name="operationContext">A context of executing this operation on the UI thread, which allows to provide custom operation description and progress information.</param>
            <returns>A list of suggested actions or null if no actions can be suggested for a given span of text in the <see cref="T:Microsoft.VisualStudio.Text.ITextBuffer" /></returns>
            <remarks>This method supersedes <see cref="M:Microsoft.VisualStudio.Language.Intellisense.ISuggestedActionsSource.GetSuggestedActions(Microsoft.VisualStudio.Language.Intellisense.ISuggestedActionCategorySet,Microsoft.VisualStudio.Text.SnapshotSpan,System.Threading.CancellationToken)" /> and is guaranteed to be called instead of that.</remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.Language.Intellisense.ISuggestedActionsSourceProvider">
            <summary>
            Defines a provider of a suggested actions source.
            </summary>
            <remarks>
            This is a MEF component part, and should be exported with the following attribute:
            <code>
            [Export(typeof(ISuggestedActionsSourceProvider))]
            [Order]
            [Name]
            [ContentType]
            </code>
            If this component returns an instance of <see cref="T:Microsoft.VisualStudio.Language.Intellisense.IAsyncSuggestedActionsSource" />,
            then it should be exported with one or more <see cref="T:Microsoft.VisualStudio.Language.Intellisense.SuggestedActionPriorityAttribute" />s, for example:
            <code>
            [Priority(DefaultOrderings.Default)]
            </code>.
            You must specify the ContentType so that the source provider creates sources for buffers of content types that it
            recognizes, and Order to specify the order in which the sources (excluding <see cref="T:Microsoft.VisualStudio.Language.Intellisense.IAsyncSuggestedActionsSource" />) are called.
            You must specify one or more Priority to ensure deterministic ordering of actions (if using <see cref="T:Microsoft.VisualStudio.Language.Intellisense.IAsyncSuggestedActionsSource" />).
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Language.Intellisense.ISuggestedActionsSourceProvider.CreateSuggestedActionsSource(Microsoft.VisualStudio.Text.Editor.ITextView,Microsoft.VisualStudio.Text.ITextBuffer)">
            <summary>
            Creates suggested actions source for a given text buffer.
            </summary>
            <param name="textView">The text view for which to create a suggested actions source.</param>
            <param name="textBuffer">The text buffer for which to create a suggested actions source.</param>
            <returns>The <see cref="T:Microsoft.VisualStudio.Language.Intellisense.ISuggestedActionsSource" />, or null if no suggested actions source could be created.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Language.Intellisense.ISuggestedActionWithFlavors">
            <summary>
            A suggested action that contains nested set of suggested actions 
            representing flavors of their parent action.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Language.Intellisense.PredefinedSuggestedActionCategoryNames">
            <summary>
            Defines a set of predefined suggested action category names.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Language.Intellisense.PredefinedSuggestedActionCategoryNames.Any">
            <summary>
            A root category that include any suggested action.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Language.Intellisense.PredefinedSuggestedActionCategoryNames.CodeFix">
            <summary>
            A category of suggested actions aimed to fix code issues.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Language.Intellisense.PredefinedSuggestedActionCategoryNames.ErrorFix">
            <summary>
            A category of suggested actions aimed to fix errors.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Language.Intellisense.PredefinedSuggestedActionCategoryNames.StyleFix">
            <summary>
            A category of suggested actions aimed to fix style violations.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Language.Intellisense.PredefinedSuggestedActionCategoryNames.Refactoring">
            <summary>
            A category of suggested actions aimed to suggest a code refactoring.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Language.Intellisense.SuggestedActionCategoryDefinition">
            <summary>
            Defines a suggested action category.
            </summary>
            <remarks> 
            Because you cannot subclass this type, you should use the [Export] attribute with no type.
            </remarks>
            <code>
            internal sealed class Components
            {
                [Export]
                [Name(PredefinedSuggestedActionCategoryNames.ErrorFix)]             // required
                [BaseDefinition(PredefinedSuggestedActionCategoryNames.CodeFix)]    // zero or more BaseDefinitions are allowed
                [Order]                                                             // indicates precedence of this category
                private SuggestedActionCategoryDefinition errorFixSuggestedActionCategoryDefinition;
               
               { other components }
            }
            </code>
        </member>
        <member name="T:Microsoft.VisualStudio.Language.Intellisense.SuggestedActionCategoryToIconDefinition">
            <summary>
            Associates a LightBulb control icon for a suggested action category.
            </summary>
            <remarks> 
            <see cref="T:Microsoft.VisualStudio.Language.Intellisense.SuggestedActionCategoryToIconDefinition" />s are associations between
            <see cref="T:Microsoft.VisualStudio.Language.Intellisense.SuggestedActionCategoryDefinition" />s and <see cref="P:Microsoft.VisualStudio.Language.Intellisense.SuggestedActionCategoryToIconDefinition.ImageMoniker" />s
            that define an icon for a particular <see cref="T:Microsoft.VisualStudio.Language.Intellisense.ISuggestedActionCategory" />. Icons
            are inheritable and icons defined for base categories will be displayed for their
            children as well, unless the child defines its own icon. Icon definitions are joined
            with category definitions on the Name attribute. The category's precedence determines
            which category's icon is displayed in the LightBulb control.
            </remarks>
            <code>
            internal sealed class Components
            {
                [Export]
                [Name("New Category Definition")]
                private SuggestedActionCategoryToIconDefinition anySuggestedActionCategoryToIconDefinition
                    = new SuggestedActionCategoryToIconDefinition(KnownMonikers.IntellisenseLightBulb);
            }
            </code>
        </member>
        <member name="M:Microsoft.VisualStudio.Language.Intellisense.SuggestedActionCategoryToIconDefinition.#ctor(Microsoft.VisualStudio.Imaging.Interop.ImageMoniker)">
            <summary>
            Creates a new instance with the specified <see cref="P:Microsoft.VisualStudio.Language.Intellisense.SuggestedActionCategoryToIconDefinition.ImageMoniker" />.
            </summary>
            <remarks>
            When a LightBulb session is created, the highest precedence category
            based upon MEF Ordering of the <see cref="T:Microsoft.VisualStudio.Language.Intellisense.SuggestedActionCategoryDefinition" />s
            with applicable <see cref="T:Microsoft.VisualStudio.Language.Intellisense.ISuggestedAction2" />s will have its icon displayed in
            the LightBulb control.
            </remarks>
            <param name="imageMoniker">The <see cref="P:Microsoft.VisualStudio.Language.Intellisense.SuggestedActionCategoryToIconDefinition.ImageMoniker" /> of the icon to display.</param>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.Intellisense.SuggestedActionCategoryToIconDefinition.ImageMoniker">
            <summary>
            Gets the <see cref="P:Microsoft.VisualStudio.Language.Intellisense.SuggestedActionCategoryToIconDefinition.ImageMoniker" /> to associate with the named <see cref="T:Microsoft.VisualStudio.Language.Intellisense.ISuggestedActionCategory" />.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Language.Intellisense.SuggestedActionPriorityAttribute">
            <summary>
            <para>
            Declares a supported priority for receiving <see cref="M:Microsoft.VisualStudio.Language.Intellisense.IAsyncSuggestedActionsSource.GetSuggestedActionsAsync(Microsoft.VisualStudio.Language.Intellisense.ISuggestedActionCategorySet,Microsoft.VisualStudio.Text.SnapshotSpan,System.Collections.Immutable.ImmutableArray{Microsoft.VisualStudio.Language.Intellisense.ISuggestedActionSetCollector},System.Threading.CancellationToken)" /> requests.
            Use one <see cref="T:Microsoft.VisualStudio.Language.Intellisense.SuggestedActionPriorityAttribute" /> for each supported priority.
            </para>
            <para>
            Priorities declared by <see cref="T:Microsoft.VisualStudio.Language.Intellisense.ISuggestedActionsSourceProvider" /> using the <see cref="T:Microsoft.VisualStudio.Language.Intellisense.SuggestedActionPriorityAttribute" />
            are then used in <see cref="T:Microsoft.VisualStudio.Language.Intellisense.ISuggestedActionSetCollector" />.<see cref="P:Microsoft.VisualStudio.Language.Intellisense.ISuggestedActionSetCollector.Priority" />
            passed to <see cref="M:Microsoft.VisualStudio.Language.Intellisense.IAsyncSuggestedActionsSource.GetSuggestedActionsAsync(Microsoft.VisualStudio.Language.Intellisense.ISuggestedActionCategorySet,Microsoft.VisualStudio.Text.SnapshotSpan,System.Collections.Immutable.ImmutableArray{Microsoft.VisualStudio.Language.Intellisense.ISuggestedActionSetCollector},System.Threading.CancellationToken)" />.
            </para>
            </summary>
            <seealso cref="T:Microsoft.VisualStudio.Language.Intellisense.ISuggestedActionPriorityRegistryService" />
            <seealso cref="T:Microsoft.VisualStudio.Language.Intellisense.IAsyncSuggestedActionsSource" />
            <seealso cref="T:Microsoft.VisualStudio.Utilities.DefaultOrderings" />
            <seealso cref="T:Microsoft.VisualStudio.Language.Intellisense.SuggestedActionPriorityDefinition" />
        </member>
        <member name="M:Microsoft.VisualStudio.Language.Intellisense.SuggestedActionPriorityAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of <see cref="T:Microsoft.VisualStudio.Language.Intellisense.SuggestedActionPriorityAttribute" />.
            </summary>
            <param name="name">One priority name. Use <see cref="T:Microsoft.VisualStudio.Utilities.DefaultOrderings" /> for default names
            or export <see cref="T:Microsoft.VisualStudio.Language.Intellisense.SuggestedActionPriorityDefinition" /> for custom priority.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="name" />is null or an empty string.</exception>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.Intellisense.SuggestedActionPriorityAttribute.Priority">
            <summary>
            The priority name to use in <see cref="M:Microsoft.VisualStudio.Language.Intellisense.IAsyncSuggestedActionsSource.GetSuggestedActionsAsync(Microsoft.VisualStudio.Language.Intellisense.ISuggestedActionCategorySet,Microsoft.VisualStudio.Text.SnapshotSpan,System.Collections.Immutable.ImmutableArray{Microsoft.VisualStudio.Language.Intellisense.ISuggestedActionSetCollector},System.Threading.CancellationToken)" /> requests. 
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Language.Intellisense.SuggestedActionPriorityDefinition">
            <summary>
            Defines a priority used in suggested action requests.
            Results for a specific request priority will be displayed only
            after all requests to this and higher priority requests have completed.
            </summary>
            <remarks> 
            Because you cannot subclass this type, you should use the [Export] attribute with no type.
            </remarks>
            <code>
            internal sealed class Components
            {
                [Export]
                [Name(DefaultOrderings.Low)]      // required
                [Order(After=DefaultOrderings.Default]   // indicates precedence of this priority
                private SuggestedActionPriorityDefinition lowSuggestedActionPriorityDefinition;
            }
            </code>
        </member>
        <member name="T:Microsoft.VisualStudio.Language.Intellisense.SuggestedActionSet">
            <summary>
            Represents a list of suggested actions that are all applicable to a span of text in a <see cref="T:Microsoft.VisualStudio.Text.ITextBuffer" />.
            Global suggested actions are not applicable to any particular span of text.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.Intellisense.SuggestedActionSet.Actions">
            <summary>
            A list of suggested actions.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.Intellisense.SuggestedActionSet.ApplicableToSpan">
            <summary>
            Gets the applicability span for this list of suggested actions.
            </summary>
            <remarks>
            The applicability span is the span of text in the <see cref="T:Microsoft.VisualStudio.Text.ITextBuffer" /> to which this
            a list of suggested actions pertains, if any.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.Intellisense.SuggestedActionSet.Priority">
            <summary>
            Gets the <see cref="T:Microsoft.VisualStudio.Language.Intellisense.SuggestedActionSetPriority" /> value of this list of suggested actions.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.Intellisense.SuggestedActionSet.Title">
            <summary>
            Gets the title for this list of suggested actions.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.Intellisense.SuggestedActionSet.CategoryName">
            <summary>
            The name of the <see cref="T:Microsoft.VisualStudio.Language.Intellisense.ISuggestedActionCategory" /> which this set of actions belongs to.
            </summary>
            <remarks>
            It is recommended to use the category names from <see cref="T:Microsoft.VisualStudio.Language.Intellisense.PredefinedSuggestedActionCategoryNames" />.
            If no category is provided, a set is assumed to be <see cref="F:Microsoft.VisualStudio.Language.Intellisense.PredefinedSuggestedActionCategoryNames.Any" />
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Language.Intellisense.SuggestedActionSet.#ctor(System.Collections.Generic.IEnumerable{Microsoft.VisualStudio.Language.Intellisense.ISuggestedAction},Microsoft.VisualStudio.Language.Intellisense.SuggestedActionSetPriority,System.Nullable{Microsoft.VisualStudio.Text.Span})">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.VisualStudio.Language.Intellisense.SuggestedActionSet" /> for given list
            of suggested actions and optionally an applicable span of text.
            </summary>
            <param name="actions">A list of suggested actions.</param>
            <param name="priority">The <see cref="T:Microsoft.VisualStudio.Language.Intellisense.SuggestedActionSetPriority" /> value of this list of suggested actions</param>
            <param name="applicableToSpan">The applicability span for this list of suggested actions.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Language.Intellisense.SuggestedActionSet.#ctor(System.Collections.Generic.IEnumerable{Microsoft.VisualStudio.Language.Intellisense.ISuggestedAction},System.Object,Microsoft.VisualStudio.Language.Intellisense.SuggestedActionSetPriority,System.Nullable{Microsoft.VisualStudio.Text.Span})">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.VisualStudio.Language.Intellisense.SuggestedActionSet" /> for given list
            of suggested actions with a header and optionally an applicable span of text.
            </summary>
            <param name="actions">A list of suggested actions.</param>
            <param name="title">The title for this list of suggested actions.</param>
            <param name="priority">The <see cref="T:Microsoft.VisualStudio.Language.Intellisense.SuggestedActionSetPriority" /> value of this list of suggested actions</param>
            <param name="applicableToSpan">The applicability span for this list of suggested actions.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Language.Intellisense.SuggestedActionSet.#ctor(System.String,System.Collections.Generic.IEnumerable{Microsoft.VisualStudio.Language.Intellisense.ISuggestedAction},System.Object,Microsoft.VisualStudio.Language.Intellisense.SuggestedActionSetPriority,System.Nullable{Microsoft.VisualStudio.Text.Span})">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.VisualStudio.Language.Intellisense.SuggestedActionSet" /> for given list
            of suggested actions with a header and optionally an applicable span of text.
            </summary>
            <param name="categoryName">
            The name of the <see cref="T:Microsoft.VisualStudio.Language.Intellisense.ISuggestedActionCategory" /> to which all of these actions belong.
            </param>
            <param name="actions">A list of suggested actions.</param>
            <param name="title">The title for this list of suggested actions.</param>
            <param name="priority">The <see cref="T:Microsoft.VisualStudio.Language.Intellisense.SuggestedActionSetPriority" /> value of this list of suggested actions</param>
            <param name="applicableToSpan">The applicability span for this list of suggested actions.</param>
        </member>
        <member name="T:Microsoft.VisualStudio.Language.Intellisense.SuggestedActionSetPriority">
            <summary>
            Represents a priority of <see cref="T:Microsoft.VisualStudio.Language.Intellisense.SuggestedActionSet" />, that is used to order suggestions when
            presenting them to a user.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Language.Intellisense.SuggestedActionSetPriority.None">
            <summary>
            No particular priority.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Language.Intellisense.SuggestedActionSetPriority.Low">
            <summary>
            Low priority suggestion.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Language.Intellisense.SuggestedActionSetPriority.Medium">
            <summary>
            Medium priority suggestion.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Language.Intellisense.SuggestedActionSetPriority.High">
            <summary>
            High priority suggestion.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Language.Intellisense.SuggestedActionsUpdatedArgs">
            <summary>
            Provides updated <see cref="T:Microsoft.VisualStudio.Language.Intellisense.SuggestedActionSet" />s and <see cref="T:Microsoft.VisualStudio.Language.Intellisense.QuerySuggestedActionCompletionStatus" />
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.Intellisense.SuggestedActionsUpdatedArgs.Status">
            <summary>
            Status pertinent to this update.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.Intellisense.SuggestedActionsUpdatedArgs.ActionSets">
            <summary>
            Entirety of <see cref="T:Microsoft.VisualStudio.Language.Intellisense.SuggestedActionSet" />s available in the <see cref="T:Microsoft.VisualStudio.Language.Intellisense.IAsyncLightBulbSession" /> as of this update.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.Intellisense.SuggestedActionsUpdatedArgs.ActionSetArray">
            <summary>
            Entirety of <see cref="T:Microsoft.VisualStudio.Language.Intellisense.SuggestedActionSet" />s available in the <see cref="T:Microsoft.VisualStudio.Language.Intellisense.IAsyncLightBulbSession" /> as of this update.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Language.Intellisense.SuggestedActionsUpdatedArgs.#ctor(Microsoft.VisualStudio.Language.Intellisense.QuerySuggestedActionCompletionStatus,System.Collections.Generic.IEnumerable{Microsoft.VisualStudio.Language.Intellisense.SuggestedActionSet})">
            <summary>
            Creates <see cref="T:Microsoft.VisualStudio.Language.Intellisense.SuggestedActionsUpdatedArgs" /> with specific <see cref="T:Microsoft.VisualStudio.Language.Intellisense.SuggestedActionSet" />s and <see cref="T:Microsoft.VisualStudio.Language.Intellisense.QuerySuggestedActionCompletionStatus" />.
            </summary>
            <param name="status"></param>
            <param name="actionSets"></param>
        </member>
        <member name="M:Microsoft.VisualStudio.Language.Intellisense.SuggestedActionsUpdatedArgs.#ctor(Microsoft.VisualStudio.Language.Intellisense.QuerySuggestedActionCompletionStatus,System.Collections.Immutable.ImmutableArray{Microsoft.VisualStudio.Language.Intellisense.SuggestedActionSet})">
            <summary>
            Creates <see cref="T:Microsoft.VisualStudio.Language.Intellisense.SuggestedActionsUpdatedArgs" /> with specific <see cref="T:Microsoft.VisualStudio.Language.Intellisense.SuggestedActionSet" />s and <see cref="T:Microsoft.VisualStudio.Language.Intellisense.QuerySuggestedActionCompletionStatus" />.
            </summary>
            <param name="status"></param>
            <param name="actionSetArray"></param>
        </member>
        <member name="T:Microsoft.VisualStudio.Language.Intellisense.UIElementType">
            <summary>
            Describes types of UIElements to be provided via <see cref="T:Microsoft.VisualStudio.Language.Intellisense.IUIElementProvider`2" />.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Language.Intellisense.UIElementType.Small">
            <summary>
            Small UIElement representing the object in question.
            </summary>
            <remarks>Small UIElements will most likely be placed in a list alongside other small UIElements.</remarks>
        </member>
        <member name="F:Microsoft.VisualStudio.Language.Intellisense.UIElementType.Large">
            <summary>
            Large UIElement representing the object in question.
            </summary>
            <remarks>
            Large UIElements will most likely be displayed on their own and should present detailed information about the object in
            question.
            </remarks>
        </member>
        <member name="F:Microsoft.VisualStudio.Language.Intellisense.UIElementType.Tooltip">
            <summary>
            UIElement to be hosted in a tooltip representing the object in question.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Language.Intellisense.ValueChangedEventArgs`1">
            <summary>
            Provides information about value changes of all kinds.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
        </member>
        <member name="M:Microsoft.VisualStudio.Language.Intellisense.ValueChangedEventArgs`1.#ctor(`0,`0)">
            <summary>
            Initializes a new instance of <see cref="T:Microsoft.VisualStudio.Language.Intellisense.ValueChangedEventArgs`1" /> with the new and old values of a property.
            </summary>
            <param name="oldValue">The old value.</param>
            <param name="newValue">The new value.</param>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.Intellisense.ValueChangedEventArgs`1.OldValue">
            <summary>
            Gets the old value.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.Intellisense.ValueChangedEventArgs`1.NewValue">
            <summary>
            Gets the new value.
            </summary>
        </member>
    </members>
<Signature xmlns="http://www.w3.org/2000/09/xmldsig#"><SignedInfo><CanonicalizationMethod Algorithm="http://www.w3.org/TR/2001/REC-xml-c14n-20010315" /><SignatureMethod Algorithm="http://www.w3.org/2001/04/xmldsig-more#rsa-sha256" /><Reference URI=""><Transforms><Transform Algorithm="http://www.w3.org/2000/09/xmldsig#enveloped-signature" /><Transform Algorithm="http://www.w3.org/TR/2001/REC-xml-c14n-20010315" /></Transforms><DigestMethod Algorithm="http://www.w3.org/2001/04/xmlenc#sha256" /><DigestValue>5z7IdoGQwaJ9mNHBXRNnWscc1SxFAMtS8GiI76xDgDs=</DigestValue></Reference></SignedInfo><SignatureValue>uyFCBhBFWXcwEuwf2PExvZL9yFtOr085H3JWMSvCVVsea9ogLCBgMunyiatWr9KQjoDM7yixfx7YixTJVGaGRzwas1h3gSvvFHLc1MdtwfKSfyo9PKbKQUtJ4OLiSPNjF9SU+QXS0f7wHIVH2tPa/HlyMmF7gsDO/h3ywACPpYyYPyXACAN/Ycq5anpVUgj4WCIKWydateEXgrRQUw4wzRBg9WYb+/eiXT70myx+jOUgoaJZ0TUQ+IReFOeNxzCLgikg0sRQfYVNBchZtSE/Ge4FO7KjTX/ZIho7QK96P5+HQjheUYx9Z9/G6CErnstPEwCJn8k/1HDYpX9AgkyjRg==</SignatureValue><KeyInfo><KeyValue><RSAKeyValue><Modulus>zkvLNa2un9GBrYNDoRGkGv7d0PqtTBB4ViYakFbjuWpmF0KcvDAzzaCWJPhVgIXjz+S8cHEoHuWnp/n+UOljT3ehA8Rs6Lb1aTYub3tB/e0txewv2sQ3yscjYdtTBtFvEm9L8Yv76K3Cxzi/Yvrdg+sr7w8y5RHn1Am0Ff8xggY1xpWCXFI+kQM18njQDcUqSlwBnexYfqHBhzz6YXA/S0EziYBu2O2mM7R6gSyYkEOHgIGTVOGnOvvC5xBgC4KNcnQuQSRLiUI2CmzU8vefR6ykruyzt1rNMPI8OqWHQtSDKXU5JNqbk4GNjwzcwbSzOHrxuxWHq91l/vLdVDGDUw==</Modulus><Exponent>AQAB</Exponent></RSAKeyValue></KeyValue><X509Data><X509Certificate>MIIF9DCCA9ygAwIBAgITMwAAA68wQA5Mo00FQQAAAAADrzANBgkqhkiG9w0BAQsFADB+MQswCQYDVQQGEwJVUzETMBEGA1UECBMKV2FzaGluZ3RvbjEQMA4GA1UEBxMHUmVkbW9uZDEeMBwGA1UEChMVTWljcm9zb2Z0IENvcnBvcmF0aW9uMSgwJgYDVQQDEx9NaWNyb3NvZnQgQ29kZSBTaWduaW5nIFBDQSAyMDExMB4XDTIzMTExNjE5MDkwMFoXDTI0MTExNDE5MDkwMFowdDELMAkGA1UEBhMCVVMxEzARBgNVBAgTCldhc2hpbmd0b24xEDAOBgNVBAcTB1JlZG1vbmQxHjAcBgNVBAoTFU1pY3Jvc29mdCBDb3Jwb3JhdGlvbjEeMBwGA1UEAxMVTWljcm9zb2Z0IENvcnBvcmF0aW9uMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAzkvLNa2un9GBrYNDoRGkGv7d0PqtTBB4ViYakFbjuWpmF0KcvDAzzaCWJPhVgIXjz+S8cHEoHuWnp/n+UOljT3ehA8Rs6Lb1aTYub3tB/e0txewv2sQ3yscjYdtTBtFvEm9L8Yv76K3Cxzi/Yvrdg+sr7w8y5RHn1Am0Ff8xggY1xpWCXFI+kQM18njQDcUqSlwBnexYfqHBhzz6YXA/S0EziYBu2O2mM7R6gSyYkEOHgIGTVOGnOvvC5xBgC4KNcnQuQSRLiUI2CmzU8vefR6ykruyzt1rNMPI8OqWHQtSDKXU5JNqbk4GNjwzcwbSzOHrxuxWHq91l/vLdVDGDUwIDAQABo4IBczCCAW8wHwYDVR0lBBgwFgYKKwYBBAGCN0wIAQYIKwYBBQUHAwMwHQYDVR0OBBYEFEcccTTyBDxkjvJKs/m4AgEFhl7BMEUGA1UdEQQ+MDykOjA4MR4wHAYDVQQLExVNaWNyb3NvZnQgQ29ycG9yYXRpb24xFjAUBgNVBAUTDTIzMDAxMis1MDE4MjYwHwYDVR0jBBgwFoAUSG5k5VAF04KqFzc3IrVtqMp1ApUwVAYDVR0fBE0wSzBJoEegRYZDaHR0cDovL3d3dy5taWNyb3NvZnQuY29tL3BraW9wcy9jcmwvTWljQ29kU2lnUENBMjAxMV8yMDExLTA3LTA4LmNybDBhBggrBgEFBQcBAQRVMFMwUQYIKwYBBQUHMAKGRWh0dHA6Ly93d3cubWljcm9zb2Z0LmNvbS9wa2lvcHMvY2VydHMvTWljQ29kU2lnUENBMjAxMV8yMDExLTA3LTA4LmNydDAMBgNVHRMBAf8EAjAAMA0GCSqGSIb3DQEBCwUAA4ICAQCEsRbf80dn60xTweOWHZoWaQdpzSaDqIvqpYHE5ZzuEMJWDdcP72MGw8v6BSaJQ+a+hTCXdERnIBDPKvU4ENjgu4EBJocHlSe8riiZUAR+z+z4OUYqoFd3EqJyfjjOJBR2z94Dy4ss7LEkHUbj2NZiFqBoPYu2OGQvEk+1oaUsnNKZ7Nl7FHtV7CI2lHBru83e4IPe3glIi0XVZJT5qV6Gx/QhAFmpEVBjSAmDdgII4UUwuI9yiX6jJFNOEek6MoeP06LMJtbqA3Bq+ZWmJ033F97uVpyaiS4bj3vFI/ZBgDnMqNDtZjcA2vi4RRMweggd9vsHyTLpn6+nXoLy03vMeebq0C3k44pgUIEuPQUlJIRTe6IrN3GcjaZ6zHGuQGWgu6SyO9r7qkrEpS2pRjnGZjx2RmCamdAWnDdu+DmfNEPAddYjaJJ7PTnd+PGzG+WeH4ocWgVnm5fJFhItjj70CJjgHqt57e1FiQcyWCwBhKX2rGgN2UICHBF3Q/rsKOspjMw2OlGphTn2KmFl5J7cQxru54A9roClLnHGCiSUYos/iwFHI/dAVXEh0S0KKfTfM6AC6/9bCbsD61QLcRzRIElvgCgaiMWFjOBL99pemoElAHsyzG6uX93fMfas09N9YzA0/rFAKAsNDOcFbQlEHKiDT7mI20tVoCcmSIhJAQ==</X509Certificate><X509Certificate>MIIHejCCBWKgAwIBAgIKYQ6Q0gAAAAAAAzANBgkqhkiG9w0BAQsFADCBiDELMAkGA1UEBhMCVVMxEzARBgNVBAgTCldhc2hpbmd0b24xEDAOBgNVBAcTB1JlZG1vbmQxHjAcBgNVBAoTFU1pY3Jvc29mdCBDb3Jwb3JhdGlvbjEyMDAGA1UEAxMpTWljcm9zb2Z0IFJvb3QgQ2VydGlmaWNhdGUgQXV0aG9yaXR5IDIwMTEwHhcNMTEwNzA4MjA1OTA5WhcNMjYwNzA4MjEwOTA5WjB+MQswCQYDVQQGEwJVUzETMBEGA1UECBMKV2FzaGluZ3RvbjEQMA4GA1UEBxMHUmVkbW9uZDEeMBwGA1UEChMVTWljcm9zb2Z0IENvcnBvcmF0aW9uMSgwJgYDVQQDEx9NaWNyb3NvZnQgQ29kZSBTaWduaW5nIFBDQSAyMDExMIICIjANBgkqhkiG9w0BAQEFAAOCAg8AMIICCgKCAgEAq/D6chAcLq3YbqqCEE00uvK2WCGfQhsqa+laUKq4BjgaBEm6f8MMHt03a8YS2AvwOMKZBrDIOdUBFDFC04kNeWSHfpRgJGyvnkmc6Whe0t+bU7IKLMOv2akrrnoJr9eWWcpgGgXpZnboMlImEi/nqwhQz7NEt13YxC4Ddato88tt8zpcoRb0RrrgOGSsbmQ1eKagYw8t00CT+OPeBw3VXHmlSSnnDb6gE3e+lD3v++MrWhAfTVYoonpy4BI6t0le2O3tQ5GD2Xuye4Yb2T6xjF3oiU+EGvKhL1nkkDstrjNYxbc+/jLTswM9sbKvkjh+0p2ALPVOVpEhNSXDOW5kf1O6nA+tGSOEy/S6A4aN91/w0FK/jJSHvMAhdCVfGCi2zCcoOCWYOUo2z3yxkq4cI6epZuxhH2rhKEmdX4jiJV3TIUs+UsS1Vz8kA/DRelsv1SPjcF0PUUZ3s/gA4bysAoJf28AVs70b1FVL5zmhD+kjSbwYuER8ReTBw3J64HLnJN+/RpnF78IcV9uDjexNSTCnq47f7Fufr/zdsGbiwZeBe+3W7UvnSSmnEyimp31ngOaKYnhfsi+E11ecXL93KCjx7W3DKI8sj0A3T8HhhUSJxAlMxdSlQy90lfdu+HggWCwTXWCVmj5PM4TasIgX3p5O9JawvEagbJjS4NaIjAsCAwEAAaOCAe0wggHpMBAGCSsGAQQBgjcVAQQDAgEAMB0GA1UdDgQWBBRIbmTlUAXTgqoXNzcitW2oynUClTAZBgkrBgEEAYI3FAIEDB4KAFMAdQBiAEMAQTALBgNVHQ8EBAMCAYYwDwYDVR0TAQH/BAUwAwEB/zAfBgNVHSMEGDAWgBRyLToCMZBDuRQFTuHqp8cx0SOJNDBaBgNVHR8EUzBRME+gTaBLhklodHRwOi8vY3JsLm1pY3Jvc29mdC5jb20vcGtpL2NybC9wcm9kdWN0cy9NaWNSb29DZXJBdXQyMDExXzIwMTFfMDNfMjIuY3JsMF4GCCsGAQUFBwEBBFIwUDBOBggrBgEFBQcwAoZCaHR0cDovL3d3dy5taWNyb3NvZnQuY29tL3BraS9jZXJ0cy9NaWNSb29DZXJBdXQyMDExXzIwMTFfMDNfMjIuY3J0MIGfBgNVHSAEgZcwgZQwgZEGCSsGAQQBgjcuAzCBgzA/BggrBgEFBQcCARYzaHR0cDovL3d3dy5taWNyb3NvZnQuY29tL3BraW9wcy9kb2NzL3ByaW1hcnljcHMuaHRtMEAGCCsGAQUFBwICMDQeMiAdAEwAZQBnAGEAbABfAHAAbwBsAGkAYwB5AF8AcwB0AGEAdABlAG0AZQBuAHQALiAdMA0GCSqGSIb3DQEBCwUAA4ICAQBn8oalmOBUeRou09h0ZyKbC5YR4WOSmUKWfdJ5DJDBZV8uLD74w3LRbYP+vj/oCso7v0epo/Np22O/IjWll11lhJB9i0ZQVdgMknzSGksc8zxCi1LQsP1r4z4HLimb5j0bpdS1HXeUOeLpZMlEPXh6I/MTfaaQdION9MsmAkYqwooQu6SpBQyb7Wj6aC6VoCo/KmtYSWMfCWluWpiW5IP0wI/zRive/DvQvTXvbiWu5a8n7dDd8w6vmSiXmE0OPQvyCInWH8MyGOLwxS3OW560STkKxgrCxq2u5bLZ2xWIUUVYODJxJxp/sfQn+N4sOiBpmLJZiWhub6e3dMNABQamASooPoI/E01mC8CzTfXhj38cbxV9Rad25UAqZaPDXVJihsMdYzaXht/a8/jyFqGaJ+HNpZfQ7l1jQeNbB5yHPgZ3BtEGsXUfFL5hYbXw3MYbBL7fQccOKO7eZS/sl/ahXJbYANahRr1Z85elCUtIEJmAH9AAKcWxm6U/RXceNcbSoqKfenoi+kiVH6v7RyOA9Z74v2u3S5fi63V4GuzqN5l5GEv/1rMjaHXmr/r8i+sLgOppO6/8MO0ETI7f33VtY5E90Z1WTk+/gFcioXgRMiF670EKsT/7qMykXcGhiJtXcVZOSEXAQsmbdlsKgEhr/Xmfwb1tbWrJUnMTDXpQzQ==</X509Certificate><X509Certificate>MIIF7TCCA9WgAwIBAgIQP4vItfyfspZDtWnWbELhRDANBgkqhkiG9w0BAQsFADCBiDELMAkGA1UEBhMCVVMxEzARBgNVBAgTCldhc2hpbmd0b24xEDAOBgNVBAcTB1JlZG1vbmQxHjAcBgNVBAoTFU1pY3Jvc29mdCBDb3Jwb3JhdGlvbjEyMDAGA1UEAxMpTWljcm9zb2Z0IFJvb3QgQ2VydGlmaWNhdGUgQXV0aG9yaXR5IDIwMTEwHhcNMTEwMzIyMjIwNTI4WhcNMzYwMzIyMjIxMzA0WjCBiDELMAkGA1UEBhMCVVMxEzARBgNVBAgTCldhc2hpbmd0b24xEDAOBgNVBAcTB1JlZG1vbmQxHjAcBgNVBAoTFU1pY3Jvc29mdCBDb3Jwb3JhdGlvbjEyMDAGA1UEAxMpTWljcm9zb2Z0IFJvb3QgQ2VydGlmaWNhdGUgQXV0aG9yaXR5IDIwMTEwggIiMA0GCSqGSIb3DQEBAQUAA4ICDwAwggIKAoICAQCygEGqNThNE3IyaCJNuLLx/9VSvGzH9dJKjDbu0cJcfoyKrq8TKG/Ac+M6ztAlqFo6be+ouFmrEyNozQwph9FvgFyPRH9dkAFSWKxRxV8qh9zc2AodwQO5e7BW6KPeZGHCnvjzfLnsDbVU/ky2ZU+I8JxImQxCCwl8MVkXeQZ4KI2JOkwDJb5xalwL54RgpJki49KvhKSn+9GY7Qyp3pSJ4Q6g3MDOmT3qCFK7VnnkH4S6Hri0xElcTzFLh93dBWcmmYDgcRGjuKVB4qRTufcyKYMME782XgSzS0NHL2vikR7TmE/dQgfI6B0S/Jmpaz6SfsjWaTr8ZL22CZ3K/QwLopt3YEsDlKQwaRLWQi3BQUzK3Kr9j1uDRprZ/LHR47PJf0h6zSTwQY9cdNCssBAgBkm3xy0hyFfj0IbzA2j70M5xwYmZSmQBbP3sMJHPQTySx+W6hh1hhMdfgzlirrSSL0fzC/hV66AfWdC7dJse0Hbm8ukG1xDo+mTeacY1logC8Ea4PyeZb8txiSk190gWAjWP1Xl8TQLPX+uKg09FcYj5qQ1OcunCnAfPSRtOBA5jUYxe2ADBVSy2xuDCZU7JNDn1nLPEfuhhbhNfFcRf2X7tHc7uROzLLoax7Dj2cO2rXBPB2Q8Nx4CyVe0096yb5MPa50c8prWPMd/FS6/r8QIDAQABo1EwTzALBgNVHQ8EBAMCAYYwDwYDVR0TAQH/BAUwAwEB/zAdBgNVHQ4EFgQUci06AjGQQ7kUBU7h6qfHMdEjiTQwEAYJKwYBBAGCNxUBBAMCAQAwDQYJKoZIhvcNAQELBQADggIBAH9yzw+3xRXbm8BJyiZb/p4T5tPw0tuXX/JLP02zrhmu7deXoKzvqTqjwkGw5biRnhOBJAPmCf0/V0A5ISRW0RAvS0CpNoZLtFNXmvvxfomPEf4YbFGq6O0JlbXlccmh6Yd1phV/yX43VF50k8XDZ8wNT2uoFwxtCJJ+i92Bqi1wIcM9BhS7vyRep4TXPw8hIr1LAAbblxzYXtTFC1yHblCk6MM4pPvLLMWSZpuFXst6bJN8gClYW1e1QGm6CHmmZGIVnYeWRbVmIyADixxzoNOieTPgUFmG2y/lAiXqcyqfABTINseSO+lOAOzYVgm5M0kS0lQLAausR7aRKX1MtHWAUgHoyoL2n8ysnI8X6i8msKtyrAv+nlEex0NVZ09Rs1fWtuzuUrc66U7h14GIvE+OdbtLqPA1qibUZ2dJsnBMO5PcHd94kIZysjik0dySTclY6ysSXNQ7roxrsIPlAT/4CTL2kzU0Iq/dNw13CYArzUgA8YyZGUcFAenRv9FO0OYoQzeZpApKCNmacXPSqs0xE2N2oTdvkjgefRI8ZjLny23h/FKJ3crWZgWalmG+oijHHKOnNlA8OqTfSm7mhzvO6/DggTedEzxSjr25HTTGHdUKaj2YKXCMiSrRq4IQSB/c9O+lxbtVGjhjhE63bK2VVOxlIhBJF7jAHscPrFRH</X509Certificate></X509Data></KeyInfo><Object Id="ts-countersig"><X509Data><X509Certificate>MIIHIDCCBQigAwIBAgITMwAAAehQsIDPK3KZTQABAAAB6DANBgkqhkiG9w0BAQsFADB8MQswCQYDVQQGEwJVUzETMBEGA1UECBMKV2FzaGluZ3RvbjEQMA4GA1UEBxMHUmVkbW9uZDEeMBwGA1UEChMVTWljcm9zb2Z0IENvcnBvcmF0aW9uMSYwJAYDVQQDEx1NaWNyb3NvZnQgVGltZS1TdGFtcCBQQ0EgMjAxMDAeFw0yMzEyMDYxODQ1MjJaFw0yNTAzMDUxODQ1MjJaMIHLMQswCQYDVQQGEwJVUzETMBEGA1UECBMKV2FzaGluZ3RvbjEQMA4GA1UEBxMHUmVkbW9uZDEeMBwGA1UEChMVTWljcm9zb2Z0IENvcnBvcmF0aW9uMSUwIwYDVQQLExxNaWNyb3NvZnQgQW1lcmljYSBPcGVyYXRpb25zMScwJQYDVQQLEx5uU2hpZWxkIFRTUyBFU046REMwMC0wNUUwLUQ5NDcxJTAjBgNVBAMTHE1pY3Jvc29mdCBUaW1lLVN0YW1wIFNlcnZpY2UwggIiMA0GCSqGSIb3DQEBAQUAA4ICDwAwggIKAoICAQDhQXdE0WzXG7wzeC9SGdH6eVwdGlF6YgpU7weOFBkpW9yuEmJSDE1ADBx/0DTuRBaplSD8CR1QqyQmxRDD/CdvDyeZFAcZ6l2+nlMssmZyC8TPt1GTWAUt3GXUU6g0F0tIrFNLgofCjOvm3G0j482VutKS4wZT6bNVnBVsChr2AjmVbGDN/6Qs/EqakL5cwpGel1te7UO13dUwaPjOy0Wi1qYNmR8i7T1luj2JdFdfZhMPyqyq/NDnZuONSbj8FM5xKBoar12ragC8/1CXaL1OMXBwGaRoJTYtksi9njuq4wDkcAwitCZ5BtQ2NqPZ0lLiQB7O10Bm9zpHWn9x1/HmdAn4koMWKUDwH5sd/zDu4vi887FWxm54kkWNvk8FeQ7ZZ0Q5gqGKW4g6revV2IdAxBobWdorqwvzqL70WdsgDU/P5c0L8vYIskUJZedCGHM2hHIsNRyw9EFoSolDM+yCedkz69787s8nIp55icLfDoKw5hak5G6MWF6d71tcNzV9+v9RQKMa6Uwfyquredd5sqXWCXv++hek4A15WybIc6ufT0ilazKYZvDvoaswgjP0SeLW7mvmcw0FELzF1/uWaXElLHOXIlieKF2i/YzQ6U50K9dbhnMaDcJSsG0hXLRTy/LQbsOD0hw7FuK0nmzotSx/5fo9g7fCzoFjk3tDEwIDAQABo4IBSTCCAUUwHQYDVR0OBBYEFPo5W8o980kMfRVQba6T34HwelLaMB8GA1UdIwQYMBaAFJ+nFV0AXmJdg/Tl0mWnG1M1GelyMF8GA1UdHwRYMFYwVKBSoFCGTmh0dHA6Ly93d3cubWljcm9zb2Z0LmNvbS9wa2lvcHMvY3JsL01pY3Jvc29mdCUyMFRpbWUtU3RhbXAlMjBQQ0ElMjAyMDEwKDEpLmNybDBsBggrBgEFBQcBAQRgMF4wXAYIKwYBBQUHMAKGUGh0dHA6Ly93d3cubWljcm9zb2Z0LmNvbS9wa2lvcHMvY2VydHMvTWljcm9zb2Z0JTIwVGltZS1TdGFtcCUyMFBDQSUyMDIwMTAoMSkuY3J0MAwGA1UdEwEB/wQCMAAwFgYDVR0lAQH/BAwwCgYIKwYBBQUHAwgwDgYDVR0PAQH/BAQDAgeAMA0GCSqGSIb3DQEBCwUAA4ICAQCWfcJm2rwXtPi74km6PKAkni9+BWotq+QtDGgeT5F3ro7PsIUNKRkUytuGqI8thL3Jcrb03x6DOppYJEA+pb6o2qPjFddO1TLqvSXrYm+OgCLL+7+3FmRmfkRu8rHvprab0O19wDbukgO8I5Oi1RegMJl8t5k/UtE0Wb3zAlOHnCjLGSzP/Do3ptwhXokk02IvD7SZEBbPboGbtw4LCHsT2pFakpGOBh+ISUMXBf835CuVNfddwxmyGvNSzyEyEk5h1Vh7tpwP7z7rJ+HsiP4sdqBjj6Avopuf4rxUAfrEbV6aj8twFs7WVHNiIgrHNna/55kyrAG9Yt19CPvkUwxYK0uZvPl2WC39nfc0jOTjivC7s/IUozE4tfy3JNkyQ1cNtvZftiX3j5Dt+eLOeuGDjvhJvYMIEkpkV68XLNH7+ZBfYa+PmfRYaoFFHCJKEoRSZ3PbDJPBiEhZ9yuxMddoMMQ19Tkyftot6Ez0XhSmwjYBq39DvBFWhlyDGBhrU3GteDWiVd9YGSB2WnxuFMy5fbAK6o8PWz8QRMiptXHK3HDBr2wWWEcrrgcTuHZIJTqepNoYlx9VRFvj/vCXaAFcmkW1nk7VE+owaXr5RJjryDq9ubkyDq1mdrF/geaRALXcNZbfNXIkhXzXA6a8CiamcQW/DgmLJpiVQNriZYCHIA==</X509Certificate><X509Certificate>MIIHcTCCBVmgAwIBAgITMwAAABXF52ueAptJmQAAAAAAFTANBgkqhkiG9w0BAQsFADCBiDELMAkGA1UEBhMCVVMxEzARBgNVBAgTCldhc2hpbmd0b24xEDAOBgNVBAcTB1JlZG1vbmQxHjAcBgNVBAoTFU1pY3Jvc29mdCBDb3Jwb3JhdGlvbjEyMDAGA1UEAxMpTWljcm9zb2Z0IFJvb3QgQ2VydGlmaWNhdGUgQXV0aG9yaXR5IDIwMTAwHhcNMjEwOTMwMTgyMjI1WhcNMzAwOTMwMTgzMjI1WjB8MQswCQYDVQQGEwJVUzETMBEGA1UECBMKV2FzaGluZ3RvbjEQMA4GA1UEBxMHUmVkbW9uZDEeMBwGA1UEChMVTWljcm9zb2Z0IENvcnBvcmF0aW9uMSYwJAYDVQQDEx1NaWNyb3NvZnQgVGltZS1TdGFtcCBQQ0EgMjAxMDCCAiIwDQYJKoZIhvcNAQEBBQADggIPADCCAgoCggIBAOThpkzntHIhC3miy9ckeb0O1YLT/e6cBwfSqWxOdcjKNVf2AX9sSuDivbk+F2Az/1xPx2b3lVNxWuJ+Slr+uDZnhUYjDLWNE893MsAQGOhgfWpSg0S3po5GawcU88V29YZQ3MFEyHFcUTE3oAo4bo3t1w/YJlN8OWECesSq/XJprx2rrPY2vjUmZNqYO7oaezOtgFt+jBAcnVL+tuhiJdxqD89d9P6OU8/W7IVWTe/dvI2k45GPsjksUZzpcGkNyjYtcI4xyDUoveO0hyTD4MmPfrVUj9z6BVWYbWg7mka97aSueik3rMvrg0XnRm7KMtXAhjBcTyziYrLNueKNiOSWrAFKu75xqRdbZ2De+JKRHh09/SDPc31BmkZ1zcRfNN0Sidb9pSB9fvzZnkXftnIv231fgLrbqn427DZM9ituqBJR6L8FA6PRc6ZNN3SUHDSCD/AQ8rdHGO2n6Jl8P0zbr17C89XYcz1DTsEzOUyOArxCaC4Q6oRRRuLRvWoYWmEBc8pnol7XKHYC4jMYctenIPDC+hIK12NvDMk2ZItboKaDIV1fMHSRlJTYuVD5C4lh8zYGNRiER9vcG9H9stQcxWv2XFJRXRLbJbqvUAV6bMURHXLvjflSxIUXk8A8FdsaN8cIFRg/eKtFtvUeh17aj54WcmnGrnu3tz5q4i6tAgMBAAGjggHdMIIB2TASBgkrBgEEAYI3FQEEBQIDAQABMCMGCSsGAQQBgjcVAgQWBBQqp1L+ZMSavoKRPEY1Kc8Q/y8E7jAdBgNVHQ4EFgQUn6cVXQBeYl2D9OXSZacbUzUZ6XIwXAYDVR0gBFUwUzBRBgwrBgEEAYI3TIN9AQEwQTA/BggrBgEFBQcCARYzaHR0cDovL3d3dy5taWNyb3NvZnQuY29tL3BraW9wcy9Eb2NzL1JlcG9zaXRvcnkuaHRtMBMGA1UdJQQMMAoGCCsGAQUFBwMIMBkGCSsGAQQBgjcUAgQMHgoAUwB1AGIAQwBBMAsGA1UdDwQEAwIBhjAPBgNVHRMBAf8EBTADAQH/MB8GA1UdIwQYMBaAFNX2VsuP6KJcYmjRPZSQW9fOmhjEMFYGA1UdHwRPME0wS6BJoEeGRWh0dHA6Ly9jcmwubWljcm9zb2Z0LmNvbS9wa2kvY3JsL3Byb2R1Y3RzL01pY1Jvb0NlckF1dF8yMDEwLTA2LTIzLmNybDBaBggrBgEFBQcBAQROMEwwSgYIKwYBBQUHMAKGPmh0dHA6Ly93d3cubWljcm9zb2Z0LmNvbS9wa2kvY2VydHMvTWljUm9vQ2VyQXV0XzIwMTAtMDYtMjMuY3J0MA0GCSqGSIb3DQEBCwUAA4ICAQCdVX38Kq3hLB9nATEkW+Geckv8qW/qXBS2Pk5HZHixBpOXPTEztTnXwnE2P9pkbHzQdTltuw8x5MKP+2zRoZQYIu7pZmc6U03dmLq2HnjYNi6cqYJWAAOwBb6J6Gngugnue99qb74py27YP0h1AdkY3m2CDPVtI1TkeFN1JFe53Z/zjj3G82jfZfakVqr3lbYoVSfQJL1AoL8ZthISEV09J+BAljis9/kpicO8F7BUhUKz/AyeixmJ5/ALaoHCgRlCGVJ1ijbCHcNhcy4sa3tuPywJeBTpkbKpW99Jo3QMvOyRgNI95ko+ZjtPu4b6MhrZlvSP9pEB9s7GdP32THJvEKt1MMU0sHrYUP4KWN1APMdUbZ1jdEgssU5HLcEUBHG/ZPkkvnNtyo4JvbMBV0lUZNlz138eW0QBjloZkWsNn6Qo3GcZKCS6OEuabvshVGtqRRFHqfG3rsjoiV5PndLQTHa1V1QJsWkBRH58oWFsc/4Ku+xBZj1p/cvBQUl+fpO+y/g75LcVv7TOPqUxUYS8vwLBgqJ7Fx0ViY1w/ue10CgaiQuPNtq6TPmb/wrpNPgkNWcr4A245oyZ1uEi6vAnQj0llOZ0dFtq0Z4+7X6gMTN9vMvpe784cETRkPHIqzqKOghif9lwY1NNje6CbaUFEMFxBmoQtB1VM1izoXBm8g==</X509Certificate></X509Data><CounterSignature ts-format="cms-timestamp-message" xmlns="http://schemas.microsoft.com/xmldsig/timestamp/2003"></CounterSignature></Object></Signature></doc>
