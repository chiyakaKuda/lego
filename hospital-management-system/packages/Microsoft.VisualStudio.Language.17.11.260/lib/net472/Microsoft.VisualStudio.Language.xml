<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Microsoft.VisualStudio.Language</name>
    </assembly>
    <members>
        <member name="T:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.CompletionContinuation">
            <summary>
            Indicates the desired behavior of <see cref="T:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.IAsyncCompletionSession" />
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.CompletionContinuation.Continue">
            <summary>
            <see cref="T:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.IAsyncCompletionSession" /> should continue.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.CompletionContinuation.Commit">
            <summary>
            <see cref="T:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.IAsyncCompletionSession" /> should compute the selected <see cref="T:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.CompletionItem" /> and commit it.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.CompletionContinuation.Dismiss">
            <summary>
            <see cref="T:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.IAsyncCompletionSession" /> should dismiss.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.CompletionUiChangedEventArgs">
            <summary>
            Event args for <see cref="E:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.IAsyncCompletionSessionOperationsInternal.CompletionUiChanged" />.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.CompletionUiChangedEventArgs.SelectedItem">
            <summary>
            Selected item. Might be null if there is no selection
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.CompletionUiChangedEventArgs.IsSoftSelection">
            <summary>
            Whether selected item is a soft selection (e.g. will not be committed on a commit character).
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.CompletionUiChangedEventArgs.IsBuilderSelected">
            <summary>
            Whether a builder is selected.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.CompletionUiChangedEventArgs.#ctor(Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.CompletionItem,System.Boolean,System.Boolean)">
            <summary>
            Constructs instance of <see cref="T:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.CompletionUiChangedEventArgs" />.
            </summary>
            <param name="selectedItem">Selected item</param>
            <param name="isSoftSelection">Whether selected item is a soft selection (e.g. will not be committed on a commit character).</param>
            <param name="isBuilderSelected">Whether a builder is selected.</param>
        </member>
        <member name="T:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.AggregatedCompletionContext">
            <summary>
            This type is used to fetch completion data from available <see cref="T:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.IAsyncCompletionSource" />s
            without sorting, filtering and displaying the results in the GUI.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.AggregatedCompletionContext.CompletionContext">
            <summary>
            Aggregate <see cref="P:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.AggregatedCompletionContext.CompletionContext" />
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.AggregatedCompletionContext.InertSession">
            <summary>
            <see cref="T:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.IAsyncCompletionSession" /> which interacted with <see cref="T:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.IAsyncCompletionSource" />s.
            This session can not be retrieved from <see cref="T:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.IAsyncCompletionBroker" />.
            This session does not have full capability, and its purpose is to provide data in <see cref="M:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.IAsyncCompletionSource.GetDescriptionAsync(Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.IAsyncCompletionSession,Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.CompletionItem,System.Threading.CancellationToken)" />.
            This session must be dismissed when client no longer needs it.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.AggregatedCompletionContext.#ctor(Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.CompletionContext,Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.IAsyncCompletionSession)">
            <summary>
            Creates <see cref="T:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.AggregatedCompletionContext" /> which carries data aggregated from
            <see cref="P:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.AggregatedCompletionContext.CompletionContext" />s returned by the <see cref="T:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.IAsyncCompletionSource" />s.
            This object also has a reference to the <see cref="T:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.IAsyncCompletionSession" /> which queried the <see cref="T:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.IAsyncCompletionSource" />s.
            </summary>
            <param name="completionContext">Aggregate <see cref="P:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.AggregatedCompletionContext.CompletionContext" /></param>
            <param name="inertSession"><see cref="T:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.IAsyncCompletionSession" /> which interacted with <see cref="T:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.IAsyncCompletionSource" />s.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.AggregatedCompletionContext.#ctor">
            <summary>
            Creates empty <see cref="T:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.AggregatedCompletionContext" />
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.AggregatedCompletionContext.Empty">
            <summary>
            Empty headless completion context, used when obtaining completion data was unsuccessful.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.AsyncCompletionSessionDataSnapshot">
            <summary>
            Contains data of <see cref="T:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.IAsyncCompletionSession" /> valid at a specific, instantaneous moment pertinent to current computation.
            This data is passed to <see cref="T:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.IAsyncCompletionItemManager" /> to filter the list and select appropriate item.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.AsyncCompletionSessionDataSnapshot.InitialSortedList">
            <summary>
            Set of <see cref="T:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.CompletionItem" />s to filter and sort, originally returned from <see cref="M:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.IAsyncCompletionItemManager.SortCompletionListAsync(Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.IAsyncCompletionSession,Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.AsyncCompletionSessionInitialDataSnapshot,System.Threading.CancellationToken)" />.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.AsyncCompletionSessionDataSnapshot.InitialSortedItemList">
            <summary>
            Set of <see cref="T:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.CompletionItem" />s to filter and sort, originally returned from <see cref="M:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.IAsyncCompletionItemManager.SortCompletionListAsync(Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.IAsyncCompletionSession,Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.AsyncCompletionSessionInitialDataSnapshot,System.Threading.CancellationToken)" />.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.AsyncCompletionSessionDataSnapshot.Snapshot">
            <summary>
            The <see cref="T:Microsoft.VisualStudio.Text.ITextSnapshot" /> applicable for this computation. The snapshot comes from the view's data buffer.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.AsyncCompletionSessionDataSnapshot.Trigger">
            <summary>
            The <see cref="T:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.CompletionTrigger" /> that caused this update.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.AsyncCompletionSessionDataSnapshot.InitialTrigger">
            <summary>
            The <see cref="T:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.CompletionTrigger" /> that started this completion session.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.AsyncCompletionSessionDataSnapshot.SelectedFilters">
            <summary>
            Filters, their availability and selection state.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.AsyncCompletionSessionDataSnapshot.IsSoftSelected">
            <summary>
            Indicates whether the session is using soft selection
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.AsyncCompletionSessionDataSnapshot.DisplaySuggestionItem">
            <summary>
            Indicates whether the session displays a suggestion item.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.AsyncCompletionSessionDataSnapshot.Defaults">
            <summary>
            The suggested default items for the session.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.AsyncCompletionSessionDataSnapshot.#ctor(System.Collections.Immutable.ImmutableArray{Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.CompletionItem},Microsoft.VisualStudio.Text.ITextSnapshot,Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.CompletionTrigger,System.Collections.Immutable.ImmutableArray{Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.CompletionFilterWithState},System.Boolean,System.Boolean)">
            <summary>
            Constructs <see cref="T:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.AsyncCompletionSessionDataSnapshot" />
            </summary>
            <param name="initialSortedList">Set of <see cref="T:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.CompletionItem" />s to filter and sort, originally returned from <see cref="M:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.IAsyncCompletionItemManager.SortCompletionListAsync(Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.IAsyncCompletionSession,Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.AsyncCompletionSessionInitialDataSnapshot,System.Threading.CancellationToken)" /></param>
            <param name="snapshot">The <see cref="T:Microsoft.VisualStudio.Text.ITextSnapshot" /> applicable for this computation. The snapshot comes from the view's data buffer</param>
            <param name="trigger">The <see cref="T:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.CompletionTrigger" /> that caused this update</param>
            <param name="selectedFilters">Filters, their availability and selection state</param>
            <param name="isSoftSelected">Indicates whether the session is using soft selection</param>
            <param name="displaySuggestionItem">Indicates whether the session has a suggestion item</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.AsyncCompletionSessionDataSnapshot.#ctor(System.Collections.Immutable.ImmutableArray{Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.CompletionItem},Microsoft.VisualStudio.Text.ITextSnapshot,Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.CompletionTrigger,Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.CompletionTrigger,System.Collections.Immutable.ImmutableArray{Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.CompletionFilterWithState},System.Boolean,System.Boolean)">
            <summary>
            Constructs <see cref="T:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.AsyncCompletionSessionDataSnapshot" />
            </summary>
            <param name="initialSortedList">Set of <see cref="T:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.CompletionItem" />s to filter and sort, originally returned from <see cref="M:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.IAsyncCompletionItemManager.SortCompletionListAsync(Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.IAsyncCompletionSession,Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.AsyncCompletionSessionInitialDataSnapshot,System.Threading.CancellationToken)" /></param>
            <param name="snapshot">The <see cref="T:Microsoft.VisualStudio.Text.ITextSnapshot" /> applicable for this computation. The snapshot comes from the view's data buffer</param>
            <param name="trigger">The <see cref="T:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.CompletionTrigger" /> that caused this update</param>
            <param name="initialTrigger">The <see cref="T:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.CompletionTrigger" /> that triggered this completion session</param>
            <param name="selectedFilters">Filters, their availability and selection state</param>
            <param name="isSoftSelected">Indicates whether the session is using soft selection</param>
            <param name="displaySuggestionItem">Indicates whether the session has a suggestion item</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.AsyncCompletionSessionDataSnapshot.#ctor(System.Collections.Immutable.ImmutableArray{Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.CompletionItem},Microsoft.VisualStudio.Text.ITextSnapshot,Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.CompletionTrigger,Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.CompletionTrigger,System.Collections.Immutable.ImmutableArray{Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.CompletionFilterWithState},System.Boolean,System.Boolean,System.Collections.Immutable.ImmutableArray{System.String})">
            <summary>
            Constructs <see cref="T:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.AsyncCompletionSessionDataSnapshot" />
            </summary>
            <param name="initialSortedList">Set of <see cref="T:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.CompletionItem" />s to filter and sort, originally returned from <see cref="M:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.IAsyncCompletionItemManager.SortCompletionListAsync(Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.IAsyncCompletionSession,Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.AsyncCompletionSessionInitialDataSnapshot,System.Threading.CancellationToken)" /></param>
            <param name="snapshot">The <see cref="T:Microsoft.VisualStudio.Text.ITextSnapshot" /> applicable for this computation. The snapshot comes from the view's data buffer</param>
            <param name="trigger">The <see cref="T:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.CompletionTrigger" /> that caused this update</param>
            <param name="initialTrigger">The <see cref="T:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.CompletionTrigger" /> that triggered the completion session</param>
            <param name="selectedFilters">Filters, their availability and selection state</param>
            <param name="isSoftSelected">Indicates whether the session is using soft selection</param>
            <param name="displaySuggestionItem">Indicates whether the session has a suggestion item</param>
            <param name="defaults">Suggested default items for the session</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.AsyncCompletionSessionDataSnapshot.#ctor(Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.CompletionList{Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.CompletionItem},Microsoft.VisualStudio.Text.ITextSnapshot,Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.CompletionTrigger,Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.CompletionTrigger,System.Collections.Immutable.ImmutableArray{Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.CompletionFilterWithState},System.Boolean,System.Boolean,System.Collections.Immutable.ImmutableArray{System.String})">
            <summary>
            Constructs <see cref="T:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.AsyncCompletionSessionDataSnapshot" />
            </summary>
            <remarks>Note: when using this contructor make sure to implement <see cref="T:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.IAsyncCompletionItemManager2" /> to avoid
            potential performance impact.</remarks>
            <param name="initialSortedList">Set of <see cref="T:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.CompletionItem" />s to filter and sort, originally returned from <see cref="M:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.IAsyncCompletionItemManager2.SortCompletionItemListAsync(Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.IAsyncCompletionSession,Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.AsyncCompletionSessionInitialDataSnapshot,System.Threading.CancellationToken)" /></param>
            <param name="snapshot">The <see cref="T:Microsoft.VisualStudio.Text.ITextSnapshot" /> applicable for this computation. The snapshot comes from the view's data buffer</param>
            <param name="trigger">The <see cref="T:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.CompletionTrigger" /> that caused this update</param>
            <param name="initialTrigger">The <see cref="T:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.CompletionTrigger" /> that triggered the completion session</param>
            <param name="selectedFilters">Filters, their availability and selection state</param>
            <param name="isSoftSelected">Indicates whether the session is using soft selection</param>
            <param name="displaySuggestionItem">Indicates whether the session has a suggestion item</param>
            <param name="defaults">Suggested default items for the session</param>
        </member>
        <member name="T:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.AsyncCompletionSessionInitialDataSnapshot">
            <summary>
            Contains data of <see cref="T:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.IAsyncCompletionSession" /> valid at a specific, instantaneous moment pertinent to current computation.
            This data is passed to <see cref="T:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.IAsyncCompletionItemManager" /> to initially sort the list prior to filtering and selecting.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.AsyncCompletionSessionInitialDataSnapshot.InitialList">
            <summary>
            Set of <see cref="T:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.CompletionItem" />s to sort.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.AsyncCompletionSessionInitialDataSnapshot.InitialItemList">
            <summary>
            Set of <see cref="T:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.CompletionItem" />s to sort.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.AsyncCompletionSessionInitialDataSnapshot.Snapshot">
            <summary>
            The <see cref="T:Microsoft.VisualStudio.Text.ITextSnapshot" /> applicable for this computation. The snapshot comes from the view's data buffer.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.AsyncCompletionSessionInitialDataSnapshot.Trigger">
            <summary>
            The <see cref="T:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.CompletionTrigger" /> that started this completion session.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.AsyncCompletionSessionInitialDataSnapshot.#ctor(System.Collections.Immutable.ImmutableArray{Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.CompletionItem},Microsoft.VisualStudio.Text.ITextSnapshot,Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.CompletionTrigger)">
            <summary>
            Constructs <see cref="T:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.AsyncCompletionSessionInitialDataSnapshot" />
            </summary>
            <param name="initialList">Set of <see cref="T:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.CompletionItem" />s to sort</param>
            <param name="snapshot">The <see cref="T:Microsoft.VisualStudio.Text.ITextSnapshot" /> applicable for this computation. The snapshot comes from the view's data buffer</param>
            <param name="trigger">The <see cref="T:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.CompletionTrigger" /> that started this completion session</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.AsyncCompletionSessionInitialDataSnapshot.#ctor(Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.CompletionList{Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.CompletionItem},Microsoft.VisualStudio.Text.ITextSnapshot,Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.CompletionTrigger)">
            <summary>
            Constructs <see cref="T:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.AsyncCompletionSessionInitialDataSnapshot" />
            </summary>
            <param name="initialList">Set of <see cref="T:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.CompletionItem" />s to sort</param>
            <param name="snapshot">The <see cref="T:Microsoft.VisualStudio.Text.ITextSnapshot" /> applicable for this computation. The snapshot comes from the view's data buffer</param>
            <param name="trigger">The <see cref="T:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.CompletionTrigger" /> that started this completion session</param>
        </member>
        <member name="T:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.CommitBehavior">
            <summary>
            Instructs the editor how to behave after committing a <see cref="T:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.CompletionItem" />.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.CommitBehavior.None">
            <summary>
            Use the default behavior,
            that is, to propagate TypeChar command, but suppress ReturnKey and TabKey commands.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.CommitBehavior.SuppressFurtherTypeCharCommandHandlers">
            <summary>
            Suppresses further invocation of the TypeChar and other command handlers, which typically act after completion.
            By default, editor invokes these command handlers to enable features such as brace completion or automatic line ending.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.CommitBehavior.RaiseFurtherReturnKeyAndTabKeyCommandHandlers">
            <summary>
            Raises further invocation of the ReturnKey and Tab command handlers, which typically are suppressed after completion.
            By default, editor doesn't invoke ReturnKey and Tab command handlers after committing completion session.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.CommitBehavior.CancelCommit">
            <summary>
            Cancels the commit operation, does not call any other <see cref="M:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.IAsyncCompletionCommitManager.TryCommit(Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.IAsyncCompletionSession,Microsoft.VisualStudio.Text.ITextBuffer,Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.CompletionItem,System.Char,System.Threading.CancellationToken)" />.
            Functionally, acts as if the typed character was not a commit character,
            allowing the user to continue working with the <see cref="T:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.IAsyncCompletionSession" />
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.CommitBehavior.Retrigger">
            <summary>
            Ensures that another completion session is triggered, even though user committed the current one with gestures that don't trigger new sessions, for example mouse, Ctrl+Space or TAB.
            Without this flag set, new session will trigger only if previous one was committed with a trigger character, and <see cref="F:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.CommitBehavior.SuppressFurtherTypeCharCommandHandlers" /> flag was not used.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.CommitResult">
            <summary>
            Tracks whether the commit occured, and provides instructions for behavior after committing.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.CommitResult.Handled">
            <summary>
            Marks this commit as handled. No other <see cref="T:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.IAsyncCompletionCommitManager" /> will be asked to commit.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.CommitResult.Unhandled">
            <summary>
            Marks this commit as unhandled. Another <see cref="T:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.IAsyncCompletionCommitManager" /> will be asked to commit.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.CommitResult.IsHandled">
            <summary>
            Whether the commit occured.
            If true, no other <see cref="T:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.IAsyncCompletionCommitManager" /> will be asked to commit.
            If false, another <see cref="T:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.IAsyncCompletionCommitManager" /> will be asked to commit.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.CommitResult.Behavior">
            <summary>
            Desired behavior after committing, respected even when <see cref="P:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.CommitResult.IsHandled" /> is unset.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.CommitResult.#ctor(System.Boolean,Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.CommitBehavior)">
            <summary>
            Creates a <see cref="T:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.CommitResult" /> with specified properties.
            </summary>
            <param name="isHandled">Whether the commit occured</param>
            <param name="behavior">Desired behavior after committing</param>
        </member>
        <member name="T:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.CompletionClosedEventArgs">
            <summary>
            This class is used to notify completion's logic when the UI closes
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.CompletionClosedEventArgs.TextView">
            <summary>
            <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView" /> that hosted completion UI
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.CompletionClosedEventArgs.#ctor(Microsoft.VisualStudio.Text.Editor.ITextView)">
            <summary>
            Constructs instance of <see cref="T:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.CompletionClosedEventArgs" />.
            </summary>
            <param name="textView"><see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView" /> that hosted this completion UI</param>
        </member>
        <member name="T:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.CompletionContext">
            <summary>
            This type is used to transfer data from <see cref="T:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.IAsyncCompletionSource" />
            to <see cref="T:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.IAsyncCompletionBroker" /> and further to <see cref="T:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.IAsyncCompletionItemManager" />
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.CompletionContext.Empty">
            <summary>
            Empty completion context, when <see cref="T:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.IAsyncCompletionSource" /> offers no items pertinent to given location.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.CompletionContext.Items">
            <summary>
            Set of completion items available at a location
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.CompletionContext.ItemList">
            <summary>
            Set of completion items available at a location
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.CompletionContext.Filters">
            <summary>
            <para>
            Set of completion filters available for this session.
            Each filter's <see cref="P:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.CompletionFilterWithState.IsSelected" /> property is used to determine initial selection.
            The <see cref="P:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.CompletionFilterWithState.IsAvailable" /> property is ignored.
            </para>
            <para>
            Typically, this is used to select <see cref="T:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.CompletionExpander" />s that correspond to provided <see cref="T:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.CompletionItem" />s,
            in scenarios when the completion source provides expanded items by default.
            </para>
            </summary>
            <remarks>
            When the value is uninitialized, then <see cref="P:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.CompletionContext.ItemList" /> need to be enumerated to find the filters.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.CompletionContext.SelectionHint">
            <summary>
            Recommends the initial selection method for the completion list.
            When <see cref="P:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.CompletionContext.SuggestionItemOptions" /> is defined, "soft selection" will be used without a need to set this property.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.CompletionContext.SuggestionItemOptions">
            <summary>
            When defined, uses suggestion mode with options specified in this object.
            When null, this context does not activate the suggestion mode.
            Suggestion mode puts selection in "soft selection" mode without need to set <see cref="P:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.CompletionContext.SelectionHint" />
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.CompletionContext.IsIncomplete">
            <summary>
            When set, subsequent typing will dispatch another request for <see cref="T:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.CompletionContext" />.
            This gives the completion source a chance to provide more items.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.CompletionContext.Properties">
            <summary>
            Optional property bag which, when present, will be merged with <see cref="T:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.IAsyncCompletionSession" />.<see cref="P:Microsoft.VisualStudio.Utilities.IPropertyOwner.Properties" />.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.CompletionContext.#ctor(System.Collections.Immutable.ImmutableArray{Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.CompletionItem})">
            <summary>
            [Deprecated] Constructs <see cref="T:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.CompletionContext" /> with specified <see cref="T:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.CompletionItem" />s,
            with recommendation to not use suggestion mode and to use use regular selection.
            Note: completion will iterate through all items to determine filters.
            For better performance, use the overload which accepts <see cref="T:System.Collections.Immutable.ImmutableArray`1" />
            </summary>
            <param name="items">Available completion items. If none are available, use <c>CompletionContext.Default</c></param>
        </member>
        <member name="M:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.CompletionContext.#ctor(System.Collections.Immutable.ImmutableArray{Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.CompletionItem},System.Collections.Immutable.ImmutableArray{Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.CompletionFilterWithState})">
            <summary>
            Constructs <see cref="T:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.CompletionContext" /> with specified <see cref="T:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.CompletionItem" />s and <see cref="T:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.CompletionFilterWithState" />s
            with recommendation to not use suggestion mode and to use use regular selection.
            </summary>
            <param name="items">Available completion items. If none are available, use <c>CompletionContext.Default</c></param>
            <param name="filters">Available completion filters. Each filter's <see cref="P:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.CompletionFilterWithState.IsSelected" /> property is used to determine initial selection.
            The <see cref="P:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.CompletionFilterWithState.IsAvailable" /> property is ignored.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.CompletionContext.#ctor(System.Collections.Immutable.ImmutableArray{Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.CompletionItem},System.Collections.Immutable.ImmutableArray{Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.CompletionFilterWithState},System.Boolean)">
            <summary>
            Constructs <see cref="T:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.CompletionContext" /> with specified <see cref="T:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.CompletionItem" />s and <see cref="T:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.CompletionFilterWithState" />s
            with recommendation to not use suggestion mode and to use use regular selection.
            </summary>
            <param name="items">Available completion items. If none are available, use <c>CompletionContext.Default</c></param>
            <param name="filters">Available completion filters. Each filter's <see cref="P:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.CompletionFilterWithState.IsSelected" /> property is used to determine initial selection.
            <param name="isIncomplete">Whether subsequent typing should request new <see cref="T:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.CompletionContext" />. Default is <c>false</c></param>
            The <see cref="P:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.CompletionFilterWithState.IsAvailable" /> property is ignored.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.CompletionContext.#ctor(System.Collections.Immutable.ImmutableArray{Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.CompletionItem},Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.SuggestionItemOptions)">
            <summary>
            Constructs <see cref="T:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.CompletionContext" /> with specified <see cref="T:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.CompletionItem" />s,
            with recommendation to use suggestion mode and to use regular selection.
            Note: completion will iterate through all items to determine filters.
            For better performance, use the overload which accepts <see cref="T:System.Collections.Immutable.ImmutableArray`1" />
            </summary>
            <param name="items">Available completion items</param>
            <param name="suggestionItemOptions">Suggestion item options, or null to not use suggestion mode. Default is <c>null</c></param>
        </member>
        <member name="M:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.CompletionContext.#ctor(System.Collections.Immutable.ImmutableArray{Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.CompletionItem},Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.SuggestionItemOptions,Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.InitialSelectionHint)">
            <summary>
            Constructs <see cref="T:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.CompletionContext" /> with specified <see cref="T:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.CompletionItem" />s,
            with recommendation to use suggestion mode item and to use a specific selection mode.
            Note: completion will iterate through all items to determine filters.
            For better performance, use the overload which accepts <see cref="T:System.Collections.Immutable.ImmutableArray`1" />
            </summary>
            <param name="items">Available completion items</param>
            <param name="suggestionItemOptions">Suggestion mode options, or null to not use suggestion mode. Default is <c>null</c></param>
            <param name="selectionHint">Recommended selection mode. Suggestion mode automatically sets soft selection Default is <c>InitialSelectionHint.RegularSelection</c></param>
        </member>
        <member name="M:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.CompletionContext.#ctor(System.Collections.Immutable.ImmutableArray{Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.CompletionItem},Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.SuggestionItemOptions,Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.InitialSelectionHint,System.Collections.Immutable.ImmutableArray{Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.CompletionFilterWithState})">
            <summary>
            Constructs <see cref="T:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.CompletionContext" /> with specified <see cref="T:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.CompletionItem" />s,
            with recommendation to use suggestion mode item and to use a specific selection mode.
            </summary>
            <param name="items">Available completion items</param>
            <param name="suggestionItemOptions">Suggestion mode options, or null to not use suggestion mode. Default is <c>null</c></param>
            <param name="selectionHint">Recommended selection mode. Suggestion mode automatically sets soft selection Default is <c>InitialSelectionHint.RegularSelection</c></param>
            <param name="filters">Available completion filters. Each filter's <see cref="P:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.CompletionFilterWithState.IsSelected" /> property is used to determine initial selection.
            The <see cref="P:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.CompletionFilterWithState.IsAvailable" /> property is ignored.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.CompletionContext.#ctor(System.Collections.Immutable.ImmutableArray{Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.CompletionItem},Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.SuggestionItemOptions,Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.InitialSelectionHint,System.Collections.Immutable.ImmutableArray{Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.CompletionFilterWithState},System.Boolean)">
            <summary>
            Constructs <see cref="T:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.CompletionContext" /> with specified <see cref="T:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.CompletionItem" />s,
            with recommendation to use suggestion mode item and to use a specific selection mode.
            </summary>
            <param name="items">Available completion items</param>
            <param name="suggestionItemOptions">Suggestion mode options, or null to not use suggestion mode. Default is <c>null</c></param>
            <param name="selectionHint">Recommended selection mode. Suggestion mode automatically sets soft selection Default is <c>InitialSelectionHint.RegularSelection</c></param>
            <param name="filters">Available completion filters. Each filter's <see cref="P:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.CompletionFilterWithState.IsSelected" /> property is used to determine initial selection.
            <param name="isIncomplete">Whether subsequent typing should request new <see cref="T:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.CompletionContext" />. Default is <c>false</c></param>
            The <see cref="P:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.CompletionFilterWithState.IsAvailable" /> property is ignored.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.CompletionContext.#ctor(System.Collections.Immutable.ImmutableArray{Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.CompletionItem},Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.SuggestionItemOptions,Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.InitialSelectionHint,System.Collections.Immutable.ImmutableArray{Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.CompletionFilterWithState},System.Boolean,Microsoft.VisualStudio.Utilities.PropertyCollection)">
            <summary>
            Constructs <see cref="T:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.CompletionContext" /> with specified <see cref="T:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.CompletionItem" />s,
            with recommendation to use suggestion mode item and to use a specific selection mode.
            </summary>
            <param name="items">Available completion items</param>
            <param name="suggestionItemOptions">Suggestion mode options, or null to not use suggestion mode. Default is <c>null</c></param>
            <param name="selectionHint">Recommended selection mode. Suggestion mode automatically sets soft selection Default is <c>InitialSelectionHint.RegularSelection</c></param>
            <param name="filters">Available completion filters. Each filter's <see cref="P:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.CompletionFilterWithState.IsSelected" /> property is used to determine initial selection.</param>
            <param name="isIncomplete">Whether subsequent typing should request new <see cref="T:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.CompletionContext" />. Default is <c>false</c></param>
            <param name="properties">Property bag which, if not null, will be merged with <see cref="T:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.IAsyncCompletionSession" />.<see cref="P:Microsoft.VisualStudio.Utilities.IPropertyOwner.Properties" />.
            The <see cref="P:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.CompletionFilterWithState.IsAvailable" /> property is ignored.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.CompletionContext.#ctor(Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.CompletionList{Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.CompletionItem},Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.SuggestionItemOptions,Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.InitialSelectionHint,System.Collections.Immutable.ImmutableArray{Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.CompletionFilterWithState},System.Boolean,Microsoft.VisualStudio.Utilities.PropertyCollection)">
            <summary>
            Constructs <see cref="T:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.CompletionContext" /> with specified <see cref="T:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.CompletionItem" />s,
            with recommendation to use suggestion mode item and to use a specific selection mode.
            </summary>
            <param name="items">Available completion items</param>
            <param name="suggestionItemOptions">Suggestion mode options, or null to not use suggestion mode. Default is <c>null</c></param>
            <param name="selectionHint">Recommended selection mode. Suggestion mode automatically sets soft selection Default is <c>InitialSelectionHint.RegularSelection</c></param>
            <param name="filters">Available completion filters. Each filter's <see cref="P:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.CompletionFilterWithState.IsSelected" /> property is used to determine initial selection.</param>
            <param name="isIncomplete">Whether subsequent typing should request new <see cref="T:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.CompletionContext" />. Default is <c>false</c></param>
            <param name="properties">Property bag which, if not null, will be merged with <see cref="T:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.IAsyncCompletionSession" />.<see cref="P:Microsoft.VisualStudio.Utilities.IPropertyOwner.Properties" />.
            The <see cref="P:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.CompletionFilterWithState.IsAvailable" /> property is ignored.</param>
        </member>
        <member name="T:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.CompletionExpander">
            <summary>
            Identifies an expander that adds <see cref="T:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.CompletionItem" />s that reference it to the list of completions.
            </summary>
            <remarks>
            <para>
            Expander apperars in the UI alongside <see cref="T:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.CompletionFilter" />s, but behaves differently:
            When <see cref="T:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.CompletionFilter" /> is selected, then <see cref="T:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.CompletionItem" />s that don't reference it are hidden
            When <see cref="T:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.CompletionExpander" /> is selected, then <see cref="T:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.CompletionItem" />s that reference it are visible
            When no <see cref="T:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.CompletionFilter" />s are selected, then all <see cref="T:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.CompletionItem" />s that don't reference an expander are visible
            When no <see cref="T:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.CompletionExpander" />s are selected, then all <see cref="T:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.CompletionItem" />s reference an expander are hidden
            </para>
            <para>
            These instances should be singletons. All <see cref="T:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.CompletionItem" />s that should be filtered
            using the same expander button must use the same reference to the instance of <see cref="T:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.CompletionExpander" />.
            </para>
            </remarks>
            <example>
            <code>
            static CompletionExpander MyExpander = new CompletionFilter("Additional items", "a", MyAdditionalItemsImageElement);
            </code>
            </example>
        </member>
        <member name="M:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.CompletionExpander.#ctor(System.String,System.String,Microsoft.VisualStudio.Text.Adornments.ImageElement)">
            <summary>
            Constructs an instance of <see cref="T:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.CompletionExpander" />.
            </summary>
            <param name="displayText">Name of this expander</param>
            <param name="accessKey">Key used in a keyboard shortcut that toggles this expander</param>
            <param name="image">Image which represents this expander</param>
        </member>
        <member name="T:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.CompletionFilter">
            <summary>
            Identifies a filter that toggles exclusive display of <see cref="T:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.CompletionItem" />s that reference it.
            </summary>
            <remarks>
            These instances should be singletons. All <see cref="T:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.CompletionItem" />s that should be filtered
            using the same filter button must use the same reference to the instance of <see cref="T:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.CompletionFilter" />.
            </remarks>
            <example>
            <code>
            static CompletionFilter MyFilter = new CompletionFilter("My items", "m", MyItemsImageElement);
            </code>
            </example>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.CompletionFilter.DisplayText">
            <summary>
            Localized name of this filter.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.CompletionFilter.AccessKey">
            <summary>
            Key used in a keyboard shortcut that toggles this filter.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.CompletionFilter.Image">
            <summary>
            <see cref="T:Microsoft.VisualStudio.Text.Adornments.ImageElement" /> that represents this filter.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.CompletionFilter.#ctor(System.String,System.String,Microsoft.VisualStudio.Text.Adornments.ImageElement)">
            <summary>
            Constructs an instance of <see cref="T:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.CompletionFilter" />.
            </summary>
            <param name="displayText">Name of this filter</param>
            <param name="accessKey">Key used in a keyboard shortcut that toggles this filter.</param>
            <param name="image">Image which represents this filter</param>
        </member>
        <member name="T:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.CompletionFilterChangedEventArgs">
            <summary>
            This class is used to notify completion's logic of selection change in the filter UI
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.CompletionFilterChangedEventArgs.Filters">
            <summary>
            Current state of the filters
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.CompletionFilterChangedEventArgs.#ctor(System.Collections.Immutable.ImmutableArray{Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.CompletionFilterWithState})">
            <summary>
            Constructs instance of <see cref="T:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.CompletionFilterChangedEventArgs" />.
            </summary>
            <param name="filters">Current state of the filters</param>
        </member>
        <member name="T:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.CompletionFilterWithState">
            <summary>
            Immutable data transfer object that describes state of a <see cref="T:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.CompletionFilter" />:
            whether it <see cref="P:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.CompletionFilterWithState.IsAvailable" /> based on typed text and whether it <see cref="P:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.CompletionFilterWithState.IsSelected" /> by the user.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.CompletionFilterWithState.Filter">
            <summary>
            Reference to the completion filter
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.CompletionFilterWithState.IsAvailable">
            <summary>
            Whether the filter is available.
            A filter is available if after filtering by entered text, there are any <see cref="T:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.CompletionItem" />s that reference this <see cref="P:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.CompletionFilterWithState.Filter" /> in their <see cref="P:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.CompletionItem.Filters" />
            Filtering <see cref="T:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.CompletionItem" />s by toggling <see cref="P:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.CompletionFilterWithState.IsSelected" /> property of the <see cref="T:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.CompletionFilter" />s has no impact on this availability.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.CompletionFilterWithState.IsSelected">
            <summary>
            Whether the filter is selected by the user.
            User may select a filter using mouse or a keyboard shortcut.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.CompletionFilterWithState.#ctor(Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.CompletionFilter,System.Boolean)">
            <summary>
            Constructs a new instance of <see cref="T:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.CompletionFilterWithState" /> which is not selected.
            </summary>
            <param name="filter">Reference to <see cref="T:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.CompletionFilter" /></param>
            <param name="isAvailable">Whether this <see cref="T:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.CompletionFilter" /> is available</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.CompletionFilterWithState.#ctor(Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.CompletionFilter,System.Boolean,System.Boolean)">
            <summary>
            Constructs a new instance of <see cref="T:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.CompletionFilterWithState" /> when selected state is known.
            </summary>
            <param name="filter">Reference to <see cref="T:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.CompletionFilter" /></param>
            <param name="isAvailable">Whether this <see cref="T:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.CompletionFilter" /> is available</param>
            <param name="isSelected">Whether this <see cref="T:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.CompletionFilter" /> is selected</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.CompletionFilterWithState.WithAvailability(System.Boolean)">
            <summary>
            Returns instance of <see cref="T:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.CompletionFilterWithState" /> with specified <see cref="P:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.CompletionFilterWithState.IsAvailable" />.
            Use this method when entered text changes availability of relevant <see cref="T:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.CompletionItem" />s.
            </summary>
            <param name="isAvailable">Value to use for <see cref="P:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.CompletionFilterWithState.IsAvailable" /></param>
            <returns>Updated instance of <see cref="T:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.CompletionFilterWithState" /></returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.CompletionFilterWithState.WithSelected(System.Boolean)">
            <summary>
            Returns instance of <see cref="T:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.CompletionFilterWithState" /> with specified <see cref="P:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.CompletionFilterWithState.IsSelected" />
            </summary>
            <param name="isSelected">Value to use for <see cref="P:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.CompletionFilterWithState.IsSelected" /></param>
            <returns>Updated instance of <see cref="T:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.CompletionFilterWithState" /></returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.CompletionFilterWithState.ToString">
            <summary>
            Override for debugger display
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.CompletionItem">
            <summary>
            This class, returned from <see cref="T:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.IAsyncCompletionSource" />, represents a single entry
            to be displayed in the completion UI. This class implements <see cref="T:Microsoft.VisualStudio.Utilities.IPropertyOwner" />
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.CompletionItem.DisplayText">
            <summary>
            Text used in the UI
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.CompletionItem.InsertText">
            <summary>
            Text inserted when completing this item
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.CompletionItem.SortText">
            <summary>
            Text used by <see cref="T:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.IAsyncCompletionItemManager" /> when sorting against other items
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.CompletionItem.FilterText">
            <summary>
            Text used by <see cref="T:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.IAsyncCompletionItemManager" /> when matching against the applicable span
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.CompletionItem.AutomationText">
            <summary>
            Text used by narrator and other automation tools
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.CompletionItem.Source">
            <summary>
            Reference to the instance that will provide tooltip and custom commit method.
            This should be the same instance as the one that created this <see cref="T:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.CompletionItem" />
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.CompletionItem.Filters">
            <summary>
            <see cref="T:System.Collections.Immutable.ImmutableArray" /> of references to <see cref="T:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.CompletionFilter" />s applicable to this item
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.CompletionItem.Icon">
            <summary>
            Image displayed in the UI
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.CompletionItem.Suffix">
            <summary>
            Additional text to display in the UI, after <see cref="P:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.CompletionItem.DisplayText" />.
            This text has less emphasis than <see cref="P:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.CompletionItem.DisplayText" /> and is usually right-aligned.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.CompletionItem.AttributeIcons">
            <summary>
            Additional images to display in the UI.
            Usually, these images are displayed on the far right side of the UI.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.CompletionItem.CommitCharacters">
            <summary>
            Characters which commit this item, if pressed while this item is selected.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.CompletionItem.ApplicableToSpan">
            <summary>
            Span replaced with <see cref="P:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.CompletionItem.InsertText" /> when this item is committed.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.CompletionItem.IsCommittedAsSnippet">
            <summary>
            Whether <see cref="P:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.CompletionItem.InsertText" /> should be formatted as a snippet during the commit operation.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.CompletionItem.IsPreselected">
            <summary>
            When set, completion will try to select this item.
            </summary>
            <remarks>
            When multiple <see cref="T:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.CompletionItem" />s have this property set,
            the first item in the sort order will be selected.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.CompletionItem.Properties">
            <summary>
            The collection of properties controlled by the property owner. See <see cref="P:Microsoft.VisualStudio.Utilities.IPropertyOwner.Properties" />
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.CompletionItem.#ctor(System.String,Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.IAsyncCompletionSource)">
            <summary>
            Creates a completion item whose <see cref="P:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.CompletionItem.DisplayText" />, <see cref="P:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.CompletionItem.InsertText" />, <see cref="P:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.CompletionItem.SortText" /> and <see cref="P:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.CompletionItem.FilterText" /> are all the same,
            and there are no icon, filter, suffix nor attribute icons associated with this item.
            </summary>
            <param name="displayText">Text to use in the UI, when sorting, filtering and completing</param>
            <param name="source">Reference to <see cref="T:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.IAsyncCompletionSource" /> that created this item</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.CompletionItem.#ctor(System.String,Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.IAsyncCompletionSource,Microsoft.VisualStudio.Text.SnapshotSpan)">
            <summary>
            Creates a completion item pertinent to <paramref name="applicableToSpan" />, whose <see cref="P:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.CompletionItem.DisplayText" />, <see cref="P:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.CompletionItem.InsertText" />, <see cref="P:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.CompletionItem.SortText" /> and <see cref="P:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.CompletionItem.FilterText" /> are all the same,
            and there are no icon, filter, suffix nor attribute icons associated with this item.
            </summary>
            <param name="displayText">Text to use in the UI, when sorting, filtering and completing</param>
            <param name="source">Reference to <see cref="T:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.IAsyncCompletionSource" /> that created this item</param>
            <param name="applicableToSpan">Span replaced with <see paramref="displayText" /> when this item is committed. Default is <c>default</c></param>
        </member>
        <member name="M:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.CompletionItem.#ctor(System.String,Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.IAsyncCompletionSource,Microsoft.VisualStudio.Text.Adornments.ImageElement)">
            <summary>
            Creates a completion item whose <see cref="P:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.CompletionItem.DisplayText" />, <see cref="P:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.CompletionItem.InsertText" />, <see cref="P:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.CompletionItem.SortText" /> and <see cref="P:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.CompletionItem.FilterText" /> are all the same,
            there is an image, and there are no filter, suffix nor attribute images associated with this item.
            </summary>
            <param name="displayText">Text to use in the UI, when sorting, filtering and completing</param>
            <param name="source">Reference to <see cref="T:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.IAsyncCompletionSource" /> that created this item</param>
            <param name="icon">Image displayed in the UI. Default is <c>default(ImageElement)</c></param>
        </member>
        <member name="M:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.CompletionItem.#ctor(System.String,Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.IAsyncCompletionSource,Microsoft.VisualStudio.Text.Adornments.ImageElement,System.Collections.Immutable.ImmutableArray{Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.CompletionFilter})">
            <summary>
            Creates a completion item whose <see cref="P:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.CompletionItem.DisplayText" />, <see cref="P:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.CompletionItem.InsertText" />, <see cref="P:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.CompletionItem.SortText" /> and <see cref="P:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.CompletionItem.FilterText" /> are all the same,
            there is an image, filters, and there are no suffix nor attribute images associated with this item.
            </summary>
            <param name="displayText">Text to use in the UI, when sorting, filtering and completing</param>
            <param name="source">Reference to <see cref="T:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.IAsyncCompletionSource" /> that created this item</param>
            <param name="icon">Image displayed in the UI</param>
            <param name="filters"><see cref="T:System.Collections.Immutable.ImmutableArray" /> of references to <see cref="T:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.CompletionFilter" />s applicable to this item. Default is <c>ImmutableArray&lt;CompletionFilter&gt;.Empty</c></param>
        </member>
        <member name="M:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.CompletionItem.#ctor(System.String,Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.IAsyncCompletionSource,Microsoft.VisualStudio.Text.Adornments.ImageElement,System.Collections.Immutable.ImmutableArray{Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.CompletionFilter},System.String)">
            <summary>
            Creates a completion item whose <paramref name="displayText" />, <see cref="P:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.CompletionItem.InsertText" />, <see cref="P:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.CompletionItem.SortText" /> and <see cref="P:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.CompletionItem.FilterText" /> are all the same,
            there is an image, filters, suffix, and there are no attribute images associated with this item.
            </summary>
            <param name="displayText">Text to use in the UI, when sorting, filtering and completing</param>
            <param name="source">Reference to <see cref="T:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.IAsyncCompletionSource" /> that created this item</param>
            <param name="icon">Image displayed in the UI</param>
            <param name="filters"><see cref="T:System.Collections.Immutable.ImmutableArray" /> of references to <see cref="T:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.CompletionFilter" />s applicable to this item</param>
            <param name="suffix">Additional text to display in the UI. Default is <c>string.Empty</c></param>
        </member>
        <member name="M:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.CompletionItem.#ctor(System.String,Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.IAsyncCompletionSource,Microsoft.VisualStudio.Text.Adornments.ImageElement,System.Collections.Immutable.ImmutableArray{Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.CompletionFilter},System.String,System.String,System.String,System.String,System.Collections.Immutable.ImmutableArray{Microsoft.VisualStudio.Text.Adornments.ImageElement})">
            <summary>
            Creates a completion item, allowing customization of all of its properties as of Visual Studio 16.0
            </summary>
            <param name="displayText">Text used in the UI</param>
            <param name="source">Reference to <see cref="T:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.IAsyncCompletionSource" /> that created this item</param>
            <param name="icon">Image displayed in the UI. Default is <see cref="F:Microsoft.VisualStudio.Text.Adornments.ImageElement.Empty" /></param>
            <param name="filters"><see cref="T:System.Collections.Immutable.ImmutableArray" /> of references to <see cref="T:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.CompletionFilter" />s applicable to this item. Default is <c>ImmutableArray&lt;CompletionFilter&gt;.Empty</c></param>
            <param name="suffix">Additional text to display in the UI. Default is <c>string.Empty</c></param>
            <param name="insertText">Text inserted when completing this item. Default is <paramref name="displayText" /></param>
            <param name="sortText">Text used by <see cref="T:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.IAsyncCompletionItemManager" /> when sorting against other items. Default is <paramref name="displayText" /></param>
            <param name="filterText">Text used by <see cref="T:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.IAsyncCompletionItemManager" /> when matching against the applicable span. Default is <paramref name="displayText" /></param>
            <param name="attributeIcons">Additional images to display in the UI. Default is <c>ImmutableArray&lt;ImageElement&gt;.Empty</c></param>
        </member>
        <member name="M:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.CompletionItem.#ctor(System.String,Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.IAsyncCompletionSource,Microsoft.VisualStudio.Text.Adornments.ImageElement,System.Collections.Immutable.ImmutableArray{Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.CompletionFilter},System.String,System.String,System.String,System.String,System.String,System.Collections.Immutable.ImmutableArray{Microsoft.VisualStudio.Text.Adornments.ImageElement})">
            <summary>
            Creates a completion item, allowing customization of all of its properties as of Visual Studio 16.1
            </summary>
            <param name="displayText">Text used in the UI</param>
            <param name="source">Reference to <see cref="T:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.IAsyncCompletionSource" /> that created this item</param>
            <param name="icon">Image displayed in the UI. Default is <see cref="F:Microsoft.VisualStudio.Text.Adornments.ImageElement.Empty" /></param>
            <param name="filters"><see cref="T:System.Collections.Immutable.ImmutableArray" /> of references to <see cref="T:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.CompletionFilter" />s applicable to this item. Default is <c>ImmutableArray&lt;CompletionFilter&gt;.Empty</c></param>
            <param name="suffix">Additional text to display in the UI. Default is <c>string.Empty</c></param>
            <param name="insertText">Text inserted when completing this item. Default is <paramref name="displayText" /></param>
            <param name="sortText">Text used by <see cref="T:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.IAsyncCompletionItemManager" /> when sorting against other items. Default is <paramref name="displayText" /></param>
            <param name="filterText">Text used by <see cref="T:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.IAsyncCompletionItemManager" /> when matching against the applicable span. Default is <paramref name="displayText" /></param>
            <param name="automationText">Text spoken by the narrator when this item is selected</param>
            <param name="attributeIcons">Additional images to display in the UI. Default is <c>ImmutableArray&lt;ImageElement&gt;.Empty</c></param>
        </member>
        <member name="M:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.CompletionItem.#ctor(System.String,Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.IAsyncCompletionSource,Microsoft.VisualStudio.Text.Adornments.ImageElement,System.Collections.Immutable.ImmutableArray{Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.CompletionFilter},System.String,System.String,System.String,System.String,System.String,System.Collections.Immutable.ImmutableArray{Microsoft.VisualStudio.Text.Adornments.ImageElement},System.Collections.Immutable.ImmutableArray{System.Char},Microsoft.VisualStudio.Text.SnapshotSpan,System.Boolean,System.Boolean)">
            <summary>
            Creates a completion item, allowing customization of all of its properties as of Visual Studio 16.8
            </summary>
            <param name="displayText">Text used in the UI</param>
            <param name="source">Reference to <see cref="T:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.IAsyncCompletionSource" /> that created this item</param>
            <param name="icon">Image displayed in the UI. Default is <see cref="F:Microsoft.VisualStudio.Text.Adornments.ImageElement.Empty" /></param>
            <param name="filters"><see cref="T:System.Collections.Immutable.ImmutableArray" /> of references to <see cref="T:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.CompletionFilter" />s applicable to this item. Default is <c>ImmutableArray&lt;CompletionFilter&gt;.Empty</c></param>
            <param name="suffix">Additional text to display in the UI. Default is <c>string.Empty</c></param>
            <param name="insertText">Text inserted when completing this item. Default is <paramref name="displayText" /></param>
            <param name="sortText">Text used by <see cref="T:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.IAsyncCompletionItemManager" /> when sorting against other items. Default is <paramref name="displayText" /></param>
            <param name="filterText">Text used by <see cref="T:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.IAsyncCompletionItemManager" /> when matching against the applicable span. Default is <paramref name="displayText" /></param>
            <param name="automationText">Text spoken by the narrator when this item is selected</param>
            <param name="attributeIcons">Additional images to display in the UI. Default is <c>ImmutableArray&lt;ImageElement&gt;.Empty</c></param>
            <param name="commitCharacters">Characters which commit this item, if pressed while this item is selected. Default is <c>default</c></param>
            <param name="applicableToSpan">Span replaced with <see paramref="insertText" /> when this item is committed. Default is <c>default</c></param>
            <param name="isCommittedAsSnippet">Whether <see paramref="insertText" /> should be formatted as a snippet. Default is <c>false</c></param>
            <param name="isPreselected">Whether completion should prefer to select this item. Default is <c>false</c></param>
        </member>
        <member name="T:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.CompletionItemEventArgs">
            <summary>
            This class is used to notify of an operation that affects a single <see cref="T:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.CompletionItem" />.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.CompletionItemEventArgs.Item">
            <summary>
            Relevant item
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.CompletionItemEventArgs.#ctor(Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.CompletionItem)">
            <summary>
            Constructs instance of <see cref="T:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.CompletionItemEventArgs" />.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.CompletionList`1">
            <summary>
            Represents a readonly list of <see cref="T:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.CompletionItem" />s or <see cref="T:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.CompletionItemWithHighlight" />s capable of efficient storing
            of large number of items.
            </summary>
            <remarks><see cref="T:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.CompletionList`1" /> instances are only valid during the lifetime of a
            pertinent <see cref="T:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.IAsyncCompletionSession" /> and should not be referenced beyond that.</remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.CompletionList`1.Empty">
            <summary>
            Empty instance of <see cref="T:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.CompletionList`1" />.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.CompletionList`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Creates new instance of <see cref="T:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.CompletionList`1" /> storing provided <see cref="T:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.CompletionItem" />s.
            </summary>
            <param name="items">Provided list of <see cref="T:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.CompletionItem" />s.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when provided <paramref name="items" /> is null.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.CompletionList`1.#ctor(System.Collections.Immutable.ImmutableArray{`0})">
            <summary>
            Creates new instance of <see cref="T:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.CompletionList`1" /> storing provided <see cref="T:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.CompletionItem" />s.
            </summary>
            <param name="items">An array of <see cref="T:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.CompletionItem" />s.</param>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.CompletionList`1.Item(System.Int32)">
            <summary>
            Gets <see cref="T:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.CompletionItem" /> at the specified index.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.CompletionList`1.Count">
            <summary>
            Gets the number of <see cref="T:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.CompletionItem" />s in the list.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.CompletionList`1.IsEmpty">
            <summary>
            Gets whether the list of <see cref="T:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.CompletionItem" />s is empty.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.CompletionList`1.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through this list of <see cref="T:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.CompletionItem" />s.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.CompletionList`1.AsImmutableArray">
            <summary>
            [Perf Sensitive] Converts <see cref="T:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.CompletionList`1" /> into an <see cref="T:System.Collections.Immutable.ImmutableArray`1" />.
            Note: calling this method on large <see cref="T:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.CompletionList`1" /> can incur very large memory allocation!
            </summary>
            <returns>An <see cref="T:System.Collections.Immutable.ImmutableArray`1" /> containing <see cref="T:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.CompletionItem" />s </returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.CompletionItemSelectedEventArgs">
            <summary>
            This class is used to notify completion's logic of selecting through the UI
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.CompletionItemSelectedEventArgs.SelectedItem">
            <summary>
            Selected item. Might be null if there is no selection
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.CompletionItemSelectedEventArgs.SuggestionItemSelected">
            <summary>
            Whether selected item is a suggestion mode item
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.CompletionItemSelectedEventArgs.#ctor(Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.CompletionItem,System.Boolean)">
            <summary>
            Constructs instance of <see cref="T:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.CompletionItemSelectedEventArgs" />.
            </summary>
            <param name="selectedItem">User-selected item</param>
            <param name="suggestionItemSelected">Whether the selected item is a suggestion item</param>
        </member>
        <member name="T:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.ComputedCompletionItemsEventArgs">
            <summary>
            This class is used to notify of an operation that affects multiple <see cref="T:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.CompletionItemWithHighlight" />s.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.ComputedCompletionItemsEventArgs.Items">
            <summary>
            Relevant items
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.ComputedCompletionItemsEventArgs.#ctor(Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.ComputedCompletionItems)">
            <summary>
            Constructs instance of <see cref="T:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.CompletionItemEventArgs" />.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.CompletionItemWithHighlight">
            <summary>
            Wraps <see cref="P:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.CompletionItemWithHighlight.CompletionItem" /> with information about highlighted parts of its <see cref="P:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.CompletionItem.DisplayText" />.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.CompletionItemWithHighlight.CompletionItem">
            <summary>
            The completion item
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.CompletionItemWithHighlight.HighlightedSpans">
            <summary>
            Which parts of <see cref="P:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.CompletionItem.DisplayText" /> to highlight
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.CompletionItemWithHighlight.#ctor(Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.CompletionItem)">
            <summary>
            Constructs <see cref="T:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.CompletionItemWithHighlight" /> without any highlighting.
            Used when the <see cref="P:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.CompletionItemWithHighlight.CompletionItem" /> appears in the completion list without being a text match.
            </summary>
            <param name="completionItem">Instance of the <see cref="P:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.CompletionItemWithHighlight.CompletionItem" /></param>
        </member>
        <member name="M:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.CompletionItemWithHighlight.#ctor(Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.CompletionItem,System.Collections.Immutable.ImmutableArray{Microsoft.VisualStudio.Text.Span})">
            <summary>
            Constructs <see cref="T:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.CompletionItemWithHighlight" /> with given highlighting.
            Used when text used to filter the completion list can be found in the <see cref="P:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.CompletionItem.DisplayText" />.
            </summary>
            <param name="completionItem">Instance of the <see cref="P:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.CompletionItemWithHighlight.CompletionItem" /></param>
            <param name="highlightedSpans"><see cref="T:Microsoft.VisualStudio.Text.Span" />s of <see cref="P:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.CompletionItem.DisplayText" /> to highlight</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.CompletionItemWithHighlight.GetHashCode">
            <summary>
            Assumption: We won't see two instances of <see cref="T:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.CompletionItemWithHighlight" /> with same <see cref="P:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.CompletionItemWithHighlight.CompletionItem" /> but different highlighting.
            Therefore, we don't calculate hash code for the highlights.
            </summary>
            <returns><see cref="P:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.CompletionItemWithHighlight.CompletionItem" />.<see cref="M:System.Object.GetHashCode" /></returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.CompletionParticipation">
            <summary>
            Describes the level of <see cref="T:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.IAsyncCompletionSource" />'s participation in the <see cref="T:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.IAsyncCompletionSession" />.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.CompletionParticipation.DoesNotProvideItems">
            <summary>
            This <see cref="T:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.IAsyncCompletionSource" /> will not provide completion items.
            <see cref="P:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.CompletionStartData.ApplicableToSpan" /> returned by this <see cref="T:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.IAsyncCompletionSource" /> may be used
            in the prospective <see cref="T:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.IAsyncCompletionSession" /> if another <see cref="T:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.IAsyncCompletionSource" /> announced
            participation in completion.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.CompletionParticipation.ProvidesItems">
            <summary>
            <see cref="M:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.IAsyncCompletionSource.GetCompletionContextAsync(Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.IAsyncCompletionSession,Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.CompletionTrigger,Microsoft.VisualStudio.Text.SnapshotPoint,Microsoft.VisualStudio.Text.SnapshotSpan,System.Threading.CancellationToken)" />
            will be invoked, unless another <see cref="T:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.IAsyncCompletionSource" />s returned <see cref="F:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.CompletionParticipation.ExclusivelyProvidesItems" />.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.CompletionParticipation.ExclusivelyProvidesItems">
            <summary>
            <see cref="M:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.IAsyncCompletionSource.GetCompletionContextAsync(Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.IAsyncCompletionSession,Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.CompletionTrigger,Microsoft.VisualStudio.Text.SnapshotPoint,Microsoft.VisualStudio.Text.SnapshotSpan,System.Threading.CancellationToken)" />
            will be invoked only on this <see cref="T:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.IAsyncCompletionSource" /> and other <see cref="T:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.IAsyncCompletionSource" />s which returned <see cref="F:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.CompletionParticipation.ExclusivelyProvidesItems" />.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.CompletionPresentationViewModel">
            <summary>
            This class contains completion items, filters and other pieces of information
            used by <see cref="T:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.ICompletionPresenter" /> to render the completion UI.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.CompletionPresentationViewModel.Items">
            <summary>
            Completion items to display with their highlighted spans.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.CompletionPresentationViewModel.ItemList">
            <summary>
            Completion items to display with their highlighted spans.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.CompletionPresentationViewModel.Filters">
            <summary>
            Completion filters with their available and selected state.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.CompletionPresentationViewModel.ApplicableToSpan">
            <summary>
            Span pertinent to the completion session.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.CompletionPresentationViewModel.UseSoftSelection">
            <summary>
            Controls whether selected item should be soft selected.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.CompletionPresentationViewModel.DisplaySuggestionItem">
            <summary>
            Controls whether suggestion item is visible.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.CompletionPresentationViewModel.SelectSuggestionItem">
            <summary>
            Controls whether suggestion item is selected.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.CompletionPresentationViewModel.SelectedItemIndex">
            <summary>
            Controls which item is selected. Use -1 in suggestion mode.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.CompletionPresentationViewModel.SuggestionItem">
            <summary>
            Suggestion item to display when <see cref="P:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.CompletionPresentationViewModel.DisplaySuggestionItem" /> is set.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.CompletionPresentationViewModel.SuggestionItemOptions">
            <summary>
            How to display the <see cref="P:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.CompletionPresentationViewModel.SuggestionItem" />.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.CompletionPresentationViewModel.#ctor(System.Collections.Immutable.ImmutableArray{Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.CompletionItemWithHighlight},System.Collections.Immutable.ImmutableArray{Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.CompletionFilterWithState},System.Int32,Microsoft.VisualStudio.Text.ITrackingSpan,System.Boolean,System.Boolean,System.Boolean,Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.CompletionItem,Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.SuggestionItemOptions)">
            <summary>
            Constructs <see cref="T:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.CompletionPresentationViewModel" />
            </summary>
            <param name="items">Completion items to display with their highlighted spans</param>
            <param name="filters">Completion filters with their available and selected state</param>
            <param name="selectedItemIndex">Controls which item is selected. Use -1 in suggestion mode</param>
            <param name="applicableToSpan">Span pertinent to the completion session</param>
            <param name="useSoftSelection">Controls whether selected item should be soft selected. Default is <c>false</c></param>
            <param name="displaySuggestionItem">Controls whether suggestion mode item is visible. Default is <c>false</c></param>
            <param name="selectSuggestionItem">Controls whether suggestion mode item is selected. Default is <c>false</c></param>
            <param name="suggestionItem">Suggestion mode item to display. Default is <c>null</c></param>
            <param name="suggestionItemOptions">How to present the suggestion mode item. This is required because completion may be in suggestion mode even if there is no explicit suggestion mode item</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.CompletionPresentationViewModel.#ctor(Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.CompletionList{Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.CompletionItemWithHighlight},System.Collections.Immutable.ImmutableArray{Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.CompletionFilterWithState},System.Int32,Microsoft.VisualStudio.Text.ITrackingSpan,System.Boolean,System.Boolean,System.Boolean,Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.CompletionItem,Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.SuggestionItemOptions)">
            <summary>
            Constructs <see cref="T:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.CompletionPresentationViewModel" />
            </summary>
            <param name="items">Completion items to display with their highlighted spans</param>
            <param name="filters">Completion filters with their available and selected state</param>
            <param name="selectedItemIndex">Controls which item is selected. Use -1 in suggestion mode</param>
            <param name="applicableToSpan">Span pertinent to the completion session</param>
            <param name="useSoftSelection">Controls whether selected item should be soft selected. Default is <c>false</c></param>
            <param name="displaySuggestionItem">Controls whether suggestion mode item is visible. Default is <c>false</c></param>
            <param name="selectSuggestionItem">Controls whether suggestion mode item is selected. Default is <c>false</c></param>
            <param name="suggestionItem">Suggestion mode item to display. Default is <c>null</c></param>
            <param name="suggestionItemOptions">How to present the suggestion mode item. This is required because completion may be in suggestion mode even if there is no explicit suggestion mode item</param>
        </member>
        <member name="T:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.CompletionPresenterOptions">
            <summary>
            Contains additional properties of thie <see cref="T:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.ICompletionPresenter" /> that may be accessed
            prior to initializing an instance of <see cref="T:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.ICompletionPresenter" />
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.CompletionPresenterOptions.ResultsPerPage">
            <summary>
            Declares the length of the jump when user presses PageUp and PageDown keys.
            </summary>
            <remarks>This value needs to be known before the UI is created, hence it is defined in this class instead of <see cref="T:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.ICompletionPresenter" />.
            Note that <see cref="T:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.IAsyncCompletionSession" /> handles keyboard scrolling, including using PageUp and PageDown keys.</remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.CompletionPresenterOptions.#ctor(System.Int32)">
            <summary>
            Constructs instance of <see cref="T:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.CompletionPresenterOptions" />
            </summary>
            <param name="resultsPerPage">Declares the length of the jump when user presses PageUp and PageDown keys</param>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.CompletionStartData.DoesNotParticipateInCompletion">
            <summary>
            Value to use when <see cref="T:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.IAsyncCompletionSource" /> does not know the precise <see cref="T:Microsoft.VisualStudio.Text.SnapshotSpan" /> for completion,
            and does not want to participate in completion.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.CompletionStartData.ParticipatesInCompletionIfAny">
            <summary>
            Value to use when <see cref="T:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.IAsyncCompletionSource" /> does not know the precise <see cref="T:Microsoft.VisualStudio.Text.SnapshotSpan" /> for completion,
            but wishes to participate in completion if language service can provide a valid <see cref="T:Microsoft.VisualStudio.Text.SnapshotSpan" />.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.CompletionStartData.Participation">
            <summary>
            Describes the level of <see cref="T:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.IAsyncCompletionSource" />'s participation in the <see cref="T:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.IAsyncCompletionSession" />.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.CompletionStartData.ApplicableToSpan">
            <summary>
            Proposed location where completion will take place.
            Return <c>default</c> if this <see cref="T:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.IAsyncCompletionSource" /> is not capable of providing location,
            or completion is invalid for location in question.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.CompletionTrigger">
            <summary>
            What caused the completion to trigger or update.
            Location is not provided in this struct because Editor maps the location
            to an appropriate buffer for each <see cref="T:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.IAsyncCompletionSource" />.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.CompletionTrigger.Reason">
            <summary>
            The reason that completion action was taken.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.CompletionTrigger.Character">
            <summary>
            The text edit associated with the action.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.CompletionTrigger.ViewSnapshotBeforeTrigger">
            <summary>
            <see cref="T:Microsoft.VisualStudio.Text.ITextSnapshot" /> on the view's text buffer before the completion action was taken.
            For <see cref="F:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.CompletionTriggerReason.Backspace" />, <see cref="F:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.CompletionTriggerReason.Deletion" /> and <see cref="F:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.CompletionTriggerReason.Insertion" />,
            this is text snapshot before the edit has been made. You may use it to get higher fidelity data on text edits that led to this action.
            If there was no edit, or edit is unavailable, this is the <see cref="T:Microsoft.VisualStudio.Text.ITextSnapshot" /> at the time action happened.
            Take precaution when accessing this property: since this is a struct, it may be left uninitialized.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.CompletionTrigger.#ctor(Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.CompletionTriggerReason,Microsoft.VisualStudio.Text.ITextSnapshot)">
            <summary>
            Creates a <see cref="T:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.CompletionTrigger" /> not associated with a text edit
            </summary>
            <param name="reason">The kind of action that triggered completion action</param>
            <param name="snapshotBeforeTrigger">Snapshot on the view's text buffer when action was taken</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.CompletionTrigger.#ctor(Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.CompletionTriggerReason,Microsoft.VisualStudio.Text.ITextSnapshot,System.Char)">
            <summary>
            Creates a <see cref="T:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.CompletionTrigger" /> associated with a text edit
            </summary>
            <param name="reason">The kind of action that caused completion to trigger or update</param>
            <param name="character">Character associated with the action</param>
            <param name="snapshotBeforeTrigger">Snapshot on the view's text buffer before or when action was taken</param>
        </member>
        <member name="T:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.CompletionTriggeredEventArgs">
            <summary>
            This class is used to notify about new <see cref="T:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.IAsyncCompletionSession" /> being triggered
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.CompletionTriggeredEventArgs.CompletionSession">
            <summary>
            Newly created <see cref="T:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.IAsyncCompletionSession" />.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.CompletionTriggeredEventArgs.TextView">
            <summary>
            <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView" /> where completion was triggered.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.CompletionTriggeredEventArgs.#ctor(Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.IAsyncCompletionSession,Microsoft.VisualStudio.Text.Editor.ITextView)">
            <summary>
            Constructs instance of <see cref="T:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.CompletionTriggeredEventArgs" />.
            </summary>
            <param name="completionSession">Newly created <see cref="T:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.IAsyncCompletionSession" /></param>
            <param name="textView"><see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView" /> where completion was triggered</param>
        </member>
        <member name="T:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.CompletionTriggerReason">
            <summary>
            Describes the kind of action that initially triggered completion to open.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.CompletionTriggerReason.Invoke">
            <summary>
            Completion was triggered by a direct invocation of the completion feature
            using the Edit.ListMember command.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.CompletionTriggerReason.InvokeAndCommitIfUnique">
            <summary>
            Completion was triggered with a request to commit if a single item would be selected
            using the Edit.CompleteWord command.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.CompletionTriggerReason.InvokeMatchingType">
            <summary>
            Completion was triggered with a request to display items of matching type
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.CompletionTriggerReason.Insertion">
            <summary>
            Completion was triggered or updated via an action inserting a character into the buffer.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.CompletionTriggerReason.Deletion">
            <summary>
            Completion was triggered or updated by removing a character from the buffer using Delete.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.CompletionTriggerReason.Backspace">
            <summary>
            Completion was triggered or updated by removing a character from the buffer using Backspace.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.CompletionTriggerReason.FilterChange">
            <summary>
            Completion was updated by changing filters
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.CompletionTriggerReason.SnippetsMode">
            <summary>
            Completion was triggered by Roslyn's Snippets mode
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.ComputedCompletionItems">
            <summary>
            Stores information on computed <see cref="T:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.CompletionItem" />s and their selection information.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.ComputedCompletionItems.#ctor(System.Collections.Immutable.ImmutableArray{Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.CompletionItem},Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.CompletionItem,Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.CompletionItem,System.Boolean,System.Boolean)">
            <summary>
            Constructs instance of <see cref="T:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.ComputedCompletionItems" /> with recently computed
            <see cref="T:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.CompletionItem" />s and their selection infomration.
            </summary>
            <param name="items"><see cref="T:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.CompletionItem" />s displayed in the completion UI</param>
            <param name="suggestionItem">Suggestion <see cref="T:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.CompletionItem" /> displayed in the UI, or null if no suggestion is displayed</param>
            <param name="selectedItem">Currently selected <see cref="T:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.CompletionItem" /></param>
            <param name="suggestionItemSelected">Whether <see cref="P:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.ComputedCompletionItems.SelectedItem" /> is a suggestion item</param>
            <param name="usesSoftSelection">Whether <see cref="P:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.ComputedCompletionItems.SelectedItem" /> is soft selected.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.ComputedCompletionItems.#ctor(Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.CompletionList{Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.CompletionItem},Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.CompletionItem,Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.CompletionItem,System.Boolean,System.Boolean)">
            <summary>
            Constructs instance of <see cref="T:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.ComputedCompletionItems" /> with recently computed
            <see cref="T:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.CompletionItem" />s and their selection infomration.
            </summary>
            <param name="items"><see cref="T:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.CompletionItem" />s displayed in the completion UI</param>
            <param name="suggestionItem">Suggestion <see cref="T:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.CompletionItem" /> displayed in the UI, or null if no suggestion is displayed</param>
            <param name="selectedItem">Currently selected <see cref="T:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.CompletionItem" /></param>
            <param name="suggestionItemSelected">Whether <see cref="P:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.ComputedCompletionItems.SelectedItem" /> is a suggestion item</param>
            <param name="usesSoftSelection">Whether <see cref="P:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.ComputedCompletionItems.SelectedItem" /> is soft selected.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.ComputedCompletionItems.#ctor(System.Collections.Immutable.ImmutableArray{Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.CompletionItemWithHighlight},Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.CompletionItem,Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.CompletionItem,System.Boolean,System.Boolean)">
            <summary>
            Constructs instance of <see cref="T:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.ComputedCompletionItems" /> with recently computed
            <see cref="T:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.CompletionItemWithHighlight" />s and their selection infomration.
            </summary>
            <param name="itemsWithHighlight"><see cref="T:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.CompletionItemWithHighlight" />s displayed in the completion UI</param>
            <param name="suggestionItem">Suggestion <see cref="T:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.CompletionItem" /> displayed in the UI, or null if no suggestion is displayed</param>
            <param name="selectedItem">Currently selected <see cref="T:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.CompletionItem" /></param>
            <param name="suggestionItemSelected">Whether <see cref="P:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.ComputedCompletionItems.SelectedItem" /> is a suggestion item</param>
            <param name="usesSoftSelection">Whether <see cref="P:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.ComputedCompletionItems.SelectedItem" /> is soft selected.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.ComputedCompletionItems.#ctor(Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.CompletionList{Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.CompletionItemWithHighlight},Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.CompletionItem,Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.CompletionItem,System.Boolean,System.Boolean)">
            <summary>
            Constructs instance of <see cref="T:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.ComputedCompletionItems" /> with recently computed
            <see cref="T:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.CompletionItemWithHighlight" />s and their selection infomration.
            </summary>
            <param name="itemsWithHighlight"><see cref="T:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.CompletionItemWithHighlight" />s displayed in the completion UI</param>
            <param name="suggestionItem">Suggestion <see cref="T:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.CompletionItem" /> displayed in the UI, or null if no suggestion is displayed</param>
            <param name="selectedItem">Currently selected <see cref="T:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.CompletionItem" /></param>
            <param name="suggestionItemSelected">Whether <see cref="P:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.ComputedCompletionItems.SelectedItem" /> is a suggestion item</param>
            <param name="usesSoftSelection">Whether <see cref="P:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.ComputedCompletionItems.SelectedItem" /> is soft selected.</param>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.ComputedCompletionItems.Empty">
            <summary>
            Empty data structure, used when no computation was performed
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.ComputedCompletionItems.Items">
            <summary>
            <see cref="T:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.CompletionItem" />s displayed in the completion UI
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.ComputedCompletionItems.SuggestionItem">
            <summary>
            Suggestion <see cref="T:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.CompletionItem" /> displayed in the UI, or null if no suggestion is displayed
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.ComputedCompletionItems.SelectedItem">
            <summary>
            Currently selected <see cref="T:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.CompletionItem" />
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.ComputedCompletionItems.SuggestionItemSelected">
            <summary>
            Whether <see cref="P:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.ComputedCompletionItems.SelectedItem" /> is a suggestion item
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.ComputedCompletionItems.UsesSoftSelection">
            <summary>
            Whether <see cref="P:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.ComputedCompletionItems.SelectedItem" /> is soft selected.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.FilteredCompletionModel">
            <summary>
            This class, returned from <see cref="T:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.IAsyncCompletionItemManager" />,
            contains completion items to display in the UI, recommended item to display, selection mode and available filters.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.FilteredCompletionModel.Items">
            <summary>
            Items to display in the completion UI.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.FilteredCompletionModel.ItemList">
            <summary>
            Items to display in the completion UI.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.FilteredCompletionModel.SelectedItemIndex">
            <summary>
            Recommended item index to select. -1 selects suggestion item.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.FilteredCompletionModel.Filters">
            <summary>
            Completion filters with their availability and selection state.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.FilteredCompletionModel.SelectionHint">
            <summary>
            Controls the selection mode of the selected item.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.FilteredCompletionModel.CenterSelection">
            <summary>
            Whether selected item should be displayed in the center of the list. Usually, this is true
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.FilteredCompletionModel.UniqueItem">
            <summary>
            Optionally, provides an item that should be committed using the "commit if unique" command.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.FilteredCompletionModel.#ctor(System.Collections.Immutable.ImmutableArray{Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.CompletionItemWithHighlight},System.Int32)">
            <summary>
            Constructs <see cref="T:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.FilteredCompletionModel" /> without completion filters.
            </summary>
            <param name="items">Items to display in the completion UI.</param>
            <param name="selectedItemIndex">Recommended item index to select. -1 selects suggestion item.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.FilteredCompletionModel.#ctor(System.Collections.Immutable.ImmutableArray{Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.CompletionItemWithHighlight},System.Int32,System.Collections.Immutable.ImmutableArray{Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.CompletionFilterWithState})">
            <summary>
            Constructs <see cref="T:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.FilteredCompletionModel" /> with completion filters.
            </summary>
            <param name="items">Items to display in the completion UI.</param>
            <param name="selectedItemIndex">Recommended item index to select. -1 selects suggestion item.</param>
            <param name="filters">Completion filters with their availability and selection state. Default is empty array.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.FilteredCompletionModel.#ctor(System.Collections.Immutable.ImmutableArray{Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.CompletionItemWithHighlight},System.Int32,System.Collections.Immutable.ImmutableArray{Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.CompletionFilterWithState},Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.UpdateSelectionHint,System.Boolean,Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.CompletionItem)">
            <summary>
            Constructs <see cref="T:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.FilteredCompletionModel" /> with completion filters, indication regarding selection mode and the unique item
            </summary>
            <param name="items">Items to display in the completion UI.</param>
            <param name="selectedItemIndex">Recommended item index to select. -1 selects suggestion item.</param>
            <param name="filters">Completion filters with their availability and selection state. Default is empty array.</param>
            <param name="selectionHint">Allows <see cref="T:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.IAsyncCompletionItemManager" /> to influence the selection mode. Default is <see cref="F:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.UpdateSelectionHint.NoChange" /></param>
            <param name="centerSelection">Whether selected item should be centered in the completion list.</param>
            <param name="uniqueItem">Provides <see cref="T:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.CompletionItem" /> to commit using "commit if unique" command despite displaying more than one item. Default is <c>null</c></param>
        </member>
        <member name="M:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.FilteredCompletionModel.#ctor(Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.CompletionList{Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.CompletionItemWithHighlight},System.Int32,System.Collections.Immutable.ImmutableArray{Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.CompletionFilterWithState},Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.UpdateSelectionHint,System.Boolean,Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.CompletionItem)">
            <summary>
            Constructs <see cref="T:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.FilteredCompletionModel" /> with completion filters, indication regarding selection mode and the unique item
            </summary>
            <param name="items">Items to display in the completion UI.</param>
            <param name="selectedItemIndex">Recommended item index to select. -1 selects suggestion item.</param>
            <param name="filters">Completion filters with their availability and selection state. Default is empty array.</param>
            <param name="selectionHint">Allows <see cref="T:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.IAsyncCompletionItemManager" /> to influence the selection mode. Default is <see cref="F:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.UpdateSelectionHint.NoChange" /></param>
            <param name="centerSelection">Whether selected item should be centered in the completion list.</param>
            <param name="uniqueItem">Provides <see cref="T:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.CompletionItem" /> to commit using "commit if unique" command despite displaying more than one item. Default is <c>null</c></param>
        </member>
        <member name="T:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.GetSelectedItemOptions">
            <summary>
            Inidicates how much to wait for <see cref="M:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.ISelectedItemProvider.GetSelectedItemAsync(Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.GetSelectedItemOptions,System.Threading.CancellationToken)" />
            The shorter wait comes with a tradeoff of receiving a potentially stale item or no item.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.GetSelectedItemOptions.GetLastAvailableItem">
            <summary>
            Don't wait and immediately return the item which was last known to be selected.
            If no item is available yet, a <c>null</c> value will be returned.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.GetSelectedItemOptions.WaitForComputation">
            <summary>
            Wait for a computation to select the appropriate completion item given the current state.
            If not items are not available yet, a <c>null</c> value will be returned.
            For example, this accommodates for selection after user types and scrolls with arrow keys.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.GetSelectedItemOptions.WaitForContextAndComputation">
            <summary>
            Wait to receive list of items and compute the selected completion item.
            This option may result in the longest wait, but is useful for scenarios when user explicitly asks for a completion item.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.InitialSelectionHint">
            <summary>
            Used by <see cref="T:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.IAsyncCompletionSource" /> to recommend the selection mode.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.InitialSelectionHint.RegularSelection">
            <summary>
            Item is selected.
            It will be committed by pressing a commit character, e.g. a token delimeter,
            Tab, Enter and mouse click.
            When multiple <see cref="T:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.IAsyncCompletionSource" /> give different results, this value has the lowest priority.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.InitialSelectionHint.SoftSelection">
            <summary>
            Item is soft selected.
            It will be committed only by pressing Tab or clicking the item.
            Typing a commit character will dismiss the <see cref="T:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.IAsyncCompletionSession" />.
            Selecting another item automatically disables soft selection and enables regular selection.
            When multiple <see cref="T:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.IAsyncCompletionSource" /> give different results, this value has higher priority than <see cref="F:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.InitialSelectionHint.RegularSelection" />.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.SuggestionItemOptions">
            <summary>
            Instructs the editor if and how to display the builder item.
            In suggestion mode, the UI displays a single <see cref="T:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.CompletionItem" />, aka "Builder",
            whose <see cref="P:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.CompletionItem.DisplayText" /> and <see cref="P:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.CompletionItem.InsertText" />
            are equal to text typed by the user so far.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.SuggestionItemOptions.DisplayTextWhenEmpty">
            <summary>
            Text to use as suggestion item's <see cref="P:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.CompletionItem.DisplayText" /> when user has not typed anything.
            Usually prompts user to begin typing and describes what does the suggestion item represent.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.SuggestionItemOptions.ToolTipText">
            <summary>
            Localized tooltip text for the suggestion item.
            Usually describes why suggestion mode is active, and what does the suggestion item represent.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.SuggestionItemOptions.#ctor(System.String,System.String)">
            <summary>
            Creates instance of SuggestionItemOptions with specified tooltip text and text to display in absence of user input.
            Provide this instance to <see cref="T:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.CompletionContext" /> to activate suggestion mode.
            </summary>
            <param name="displayTextWhenEmpty"><see cref="P:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.CompletionItem.DisplayText" /> to use when user has not typed anything</param>
            <param name="toolTipText">Localized tooltip text for the suggestion item</param>
        </member>
        <member name="T:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.UpdateSelectionHint">
            <summary>
            Used by <see cref="T:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.IAsyncCompletionItemManager" /> to recommend the selection mode.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.UpdateSelectionHint.NoChange">
            <summary>
            Don't change the current selection mode. This is the recommended value.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.UpdateSelectionHint.SoftSelected">
            <summary>
            Set selection mode to soft selection: item is committed only using Tab or mouse.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.UpdateSelectionHint.Selected">
            <summary>
            Set selection mode to regular selection: item is committed using Tab, mouse, enter and commit characters.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.IAsyncCompletionBroker">
            <summary>
            Represents a class that manages the completion feature.
            The editor uses this class to trigger completion and obtain instance of <see cref="T:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.IAsyncCompletionSession" />
            which contains methods and events relevant to the active completion session.
            </summary>
            <remarks>
            This is a MEF component and may be imported by another MEF component:
            </remarks>
            <example>
            <code>
                [Import]
                IAsyncCompletionBroker CompletionBroker;
            </code>
            </example>
        </member>
        <member name="M:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.IAsyncCompletionBroker.IsCompletionActive(Microsoft.VisualStudio.Text.Editor.ITextView)">
            <summary>
            Returns whether <see cref="T:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.IAsyncCompletionSession" /> is active in given <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView" />.
            </summary>
            <remarks>
            The data may be stale if <see cref="T:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.IAsyncCompletionSession" /> was simultaneously dismissed on another thread.
            </remarks>
            <param name="textView">View that hosts completion and relevant buffers</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.IAsyncCompletionBroker.IsCompletionSupported(Microsoft.VisualStudio.Utilities.IContentType)">
            <summary>
            Returns whether there are any completion item sources available for given <see cref="T:Microsoft.VisualStudio.Utilities.IContentType" />.
            In practice, availability of completion item sources also depends on the text view roles. See <see cref="M:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.IAsyncCompletionBroker.IsCompletionSupported(Microsoft.VisualStudio.Utilities.IContentType,Microsoft.VisualStudio.Text.Editor.ITextViewRoleSet)" />.
            </summary>
            <param name="contentType"><see cref="T:Microsoft.VisualStudio.Utilities.IContentType" /> to check for available completion source exports</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.IAsyncCompletionBroker.IsCompletionSupported(Microsoft.VisualStudio.Utilities.IContentType,Microsoft.VisualStudio.Text.Editor.ITextViewRoleSet)">
            <summary>
            Returns whether there are any completion item sources available for given <see cref="T:Microsoft.VisualStudio.Utilities.IContentType" /> and <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextViewRoleSet" />.
            This method should be called prior to calling <see cref="M:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.IAsyncCompletionBroker.TriggerCompletion(Microsoft.VisualStudio.Text.Editor.ITextView,Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.CompletionTrigger,Microsoft.VisualStudio.Text.SnapshotPoint,System.Threading.CancellationToken)" />
            to avoid traversal of the buffer graph in cases where completion would be unavailable.
            </summary>
            <param name="contentType"><see cref="T:Microsoft.VisualStudio.Utilities.IContentType" /> to check for available completion source exports</param>
            <param name="roles"><see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView" />'s <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextViewRoleSet" /> which filters available completion source exports</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.IAsyncCompletionBroker.GetSession(Microsoft.VisualStudio.Text.Editor.ITextView)">
            <summary>
            Returns <see cref="T:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.IAsyncCompletionSession" /> if there is one active in a given <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView" />, or null if not.
            </summary>
            <remarks>
            The data may be stale if <see cref="T:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.IAsyncCompletionSession" /> was simultaneously dismissed on another thread.
            Use <see cref="P:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.IAsyncCompletionSession.IsDismissed" /> to check state of returned session.
            </remarks>
            <param name="textView">View that hosts completion and relevant buffers</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.IAsyncCompletionBroker.TriggerCompletion(Microsoft.VisualStudio.Text.Editor.ITextView,Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.CompletionTrigger,Microsoft.VisualStudio.Text.SnapshotPoint,System.Threading.CancellationToken)">
            <summary>
            Activates completion and returns <see cref="T:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.IAsyncCompletionSession" />.
            If completion was already active, returns the existing session without changing it.
            Returns null when <paramref name="token" /> is canceled, there are no participating <see cref="T:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.IAsyncCompletionSource" />s or completion is not applicable at the given <paramref name="triggerLocation" />.
            Must be invoked on UI thread.
            This does not cause the completion popup to appear.
            To compute available icons and display the UI, call <see cref="M:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.IAsyncCompletionSession.OpenOrUpdate(Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.CompletionTrigger,Microsoft.VisualStudio.Text.SnapshotPoint,System.Threading.CancellationToken)" />.
            Invoke <see cref="M:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.IAsyncCompletionBroker.IsCompletionSupported(Microsoft.VisualStudio.Utilities.IContentType)" /> prior to invoking this method to more efficiently verify whether feature is disabled or if there are no completion providers.
            </summary>
            <param name="textView">View that hosts completion and relevant buffers</param>
            <param name="trigger">What causes this completion, potentially including character typed by the user and snapshot before the text edit.</param>
            <param name="triggerLocation">Location of completion on the view's data buffer: <see cref="P:Microsoft.VisualStudio.Text.Editor.ITextView.TextBuffer" />. Used to pick relevant <see cref="T:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.IAsyncCompletionSource" />s and <see cref="T:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.IAsyncCompletionItemManager" /></param>
            <param name="token">Cancellation token that may interrupt this operation, despite running on the UI thread</param>
            <returns>
            Returns existing <see cref="T:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.IAsyncCompletionSession" /> if one already exists
            Returns null if the completion feature is disabled or if there are no applicable completion providers. Invoke <see cref="M:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.IAsyncCompletionBroker.IsCompletionSupported(Microsoft.VisualStudio.Utilities.IContentType)" /> prior to invoking this method to perform this check more efficiently.
            Returns null if applicable <see cref="T:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.IAsyncCompletionSource" />s determine that completion is not applicable at the given <paramref name="triggerLocation" />.
            Returns a new <see cref="T:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.IAsyncCompletionSession" />. Invoke <see cref="M:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.IAsyncCompletionSession.OpenOrUpdate(Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.CompletionTrigger,Microsoft.VisualStudio.Text.SnapshotPoint,System.Threading.CancellationToken)" /> to compute and display the available completions.
            </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.IAsyncCompletionBroker.GetAggregatedCompletionContextAsync(Microsoft.VisualStudio.Text.Editor.ITextView,Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.CompletionTrigger,Microsoft.VisualStudio.Text.SnapshotPoint,System.Threading.CancellationToken)">
            <summary>
            Requests <see cref="T:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.CompletionContext" />s from applicable <see cref="T:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.IAsyncCompletionSource" />s and aggregates them.
            Does not trigger completion, does not raise events, does not open the completion GUI.
            The <see cref="T:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.IAsyncCompletionSession" /> which interacted with <see cref="T:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.IAsyncCompletionSource" />s
            is returned as <see cref="P:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.AggregatedCompletionContext.InertSession" /> and does not have full capabilities of <see cref="T:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.IAsyncCompletionSession" />.
            
            This method can be invoked from any thread, but it briefly switches to UI thread.
            Returns <see cref="P:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.CompletionContext.Empty" /> when <paramref name="token" /> is canceled.
            </summary>
            <param name="textView">View that hosts completion and relevant buffers</param>
            <param name="trigger">What caused completion</param>
            <param name="triggerLocation">Location of completion on the view's data buffer: <see cref="P:Microsoft.VisualStudio.Text.Editor.ITextView.TextBuffer" />. Used to pick relevant <see cref="T:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.IAsyncCompletionSource" />s</param>
            <param name="token">Cancellation token that may interrupt this operation</param>
            <returns><see cref="T:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.AggregatedCompletionContext" /> which contains <see cref="T:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.IAsyncCompletionSession" /> which interacted with <see cref="T:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.IAsyncCompletionSource" />s and the aggregate <see cref="T:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.CompletionContext" /></returns>
        </member>
        <member name="E:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.IAsyncCompletionBroker.CompletionTriggered">
            <summary>
            Raised on UI thread when new <see cref="T:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.IAsyncCompletionSession" /> is triggered.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.IAsyncCompletionBroker2.TriggerCompletion(Microsoft.VisualStudio.Text.Editor.ITextView,Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.CompletionTrigger,Microsoft.VisualStudio.Text.SnapshotPoint,Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.CompletionContext,System.Threading.CancellationToken)">
            <summary>
            Activates completion and returns <see cref="T:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.IAsyncCompletionSession" />.
            The <see cref="T:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.IAsyncCompletionSession" /> will contain items supplied through <paramref name="context" />.
            </summary>
            <remarks>
            May be invoked on any thread.
            Causes the completion popup to appear.
            </remarks>
            <param name="textView">View that hosts completion and relevant buffers</param>
            <param name="trigger">What causes this completion, potentially including character typed by the user and snapshot before the text edit.</param>
            <param name="triggerLocation">Location of completion on the view's data buffer: <see cref="P:Microsoft.VisualStudio.Text.Editor.ITextView.TextBuffer" />. Used to pick relevant <see cref="T:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.IAsyncCompletionSource" />s and <see cref="T:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.IAsyncCompletionItemManager" /></param>
            <param name="context">Location of completion on the view's data buffer: <see cref="P:Microsoft.VisualStudio.Text.Editor.ITextView.TextBuffer" />. Used to pick relevant <see cref="T:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.IAsyncCompletionSource" />s and <see cref="T:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.IAsyncCompletionItemManager" /></param>
            <param name="token">Cancellation token that may interrupt this operation, despite running on the UI thread</param>
            <returns>
            Returns existing <see cref="T:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.IAsyncCompletionSession" /> if one already exists
            Returns null if the completion feature is disabled or <paramref name="token" /> is canceled
            Returns a new <see cref="T:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.IAsyncCompletionSession" /> otherwise. Computation will begin automatically and user will see the popup when the list of items is established.
            </returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.IAsyncCompletionCommitManager">
            <summary>
            Represents a class that provides means to adjust the commit behavior,
            including which typed characters commit the <see cref="T:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.IAsyncCompletionSession" />
            and how to commit <see cref="T:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.CompletionItem" />s.
            </summary>
            <remarks>
            Instances of this class should be created by <see cref="T:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.IAsyncCompletionCommitManagerProvider" />, which is a MEF part.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.IAsyncCompletionCommitManager.PotentialCommitCharacters">
            <summary>
            <para>
            Returns characters that may commit completion.
            </para>
            <para>
            When completion is active and a text edit matches one of these characters,
            <see cref="M:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.IAsyncCompletionCommitManager.ShouldCommitCompletion(Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.IAsyncCompletionSession,Microsoft.VisualStudio.Text.SnapshotPoint,System.Char,System.Threading.CancellationToken)" /> is called to verify that the character
            is indeed a commit character at a given location.
            </para>
            <para>
            Called on UI thread.
            </para>
            <para>
            If the commit charactersr are not known or are variable, consider using <see cref="T:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.IAsyncCompletionCommitManager2" />
            which ignores the <see cref="P:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.IAsyncCompletionCommitManager.PotentialCommitCharacters" /> optimization and supports handling each character individually.
            </para>
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.IAsyncCompletionCommitManager.ShouldCommitCompletion(Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.IAsyncCompletionSession,Microsoft.VisualStudio.Text.SnapshotPoint,System.Char,System.Threading.CancellationToken)">
            <summary>
            <para>
            Returns whether <paramref name="typedChar" /> is a commit character at a given <paramref name="location" />.
            </para>
            <para>
            If in your language every character returned by <see cref="P:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.IAsyncCompletionCommitManager.PotentialCommitCharacters" />
            is a commit character, simply return <see langword="true" />.
            </para>
            <para>
            Called on UI thread.
            </para>
            </summary>
            <param name="session">The active <see cref="T:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.IAsyncCompletionSession" /></param>
            <param name="location">Location in the snapshot of the view's topmost buffer. The character is not inserted into this snapshot</param>
            <param name="typedChar">Character typed by the user</param>
            <param name="token">Token used to cancel this operation</param>
            <returns>True if this character should commit the active session</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.IAsyncCompletionCommitManager.TryCommit(Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.IAsyncCompletionSession,Microsoft.VisualStudio.Text.ITextBuffer,Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.CompletionItem,System.Char,System.Threading.CancellationToken)">
            <summary>
            <para>
            Allows the implementer of <see cref="T:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.IAsyncCompletionCommitManager" /> to customize how specified <see cref="T:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.CompletionItem" /> is committed.
            This method is called on UI thread, before the <paramref name="typedChar" /> is inserted into the buffer.
            </para>
            <para>
            In most cases, implementer does not need to commit the item. Return <see cref="F:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.CommitResult.Unhandled" /> to allow another
            <see cref="T:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.IAsyncCompletionCommitManager" /> to attempt the commit, or to invoke the default commit behavior.
            </para>
            <para>
            To perform a custom commit, replace contents of <paramref name="buffer" />
            at a location indicated by <see cref="P:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.IAsyncCompletionSession.ApplicableToSpan" />
            with text stored in <see cref="P:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.CompletionItem.InsertText" />.
            To move the caret, use <see cref="P:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.IAsyncCompletionSession.TextView" />.
            Finally, return <see cref="F:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.CommitResult.Handled" />. Use <see cref="P:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.CommitResult.Behavior" /> to influence Editor's behavior
            after invoking this method.
            </para>
            <para>
            <paramref name="typedChar" /> may be a non-printable character to denote a commit gesture other than typing.
            <c>\t</c> denotes pressing Tab key, <c>\n</c> denotes pressing Return key and <c>\0</c> denotes programmatic commit through API, Ctrl+Space gesture or double clicking an item.
            </para>
            <para>
            Called on UI thread.
            </para>
            </summary>
            <param name="session">The active <see cref="T:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.IAsyncCompletionSession" />. See <see cref="P:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.IAsyncCompletionSession.ApplicableToSpan" /> and <see cref="P:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.IAsyncCompletionSession.TextView" /></param>
            <param name="buffer">Subject buffer which matches this <see cref="T:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.IAsyncCompletionCommitManager" />'s content type</param>
            <param name="item">Which <see cref="T:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.CompletionItem" /> is to be committed</param>
            <param name="typedChar">Text change associated with this commit. <c>\t</c> denotes Tab key, <c>\n</c> denotes Return key and <c>\0</c> denotes programmatic commit</param>
            <param name="token">Token used to cancel this operation</param>
            <returns>Instruction for the editor how to proceed after invoking this method. Default is <see cref="F:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.CommitResult.Unhandled" /></returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.IAsyncCompletionCommitManager2">
            <summary>
            Represents a class that provides means to handle typed characters
            by commiting the <see cref="T:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.IAsyncCompletionSession" />, dismissing it or allowing it to continue.
            </summary>
            <remarks>
            <para>
            When object implements <see cref="T:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.IAsyncCompletionCommitManager2" />, completion will not call
            <see cref="P:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.IAsyncCompletionCommitManager.PotentialCommitCharacters" /> and
            <see cref="M:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.IAsyncCompletionCommitManager.ShouldCommitCompletion(Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.IAsyncCompletionSession,Microsoft.VisualStudio.Text.SnapshotPoint,System.Char,System.Threading.CancellationToken)" />.
            </para>
            <para>
            Instances of this class should be created by <see cref="T:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.IAsyncCompletionCommitManagerProvider" />, which is a MEF part.
            </para>
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.IAsyncCompletionCommitManager2.Initialize(Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.IAsyncCompletionSession)">
            <summary>
            <para>
            Invoked when <paramref name="session" /> is initialized.
            </para>
            <para>
            Called on UI thread.
            </para>
            </summary>
            <param name="session">Newly initialized <see cref="T:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.IAsyncCompletionSession" /></param>
        </member>
        <member name="M:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.IAsyncCompletionCommitManager2.HandleTypedChar(Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.IAsyncCompletionSession,Microsoft.VisualStudio.Text.SnapshotPoint,System.Char,System.Threading.CancellationToken)">
            <summary>
            <para>
            Returns how <paramref name="typedChar" /> should influence the <paramref name="session" />.
            </para>
            <para>
            Called instead of <see cref="M:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.IAsyncCompletionCommitManager.ShouldCommitCompletion(Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.IAsyncCompletionSession,Microsoft.VisualStudio.Text.SnapshotPoint,System.Char,System.Threading.CancellationToken)" />
            </para>
            <para>
            Called on UI thread.
            </para>
            </summary>
            <param name="session">The active <see cref="T:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.IAsyncCompletionSession" /></param>
            <param name="location">Location in the snapshot of the view's topmost buffer. The character is not inserted into this snapshot</param>
            <param name="typedChar">Character typed by the user</param>
            <param name="token">Token used to cancel this operation</param>
            <returns>True if this character should commit the active session</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.IAsyncCompletionCommitManagerProvider">
            <summary>
            Provides instances of <see cref="T:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.IAsyncCompletionCommitManager" /> or <see cref="T:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.IAsyncCompletionCommitManager2" />
            which provides means to adjust the commit behavior,
            including which typed characters commit the <see cref="T:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.IAsyncCompletionSession" />
            and how to commit <see cref="T:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.CompletionItem" />s.
            </summary>
            <remarks>
            This is a MEF component and should be exported with [ContentType] and [Name] attributes
            and optional [Order] and [TextViewRoles] attributes.
            An instance of <see cref="T:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.IAsyncCompletionCommitManager" /> is selected
            first by matching ContentType with content type of the <see cref="P:Microsoft.VisualStudio.Text.Editor.ITextView.TextBuffer" />, and then by Order.
            Instances of <see cref="T:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.IAsyncCompletionCommitManager2" /> are queried before instances of <see cref="T:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.IAsyncCompletionCommitManager" />.
            </remarks>
            <example>
            <code>
                [Export(typeof(IAsyncCompletionCommitManagerProvider))]
                [Name(nameof(MyCompletionCommitManagerProvider))]
                [ContentType("text")]
                [TextViewRoles(PredefinedTextViewRoles.Editable)]
                [Order(Before = "OtherCompletionCommitManager")]
                public class MyCompletionCommitManagerProvider : IAsyncCompletionCommitManagerProvider
            </code>
            </example>
        </member>
        <member name="M:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.IAsyncCompletionCommitManagerProvider.GetOrCreate(Microsoft.VisualStudio.Text.Editor.ITextView)">
            <summary>
            Creates an instance of <see cref="T:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.IAsyncCompletionCommitManager" />
            or <see cref="T:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.IAsyncCompletionCommitManager2" /> for the specified <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView" />.
            Called on the UI thread.
            </summary>
            <param name="textView">Text view that will host the completion. Completion acts on buffers of this view.</param>
            <returns>Instance of <see cref="T:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.IAsyncCompletionCommitManager" /> or <see cref="T:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.IAsyncCompletionCommitManager2" /></returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.IAsyncCompletionDefaultsSource">
            <summary>
            Provides a list of possible default selections for an <see cref="T:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.IAsyncCompletionSession" />.
            </summary>
            <remarks>
            This is a MEF component and should be exported with [ContentType] and [Name] attributes
            and optional [Order] and [TextViewRoles] attributes.
            An instance of <see cref="T:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.IAsyncCompletionDefaultsSource" /> is selected
            first by matching ContentType with content type of the <see cref="P:Microsoft.VisualStudio.Text.Editor.ITextView.TextBuffer" />, and then by Order.
            Only one <see cref="T:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.IAsyncCompletionDefaultsSource" /> is used in a given view.
            <para>
            Only one <see cref="T:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.IAsyncCompletionDefaultsSource" /> will be used for any completion session. The sources are
            ordered by the Order attribute. The first source (if any) that satisfies the ContentType and TextViewRoles
            attributes will be the source used to provide defaults.
            </para>
            <example>
            <code>
                [Export(typeof(IAsyncCompletionDefaultsSource))]
                [Name(nameof(MyCompletionItemManagerProvider))]
                [ContentType("text")]
                [TextViewRoles(PredefinedTextViewRoles.Editable)]
                [Order(Before = "OtherCompletionDefaultsSource")]
                public class MyCompletionDefaultsSource : IAsyncCompletionDefaultsSource
            </code>
            </example>
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.IAsyncCompletionDefaultsSource.GetSessionDefaultsAsync(Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.IAsyncCompletionSession)">
            <summary>
            Gets a list of possible default items for the completion session.
            </summary>
            <param name="session">Session for which the defaults are desired.</param>
            <returns>A list of possible default item insertion texts for the completion session.</returns>
            <remarks>The returned list can contain items that are not items in the completion list.</remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.IAsyncCompletionItemManager">
            <summary>
            Represents a class that filters and sorts available <see cref="T:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.CompletionItem" />s given the current state of the editor.
            It also declares which completion filters are available for the returned subset of <see cref="T:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.CompletionItem" />s.
            All methods are called on background thread.
            </summary>
            <remarks>
            Instances of this class should be created by <see cref="T:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.IAsyncCompletionItemManagerProvider" />, which is a MEF part.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.IAsyncCompletionItemManager.UpdateCompletionListAsync(Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.IAsyncCompletionSession,Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.AsyncCompletionSessionDataSnapshot,System.Threading.CancellationToken)">
            <summary>
            This method is called before completion is about to appear,
            on subsequent typing events and when user toggles completion filters.
            <paramref name="session" /> tracks user user's input tracked with <see cref="P:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.IAsyncCompletionSession.ApplicableToSpan" />.
            <paramref name="data" /> provides applicable <see cref="P:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.AsyncCompletionSessionDataSnapshot.Snapshot" /> and 
            and <see cref="P:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.AsyncCompletionSessionDataSnapshot.SelectedFilters" />s that indicate user's filter selection.
            </summary>
            <param name="session">The active <see cref="T:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.IAsyncCompletionSession" />. See <see cref="P:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.IAsyncCompletionSession.ApplicableToSpan" /> and <see cref="P:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.IAsyncCompletionSession.TextView" /></param>
            <param name="data">Contains properties applicable at the time this method is invoked.</param>
            <param name="token">Cancellation token that may interrupt this operation</param>
            <returns>Instance of <see cref="T:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.FilteredCompletionModel" /> that contains completion items to render, filters to display and recommended item to select</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.IAsyncCompletionItemManager.SortCompletionListAsync(Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.IAsyncCompletionSession,Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.AsyncCompletionSessionInitialDataSnapshot,System.Threading.CancellationToken)">
            <summary>
            This method is first called before completion is about to appear.
            The result of this method will be used in subsequent invocations of <see cref="M:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.IAsyncCompletionItemManager.UpdateCompletionListAsync(Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.IAsyncCompletionSession,Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.AsyncCompletionSessionDataSnapshot,System.Threading.CancellationToken)" />
            <paramref name="session" /> tracks user user's input tracked with <see cref="P:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.IAsyncCompletionSession.ApplicableToSpan" />.
            <paramref name="data" /> provides applicable <see cref="P:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.AsyncCompletionSessionDataSnapshot.Snapshot" /> and 
            </summary>
            <param name="session">The active <see cref="T:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.IAsyncCompletionSession" />. See <see cref="P:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.IAsyncCompletionSession.TextView" /></param>
            <param name="data">Contains properties applicable at the time this method is invoked.</param>
            <param name="token">Cancellation token that may interrupt this operation</param>
            <returns>Sorted <see cref="T:System.Collections.Immutable.ImmutableArray" /> of <see cref="T:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.CompletionItem" /> that will be subsequently passed to <see cref="M:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.IAsyncCompletionItemManager.UpdateCompletionListAsync(Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.IAsyncCompletionSession,Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.AsyncCompletionSessionDataSnapshot,System.Threading.CancellationToken)" /></returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.IAsyncCompletionItemManager2">
            <summary>
            Represents a class that filters and sorts available <see cref="T:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.CompletionItem" />s given the current state of the editor.
            It also declares which completion filters are available for the returned subset of <see cref="T:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.CompletionItem" />s.
            All methods are called on background thread.
            </summary>
            <remarks>
            Instances of this class should be created by <see cref="T:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.IAsyncCompletionItemManagerProvider" />, which is a MEF part.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.IAsyncCompletionItemManager2.SortCompletionItemListAsync(Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.IAsyncCompletionSession,Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.AsyncCompletionSessionInitialDataSnapshot,System.Threading.CancellationToken)">
            <summary>
            This method is first called before completion is about to appear.
            The result of this method will be used in subsequent invocations of <see cref="M:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.IAsyncCompletionItemManager.UpdateCompletionListAsync(Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.IAsyncCompletionSession,Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.AsyncCompletionSessionDataSnapshot,System.Threading.CancellationToken)" />
            <paramref name="session" /> tracks user user's input tracked with <see cref="P:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.IAsyncCompletionSession.ApplicableToSpan" />.
            <paramref name="data" /> provides applicable <see cref="P:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.AsyncCompletionSessionDataSnapshot.Snapshot" /> and 
            </summary>
            <param name="session">The active <see cref="T:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.IAsyncCompletionSession" />. See <see cref="P:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.IAsyncCompletionSession.TextView" /></param>
            <param name="data">Contains properties applicable at the time this method is invoked.</param>
            <param name="token">Cancellation token that may interrupt this operation</param>
            <returns>Sorted <see cref="T:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.CompletionList`1" /> that will be subsequently passed to <see cref="M:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.IAsyncCompletionItemManager.UpdateCompletionListAsync(Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.IAsyncCompletionSession,Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.AsyncCompletionSessionDataSnapshot,System.Threading.CancellationToken)" /></returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.IAsyncCompletionItemManagerProvider">
            <summary>
            Provides instances of <see cref="T:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.IAsyncCompletionItemManager" /> which filters and sorts available <see cref="T:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.CompletionItem" />s given the current state of the editor.
            </summary>
            <remarks>
            This is a MEF component and should be exported with [ContentType] and [Name] attributes
            and optional [Order] and [TextViewRoles] attributes.
            An instance of <see cref="T:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.IAsyncCompletionItemManager" /> is selected
            first by matching ContentType with content type of the <see cref="P:Microsoft.VisualStudio.Text.Editor.ITextView.TextBuffer" />, and then by Order.
            Only one <see cref="T:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.IAsyncCompletionItemManager" /> is used in a given view.
            <example>
            <code>
                [Export(typeof(IAsyncCompletionItemManagerProvider))]
                [Name(nameof(MyCompletionItemManagerProvider))]
                [ContentType("text")]
                [TextViewRoles(PredefinedTextViewRoles.Editable)]
                [Order(Before = "OtherCompletionItemManager")]
                public class MyCompletionItemManagerProvider : IAsyncCompletionItemManagerProvider
            </code>
            </example>
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.IAsyncCompletionItemManagerProvider.GetOrCreate(Microsoft.VisualStudio.Text.Editor.ITextView)">
            <summary>
            Creates an instance of <see cref="T:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.IAsyncCompletionItemManager" /> for the specified <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView" />.
            Called on the UI thread.
            </summary>
            <param name="textView">Text view that will host the completion</param>
            <returns>Instance of <see cref="T:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.IAsyncCompletionItemManager" /> that will sort and filter <see cref="T:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.CompletionItem" />s</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.IAsyncCompletionSession">
            <summary>
            Represents a class that tracks completion within a single <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView" />.
            Constructed and managed by an instance of <see cref="T:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.IAsyncCompletionBroker" />
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.IAsyncCompletionSession.OpenOrUpdate(Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.CompletionTrigger,Microsoft.VisualStudio.Text.SnapshotPoint,System.Threading.CancellationToken)">
            <summary>
            Request completion to be opened or updated in a given location,
            the completion items to be filtered and sorted, and the UI updated.
            Must be called on UI thread. Enqueues work on a worker thread.
            </summary>
            <param name="trigger">What caused completion</param>
            <param name="triggerLocation">Location of the trigger on the subject buffer</param>
            <param name="token">Token used to cancel this and other queued operation.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.IAsyncCompletionSession.Dismiss">
            <summary>
            Stops the session and hides associated UI.
            May be called from any thread.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.IAsyncCompletionSession.ShouldCommit(System.Char,Microsoft.VisualStudio.Text.SnapshotPoint,System.Threading.CancellationToken)">
            <summary>
            Returns whether given text edit should result in committing this session.
            Since this method is on a typing hot path, it returns quickly if the <paramref name="typedChar" />
            is not found among characters collected from <see cref="P:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.IAsyncCompletionCommitManager.PotentialCommitCharacters" />
            Else, we map the top-buffer <paramref name="triggerLocation" /> to subject buffers and query
            <see cref="M:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.IAsyncCompletionCommitManager.ShouldCommitCompletion(Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.IAsyncCompletionSession,Microsoft.VisualStudio.Text.SnapshotPoint,System.Char,System.Threading.CancellationToken)" />
            to see whether any <see cref="T:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.IAsyncCompletionCommitManager" /> would like to commit completion.
            Must be called on UI thread.
            </summary>
            <remarks>This method must run on UI thread because of mapping the point across buffers.</remarks>
            <param name="typedChar">The text edit which caused this action. May be null.</param>
            <param name="triggerLocation">Location on the view's data buffer: <see cref="P:Microsoft.VisualStudio.Text.Editor.ITextView.TextBuffer" /></param>
            <param name="token">Token used to cancel this operation</param>
            <returns>Whether any <see cref="M:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.IAsyncCompletionCommitManager.ShouldCommitCompletion(Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.IAsyncCompletionSession,Microsoft.VisualStudio.Text.SnapshotPoint,System.Char,System.Threading.CancellationToken)" /> returned true</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.IAsyncCompletionSession.Commit(System.Char,System.Threading.CancellationToken)">
            <summary>
            Commits the currently selected <see cref="T:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.CompletionItem" />.
            Must be called on UI thread.
            </summary>
            <param name="typedChar">The text edit which caused this action.
            May be default(char) when commit was requested by an explcit command (e.g. hitting Tab, Enter or clicking)</param>
            <param name="token">Token used to cancel this operation</param>
            <returns>Instruction for the editor how to proceed after invoking this method</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.IAsyncCompletionSession.CommitIfUnique(System.Threading.CancellationToken)">
            <summary>
            Commits the single <see cref="T:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.CompletionItem" /> or opens the completion UI.
            Must be called on UI thread.
            </summary>
            <param name="token">Token used to cancel this operation</param>
            <returns><c>true</c> if the unique item was committed</returns>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.IAsyncCompletionSession.TextView">
            <summary>
            Returns the <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView" /> this session is active on.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.IAsyncCompletionSession.ApplicableToSpan">
            <summary>
            Gets span applicable to this completion session.
            The span is defined on the session's <see cref="P:Microsoft.VisualStudio.Text.Editor.ITextView.TextBuffer" />.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.IAsyncCompletionSession.IsDismissed">
            <summary>
            Returns whether session is dismissed.
            When session is dismissed, all work is canceled.
            </summary>
        </member>
        <member name="E:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.IAsyncCompletionSession.ItemCommitted">
            <summary>
            Raised on UI thread when completion item is committed
            </summary>
        </member>
        <member name="E:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.IAsyncCompletionSession.Dismissed">
            <summary>
            Raised on UI thread when completion session is dismissed.
            </summary>
        </member>
        <member name="E:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.IAsyncCompletionSession.ItemsUpdated">
            <summary>
            Provides elements that are visible in the UI
            Raised on worker thread when filtering and sorting of items has finished.
            There may be more updates happening immediately after this update.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.IAsyncCompletionSession.GetComputedItems(System.Threading.CancellationToken)">
            <summary>
            Gets items visible in the UI and information about selection.
            This is a blocking call. As a side effect, prevents the UI from displaying.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.IAsyncCompletionSession.CreateCompletionList``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Creates session-scoped readonly list of <see cref="T:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.CompletionItem" />s or <see cref="T:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.CompletionItemWithHighlight" />s capable of efficient storing
            of large number of items.
            </summary>
            <param name="completionItems">List of completion items.</param>
            <returns>Ssession-scoped readonly list of completion items.</returns>
            <remarks><see cref="T:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.CompletionList`1" /> instances are only valid during the lifetime of a
            pertinent <see cref="T:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.IAsyncCompletionSession" /> and should not be referenced beyond that.</remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.IAsyncCompletionSessionInternal.CancelledBlockingUIThreadComputation">
            <summary>
            Allows CommandFilterPerfTracker to exclude blocking completion delays
            that are above the default 250ms threshold.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.IAsyncCompletionSessionOperations">
            <summary>
            Exposes non-public functionality to commanding and tests
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.IAsyncCompletionSessionOperations.ApplicableToSpan">
            <summary>
            Sets span applicable to this completion session.
            The span is defined on the session's <see cref="P:Microsoft.VisualStudio.Text.Editor.ITextView.TextBuffer" />.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.IAsyncCompletionSessionOperations.IsStarted">
            <summary>
            Returns whether computation has begun.
            Computation starts after calling <see cref="M:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.IAsyncCompletionSession.OpenOrUpdate(Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.CompletionTrigger,Microsoft.VisualStudio.Text.SnapshotPoint,System.Threading.CancellationToken)" />
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.IAsyncCompletionSessionOperations.InitialTrigger">
            <summary>
            Returns the intial trigger 
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.IAsyncCompletionSessionOperations.InitialTriggerLocation">
            <summary>
            Returns the location of the initial trigger
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.IAsyncCompletionSessionOperations.SelectCompletionItem(Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.CompletionItem)">
            <summary>
            Enqueues selection a specified item. When all queued tasks are completed, the UI updates.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.IAsyncCompletionSessionOperations.SetSuggestionMode(System.Boolean)">
            <summary>
            Enqueues setting suggestion mode. When all queued tasks are completed, the UI updates.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.IAsyncCompletionSessionOperations.InvokeAndCommitIfUnique(Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.CompletionTrigger,Microsoft.VisualStudio.Text.SnapshotPoint,System.Threading.CancellationToken)">
            <summary>
            Commits unique item. If no items were computed, performs computation. If there is no unique item, shows the UI.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.IAsyncCompletionSessionOperations.CommitIfUniqueAsync(System.Threading.CancellationToken)">
            <summary>
            Starts asynchronous computation, which results in either committing of the single <see cref="T:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.CompletionItem" /> or opening the completion UI.
            Calling <see cref="M:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.IAsyncCompletionSession.OpenOrUpdate(Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.CompletionTrigger,Microsoft.VisualStudio.Text.SnapshotPoint,System.Threading.CancellationToken)" /> cancels the operation and dismisses the session.
            Must be called on the UI thread to correctly set state of the session.
            </summary>
            <param name="token">Token used to cancel this operation</param>
            <returns><c>true</c> if the unique item was committed</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.IAsyncCompletionSessionOperations.SelectDown">
            <summary>
            Enqueues selecting the next item. When all queued tasks are completed, the UI updates.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.IAsyncCompletionSessionOperations.SelectPageDown">
            <summary>
            Enqueues selecting the item on the next page. When all queued tasks are completed, the UI updates.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.IAsyncCompletionSessionOperations.SelectUp">
            <summary>
            Enqueues selecting the previous item. When all queued tasks are completed, the UI updates.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.IAsyncCompletionSessionOperations.SelectPageUp">
            <summary>
            Enqueues selecting the item on the previous page. When all queued tasks are completed, the UI updates.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.IAsyncCompletionSessionOperations2">
            <summary>
            Expands <see cref="T:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.IAsyncCompletionSessionOperations" /> with ability to Toggle Filters
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.IAsyncCompletionSessionOperations2.CanToggleFilter(System.String)">
            <summary>
            Checks if specified accessKey is togglable.
            </summary>
            <param name="accessKey">Key which toggles specific filter</param>
            <returns>true if accessKey is togglable, otherwise false</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.IAsyncCompletionSessionOperations2.ToggleFilter(System.String)">
            <summary>
            Toggles filter with specified accessKey.
            </summary>
            <param name="accessKey">Key which toggles specific filter</param>
        </member>
        <member name="E:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.IAsyncCompletionSessionOperationsInternal.CompletionUiChanged">
            <summary>
            Raised when there is a change to the Completion UI.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.IAsyncCompletionSource">
            <summary>
            Represents an object that provides <see cref="T:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.CompletionItem" />s and other information
            relevant to the completion feature at a specific <see cref="T:Microsoft.VisualStudio.Text.SnapshotSpan" />.
            </summary>
            <remarks>
            <para>
            Instances of this class should be created by <see cref="T:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.IAsyncCompletionSourceProvider" />, which is a MEF part.
            </para>
            <para>
            This object initializes <see cref="T:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.IAsyncCompletionSession" /> first through <see cref="M:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.IAsyncCompletionSource.InitializeCompletion(Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.CompletionTrigger,Microsoft.VisualStudio.Text.SnapshotPoint,System.Threading.CancellationToken)" />
            and then provides <see cref="T:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.CompletionItem" />s through <see cref="M:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.IAsyncCompletionSource.GetCompletionContextAsync(Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.IAsyncCompletionSession,Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.CompletionTrigger,Microsoft.VisualStudio.Text.SnapshotPoint,Microsoft.VisualStudio.Text.SnapshotSpan,System.Threading.CancellationToken)" />.
            </para>
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.IAsyncCompletionSource.GetCompletionContextAsync(Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.IAsyncCompletionSession,Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.CompletionTrigger,Microsoft.VisualStudio.Text.SnapshotPoint,Microsoft.VisualStudio.Text.SnapshotSpan,System.Threading.CancellationToken)">
            <summary>
            Called once per completion session to fetch the set of all completion items available at a given location.
            Called on a background thread.
            </summary>
            <param name="session">Reference to the active <see cref="T:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.IAsyncCompletionSession" /></param>
            <param name="trigger">What caused the completion</param>
            <param name="triggerLocation">Location where completion was triggered, on the subject buffer that matches this <see cref="T:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.IAsyncCompletionSource" />'s content type</param>
            <param name="applicableToSpan">Location where completion will take place, on the view's data buffer: <see cref="P:Microsoft.VisualStudio.Text.Editor.ITextView.TextBuffer" /></param>
            <param name="token">Cancellation token that may interrupt this operation</param>
            <returns>Data structure which holds completion items and hints regarding their presentation</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.IAsyncCompletionSource.GetDescriptionAsync(Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.IAsyncCompletionSession,Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.CompletionItem,System.Threading.CancellationToken)">
            <summary>
            Returns tooltip associated with provided <see cref="T:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.CompletionItem" />.
            The returned object will be rendered by <see cref="T:Microsoft.VisualStudio.Text.Adornments.IViewElementFactoryService" />. See its documentation for default supported types.
            You may export a <see cref="T:Microsoft.VisualStudio.Text.Adornments.IViewElementFactory" /> to provide a renderer for a custom type.
            Since this method is called on a background thread and on multiple platforms, an instance of UIElement may not be returned.
            </summary>
            <param name="session">Reference to the active <see cref="T:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.IAsyncCompletionSession" /></param>
            <param name="item"><see cref="T:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.CompletionItem" /> which is a subject of the tooltip</param>
            <param name="token">Cancellation token that may interrupt this operation</param>
            <returns>An object that will be passed to <see cref="T:Microsoft.VisualStudio.Text.Adornments.IViewElementFactoryService" />. See its documentation for supported types.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.IAsyncCompletionSource.InitializeCompletion(Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.CompletionTrigger,Microsoft.VisualStudio.Text.SnapshotPoint,System.Threading.CancellationToken)">
            <summary>
            Provides the span applicable to the prospective session.
            Called on UI thread and expected to return very quickly, based on syntactic clues.
            This method is called as a result of user action, after the Editor makes necessary changes in direct response to user's action.
            The state of the Editor prior to making the text edit is captured in <see cref="P:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.CompletionTrigger.ViewSnapshotBeforeTrigger" /> of <paramref name="trigger" />.
            This method is called sequentially on available <see cref="T:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.IAsyncCompletionSource" />s until one of them returns
            <see cref="T:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.CompletionStartData" /> with appropriate level of <see cref="P:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.CompletionStartData.Participation" />
            and one returns <see cref="T:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.CompletionStartData" /> with <see cref="P:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.CompletionStartData.ApplicableToSpan" />
            If neither of the above conditions are met, no completion session will start.
            </summary>
            <remarks>
            If a language service does not wish to participate in completion, it should try to provide a valid <see cref="P:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.CompletionStartData.ApplicableToSpan" />
            and set <see cref="P:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.CompletionStartData.Participation" /> to <c>false</c>.
            This will enable other extensions to provide completion in syntactically appropriate location.
            </remarks>
            <param name="trigger">What causes the completion, including the character typed and reference to <see cref="P:Microsoft.VisualStudio.Text.Editor.ITextView.TextSnapshot" /> prior to triggering the completion</param>
            <param name="triggerLocation">Location on the subject buffer that matches this <see cref="T:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.IAsyncCompletionSource" />'s content type</param>
            <param name="token">Cancellation token that may interrupt this operation</param>
            <returns>Whether this <see cref="T:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.IAsyncCompletionSource" /> wishes to participate in completion.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.IAsyncCompletionSourceProvider">
            <summary>
            Provides instances of <see cref="T:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.IAsyncCompletionSource" /> which provides <see cref="T:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.CompletionItem" />s
            and other information relevant to the completion feature at a specific <see cref="T:Microsoft.VisualStudio.Text.SnapshotPoint" />
            </summary>
            <remarks>
            This is a MEF component and should be exported with [ContentType] and [Name] attributes
            and optional [TextViewRoles] attribute.
            Completion feature will request data from all exported <see cref="T:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.IAsyncCompletionSource" />s whose ContentType
            matches content type of any buffer in the completion's trigger location.
            </remarks>
            <example>
            <code>
                [Export(typeof(IAsyncCompletionSourceProvider))]
                [Name(nameof(MyCompletionSource))]
                [ContentType("text")]
                [TextViewRole(PredefinedTextViewRoles.Editable)]
                public class MyCompletionSourceProvider : IAsyncCompletionSourceProvider
            </code>
            </example>
        </member>
        <member name="M:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.IAsyncCompletionSourceProvider.GetOrCreate(Microsoft.VisualStudio.Text.Editor.ITextView)">
            <summary>
            Creates an instance of <see cref="T:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.IAsyncCompletionSource" /> for the specified <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView" />.
            Called on the UI thread.
            </summary>
            <param name="textView">Text view that will host the completion. Completion acts on buffers of this view.</param>
            <returns>Instance of <see cref="T:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.IAsyncCompletionSource" /></returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.IAsyncCompletionUniversalSource">
            <summary>
            <para>
            Represents an object that provides <see cref="T:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.CompletionItem" />s and other information
            relevant to the completion feature at a specific <see cref="T:Microsoft.VisualStudio.Text.SnapshotPoint" />.
            </para>
            <para>
            This object provides <see cref="T:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.CompletionItem" />s without prior initialization.
            Only <see cref="M:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.IAsyncCompletionUniversalSource.GetCompletionContextAsync(Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.CompletionTrigger,Microsoft.VisualStudio.Text.SnapshotPoint,System.Threading.CancellationToken)" /> will be called.
            Methods of base interface <see cref="T:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.IAsyncCompletionSource" /> may return default results.
            </para>
            </summary>
            <remarks>
            Instances of this class should be created by <see cref="T:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.IAsyncCompletionSourceProvider" />, which is a MEF part.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.IAsyncCompletionUniversalSource.GetCompletionContextAsync(Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.CompletionTrigger,Microsoft.VisualStudio.Text.SnapshotPoint,System.Threading.CancellationToken)">
            <summary>
            Called to fetch set of all completion items available at a given location,
            without pre-existing completion session. Called on a background thread.
            </summary>
            <param name="trigger">What caused the completion</param>
            <param name="triggerLocation">Location where completion was triggered, on the subject buffer that matches this <see cref="T:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.IAsyncCompletionSource" />'s content type</param>
            <param name="token">Cancellation token that may interrupt this operation</param>
            <returns><see cref="T:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.CompletionContext" /> used to start <see cref="T:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.IAsyncCompletionSession" /> or <see cref="P:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.CompletionContext.Empty" /></returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.IAsyncCompletionUniversalSource.HandleTypedChar(Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.IAsyncCompletionSession,Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.CompletionItem,Microsoft.VisualStudio.Text.SnapshotPoint,System.Char,System.Threading.CancellationToken)">
            <summary>
            <para>
            Returns how <paramref name="typedChar" /> should influence the <paramref name="session" />,
            given <paramref name="selectedItem" /> which was supplied by this <see cref="T:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.IAsyncCompletionUniversalSource" />.
            </para>
            <para>
            Called instead of <see cref="M:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.IAsyncCompletionCommitManager.ShouldCommitCompletion(Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.IAsyncCompletionSession,Microsoft.VisualStudio.Text.SnapshotPoint,System.Char,System.Threading.CancellationToken)" />
            and instead of <see cref="M:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.IAsyncCompletionCommitManager2.HandleTypedChar(Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.IAsyncCompletionSession,Microsoft.VisualStudio.Text.SnapshotPoint,System.Char,System.Threading.CancellationToken)" /> if selected item's
            <see cref="P:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.CompletionItem.Source" /> is <see cref="T:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.IAsyncCompletionUniversalSource" />.
            </para>
            <para>
            Called on UI thread.
            </para>
            </summary>
            <param name="session">The active <see cref="T:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.IAsyncCompletionSession" /></param>
            <param name="selectedItem">The selected <see cref="T:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.CompletionItem" />, guaranteed that <see cref="P:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.CompletionItem.Source" /> is this instance of <see cref="T:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.IAsyncCompletionUniversalSource" /></param>
            <param name="location">Location in the snapshot of the view's topmost buffer. The character is not inserted into this snapshot</param>
            <param name="typedChar">Character typed by the user</param>
            <param name="token">Token used to cancel this operation</param>
            <returns>True if this character should commit the active session</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.IAsyncCompletionUniversalSource.TryCommit(Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.IAsyncCompletionSession,Microsoft.VisualStudio.Text.ITextBuffer,Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.CompletionItem,System.Char,System.Threading.CancellationToken)">
            <summary>
            <para>
            Allows the implementer of <see cref="T:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.IAsyncCompletionCommitManager" /> to customize how specified <see cref="T:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.CompletionItem" /> is committed.
            This method is called on UI thread, before the <paramref name="typedChar" /> is inserted into the buffer.
            </para>
            <para>
            In most cases, implementer does not need to commit the item. Return <see cref="F:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.CommitResult.Unhandled" /> to allow another
            <see cref="T:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.IAsyncCompletionCommitManager" /> to attempt the commit, or to invoke the default commit behavior.
            </para>
            <para>
            To perform a custom commit, replace contents of <paramref name="buffer" />
            at a location indicated by <see cref="P:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.IAsyncCompletionSession.ApplicableToSpan" />
            with text stored in <see cref="P:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.CompletionItem.InsertText" />.
            To move the caret, use <see cref="P:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.IAsyncCompletionSession.TextView" />.
            Finally, return <see cref="F:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.CommitResult.Handled" />. Use <see cref="P:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.CommitResult.Behavior" /> to influence Editor's behavior
            after invoking this method.
            </para>
            <para>
            <paramref name="typedChar" /> may be a non-printable character to denote a commit gesture other than typing.
            <c>\t</c> denotes pressing Tab key, <c>\n</c> denotes pressing Return key and <c>\0</c> denotes programmatic commit through API, Ctrl+Space gesture or double clicking an item.
            </para>
            <para>
            Called on UI thread.
            </para>
            </summary>
            <param name="session">The active <see cref="T:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.IAsyncCompletionSession" />. See <see cref="P:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.IAsyncCompletionSession.ApplicableToSpan" /> and <see cref="P:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.IAsyncCompletionSession.TextView" /></param>
            <param name="buffer">Subject buffer which matches this <see cref="T:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.IAsyncCompletionCommitManager" />'s content type</param>
            <param name="item">Which <see cref="T:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.CompletionItem" /> is to be committed</param>
            <param name="typedChar">Text change associated with this commit. <c>\t</c> denotes Tab key, <c>\n</c> denotes Return key and <c>\0</c> denotes programmatic commit</param>
            <param name="token">Token used to cancel this operation</param>
            <returns>Instruction for the editor how to proceed after invoking this method. Default is <see cref="F:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.CommitResult.Unhandled" /></returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.IAsyncExpandingCompletionSource">
            <summary>
            Represents an object that provides <see cref="T:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.CompletionItem" />s and other information
            relevant to the completion feature at a specific <see cref="T:Microsoft.VisualStudio.Text.SnapshotPoint" />.
            Additionally, this object has capability to provide additional <see cref="T:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.CompletionItem" />s
            in a reaction to user interacting with <see cref="T:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.CompletionExpander" />. If this capability
            is not necessary, then it is sufficient to implement just <see cref="T:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.IAsyncCompletionSource" />.
            </summary>
            <remarks>
            Instances of this class should be created by <see cref="T:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.IAsyncCompletionSourceProvider" />, which is a MEF part.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.IAsyncExpandingCompletionSource.GetExpandedCompletionContextAsync(Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.IAsyncCompletionSession,Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.CompletionExpander,Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.CompletionTrigger,Microsoft.VisualStudio.Text.SnapshotSpan,System.Threading.CancellationToken)">
            <summary>
            Called when user interacts with expander buttons,
            requesting the completion source to provide additional completion items pertinent to the expander button.
            For best performance, do not provide <see cref="P:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.CompletionContext.Filters" /> unless expansion should add new filters.
            Called on a background thread.
            </summary>
            <param name="session">Reference to the active <see cref="T:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.IAsyncCompletionSession" /></param>
            <param name="expander">Expander which caused this call</param>
            <param name="initialTrigger">What initially caused the completion</param>
            <param name="applicableToSpan">Location where completion will take place, on the view's data buffer: <see cref="P:Microsoft.VisualStudio.Text.Editor.ITextView.TextBuffer" /></param>
            <param name="token">Cancellation token that may interrupt this operation</param>
            <returns>A struct that holds <see cref="T:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.CompletionItem" />s and optionally <see cref="T:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.CompletionFilter" />s to merge with existing items and filters.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.ICompletionPresenter">
            <summary>
            Represents a class that manages user interface for the completion feature.
            All methods are called on UI thread.
            </summary>
            <remarks>
            Instances of this class should be created by <see cref="T:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.ICompletionPresenterProvider" />, which is a MEF part.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.ICompletionPresenter.Open(Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.IAsyncCompletionSession,Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.CompletionPresentationViewModel)">
            <summary>
            Opens the UI and displays provided data
            </summary>
            <param name="session"><see cref="T:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.IAsyncCompletionSession" /> which invoked this operation</param>
            <param name="presentation">Data to display in the UI</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.ICompletionPresenter.Update(Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.IAsyncCompletionSession,Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.CompletionPresentationViewModel)">
            <summary>
            Updates the UI with provided data
            </summary>
            <param name="session"><see cref="T:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.IAsyncCompletionSession" /> which invoked this operation</param>
            <param name="presentation">Data to display in the UI</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.ICompletionPresenter.Close">
            <summary>
            Hides the completion UI
            </summary>
        </member>
        <member name="E:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.ICompletionPresenter.FiltersChanged">
            <summary>
            Notifies of user changing the selection state of filters
            </summary>
        </member>
        <member name="E:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.ICompletionPresenter.CompletionItemSelected">
            <summary>
            Notifies of user selecting an item.
            When item is selected programmatically, firing this event may result in endless loop.
            </summary>
        </member>
        <member name="E:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.ICompletionPresenter.CommitRequested">
            <summary>
            Notifies of user committing an item for completion
            </summary>
        </member>
        <member name="E:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.ICompletionPresenter.CompletionClosed">
            <summary>
            Notifies of UI closing
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.ICompletionPresenterProvider">
            <summary>
            Represents a class that produces instances of <see cref="T:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.ICompletionPresenter" />
            </summary>
            <remarks>
            This is a MEF component and should be exported with [ContentType] and [Name] attributes
            and optional [Order] attribute.
            An instance of <see cref="T:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.ICompletionPresenterProvider" /> is selected
            first by matching ContentType with content type of the <see cref="P:Microsoft.VisualStudio.Text.Editor.ITextView.TextBuffer" />, and then by Order.
            Only one <see cref="T:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.ICompletionPresenterProvider" /> is used in a given view.
            </remarks>
            <example>
            <code>
                [Export(typeof(ICompletionPresenterProvider))]
                [Name(nameof(MyCompletionPresenterProvider))]
                [ContentType("any")]
                [TextViewRoles(PredefinedTextViewRoles.Editable)]
                [Order(Before = KnownCompletionNames.DefaultCompletionPresenter)]
                public class MyCompletionPresenterProvider : ICompletionPresenterProvider
            </code>
            </example>
        </member>
        <member name="M:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.ICompletionPresenterProvider.GetOrCreate(Microsoft.VisualStudio.Text.Editor.ITextView)">
            <summary>
            Returns instance of <see cref="T:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.ICompletionPresenter" /> that will host completion for given <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView" />.
            Called on the UI thread.
            </summary>
            <remarks>It is encouraged to reuse the UI over creating new UI each time this method is called.</remarks>
            <param name="textView">Text view that will host the completion. Completion acts on buffers of this view.</param>
            <returns>Instance of <see cref="T:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.ICompletionPresenter" /></returns>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.ICompletionPresenterProvider.Options">
            <summary>
            Contains additional properties of thie <see cref="T:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.ICompletionPresenter" /> that may be accessed
            prior to initializing an instance of <see cref="T:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.ICompletionPresenter" />
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.ISelectedItemProvider">
            <summary>
            Indicates that the object is capable of returning a <see cref="T:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.CompletionItem" />
            which is currently or has been recently selected.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.ISelectedItemProvider.GetSelectedItemAsync(Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.GetSelectedItemOptions,System.Threading.CancellationToken)">
            <summary>
            <para>
            Gets currently selected <see cref="T:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.CompletionItem" /> in accordance with <see cref="T:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.GetSelectedItemOptions" />.
            Supplied <paramref name="options" /> indicates the ration between wait length and accuracy of returned <see cref="T:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.CompletionItem" />:
            The shorter wait comes with a tradeoff of receiving a potentially stale item or no item.
            </para>
            <para>
            Passing <see cref="F:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.GetSelectedItemOptions.GetLastAvailableItem" /> leads to returning:
            Currently selected <see cref="T:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.CompletionItem" /> when completion is not changing;
            Currently selected <see cref="T:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.CompletionItem" /> when completion is reacting to user's input;
            <c>null</c> when completion user interface has not appeared yet.
            This is the fastest operation and does not yield current thread.
            </para>
            <para>
            Passing <see cref="F:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.GetSelectedItemOptions.WaitForComputation" /> leads to returning:
            Currently selected <see cref="T:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.CompletionItem" /> when completion is not changing;
            <see cref="T:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.CompletionItem" /> which is going to be selected after reacting to user's input,
            if completion user interface is already visible;
            <c>null</c> when completion user interface has not appeared yet.
            This accommodates for selection after user types and scrolls with arrow keys,
            and may yield current thread for a short period of time.
            </para>
            <para>
            Passing <see cref="F:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.GetSelectedItemOptions.WaitForContextAndComputation" /> leads to returning:
            Currently selected <see cref="T:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.CompletionItem" /> when completion is not changing;
            <see cref="T:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.CompletionItem" /> which is going to be selected after receiving items from
            the providers, sorting them, and reacting to outstanding user's input.
            This yields current thread until completion items are received and selected item is calculated.
            </para>
            </summary>
            <param name="options">Indicates the ratio between wait length and accuracy of returned <see cref="T:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.CompletionItem" /></param>
            <param name="cancel">Token for cancelling this request</param>
            <returns>Currently selected <see cref="T:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.CompletionItem" /> or <c>null</c></returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.PredefinedCompletionNames">
            <summary>
            Provides names used by the Async Completion feature.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.PredefinedCompletionNames.DefaultCompletionItemManager">
            <summary>
            Name of the default <see cref="T:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.IAsyncCompletionItemManagerProvider" />. Use to order your MEF part.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.PredefinedCompletionNames.DefaultCompletionPresenter">
            <summary>
            Name of the default <see cref="T:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.ICompletionPresenterProvider" />. Use to order your MEF part.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.PredefinedCompletionNames.CompletionCommandHandler">
            <summary>
            Name of the completion's <see cref="T:Microsoft.VisualStudio.Commanding.ICommandHandler" />. Use to order your MEF part.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.PredefinedCompletionNames.NonBlockingCompletionOptionName">
            <summary>
            Name of the editor option that stores user's preference for dismissing completion rather than blocking for potentially long running tasks.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.PredefinedCompletionNames.SuggestionModeInCompletionOptionName">
            <summary>
            Name of the editor option that stores instantenous completion mode in an open Editor.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.PredefinedCompletionNames.SuggestionModeInDebuggerCompletionOptionName">
            <summary>
            Name of the editor option that stores user's preference for the completion mode during debugging.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.PredefinedCompletionNames.DefaultCompletionExpander">
            <summary>
            Order your MEF part of type <see cref="T:Microsoft.VisualStudio.Language.Intellisense.AsyncCompletion.Data.CompletionFilter" /> relatively to this name,
            so that it tends to be the default expander (order before this name) or not be the default expander (order after this name).
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Language.Intellisense.CodeElementKinds">
            <summary>
            Represents the kind of code elements in a document.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Language.Intellisense.CodeElementKinds.Unspecified">
            <summary>
            Unspecified kind.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Language.Intellisense.CodeElementKinds.Invalid">
            <summary>
            Invalid kind.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Language.Intellisense.CodeElementKinds.Container">
            <summary>
            Kind is a type container.
            </summary>
            <remarks>
            A type container can be any of <see cref="F:Microsoft.VisualStudio.Language.Intellisense.CodeElementKinds.File" />, <see cref="F:Microsoft.VisualStudio.Language.Intellisense.CodeElementKinds.Module" />, <see cref="F:Microsoft.VisualStudio.Language.Intellisense.CodeElementKinds.Package" />, or <see cref="F:Microsoft.VisualStudio.Language.Intellisense.CodeElementKinds.Namespace" />.
            Code should use one of the concrete values if needed.
            </remarks>
        </member>
        <member name="F:Microsoft.VisualStudio.Language.Intellisense.CodeElementKinds.File">
            <summary>
            Kind is a file.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Language.Intellisense.CodeElementKinds.Module">
            <summary>
            Kind is a module.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Language.Intellisense.CodeElementKinds.Package">
            <summary>
            Kind is a package.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Language.Intellisense.CodeElementKinds.Namespace">
            <summary>
            Kind is a namespace.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Language.Intellisense.CodeElementKinds.Type">
            <summary>
            Kind is a type (<see cref="F:Microsoft.VisualStudio.Language.Intellisense.CodeElementKinds.Class" />, <see cref="F:Microsoft.VisualStudio.Language.Intellisense.CodeElementKinds.Interface" />, <see cref="F:Microsoft.VisualStudio.Language.Intellisense.CodeElementKinds.Struct" />, or <see cref="F:Microsoft.VisualStudio.Language.Intellisense.CodeElementKinds.Enum" />).
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Language.Intellisense.CodeElementKinds.Class">
            <summary>
            Kind is a class.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Language.Intellisense.CodeElementKinds.Interface">
            <summary>
            Kind is an interface.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Language.Intellisense.CodeElementKinds.Struct">
            <summary>
            Kind is a struct.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Language.Intellisense.CodeElementKinds.Enum">
            <summary>
            Kind is an enum.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Language.Intellisense.CodeElementKinds.Member">
            <summary>
            Kind is a type member.
            </summary>
            <remarks>
            A <see cref="F:Microsoft.VisualStudio.Language.Intellisense.CodeElementKinds.Member" /> kind can be any of
            <see cref="F:Microsoft.VisualStudio.Language.Intellisense.CodeElementKinds.Method" />
            <see cref="F:Microsoft.VisualStudio.Language.Intellisense.CodeElementKinds.Property" />
            <see cref="F:Microsoft.VisualStudio.Language.Intellisense.CodeElementKinds.Event" />
            <see cref="F:Microsoft.VisualStudio.Language.Intellisense.CodeElementKinds.Field" />
            <see cref="F:Microsoft.VisualStudio.Language.Intellisense.CodeElementKinds.Constructor" />
            <see cref="F:Microsoft.VisualStudio.Language.Intellisense.CodeElementKinds.Function" />
            </remarks>
        </member>
        <member name="F:Microsoft.VisualStudio.Language.Intellisense.CodeElementKinds.Method">
            <summary>
            Kind is a method.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Language.Intellisense.CodeElementKinds.Property">
            <summary>
            Kind is a property.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Language.Intellisense.CodeElementKinds.Event">
            <summary>
            Kind is an event.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Language.Intellisense.CodeElementKinds.Field">
            <summary>
            Kind is a field.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Language.Intellisense.CodeElementKinds.Constructor">
            <summary>
            Kind is a constructor.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Language.Intellisense.CodeElementKinds.Function">
            <summary>
            Kind is a function.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Language.Intellisense.DefaultLanguageOptions">
            <summary>
            Defines options for language specific features.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Language.Intellisense.DefaultLanguageOptions.ShowQuickInfoOnMouseHoverName">
            <summary>
            Name for the editor option that enables or disables the quick info tooltips.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Language.Intellisense.DefaultLanguageOptions.ShowQuickInfoOnMouseHoverId">
            <summary>
            Key for the editor option that enables or disables the quick info tooltips.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Language.Intellisense.DefaultLanguageOptions.ShowCompletionOnTypeCharName">
            <summary>
            Name for the editor option that enables or disables the autocompletion as the user types.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Language.Intellisense.DefaultLanguageOptions.ShowCompletionOnTypeCharId">
            <summary>
            Key for the editor option that enables or disables the autocompletion as the user types.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Language.Intellisense.IAsyncQuickInfoBroker">
            <summary>
            Controls invocation and dismissal of Quick Info tooltips for <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView" /> instances.
            </summary>
            <remarks>
            This type can be called from any thread and will marshal its work to the UI thread as required.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Language.Intellisense.IAsyncQuickInfoBroker.IsQuickInfoActive(Microsoft.VisualStudio.Text.Editor.ITextView)">
            <summary>
            Determines whether there is at least one active Quick Info session in the specified <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView" />.
            </summary>
            <remarks>
            Quick info is considered to be active if there is a visible, calculating, or recalculating quick info session.
            </remarks>
            <param name="textView">The <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView" /> for which Quick Info session status is to be determined.</param>
            <returns>
            <c>true</c> if there is at least one active or calculating Quick Info session over the specified <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView" />, <c>false</c>
            otherwise.
            </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Language.Intellisense.IAsyncQuickInfoBroker.TriggerQuickInfoAsync(Microsoft.VisualStudio.Text.Editor.ITextView,Microsoft.VisualStudio.Text.ITrackingPoint,Microsoft.VisualStudio.Language.Intellisense.QuickInfoSessionOptions,System.Threading.CancellationToken)">
            <summary>
            Triggers Quick Info tooltip in the specified <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView" /> at the caret or optional <paramref name="triggerPoint" />.
            </summary>
            <exception cref="T:System.OperationCanceledException">
            <paramref name="cancellationToken" /> was canceled by the caller or the operation was interrupted by another call to
            <see cref="M:Microsoft.VisualStudio.Language.Intellisense.IAsyncQuickInfoBroker.TriggerQuickInfoAsync(Microsoft.VisualStudio.Text.Editor.ITextView,Microsoft.VisualStudio.Text.ITrackingPoint,Microsoft.VisualStudio.Language.Intellisense.QuickInfoSessionOptions,System.Threading.CancellationToken)" />
            </exception>
            <param name="cancellationToken">If canceled before the method returns, cancels any computations in progress.</param>
            <param name="textView">
            The <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView" /> for which Quick Info is to be triggered.
            </param>
            <param name="triggerPoint">
            The <see cref="T:Microsoft.VisualStudio.Text.ITrackingPoint" /> in the view's text buffer at which Quick Info should be triggered.
            </param>
            <param name="options">Options for customizing Quick Info behavior.</param>
            <returns>
            An <see cref="T:Microsoft.VisualStudio.Language.Intellisense.IAsyncQuickInfoSession" /> tracking the state of the session or null if there are no items.
            </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Language.Intellisense.IAsyncQuickInfoBroker.GetQuickInfoItemsAsync(Microsoft.VisualStudio.Text.Editor.ITextView,Microsoft.VisualStudio.Text.ITrackingPoint,System.Threading.CancellationToken)">
            <summary>
            Gets Quick Info items for the <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView" /> at the <paramref name="triggerPoint" />.
            </summary>
            <exception cref="T:System.OperationCanceledException">
            <paramref name="cancellationToken" /> was canceled by the caller.
            </exception>
            <exception cref="T:System.AggregateException">
            One or more errors occured during query of quick info items sources.
            </exception>
            <param name="textView">
            The <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView" /> for which Quick Info is to be triggered.
            </param>
            <param name="triggerPoint">
            The <see cref="T:Microsoft.VisualStudio.Text.ITrackingPoint" /> in the view's text buffer at which Quick Info should be triggered.
            </param>
            <param name="cancellationToken">If canceled before the method returns, cancels any computations in progress.</param>
            <returns>
            A series of Quick Info items and a span for which they are applicable.
            </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Language.Intellisense.IAsyncQuickInfoBroker.GetSession(Microsoft.VisualStudio.Text.Editor.ITextView)">
            <summary>
            Gets the current <see cref="T:Microsoft.VisualStudio.Language.Intellisense.IAsyncQuickInfoSession" /> for the <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView" />.
            </summary>
            <remarks>
            Quick info is considered to be active if there is a visible, calculating, or recalculating quick info session.
            </remarks>
            <param name="textView">The <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView" /> for which to lookup the session.</param>
            <returns>The session, or <c>null</c> if there is no active session.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Language.Intellisense.IAsyncQuickInfoSession">
            <summary>
            Tracks state of a visible or calculating Quick Info session.
            </summary>
        </member>
        <member name="E:Microsoft.VisualStudio.Language.Intellisense.IAsyncQuickInfoSession.StateChanged">
            <summary>
            Dispatched on the UI thread whenever the Quick Info Session changes state.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.Intellisense.IAsyncQuickInfoSession.ApplicableToSpan">
            <summary>
            The span of text to which this Quick Info session applies.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.Intellisense.IAsyncQuickInfoSession.Content">
            <summary>
            The ordered, merged collection of content to be displayed in the Quick Info.
            </summary>
            <remarks>
            This field is originally null and is updated with the content once the session has
            finished querying the providers.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.Intellisense.IAsyncQuickInfoSession.HasInteractiveContent">
            <summary>
            Indicates that this Quick Info has interactive content that can request to stay open.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.Intellisense.IAsyncQuickInfoSession.Options">
            <summary>
            Specifies attributes of the Quick Info session and Quick Info session presentation.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.Intellisense.IAsyncQuickInfoSession.State">
            <summary>
            The current state of the Quick Info session.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.Intellisense.IAsyncQuickInfoSession.TextView">
            <summary>
            The <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView" /> for which this Quick Info session was created.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Language.Intellisense.IAsyncQuickInfoSession.GetTriggerPoint(Microsoft.VisualStudio.Text.ITextBuffer)">
            <summary>
            Gets the point at which the Quick Info tip was triggered in the <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView" />.
            </summary>
            <remarks>
            Returned <see cref="T:Microsoft.VisualStudio.Text.ITrackingPoint" /> is on the buffer requested by the caller.
            </remarks>
            <param name="textBuffer">The <see cref="T:Microsoft.VisualStudio.Text.ITextBuffer" /> relative to which to obtain the point.</param>
            <returns>A <see cref="T:Microsoft.VisualStudio.Text.ITrackingPoint" /> indicating the point over which Quick Info was invoked.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Language.Intellisense.IAsyncQuickInfoSession.GetTriggerPoint(Microsoft.VisualStudio.Text.ITextSnapshot)">
            <summary>
            Gets the point at which the Quick Info tip was triggered in the <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView" />.
            </summary>
            <remarks>
            Returned point is on the buffer requested by the caller.
            </remarks>
            <param name="snapshot">The <see cref="T:Microsoft.VisualStudio.Text.ITextSnapshot" /> relative to which to obtain the point.</param>
            <returns>The point over which Quick Info was invoked or <c>null</c> if it does not exist in <paramref name="snapshot" />.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Language.Intellisense.IAsyncQuickInfoSession.DismissAsync">
            <summary>
            Dismisses the Quick Info session, if applicable. If the session is already dismissed,
            this method no-ops.
            </summary>
            <returns>A task tracking the completion of the operation.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Language.Intellisense.IAsyncQuickInfoSource">
            <summary>
            Source of Quick Info tooltip content item, proffered to the IDE by a <see cref="T:Microsoft.VisualStudio.Language.Intellisense.IAsyncQuickInfoSourceProvider" />.
            </summary>
            <remarks>
            This class is always constructed and disposed on the UI thread and called on
            a non-UI thread. Callers that require the UI thread must explicitly marshal there with
            <see cref="M:Microsoft.VisualStudio.Threading.JoinableTaskFactory.SwitchToMainThreadAsync(System.Threading.CancellationToken)" />.
            Content objects are resolved into UI constructs via the <see cref="T:Microsoft.VisualStudio.Text.Adornments.IViewElementFactoryService" />.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Language.Intellisense.IAsyncQuickInfoSource.GetQuickInfoItemAsync(Microsoft.VisualStudio.Language.Intellisense.IAsyncQuickInfoSession,System.Threading.CancellationToken)">
            <summary>
            Gets Quick Info item and tracking span via a <see cref="T:Microsoft.VisualStudio.Language.Intellisense.QuickInfoItem" />.
            </summary>
            <remarks>
            This method is always called on a background thread. Multiple elements can be
            be returned by a single source by wrapping them in a <see cref="T:Microsoft.VisualStudio.Text.Adornments.ContainerElement" />.
            </remarks>
            <param name="session">An object tracking the current state of the Quick Info.</param>
            <param name="cancellationToken">Cancels an in-progress computation.</param>
            <returns>item and a tracking span for which these item are applicable.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Language.Intellisense.IAsyncQuickInfoSourceProvider">
            <summary>
            A MEF component part that is proffered to the IDE to construct an <see cref="T:Microsoft.VisualStudio.Language.Intellisense.IAsyncQuickInfoSource" />.
            </summary>
            <remarks>
            This class is always constructed and called on the UI thread.
            </remarks>
            <example>
            <code>
            [Export(typeof(IAsyncQuickInfoSourceProvider))]
            [Name("Foo QuickInfo Provider")]
            [Order(After = "default")]
            [ContentType("text")]
            </code>
            </example>
        </member>
        <member name="M:Microsoft.VisualStudio.Language.Intellisense.IAsyncQuickInfoSourceProvider.TryCreateQuickInfoSource(Microsoft.VisualStudio.Text.ITextBuffer)">
            <summary>
            Creates an <see cref="T:Microsoft.VisualStudio.Language.Intellisense.IAsyncQuickInfoSource" /> for the specified <see cref="T:Microsoft.VisualStudio.Text.ITextBuffer" />.
            </summary>
            <param name="textBuffer">The <see cref="T:Microsoft.VisualStudio.Text.ITextBuffer" /> for which this source produces items.</param>
            <returns>
            An instance of <see cref="T:Microsoft.VisualStudio.Language.Intellisense.IAsyncQuickInfoSource" /> for <paramref name="textBuffer" />
            or null if no source could be created.
            </returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Language.Intellisense.IInteractiveQuickInfoContent">
            <summary>
            Represents an interactive Quick Info content. This interface can be used to add an interactive content such as hyperlinks to
            the Quick Info popup.
            If any object implementing this interface is provided to
            <see cref="T:Microsoft.VisualStudio.Language.Intellisense.IAsyncQuickInfoSource" /> via <see cref="M:Microsoft.VisualStudio.Language.Intellisense.IAsyncQuickInfoSource.GetQuickInfoItemAsync(Microsoft.VisualStudio.Language.Intellisense.IAsyncQuickInfoSession,System.Threading.CancellationToken)" />,
            the Quick Info presenter will allow to interact with this content, particulartly it will keep Quick Info popup open when mouse 
            is over it and will allow this content to recieve mouse events.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.Intellisense.IInteractiveQuickInfoContent.KeepQuickInfoOpen">
            <summary>
            Gets whether the interactive Quick Info content wants to keep current Quick Info session open. Until this property is true, 
            the <see cref="T:Microsoft.VisualStudio.Language.Intellisense.IAsyncQuickInfoSession" /> containing this content won't be dismissed even if mouse is moved somewhere else.
            This is useful in very rare scenarios when an interactive Quick Info content handles all input interaction, while needs to 
            keep this <see cref="T:Microsoft.VisualStudio.Language.Intellisense.IAsyncQuickInfoSession" /> open (the only known example so far is LightBulb in its expanded state hosted in 
            Quick Info).
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.Intellisense.IInteractiveQuickInfoContent.IsMouseOverAggregated">
            <summary>
            Gets a value indicating whether the mouse pointer is located over this interactive Quick Info content, 
            including any parts that are out of the Quick Info visual tree (such as popups).
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Language.Intellisense.QuickInfoItem">
            <summary>
            The result generated by an <see cref="T:Microsoft.VisualStudio.Language.Intellisense.IAsyncQuickInfoSource" />.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Language.Intellisense.QuickInfoItem.#ctor(Microsoft.VisualStudio.Text.ITrackingSpan,System.Object)">
            <summary>
            Constructs a new instance of <see cref="T:Microsoft.VisualStudio.Language.Intellisense.QuickInfoItem" />.
            </summary>
            <exception cref="T:System.ArgumentNullException">Thrown if item is null.</exception>
            <param name="applicableToSpan">The span to which <paramref name="item" /> is applicable.</param>
            <param name="item">The Quick Info item.</param>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.Intellisense.QuickInfoItem.ApplicableToSpan">
            <summary>
            The <see cref="T:Microsoft.VisualStudio.Text.ITrackingSpan" /> to which <see cref="P:Microsoft.VisualStudio.Language.Intellisense.QuickInfoItem.Item" /> is applicable.
            </summary>
            <remarks>
            This parameter can be null.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.Intellisense.QuickInfoItem.Item">
            <summary>
            The item to be displayed in the Quick Info <see cref="T:Microsoft.VisualStudio.Text.Adornments.IToolTipPresenter" />.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Language.Intellisense.QuickInfoItemsCollection">
            <summary>
            An immutable collection of Quick Info items and the span to which they are applicable.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.Intellisense.QuickInfoItemsCollection.Items">
            <summary>
            The collection of Quick Info items.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.Intellisense.QuickInfoItemsCollection.ApplicableToSpan">
            <summary>
            The span to which the Quick Info items apply.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Language.Intellisense.QuickInfoItemsCollection.#ctor(System.Collections.Generic.IEnumerable{System.Object},Microsoft.VisualStudio.Text.ITrackingSpan)">
            <summary>
            Creates a new <see cref="T:Microsoft.VisualStudio.Language.Intellisense.QuickInfoItemsCollection" />.
            </summary>
            <param name="items">The Quick Info items.</param>
            <param name="applicableToSpan">The span to which the items are applicable.</param>
        </member>
        <member name="T:Microsoft.VisualStudio.Language.Intellisense.QuickInfoSessionOptions">
            <summary>
            Options for customization of Quick Info behavior.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Language.Intellisense.QuickInfoSessionOptions.None">
            <summary>
            No options.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Language.Intellisense.QuickInfoSessionOptions.TrackMouse">
            <summary>
            Dismisses Quick Info when the mouse moves away.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Language.Intellisense.QuickInfoSessionState">
            <summary>
            Defines the possible <see cref="T:Microsoft.VisualStudio.Language.Intellisense.IAsyncQuickInfoSession" /> states.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Language.Intellisense.QuickInfoSessionState.Created">
            <summary>
            Session has been created but is not yet active.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Language.Intellisense.QuickInfoSessionState.Calculating">
            <summary>
            Session is currently computing Quick Info content.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Language.Intellisense.QuickInfoSessionState.Dismissed">
            <summary>
            Session has been dismissed and is no longer active.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Language.Intellisense.QuickInfoSessionState.Visible">
            <summary>
            Computation is complete and session is visible.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Language.Intellisense.QuickInfoSessionStateChangedEventArgs">
            <summary>
            Arguments for the <see cref="E:Microsoft.VisualStudio.Language.Intellisense.IAsyncQuickInfoSession.StateChanged" /> event.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Language.Intellisense.QuickInfoSessionStateChangedEventArgs.#ctor(Microsoft.VisualStudio.Language.Intellisense.QuickInfoSessionState,Microsoft.VisualStudio.Language.Intellisense.QuickInfoSessionState)">
            <summary>
            Creates a new instance of <see cref="T:Microsoft.VisualStudio.Language.Intellisense.QuickInfoSessionStateChangedEventArgs" />.
            </summary>
            <param name="oldState">The state before the transition.</param>
            <param name="newState">The state after the transition.</param>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.Intellisense.QuickInfoSessionStateChangedEventArgs.OldState">
            <summary>
            The state before the transition.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.Intellisense.QuickInfoSessionStateChangedEventArgs.NewState">
            <summary>
            The state after the transition.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.CodeCleanUp.CodeCleanUpProfile.Identifier">
            <summary>
            Identifier, this may be different from the name in the case where the name is localized
            since this may be a well known name of a build in profile vs a user entered profile.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.CodeCleanUp.CodeCleanUpProfile.LocalizedName">
            <summary>
            Name of the profile either a localized built in profile, or a user entered value
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.CodeCleanUp.CodeCleanUpProfile.EnabledFixes">
            <summary>
            Set of enabled fixes.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Language.CodeCleanUp.ConfigurationKeyAttribute">
            <summary>
            Associates a configuration key with a fixer code part.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Language.CodeCleanUp.ConfigurationKeyAttribute.#ctor(System.String)">
            <summary>
            Constructs a new instance of the attribute.
            </summary>
            <param name="configurationKey">Fixer configuration key</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="configurationKey" /> is null.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="configurationKey" /> is an empty string.</exception>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.CodeCleanUp.ConfigurationKeyAttribute.ConfigurationKey">
            <summary>
            The configuration key
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Language.CodeCleanUp.FixIdAttribute">
            <summary>
            Associates an identifying code with a fixer code part.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Language.CodeCleanUp.FixIdAttribute.#ctor(System.String)">
            <summary>
            Constructs a new instance of the attribute.
            </summary>
            <param name="fixId">The fix id</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="fixId" /> is null.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="fixId" /> is an empty string.</exception>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.CodeCleanUp.FixIdAttribute.FixId">
            <summary>
            The fixer Id
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Language.CodeCleanUp.FixIdContainer">
            <summary>
            A container of fix information.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Language.CodeCleanUp.FixIdContainer.#ctor(System.Collections.Generic.IEnumerable{Microsoft.VisualStudio.Language.CodeCleanUp.IFixInformation})">
            <summary>
            Constructor
            </summary>
            <param name="fixes">Set of fixes to be part of the continer. This is normally a set of enabled fixes.</param>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.CodeCleanUp.FixIdContainer.Fixes">
            <summary>
            Array of fixes contained within the container.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Language.CodeCleanUp.FixIdContainer.IsFixIdEnabled(System.String)">
            <summary>
            Determine if a given fixId is enabled based on the set of fixes in the container.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Language.CodeCleanUp.FixIdDefinition">
            <summary>
            Defines a definition for a fix id.
            </summary>
            <remarks>
            This is a MEF component part, and should be exported with the following attributes:
            <code>
             [Export]
             [Name("Unique name") (required)
             [FixId("ABC123"] (required)
             [ConfigurationKey("cs_configurationKey")]  (required)
             [LocalizedName]  (required)
             [ContentType]    (required)
             [Order] (optional)
             [HelpLink("https://www.microsoft.com")]  (optional)
             [EnableByDefault(true)]   (optional) 
            </code>
            </remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.Language.CodeCleanUp.HelpLinkAttribute">
            <summary>
            Associates an help URI with a fixer code part.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Language.CodeCleanUp.HelpLinkAttribute.#ctor(System.String)">
            <summary>
            Constructs a new instance of the attribute.
            </summary>
            <param name="helpLink">The fixer help uri</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="helpLink" /> is null.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="helpLink" /> is an empty string.</exception>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.CodeCleanUp.HelpLinkAttribute.HelpLink">
            <summary>
            The fixer help link
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Language.CodeCleanUp.ICodeCleanUpBroker">
            <summary>
            Get by importing
            [Import]
            private ICodeCleanUpBroker codeCleanUpBroker;
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Language.CodeCleanUp.ICodeCleanUpBroker.IsCodeCleanupSupported(Microsoft.VisualStudio.Text.Editor.ITextView)">
            <summary>
            Determines if code cleanup is supported on a given <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView" />.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Language.CodeCleanUp.ICodeCleanUpBroker.GetCodeCleanupFixers(Microsoft.VisualStudio.Text.Editor.ITextView)">
            <summary>
            Gets fixers for a given <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView" />.
            </summary>
            NOTE: If this ever becomes public API replace tuples with something strongly typed.
        </member>
        <member name="M:Microsoft.VisualStudio.Language.CodeCleanUp.ICodeCleanUpBroker.GetSupportedFixerProviders(System.Func{System.String,System.Boolean})">
            <summary>
            Gets a set of supported fixer providers based on a function that can determine if the provider matches a project capability.
            If null is passed in then all registered fixers will be passed in.
            </summary>
            <param name="projectCapabilityPredicate">Function which will return tru if the passed in project capability string is supported false otherwise.</param>
        </member>
        <member name="T:Microsoft.VisualStudio.Language.CodeCleanUp.ICodeCleanUpExecutionContext">
            <summary>
            Represents an execution context for fixers setup by the command handling system
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.CodeCleanUp.ICodeCleanUpExecutionContext.OperationContext">
            <summary>
            Gets a context of executing potentially long running operation on the UI thread, which
            enables shared two way cancellability and wait indication
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.CodeCleanUp.ICodeCleanUpExecutionContext.EnabledFixIds">
            <summary>
            Gets fix identifiers which are enabled
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Language.CodeCleanUp.ICodeCleanUpFixer">
            <summary>
            Fixer that can fix issues to clean up code
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Language.CodeCleanUp.ICodeCleanUpFixer.FixAsync(Microsoft.VisualStudio.Language.CodeCleanUp.ICodeCleanUpScope,Microsoft.VisualStudio.Language.CodeCleanUp.ICodeCleanUpExecutionContext)">
            <summary>
            Fix issues in the files identified by the scope.
            Cancellation should be checked against the context.OperationContext.UserCancellationToken
            </summary>
            <param name="scope">Context to fix issues within</param>
            <param name="context">Execution context which contains what the fixer should be applied to. And an OperationContext to provide progress and cancellation</param>
            <returns>bool if the fixer succeeded false otherwise</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Language.CodeCleanUp.ICodeCleanUpFixerProvider">
            <summary>
            A provider which can create and return a set of fixers to clean up code
            </summary>
            <example>
            <code>
            [Export]
            [ContentType(any)]   (required) ContentTypes which the provider can create fixers for
            [AppliesTo(CSharp)] (optional) Project capability expression which can be used to filter providers based on the projects they apply to
            </code>
            </example>
        </member>
        <member name="M:Microsoft.VisualStudio.Language.CodeCleanUp.ICodeCleanUpFixerProvider.GetFixers">
            <summary>
            Create or return fixers which are able to handle contexts which are not
            represented by a content type. For example  IVsHierarchy and ItemId
            </summary>
            <returns>A set of fixers or empty</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Language.CodeCleanUp.ICodeCleanUpFixerProvider.GetFixers(Microsoft.VisualStudio.Utilities.IContentType)">
            <summary>
            Create or return fixer instances which are able to operate on the passed in content type
            </summary>
            <param name="contentType">Content type fixer can operate on</param>
            <returns>A set of fixers of empty</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Language.CodeCleanUp.ICodeCleanUpFixerRegistrationService">
            <summary>
            Service to register, unregister, and enumerate available code clean up fixers.
            The methods and properties on this class are thread safe.
            </summary>
            <example>
            This MEF component should be imported as
            <code>
            [Import]
            private ICodeCleanUpFixerRegistrationService FixerRegistrationService;
            </code>
            </example>
        </member>
        <member name="M:Microsoft.VisualStudio.Language.CodeCleanUp.ICodeCleanUpFixerRegistrationService.TryRegisterFixerProvider(Microsoft.VisualStudio.Language.CodeCleanUp.ICodeCleanUpFixerProvider)">
            <summary>
            Register a fixer provider which can participate in code cleanup.
            If the same instance of the provider is registered again only one instance will be kept
            Fixer providers should be registered when the language service or extension is initialzed
            </summary>
            <param name="fixerProvider">Instance which will be called to invoke the fixer</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Language.CodeCleanUp.ICodeCleanUpFixerRegistrationService.TryUnRegisterFixerProvider(Microsoft.VisualStudio.Language.CodeCleanUp.ICodeCleanUpFixerProvider)">
            <summary>
            Unregister a fixer provider
            Fixer providers should be unregistered when the language service or extension is disposed
            </summary>
            <param name="fixerProvider">Instance to un-register</param>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.CodeCleanUp.ICodeCleanUpFixerRegistrationService.RegisteredFixerProviders">
            <summary>
            Gets a snapshot of the current set of registered fixer providers
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.CodeCleanUp.ICodeCleanUpFixerRegistrationService.AllFixIds">
            <summary>
            Gets the set of all fix ids
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Language.CodeCleanUp.ICodeCleanUpProfileService">
            <summary>
            Get by importing
            [Import]
            private ICodeCleanUpProfileService CodeCleanupProfileService
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Language.CodeCleanUp.ICodeCleanUpProfileService.GetProfiles">
            <summary>
            Get a set of profiles
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Language.CodeCleanUp.ICodeCleanUpProfileService.GetDefaultProfile">
            <summary>
            Gets the default profile
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Language.CodeCleanUp.ICodeCleanUpProfileService.SaveProfile(Microsoft.VisualStudio.Language.CodeCleanUp.CodeCleanUpProfile)">
            <summary>
            Save the profile to storage
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Language.CodeCleanUp.ICodeCleanUpProfileService.GetProfileNames">
            <summary>
             Gets a set of profile names
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.CodeCleanUp.ICodeCleanUpProfileService.AllFixIds">
            <summary>
            Gets the set of all fix identifiers
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Language.CodeCleanUp.ICodeCleanUpScope">
            <summary>
            Context to indicate to code clean up fixers what they need to fix.
            The concrete implementations will have the specific context such as a file, or IVSHierarchy available
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Language.CodeCleanUp.IFixInformation">
            <summary>
            Provides information about a code fix 
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.CodeCleanUp.IFixInformation.FixerId">
            <summary>
            Fixer Id for example "IDE001"
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.CodeCleanUp.IFixInformation.ConfigurationKey">
            <summary>
            Configuration name used for setting modification
            Example:ConfigKeyName: CS_Remove_Unused_Usings
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.CodeCleanUp.IFixInformation.HelpLink">
            <summary>
            Optional help link to provide more information about the fixer code
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.CodeCleanUp.IFixInformation.LocalizedDisplayName">
            <summary>
            Localized display name
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.CodeCleanUp.IFixInformation.EnableByDefault">
            <summary>
            Should this fix be enabled when initially seeding built in profiles
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.CodeCleanUp.IFixInformation.ContentTypes">
            <summary>
            Which content types does the fixer supports
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Language.CodeCleanUp.TextBufferCodeCleanUpScope">
            <summary>
            Context for a text buffer
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.CodeCleanUp.TextBufferCodeCleanUpScope.SubjectBuffer">
            <summary>
            Gets the text buffer to apply code clean up change to.
            Note, this is a live buffer rather than a snapshot.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Language.CodeLens.CodeLensDescriptorContext">
            <summary>
            Contains dynamic context (such as span) of a code element at the location where an <see cref="T:Microsoft.VisualStudio.Language.CodeLens.ICodeLensTag" /> will be created,
            in addition to immutable <see cref="T:Microsoft.VisualStudio.Language.CodeLens.ICodeLensDescriptor" />.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Language.CodeLens.CodeLensDescriptorContext.#ctor(System.Nullable{Microsoft.VisualStudio.Text.Span},System.Collections.Generic.IDictionary{System.Object,System.Object})">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.VisualStudio.Language.CodeLens.CodeLensDescriptorContext" /> class.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.CodeLens.CodeLensDescriptorContext.ApplicableSpan">
            <summary>
            The <see cref="T:Microsoft.VisualStudio.Text.Span" /> of the code element.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.CodeLens.CodeLensDescriptorContext.Properties">
            <summary>
            A property bag for any additional dynamic properties a CodeLens tagger might want to provide.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Language.CodeLens.CodeLensTagProperties">
            <summary>
            Properties of <see cref="T:Microsoft.VisualStudio.Language.CodeLens.ICodeLensTag3" />.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Language.CodeLens.CodeLensTagProperties.#ctor(System.Boolean)">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.VisualStudio.Language.CodeLens.CodeLensTagProperties" />.
            </summary>
            <param name="displayBeforeCreatingDataPoints">Defines whether this tag should be displayed before creating data points.</param>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.CodeLens.CodeLensTagProperties.DisplayBeforeCreatingDataPoints">
            <summary>
            Defines whether this tag should be displayed before creating data points.
            </summary>
            <remarks>
            <para>
            <c>true</c> indicates that the tag should be visualized as soon as possible, before
            evaluating data points. This value should be used when it's guaranteed that there always be at least one
            data point for this tag (otherwise it might be visualized as an empty space).
            </para>
            <para>
            <c>false</c> indicates that the tag should not be visualized until at least one data point
            is created for this tag. This value should be used when it's not guaranteed that there will always be
            at least one data point for this tag. The tag may be visualized later, but will never be visualized empty.
            </para>
            </remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.Language.CodeLens.ICodeLensCallbackListener">
             <summary>
             Represents an object in VS process that listens and responds to callback from CodeLens OOP extensions.
             The remote CodeLens extension calls back to VS via one of the InvokeAsync overloads on
             <see cref="T:Microsoft.VisualStudio.Language.CodeLens.Remoting.ICodeLensCallbackService" />.
             </summary>
             <remarks>
             This is a MEF component part loaded in to VS process and exported by CodeLens data point provider extenders.
             </remarks>
             <example>
             The implementer of this interface should make sure that the implementation has the callback method
             that exactly matches the target name passed to the InvokeAsync call in order to receive the callback.
            
             For example, the remote CodeLens extension originates a callback with JSON-RPC method "MyCallbackListener.Callback":
            
             <code>
             [Import]
             ICodeLensCallbackService callbackService;
             ...
             // Invoke the callback for the data point
             var result = await callbackService.InvokeAsync&lt;MyDataType&gt;("MyCallbackListener.Callback", argument);
             </code>
            
             The <see cref="T:Microsoft.VisualStudio.Language.CodeLens.ICodeLensCallbackListener" /> implementation that has the following <see cref="T:StreamJsonRpc.JsonRpcMethodAttribute" />
             will receive the callback:
            
             <code>
             [Export(typeof(ICodeLensCallbackListener))]
             public sealed class CodeLensCallbackListener : ICodeLensCallbackListener
             {
                 [JsonRpcMethod("MyCallbackListener.Callback")]
                 public async Task&lt;MyDataType&gt; OnCallbackAsync(object argument)
                 {
                     ...
                     MyDataType result = await CalculateResult(argument);
                     return result;
                 }
             }
             </code>
             </example>
        </member>
        <member name="T:Microsoft.VisualStudio.Language.CodeLens.ICodeLensDescriptor">
            <summary>
            Represents an object describing a code element at the location where an <see cref="T:Microsoft.VisualStudio.Language.CodeLens.ICodeLensTag" /> will be created.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.CodeLens.ICodeLensDescriptor.FilePath">
            <summary>
            The absolute file path of the document in which the descriptor is created.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.CodeLens.ICodeLensDescriptor.ProjectGuid">
            <summary>
            The containing project of the document. Can be <see cref="F:System.Guid.Empty" />
            if the document is a solution's miscellaneous file, or if it does not need to be specified.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.CodeLens.ICodeLensDescriptor.ElementDescription">
            <summary>
            A short description of the element for which this descriptor is created.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.CodeLens.ICodeLensDescriptor.ApplicableSpan">
            <summary>
            The <see cref="T:Microsoft.VisualStudio.Text.Span" /> of the element.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.CodeLens.ICodeLensDescriptor.Kind">
            <summary>
            The <see cref="T:Microsoft.VisualStudio.Language.Intellisense.CodeElementKinds" /> of the element.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Language.CodeLens.ICodeLensDescriptorContextProvider">
            <summary>
            Provides dynamic context properties of a code element tagged with <see cref="T:Microsoft.VisualStudio.Language.CodeLens.ICodeLensTag2" /> in addition to immutable <see cref="T:Microsoft.VisualStudio.Language.CodeLens.ICodeLensDescriptor" />.
            These include a span of the code element, which for example is changing during code editing within a method,
            unlike <see cref="T:Microsoft.VisualStudio.Language.CodeLens.ICodeLensDescriptor" /> of the method.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Language.CodeLens.ICodeLensDescriptorContextProvider.GetCurrentContextAsync">
            <summary>
            Gets current context properties of a code element tagged with <see cref="T:Microsoft.VisualStudio.Language.CodeLens.ICodeLensTag2" />.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Language.CodeLens.ICodeLensTag">
            <summary>
            An <see cref="T:Microsoft.VisualStudio.Text.Tagging.ITag" /> indicating the place where CodeLens indicators should be created.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.CodeLens.ICodeLensTag.Descriptor">
            <summary>
            The descriptor for this tag.
            </summary>
        </member>
        <member name="E:Microsoft.VisualStudio.Language.CodeLens.ICodeLensTag.Disconnected">
            <summary>
            Raised when this tag has been disconnected and is no longer used as part of the editor. 
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Language.CodeLens.ICodeLensTag2">
            <summary>
            Extends <see cref="T:Microsoft.VisualStudio.Language.CodeLens.ICodeLensTag" /> with an ability to provide <see cref="T:Microsoft.VisualStudio.Language.CodeLens.ICodeLensDescriptorContextProvider" />.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.CodeLens.ICodeLensTag2.DescriptorContextProvider">
            <summary>
            Gets an instance of the <see cref="T:Microsoft.VisualStudio.Language.CodeLens.ICodeLensDescriptorContextProvider" />, which can provide dynamic context properties
            of a code element tagged with <see cref="T:Microsoft.VisualStudio.Language.CodeLens.ICodeLensTag2" /> in addition to immutable <see cref="T:Microsoft.VisualStudio.Language.CodeLens.ICodeLensDescriptor" />.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Language.CodeLens.ICodeLensTag3">
            <summary>
            Extends <see cref="T:Microsoft.VisualStudio.Language.CodeLens.ICodeLensTag2" /> with an ability to provide <see cref="T:Microsoft.VisualStudio.Language.CodeLens.CodeLensTagProperties" />.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.CodeLens.ICodeLensTag3.Properties">
            <summary>
            Properties of the tag defining how it should be handled.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Language.CodeLens.PredefinedCodeLensDescriptorContextPropertyNames">
            <summary>
            Specifies the names of the well known properties that can appear as keys in the
            <see cref="P:Microsoft.VisualStudio.Language.CodeLens.CodeLensDescriptorContext.Properties" /> dictionary.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Language.CodeLens.PredefinedCodeLensDescriptorContextPropertyNames.VisualStudioProcessId">
            <summary>
            Name of the property that specifies the process identifier of the Visual Studio
            process within which the current code lens indicator will be displayed.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Language.CodeLens.PredefinedCodeLensDescriptorContextPropertyNames.OutputFilePath">
            <summary>
            Name of the property that specifies the full path of the binary into which
            the code element for the current code lens indicator will be compiled.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Language.CodeLens.PredefinedCodeLensDescriptorContextPropertyNames.FullyQualifiedName">
            <summary>
            Name of the property that specifies the full (namespace qualified) name of the
            code element for the current code lens indicator.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Language.CodeLens.PredefinedCodeLensDescriptorContextPropertyNames.StartLine">
            <summary>
            Name of the property that specifies the line number where the declaration of
            the code element for the current code lens indicator starts.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Language.CodeLens.PredefinedCodeLensDescriptorContextPropertyNames.StartColumn">
            <summary>
            Name of the property that specifies the column number where the declaration of
            the code element for the current code lens indicator starts.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Language.CodeLens.Remoting.AllowsDetailsPopupTransparencyAttribute">
            <summary>
            A MEF attribute specifying whether details of data points from a <see cref="T:Microsoft.VisualStudio.Language.CodeLens.Remoting.IAsyncCodeLensDataPointProvider" /> can contain transparent content.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Language.CodeLens.Remoting.AllowsDetailsPopupTransparencyAttribute.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of <see cref="T:Microsoft.VisualStudio.Language.CodeLens.Remoting.AllowsDetailsPopupTransparencyAttribute" />.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.CodeLens.Remoting.AllowsDetailsPopupTransparencyAttribute.AllowsDetailsPopupTransparency">
            <summary>
            Determines if data point details can contain transparent content.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Language.CodeLens.Remoting.CodeLensServiceProtocolNames">
            <summary>
            Defines the names of the protocols for CodeLens ServiceHub service.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Language.CodeLens.Remoting.CodeLensServiceProtocolNames.CodeLensServiceName">
            <summary>
            The name of the default SeviceHub service.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Language.CodeLens.Remoting.CodeLensServiceProtocolNames.Configure">
            <summary>
            Protocol for configuring CodeLense ServiceHub service.
            </summary>
            <remarks>
            Protocol params and return:
            params: uiCultureLCID, cultureLCID - a culture LCID the service should operate on.
            return: void
            </remarks>
        </member>
        <member name="F:Microsoft.VisualStudio.Language.CodeLens.Remoting.CodeLensServiceProtocolNames.GetCodeLensProviders">
            <summary>
            Protocol for getting CodeLens providers hosted by the service.
            </summary>
            <remarks>
            Protocol params and return:
            params: none
            return: <see cref="T:Microsoft.VisualStudio.Language.CodeLens.Remoting.CodeLensDataPointProviderDescriptor" />
            </remarks>
        </member>
        <member name="F:Microsoft.VisualStudio.Language.CodeLens.Remoting.CodeLensServiceProtocolNames.CanCreateDataPoint">
            <summary>
            Protocol for querying a CodeLens provider if it supports to create a data point.
            </summary>
            Protocol params and return:
            params: <see cref="T:Microsoft.VisualStudio.Language.CodeLens.Remoting.CodeLensDescriptor" /> and the provider name.
            return: a boolean indicating whether the provider supports to create a data point. 
            <remarks>
            </remarks>
        </member>
        <member name="F:Microsoft.VisualStudio.Language.CodeLens.Remoting.CodeLensServiceProtocolNames.GetCodeLensData">
            <summary>
            Protocol for retrieving data from a CodeLens data point.
            </summary>
            <remarks>
            Protocol params and return:
            params: <see cref="T:Microsoft.VisualStudio.Language.CodeLens.Remoting.CodeLensDescriptor" /> and the provider name.
            return: <see cref="T:Microsoft.VisualStudio.Language.CodeLens.Remoting.CodeLensDataPointDescriptor" />
            </remarks>
        </member>
        <member name="F:Microsoft.VisualStudio.Language.CodeLens.Remoting.CodeLensServiceProtocolNames.GetCodeLensDetail">
            <summary>
            Protocol for retrieving details of a CodeLens data point.
            </summary>
            <remarks>
            Protocol params and return:
            params: <see cref="T:Microsoft.VisualStudio.Language.CodeLens.Remoting.CodeLensDescriptor" /> and the provider name.
            return: <see cref="T:Microsoft.VisualStudio.Language.CodeLens.Remoting.CodeLensDetailsDescriptor" />
            </remarks>
        </member>
        <member name="F:Microsoft.VisualStudio.Language.CodeLens.Remoting.CodeLensServiceProtocolNames.NotifyInvalidation">
            <summary>
            A protocol that the service can use to notify the CodeLens infrastructure
            that the remote CodeLens data in the data point source has been invalidated.
            </summary>
            <remarks>
            Protocol params and return:
            params: <see cref="T:Microsoft.VisualStudio.Language.CodeLens.Remoting.CodeLensDescriptor" /> and the provider name
            return: none.
            </remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.Language.CodeLens.Remoting.CodeLensDataPointDescriptor">
            <summary>
            Represents a descriptor for a CodeLens data point.
            </summary>
            <remarks>
            This type is used for the object representing a data point returned from the remote data point provider.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.CodeLens.Remoting.CodeLensDataPointDescriptor.Description">
            <summary>
            The description text that displays in the UI indicator of the data point.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.CodeLens.Remoting.CodeLensDataPointDescriptor.TooltipText">
            <summary>
            The tooltip text for the UI indicator of the data point.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.CodeLens.Remoting.CodeLensDataPointDescriptor.ImageId">
            <summary>
            The image content of the data point.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.CodeLens.Remoting.CodeLensDataPointDescriptor.IntValue">
            <summary>
            The integer content of the data point.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Language.CodeLens.Remoting.CodeLensDataPointProviderDescriptor">
            <summary>
            Represents a data model describing <see cref="T:Microsoft.VisualStudio.Language.CodeLens.Remoting.IAsyncCodeLensDataPointProvider" />s.
            </summary>
            <remarks>
            When requested, the remote CodeLens service returns an object of <see cref="T:Microsoft.VisualStudio.Language.CodeLens.Remoting.CodeLensDataPointProviderDescriptor" /> for each provider it hosts.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.CodeLens.Remoting.CodeLensDataPointProviderDescriptor.ProviderUniqueId">
            <summary>
            The uniquely-identifying name of the data point provider.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.CodeLens.Remoting.CodeLensDataPointProviderDescriptor.LocalizedName">
            <summary>
            The localized name of the data point provider.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.CodeLens.Remoting.CodeLensDataPointProviderDescriptor.ContentTypes">
            <summary>
            List of supported content types.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.CodeLens.Remoting.CodeLensDataPointProviderDescriptor.Priority">
            <summary>
            An <see cref="T:System.Int32" /> value indicating the order of the indicator.
            Lower value indicators will come first in the default ordering in indicator adornments in editor.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.CodeLens.Remoting.CodeLensDataPointProviderDescriptor.OptionUserVisible">
            <summary>
            Determines if the provider is visible in the tool's option setting.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.CodeLens.Remoting.CodeLensDataPointProviderDescriptor.OptionUserModifiable">
            <summary>
            Determines if the provider can be modified in the tool's option setting.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.CodeLens.Remoting.CodeLensDataPointProviderDescriptor.DetailsTemplateName">
            <summary>
            What template to use for presenting the detail in the detail popup.
            Defaults to use a GridView to present detail data.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.CodeLens.Remoting.CodeLensDataPointProviderDescriptor.DetailsTemplateProperties">
            <summary>
            When using a template, additional properties to customize the template.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.CodeLens.Remoting.CodeLensDataPointProviderDescriptor.DynamicVisibility">
            <summary>
            Determines if this provider creates data point that supports dynamic visibility
            and should only be visualized is it has data to show.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.CodeLens.Remoting.CodeLensDataPointProviderDescriptor.AllowsDetailsPopupTransparency">
            <summary>
            Determines if data point details can contain transparent content.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Language.CodeLens.Remoting.CodeLensDescriptor">
            <summary>
            Represents a data model describing the code element in a document on which CodeLens data point indicators would be requested.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.CodeLens.Remoting.CodeLensDescriptor.FilePath">
            <summary>
            Full path to the document on which data points are requested.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.CodeLens.Remoting.CodeLensDescriptor.ProjectGuid">
            <summary>
            A <see cref="T:System.Guid" /> identifying the project to which the document belongs.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.CodeLens.Remoting.CodeLensDescriptor.ElementDescription">
            <summary>
            A text description for the code element with which a data point is associated.
            </summary>
            <remarks>
            Language services use this property to pass the text of the code element to data points.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.CodeLens.Remoting.CodeLensDescriptor.Kind">
            <summary>
            The <see cref="T:Microsoft.VisualStudio.Language.Intellisense.CodeElementKinds" /> of the code element with which a data point is associated.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Language.CodeLens.Remoting.CodeLensDetailEntriesSelectionMode">
            <summary>
            Defines selection behavior for <see cref="P:Microsoft.VisualStudio.Language.CodeLens.Remoting.CodeLensDetailsDescriptor.Entries" />.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Language.CodeLens.Remoting.CodeLensDetailEntriesSelectionMode.Single">
            <summary>
            Only one entry can be selected at a time.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Language.CodeLens.Remoting.CodeLensDetailEntriesSelectionMode.Multiple">
            <summary>
            Entries can be toggled selected.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Language.CodeLens.Remoting.CodeLensDetailEntriesSelectionMode.Extended">
            <summary>
             Entries can be selected in groups using the SHIFT and mouse or arrow keys.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Language.CodeLens.Remoting.CodeLensDetailEntryCommand">
            <summary>
            Represents a navigation command invokable from the details pane.
            </summary>
            <remarks>
            A command can only have either the <see cref="P:Microsoft.VisualStudio.Language.CodeLens.Remoting.CodeLensDetailEntryCommand.CommandName" /> or
            the pair of <see cref="P:Microsoft.VisualStudio.Language.CodeLens.Remoting.CodeLensDetailEntryCommand.CommandSet" /> and <see cref="P:Microsoft.VisualStudio.Language.CodeLens.Remoting.CodeLensDetailEntryCommand.CommandId" />,
            depending on the platform on which the code runs:
            <list type="bullet">
            <item>On Windows, the <see cref="P:Microsoft.VisualStudio.Language.CodeLens.Remoting.CodeLensDetailEntryCommand.CommandSet" /> and <see cref="P:Microsoft.VisualStudio.Language.CodeLens.Remoting.CodeLensDetailEntryCommand.CommandId" /> pair is used.</item>
            <item>On Mac, the <see cref="P:Microsoft.VisualStudio.Language.CodeLens.Remoting.CodeLensDetailEntryCommand.CommandName" /> is used.</item>
            </list>
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.CodeLens.Remoting.CodeLensDetailEntryCommand.CommandName">
            <summary>
            The command name.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.CodeLens.Remoting.CodeLensDetailEntryCommand.CommandSet">
            <summary>
            The command group <see cref="T:System.Guid" />.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.CodeLens.Remoting.CodeLensDetailEntryCommand.CommandId">
            <summary>
            The command Id.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.CodeLens.Remoting.CodeLensDetailEntryCommandArgs.CommandName">
            <summary>
            The command name.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.CodeLens.Remoting.CodeLensDetailEntryCommandArgs.CommandArgs">
            <summary>
            The command arguments.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Language.CodeLens.Remoting.CodeLensDetailEntryField">
            <summary>
            Defines a field of a <see cref="T:Microsoft.VisualStudio.Language.CodeLens.Remoting.CodeLensDetailEntryDescriptor" />.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.CodeLens.Remoting.CodeLensDetailEntryField.Text">
            <summary>
            The text string content of the field.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.CodeLens.Remoting.CodeLensDetailEntryField.ImageId">
            <summary>
            The image content of the field.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Language.CodeLens.Remoting.CodeLensDetailHeaderDescriptor">
            <summary>
            Defines a header object for <see cref="T:Microsoft.VisualStudio.Language.CodeLens.Remoting.CodeLensDetailsDescriptor" />.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.CodeLens.Remoting.CodeLensDetailHeaderDescriptor.UniqueName">
            <summary>
            The header's unique name.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.CodeLens.Remoting.CodeLensDetailHeaderDescriptor.DisplayName">
            <summary>
            The localized name of the header when displayed.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.CodeLens.Remoting.CodeLensDetailHeaderDescriptor.Width">
            <summary>
            The desired width of this header when displayed in the detail popup.
            </summary>
            <remarks>
            If <see cref="P:Microsoft.VisualStudio.Language.CodeLens.Remoting.CodeLensDetailHeaderDescriptor.Width" /> &lt;= 1.0, this value is used as a multifier
            for the percentage of remaining width in the grid view, excluding all fixed width columns,
            should be allocated to this column. A value of 1.0 means 100% of remaining width is allocated to this column.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.CodeLens.Remoting.CodeLensDetailHeaderDescriptor.IsVisible">
            <summary>
            Indicates whether this column should display in the grid view.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Language.CodeLens.Remoting.CodeLensDetailPaneCommand">
            <summary>
            Represents a navigation command in the detail pane.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.CodeLens.Remoting.CodeLensDetailPaneCommand.CommandDisplayName">
            <summary>
            The command text displayed in the pane.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.CodeLens.Remoting.CodeLensDetailPaneCommand.CommandId">
            <summary>
            The navigation command.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.CodeLens.Remoting.CodeLensDetailPaneCommand.CommandArgs">
            <summary>
            The command arguments.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.CodeLens.Remoting.CodeLensDetailPaneCommand.SelectionMode">
            <summary>
            Defines selection mode supported by the command.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.CodeLens.Remoting.CodeLensDetailPaneCommand.RequiredSelectionCount">
            <summary>
            Defines specific number of selected entries required by the command, used when <see cref="P:Microsoft.VisualStudio.Language.CodeLens.Remoting.CodeLensDetailPaneCommand.SelectionMode" /> is set to <see cref="F:Microsoft.VisualStudio.Language.CodeLens.Remoting.CodeLensDetailPaneCommandSelectionMode.SpecificCount" />.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Language.CodeLens.Remoting.CodeLensDetailPaneCommandSelectionMode">
            <summary>
            Defines selection mode supported by a <see cref="T:Microsoft.VisualStudio.Language.CodeLens.Remoting.CodeLensDetailPaneCommand" />.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Language.CodeLens.Remoting.CodeLensDetailPaneCommandSelectionMode.None">
            <summary>
            <see cref="T:Microsoft.VisualStudio.Language.CodeLens.Remoting.CodeLensDetailPaneCommand" /> doesn't support selection.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Language.CodeLens.Remoting.CodeLensDetailPaneCommandSelectionMode.SingleOrMultiple">
            <summary>
            <see cref="T:Microsoft.VisualStudio.Language.CodeLens.Remoting.CodeLensDetailPaneCommand" /> requires at least one or more entries selected.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Language.CodeLens.Remoting.CodeLensDetailPaneCommandSelectionMode.Multiple">
            <summary>
            <see cref="T:Microsoft.VisualStudio.Language.CodeLens.Remoting.CodeLensDetailPaneCommand" /> requires more than one entry selected.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Language.CodeLens.Remoting.CodeLensDetailPaneCommandSelectionMode.SpecificCount">
            <summary>
            <see cref="T:Microsoft.VisualStudio.Language.CodeLens.Remoting.CodeLensDetailPaneCommand" /> requires specific number of selected entries.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Language.CodeLens.Remoting.CodeLensDetailsDescriptor">
            <summary>
            Represents a descriptor for the detail of a data point.
            </summary>
            <remarks>
            When <see cref="M:Microsoft.VisualStudio.Language.CodeLens.Remoting.IAsyncCodeLensDataPoint.GetDetailsAsync(Microsoft.VisualStudio.Language.CodeLens.CodeLensDescriptorContext,System.Threading.CancellationToken)" /> is called,
            the data point returns a <see cref="T:Microsoft.VisualStudio.Language.CodeLens.Remoting.CodeLensDetailsDescriptor" /> object providing the data point details
            that will be presented in the details popup.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.CodeLens.Remoting.CodeLensDetailsDescriptor.Headers">
            <summary>
            Defines the headers of the detail list.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.CodeLens.Remoting.CodeLensDetailsDescriptor.Entries">
            <summary>
            Defines rows (entries) of the detail list.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.CodeLens.Remoting.CodeLensDetailsDescriptor.CustomData">
            <summary>
            <para>Defines custom details data to be visualized before the detail list.</para>
            <para>
            This property allows remote data point to send a list of arbitrary structured data objects back to the host process
            to be visualized in the details popup along with (or instead of) the detail list.
            For each object in this list, <see cref="T:Microsoft.VisualStudio.Text.Adornments.IViewElementFactoryService" /> will be used to create a host specific visualization
            (FrameworkElement in Visual Studio). These visual elements will be stacked vertically.
            </para>
            <para>
            Using this property to create a custom details visualization requires the following provisions:
            1. The type represnting a custom data has to be loadable in-proc in the host. In Visual Studio this
            means it has to be deployed in a package with [ProvideBindingPath] attribute.
            2. An <see cref="T:Microsoft.VisualStudio.Text.Adornments.IViewElementFactory" /> MEF component needs to be exported in-proc, with a <see cref="T:Microsoft.VisualStudio.Utilities.TypeConversionAttribute" />
            indicating it can convert the custom data type to a host specific visual element (FrameworkElement in Visual Studio).
            </para>
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.CodeLens.Remoting.CodeLensDetailsDescriptor.AdditionalCustomData">
            <summary>
            Defines additional custom details data to be visualized after the detail list. See <see cref="P:Microsoft.VisualStudio.Language.CodeLens.Remoting.CodeLensDetailsDescriptor.CustomData" /> for more information.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.CodeLens.Remoting.CodeLensDetailsDescriptor.PaneNavigationCommands">
            <summary>
            Defines the additional navigation commands in the details pane
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.CodeLens.Remoting.CodeLensDetailsDescriptor.SelectionMode">
            <summary>
            Defines selection mode for the deatails entry table.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Language.CodeLens.Remoting.CodeLensDetailEntryDescriptor">
            <summary>
            Defines a row entry in <see cref="T:Microsoft.VisualStudio.Language.CodeLens.Remoting.CodeLensDetailsDescriptor" />.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.CodeLens.Remoting.CodeLensDetailEntryDescriptor.Fields">
            <summary>
            A list of field values in the entry.
            </summary>
            <remarks>
            The order of <see cref="P:Microsoft.VisualStudio.Language.CodeLens.Remoting.CodeLensDetailEntryDescriptor.Fields" /> in an entry must be the same as the order of <see cref="P:Microsoft.VisualStudio.Language.CodeLens.Remoting.CodeLensDetailsDescriptor.Headers" />
            in the <see cref="T:Microsoft.VisualStudio.Language.CodeLens.Remoting.CodeLensDetailsDescriptor" />.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.CodeLens.Remoting.CodeLensDetailEntryDescriptor.Tooltip">
            <summary>
            Tooltip for the entry.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.CodeLens.Remoting.CodeLensDetailEntryDescriptor.NavigationCommand">
            <summary>
            Navigation command associated with the entry.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.CodeLens.Remoting.CodeLensDetailEntryDescriptor.NavigationCommandArgs">
            <summary>
            Arguments for the navigation command.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.CodeLens.Remoting.CodeLensDetailEntryDescriptor.SelectionCommandArgs">
            <summary>
            Arguments for commands associated with the entry.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Language.CodeLens.Remoting.ReferenceEntryFieldNames.FilePath">
            <summary>
            Name for file path field. Expect a string value.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Language.CodeLens.Remoting.ReferenceEntryFieldNames.LineNumber">
            <summary>
            Name for line number field. Expect an integer value and this is 0-indexed
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Language.CodeLens.Remoting.ReferenceEntryFieldNames.ColumnNumber">
            <summary>
            Name for colunm number field. Expect an integer value and this is 0-indexed.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Language.CodeLens.Remoting.ReferenceEntryFieldNames.ReferenceText">
            <summary>
            Name for the reference text field. Expect a string value.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Language.CodeLens.Remoting.ReferenceEntryFieldNames.ReferenceStart">
            <summary>
            Name for the field of reference start position in the reference text. Expect an integer value.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Language.CodeLens.Remoting.ReferenceEntryFieldNames.ReferenceEnd">
            <summary>
            Name for the field of reference end position in the reference text. Expect an integer value.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Language.CodeLens.Remoting.ReferenceEntryFieldNames.ReferenceLongDescription">
            <summary>
            Name for the field of reference long description. This usually is the reference site with fully qualified reference name. Expect a string value.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Language.CodeLens.Remoting.ReferenceEntryFieldNames.ReferenceImageId">
            <summary>
            Name for the field of reference image. Expect a value of ImageId (or null if no image associated with this reference).
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Language.CodeLens.Remoting.ReferenceEntryFieldNames.TextBeforeReference2">
            <summary>
            Name for the field of the second line before reference text. Expect a string value.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Language.CodeLens.Remoting.ReferenceEntryFieldNames.TextBeforeReference1">
            <summary>
            Name for the field of the first line before reference text. Expect a string value.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Language.CodeLens.Remoting.ReferenceEntryFieldNames.TextAfterReference1">
            <summary>
            Name for the field of the first line after reference text. Expect a string value.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Language.CodeLens.Remoting.ReferenceEntryFieldNames.TextAfterReference2">
            <summary>
            Name of the field of the second line after reference text. Expect a string value.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Language.CodeLens.Remoting.ReferenceDetailEntryDescriptor">
            <summary>
            Defines a descriptor representing a reference entry detail for reference indicators.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.CodeLens.Remoting.ReferenceDetailEntryDescriptor.FilePath">
            <summary>
            The full path of the source file where the reference is found.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.CodeLens.Remoting.ReferenceDetailEntryDescriptor.LineNumber">
            <summary>
            The line number of the reference.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.CodeLens.Remoting.ReferenceDetailEntryDescriptor.ColumnNumber">
            <summary>
            The column number of the reference.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.CodeLens.Remoting.ReferenceDetailEntryDescriptor.ReferenceText">
            <summary>
            The content of the line of code where the symbol is referenced.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.CodeLens.Remoting.ReferenceDetailEntryDescriptor.ReferenceStart">
            <summary>
            The start position of the reference in the <see cref="P:Microsoft.VisualStudio.Language.CodeLens.Remoting.ReferenceDetailEntryDescriptor.ReferenceText" />.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.CodeLens.Remoting.ReferenceDetailEntryDescriptor.ReferenceEnd">
            <summary>
            The end position of the reference in the <see cref="P:Microsoft.VisualStudio.Language.CodeLens.Remoting.ReferenceDetailEntryDescriptor.ReferenceText" />.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.CodeLens.Remoting.ReferenceDetailEntryDescriptor.ReferenceLongDescription">
            <summary>
            The fully qualified name of the referenced symbol.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.CodeLens.Remoting.ReferenceDetailEntryDescriptor.ReferenceImageId">
            <summary>
            The <see cref="T:Microsoft.VisualStudio.Core.Imaging.ImageId" /> representing the type of the referenced symbol.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.CodeLens.Remoting.ReferenceDetailEntryDescriptor.TextBeforeReference2">
            <summary>
            The content of the second line of code before the reference line.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.CodeLens.Remoting.ReferenceDetailEntryDescriptor.TextBeforeReference1">
            <summary>
            The content of the first line of code before the reference line.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.CodeLens.Remoting.ReferenceDetailEntryDescriptor.TextAfterReference1">
            <summary>
            The content of the first line of code after the reference line.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.CodeLens.Remoting.ReferenceDetailEntryDescriptor.TextAfterReference2">
            <summary>
            The content of the second line of code after the reference line.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Language.CodeLens.Remoting.DetailsTemplateNameAttribute">
            <summary>
            A MEF attribute specifying a template for presenting details of data points from a <see cref="T:Microsoft.VisualStudio.Language.CodeLens.Remoting.IAsyncCodeLensDataPointProvider" />.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Language.CodeLens.Remoting.DetailsTemplateNameAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of <see cref="T:Microsoft.VisualStudio.Language.CodeLens.Remoting.DetailsTemplateNameAttribute" />.
            </summary>
            <param name="detailsTemplateName">Template name.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Language.CodeLens.Remoting.DetailsTemplateNameAttribute.#ctor(System.String,System.String[])">
            <summary>
            Initializes a new instance of <see cref="T:Microsoft.VisualStudio.Language.CodeLens.Remoting.DetailsTemplateNameAttribute" />.
            </summary>
            <param name="detailsTemplateName">Template name.</param>
            <param name="detailsTemplateProperties">Key/Value pairs of template properties.
            Each value must be separated by an equals sign, i.e. key=value.</param>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.CodeLens.Remoting.DetailsTemplateNameAttribute.DetailsTemplateName">
            <summary>
            The name of the template for presenting the data point's details.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.CodeLens.Remoting.DetailsTemplateNameAttribute.DetailsTemplateProperties">
            <summary>
            Additional properties for the template for presenting the data point's details.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Language.CodeLens.Remoting.IAsyncCodeLensDataPoint">
            <summary>
            Represents an async CodeLens data point.
            </summary>
        </member>
        <member name="E:Microsoft.VisualStudio.Language.CodeLens.Remoting.IAsyncCodeLensDataPoint.InvalidatedAsync">
            <summary>
            Raised when the data point is invalidated.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.CodeLens.Remoting.IAsyncCodeLensDataPoint.Descriptor">
            <summary>
            The <see cref="T:Microsoft.VisualStudio.Language.CodeLens.Remoting.CodeLensDescriptor" /> object that uniquely identifies the data point.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Language.CodeLens.Remoting.IAsyncCodeLensDataPoint.GetDataAsync(Microsoft.VisualStudio.Language.CodeLens.CodeLensDescriptorContext,System.Threading.CancellationToken)">
            <summary>
            Gets lens data from the data point.
            </summary>
            <param name="descriptorContext">An instance of <see cref="T:Microsoft.VisualStudio.Language.CodeLens.CodeLensDescriptorContext" /> containing
            dynamic contextual properties of a code element associated with the data point.</param>
            <param name="token"></param>
            <returns>
            A <see cref="T:Microsoft.VisualStudio.Language.CodeLens.Remoting.CodeLensDataPointDescriptor" /> object representing the lens data from the data point.
            </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Language.CodeLens.Remoting.IAsyncCodeLensDataPoint.GetDetailsAsync(Microsoft.VisualStudio.Language.CodeLens.CodeLensDescriptorContext,System.Threading.CancellationToken)">
            <summary>
            Gets lens details from the data point.
            </summary>
            <param name="descriptorContext">An instance of <see cref="T:Microsoft.VisualStudio.Language.CodeLens.CodeLensDescriptorContext" /> containing
            dynamic contextual properties of a code element associated with the data point.</param>
            <param name="token"></param>
            <returns>
            A <see cref="T:Microsoft.VisualStudio.Language.CodeLens.Remoting.CodeLensDetailEntryDescriptor" /> object representing the lens details of the data point.
            </returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Language.CodeLens.Remoting.IAsyncCodeLensDataPointProvider">
             <summary>
             Represents a provider which creates <see cref="T:Microsoft.VisualStudio.Language.CodeLens.Remoting.IAsyncCodeLensDataPoint" /> instances from
             an <see cref="T:Microsoft.VisualStudio.Language.CodeLens.Remoting.CodeLensDescriptor" />.
             </summary>
             <remarks>
             This is a MEF component part, and should be exported with the following metadata:
             <code>
                 [Export(typeof(IAsyncCodeLensDataPointProvider))]
                 [Name("nameOfTheProvider")]
                 [ContentType("csharp")]
             </code>
            
             The following metadata are optional:
             <code>
                 <see cref="T:Microsoft.VisualStudio.Utilities.PriorityAttribute" />
                 <see cref="T:Microsoft.VisualStudio.Utilities.LocalizedNameAttribute" />
                 <see cref="T:Microsoft.VisualStudio.Utilities.OptionUserVisibleAttribute" />
                 <see cref="T:Microsoft.VisualStudio.Utilities.OptionUserModifiableAttribute" />
                 <see cref="T:Microsoft.VisualStudio.Language.CodeLens.Remoting.DetailsTemplateNameAttribute" />
             </code>
             </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Language.CodeLens.Remoting.IAsyncCodeLensDataPointProvider.CanCreateDataPointAsync(Microsoft.VisualStudio.Language.CodeLens.Remoting.CodeLensDescriptor,Microsoft.VisualStudio.Language.CodeLens.CodeLensDescriptorContext,System.Threading.CancellationToken)">
            <summary>
            Determines if this provider can create an <see cref="T:Microsoft.VisualStudio.Language.CodeLens.Remoting.IAsyncCodeLensDataPoint" /> for the specified <see cref="T:Microsoft.VisualStudio.Language.CodeLens.Remoting.CodeLensDescriptor" />.
            </summary>
            <param name="descriptor">The descriptor to check.</param>
            <param name="descriptorContext">An instance of <see cref="T:Microsoft.VisualStudio.Language.CodeLens.CodeLensDescriptorContext" /> containing
            dynamic contextual properties of a code element associated with the data point.</param>
            <param name="token">Cancellation token</param>
            <returns>
            <c>true</c> if a data point can be created from the descriptor; <c>false</c> otherwise.
            </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Language.CodeLens.Remoting.IAsyncCodeLensDataPointProvider.CreateDataPointAsync(Microsoft.VisualStudio.Language.CodeLens.Remoting.CodeLensDescriptor,Microsoft.VisualStudio.Language.CodeLens.CodeLensDescriptorContext,System.Threading.CancellationToken)">
            <summary>
            Creates an <see cref="T:Microsoft.VisualStudio.Language.CodeLens.Remoting.IAsyncCodeLensDataPoint" />, on request, from a given descriptor.
            </summary>
            <param name="descriptor">The descriptor to use.</param>
            <param name="descriptorContext">An instance of <see cref="T:Microsoft.VisualStudio.Language.CodeLens.CodeLensDescriptorContext" /> containing
            dynamic contextual properties of a code element associated with the data point.</param>
            <param name="token">Cancellation token</param>
            <returns>
            An <see cref="T:Microsoft.VisualStudio.Language.CodeLens.Remoting.IAsyncCodeLensDataPoint" /> created from the descriptor.
            </returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Language.CodeLens.Remoting.ICodeLensCallbackService">
            <summary>
            Represents a service provided by the CodeLens service infrastructure to allow CodeLens extensions to call back to VS.
            </summary>
            <remarks>
            This is a MEF component part provided by the CodeLens service infrastructure, and can be imported by CodeLens extensions.
            </remarks>
            <example>
            <code>
            [Import(typeof(ICodeLensCallbackService))]
            private ICodeLensCallbackService callbackService;
            </code>
            </example>
        </member>
        <member name="M:Microsoft.VisualStudio.Language.CodeLens.Remoting.ICodeLensCallbackService.GetCallbackJsonRpc(Microsoft.VisualStudio.Language.CodeLens.Remoting.IAsyncCodeLensDataPointProvider)">
             <summary>
             Gets a <see cref="T:StreamJsonRpc.JsonRpc" /> on which the <paramref name="dataPointProvider" /> can originate a callback to VS process.
             </summary>
             <param name="dataPointProvider">
             The <see cref="T:Microsoft.VisualStudio.Language.CodeLens.Remoting.IAsyncCodeLensDataPointProvider" /> which the <see cref="T:StreamJsonRpc.JsonRpc" /> is associated with.
             </param>
             <returns>The <see cref="T:StreamJsonRpc.JsonRpc" /> that can be used to call back to VS process.</returns>
             <remarks>
             CodeLens extensions can use the <see cref="T:StreamJsonRpc.JsonRpc" /> returned from this method to invoke a callback to VS process
             using one of the JsonRpc.InvokeAsync overloads. The VS in-proc <see cref="T:Microsoft.VisualStudio.Language.CodeLens.ICodeLensCallbackListener" />
             that has a method whose name or JsonRpcMethodAttribute exactly matches the target name passed to the
             callback invocation will receive the callback and can respond to the callback request with a result.
            
             Refer to JsonRpcMethodAttribute and JsonRpc.InvokeAsync for more detail.
             </remarks>
             <example>
             See <see cref="T:Microsoft.VisualStudio.Language.CodeLens.ICodeLensCallbackListener" /> for a callback example.
             </example>
        </member>
        <member name="M:Microsoft.VisualStudio.Language.CodeLens.Remoting.ICodeLensCallbackService.GetCallbackJsonRpc(Microsoft.VisualStudio.Language.CodeLens.Remoting.IAsyncCodeLensDataPoint)">
             <summary>
             Gets a <see cref="T:StreamJsonRpc.JsonRpc" /> on which the <paramref name="dataPoint" /> can originate a callback to VS process.
             </summary>
             <param name="dataPoint">
             The <see cref="T:Microsoft.VisualStudio.Language.CodeLens.Remoting.IAsyncCodeLensDataPoint" /> which the <see cref="T:StreamJsonRpc.JsonRpc" /> is associated with.
             </param>
             <returns>The <see cref="T:StreamJsonRpc.JsonRpc" /> that can be used to call back to VS process.</returns>
             <remarks>
             CodeLens extensions can use the <see cref="T:StreamJsonRpc.JsonRpc" /> returned from this method to invoke a callback to VS process
             using one of the JsonRpc.InvokeAsync overloads. The VS in-proc <see cref="T:Microsoft.VisualStudio.Language.CodeLens.ICodeLensCallbackListener" />
             that has a method whose name or JsonRpcMethodAttribute exactly matches the target name passed to the
             callback invocation will receive the callback and can respond to the callback request with a result.
            
             Refer to JsonRpcMethodAttribute and JsonRpc.InvokeAsync for more detail.
             </remarks>
             <example>
             See <see cref="T:Microsoft.VisualStudio.Language.CodeLens.ICodeLensCallbackListener" /> for a callback example.
             </example>
        </member>
        <member name="M:Microsoft.VisualStudio.Language.CodeLens.Remoting.ICodeLensCallbackService.InvokeAsync(Microsoft.VisualStudio.Language.CodeLens.Remoting.IAsyncCodeLensDataPointProvider,System.String,System.Collections.Generic.IReadOnlyList{System.Object},System.Threading.CancellationToken)">
            <summary>
            Invoke a callback method in the VS process using a JSON-RPC stream tied to the supplied <paramref name="dataPointProvider" />.
            </summary>
            <param name="dataPointProvider">
            The <see cref="T:Microsoft.VisualStudio.Language.CodeLens.Remoting.IAsyncCodeLensDataPointProvider" /> to which the callback method is tied.
            </param>
            <param name="targetName">Name of the callback method. Must not be null or empty string.</param>
            <param name="arguments">Arguments that must be supplied to the callback method. Must be serializable to JSON.</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> whose cancellation should terminate execution of the callback.</param>
            <returns>A task that completes when the callback method completes executing.</returns>
            <remarks>
            The VS in-proc <see cref="T:Microsoft.VisualStudio.Language.CodeLens.ICodeLensCallbackListener" /> that has a method whose name or <see cref="T:StreamJsonRpc.JsonRpcMethodAttribute" /> which
            exactly matches the supplied <paramref name="targetName" /> will receive the callback.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Language.CodeLens.Remoting.ICodeLensCallbackService.InvokeAsync(Microsoft.VisualStudio.Language.CodeLens.Remoting.IAsyncCodeLensDataPoint,System.String,System.Collections.Generic.IReadOnlyList{System.Object},System.Threading.CancellationToken)">
            <summary>
            Invoke a callback method in the VS process using a JSON-RPC stream tied to the supplied <paramref name="dataPoint" />.
            </summary>
            <param name="dataPoint">
            The <see cref="T:Microsoft.VisualStudio.Language.CodeLens.Remoting.IAsyncCodeLensDataPoint" /> to which the callback method is tied.
            </param>
            <param name="targetName">Name of the callback method. Must not be null or empty string.</param>
            <param name="arguments">Arguments that must be supplied to the callback method. Must be serializable to JSON.</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> whose cancellation should terminate execution of the callback.</param>
            <returns>A task that completes when the callback method completes executing.</returns>
            <remarks>
            The VS in-proc <see cref="T:Microsoft.VisualStudio.Language.CodeLens.ICodeLensCallbackListener" /> that has a method whose name or <see cref="T:StreamJsonRpc.JsonRpcMethodAttribute" /> which
            exactly matches the supplied <paramref name="targetName" /> will receive the callback.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Language.CodeLens.Remoting.ICodeLensCallbackService.InvokeAsync``1(Microsoft.VisualStudio.Language.CodeLens.Remoting.IAsyncCodeLensDataPointProvider,System.String,System.Collections.Generic.IReadOnlyList{System.Object},System.Threading.CancellationToken)">
            <summary>
            Invoke a callback method in the VS process using a JSON-RPC stream tied to the supplied <paramref name="dataPointProvider" /> and get back the result.
            </summary>
            <param name="dataPointProvider">
            The <see cref="T:Microsoft.VisualStudio.Language.CodeLens.Remoting.IAsyncCodeLensDataPointProvider" /> to which the callback method is tied.
            </param>
            <param name="targetName">Name of the callback method. Must not be null or empty string.</param>
            <param name="arguments">Arguments that must be supplied to the callback method. Must be serializable to JSON.</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> whose cancellation should terminate execution of the callback.</param>
            <returns>A task that completes when the callback method completes executing and that contains the result of the callback.</returns>
            <remarks>
            The VS in-proc <see cref="T:Microsoft.VisualStudio.Language.CodeLens.ICodeLensCallbackListener" /> that has a method whose name or <see cref="T:StreamJsonRpc.JsonRpcMethodAttribute" /> which
            exactly matches the supplied <paramref name="targetName" /> will receive the callback and can respond to the callback request with a result.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Language.CodeLens.Remoting.ICodeLensCallbackService.InvokeAsync``1(Microsoft.VisualStudio.Language.CodeLens.Remoting.IAsyncCodeLensDataPoint,System.String,System.Collections.Generic.IReadOnlyList{System.Object},System.Threading.CancellationToken)">
            <summary>
            Invoke a callback method in the VS process using a JSON-RPC stream tied to the supplied <paramref name="dataPoint" /> and get back the result.
            </summary>
            <param name="dataPoint">
            The <see cref="T:Microsoft.VisualStudio.Language.CodeLens.Remoting.IAsyncCodeLensDataPoint" /> to which the callback method is tied.
            </param>
            <param name="targetName">Name of the callback method. Must not be null or empty string.</param>
            <param name="arguments">Arguments that must be supplied to the callback method. Must be serializable to JSON.</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> whose cancellation should terminate execution of the callback.</param>
            <returns>A task that completes when the callback method completes executing and that contains the result of the callback.</returns>
            <remarks>
            The VS in-proc <see cref="T:Microsoft.VisualStudio.Language.CodeLens.ICodeLensCallbackListener" /> that has a method whose name or <see cref="T:StreamJsonRpc.JsonRpcMethodAttribute" /> which
            exactly matches the supplied <paramref name="targetName" /> will receive the callback and can respond to the callback request with a result.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.Prediction.CodeGenerationConfig.OutputSeqLength">
            <summary>
            Max number of output tokens for each result
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.Prediction.CodeGenerationConfig.EodToken">
            <summary>
            Token id for stopping the decoding
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.Prediction.CodeGenerationConfig.BeamSize">
            <summary>
            Beam search size, also the max number of results
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.Prediction.CodeGenerationConfig.MaxSequenceLength">
            <summary>
            Max local context length used for inference when using regular model.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.Prediction.CodeGenerationConfig.MaxExtendedContextSequenceLength">
            <summary>
            Max extended context length used for inference when using extended context model. 
            This will be the max length for local context and extended context. 
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.Prediction.CodeGenerationConfig.NumberOfResults">
            <summary>
            The number of results gets returned, should always less than or equal to the BeamSize
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.Prediction.Prediction.ContainsEndOfLine">
            <summary>
            bool to indicate whether this prediction contain end of line or not
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.Prediction.Prediction.PredictionResultTokens">
            <summary>
            List of tokens of the resulting prediction 
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Language.Prediction.PredictionGeneratorBase">
            <summary>
            A generator for making predictions of the code that might follow a particular normalized context.
            </summary>
            <remarks>
            <para>This is a MEF export.</para>
            <para>This is a singleton that is implemented by Visual Studio.</para>
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Language.Prediction.PredictionGeneratorBase.IsInitialized">
            <summary>
            Is the whole line prediction service initialized?
            </summary>
            <remarks>
            Note that the whole line prediction service may take several seconds to initialize and no calls to <see cref="M:Microsoft.VisualStudio.Language.Prediction.PredictionGeneratorBase.NormalizeContextToken(System.String,System.Type)" /> or
            <see cref="M:Microsoft.VisualStudio.Language.Prediction.PredictionGeneratorBase.RequestPredictionAsync(System.String,Microsoft.VisualStudio.Language.Prediction.CodeGenerationConfig,System.Threading.CancellationToken)" /> should be made until this method returns true.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Language.Prediction.PredictionGeneratorBase.NormalizeContextToken(System.String,System.Type)">
            <summary>
            Normalize a token of context according to the literal Type passed.
            </summary>
            <remarks>Supported literalTypes are typeof(string) (which should be used for any string constant), typeof(char), and typeof(int) (which should be used for any numeric constant).</remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Language.Prediction.PredictionGeneratorBase.RequestPredictionAsync(System.String,Microsoft.VisualStudio.Language.Prediction.CodeGenerationConfig,System.Threading.CancellationToken)">
            <summary>
            Get a prediction based on a provided context.
            <param name="context">The normalized context</param>
            <param name="config">The code generation configuration</param>
            <param name="cancel">The cancellation token</param>
            <return>A prediction containing all the prediction results returned from the AI Model based on the provided <paramref name="context" />.</return>
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Language.Prediction.PredictionGeneratorBase.RequestPredictionAsync(System.String,System.String,Microsoft.VisualStudio.Language.Prediction.CodeGenerationConfig,System.Threading.CancellationToken)">
            <summary>
            Get a prediction based on a provided context and extended context.
            <param name="context">The normalized context</param>
            <param name="extendedContext">The normalized context</param>
            <param name="config">The code generation configuration</param>
            <param name="cancel">The cancellation token</param>
            <return>A prediction containing all the prediction results returned from the AI Model based on the provided <paramref name="context" /> and <paramref name="extendedContext" />.</return>
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Language.Proposals.CompletionState.#ctor(System.String,Microsoft.VisualStudio.Text.SnapshotSpan,System.Boolean,Microsoft.VisualStudio.Text.Adornments.ImageElement)">
            <summary>
            Create a new <see cref="T:Microsoft.VisualStudio.Language.Proposals.CompletionState" />.
            </summary>
            <param name="selectedItem">The selected item from the completion list. Note this corresponds to the insertion text of the completion item.</param>
            <param name="applicableToSpan">The applicableTo span of the current IntelliSense session.</param>
            <param name="isSoftSelection">Whether the item is selected as a soft selection in IntelliSense.</param>
            <param name="icon">The icon associated with the selected completion item.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Language.Proposals.CompletionState.#ctor(System.String,Microsoft.VisualStudio.Text.SnapshotSpan,System.Boolean,Microsoft.VisualStudio.Text.Adornments.ImageElement,System.Object)">
            <summary>
            Create a new <see cref="T:Microsoft.VisualStudio.Language.Proposals.CompletionState" />.
            </summary>
            <param name="selectedItem">The selected item from the completion list. Note this corresponds to the insertion text of the completion item.</param>
            <param name="applicableToSpan">The applicableTo span of the current IntelliSense session.</param>
            <param name="isSoftSelection">Whether the item is selected as a soft selection in IntelliSense.</param>
            <param name="icon">The icon associated with the selected completion item.</param>
            <param name="underlyingCompletionItem">A WeakReference on the actual completion item selected in IntelliSense.</param>
            <remarks>
            A WeakReference is used to store the <paramref name="underlyingCompletionItem" /> because proposals can persist long after the completion session is
            dismissed and we do not want to pin anything associated with the session.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Language.Proposals.CompletionState.TranslateTo(Microsoft.VisualStudio.Text.ITextSnapshot)">
            <summary>
            Create a new <see cref="T:Microsoft.VisualStudio.Language.Proposals.CompletionState" /> by translating this to the specified <paramref name="snapshot" />.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.Proposals.CompletionState.IsSnippet">
            <summary>
            Returns whether this corresponds to a snippet.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.Proposals.CompletionState.IsSuggestion">
            <summary>
            Returns whether this corresponds to an IntelliCode suggestion.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.Proposals.CompletionState.IsPreprocessorDirective">
            <summary>
            Returns whether this corresponds to a preprocessor directive.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Language.Proposals.Field.Span">
            <summary>
            The span in the associated <see cref="P:Microsoft.VisualStudio.Language.Proposals.ProposedEdit.ReplacementText" /> associated with the field.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Language.Proposals.Field.Id">
            <summary>
            The identifier of the field. All fields with the same <see cref="F:Microsoft.VisualStudio.Language.Proposals.Field.Id" /> are edited together.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Language.Proposals.Field.#ctor(Microsoft.VisualStudio.Text.Span,System.Int32)">
            <summary>
            Create a new Field.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Language.Proposals.LazyProposalCollectionBase">
            <summary>
            An extension of <see cref="T:Microsoft.VisualStudio.Language.Proposals.ProposalCollectionBase" /> that allows additional proposals to be generated lazily.
            </summary>
            <remarks>&gt;
            The implementation of the inline completion service will call <see cref="M:Microsoft.VisualStudio.Language.Proposals.LazyProposalCollectionBase.GenerateLazyProposalsAsync(System.Threading.CancellationToken)" /> on
            each <see cref="T:Microsoft.VisualStudio.Language.Proposals.ProposalCollectionBase" /> that implements <see cref="T:Microsoft.VisualStudio.Language.Proposals.LazyProposalCollectionBase" /> after either the a proposal has been displayed for a short time period
            or the user attempts to navigate to the next or previous proposal.
            </remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.Language.Proposals.Proposal">
            <summary>
            Convenience class that implements <see cref="T:Microsoft.VisualStudio.Language.Proposals.ProposalBase" />.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Language.Proposals.Proposal.TryCreateProposal(System.String,System.Collections.Generic.IReadOnlyList{Microsoft.VisualStudio.Language.Proposals.ProposedEdit},Microsoft.VisualStudio.Text.VirtualSnapshotPoint,Microsoft.VisualStudio.Language.Proposals.CompletionState,Microsoft.VisualStudio.Language.Proposals.ProposalFlags,System.Func{System.Boolean},System.String,System.String,System.String,Microsoft.VisualStudio.Text.NormalizedSnapshotSpanCollection)">
            <summary>
            Try to create a proposal given one or more <paramref name="edits" />, a <paramref name="caret" /> position and an optional <paramref name="completionState" />.
            </summary>
            <param name="description">A description of the intent of the proposal. Can be null.</param>
            <param name="edits">A proposed edit for the proposal.</param>
            <param name="caret">The location of the caret at the time the proposal was generated.</param>
            <param name="completionState">The completion state at the time the proposal was generated.</param>
            <param name="flags">Flags associated with the proposal.</param>
            <param name="commitAction">An action to perform when the proposal is accepted. If null, <paramref name="edits" /> will be applied. Otherwise, the action is
            executed (and no edits are performed by the suggestion service, and the returned value will be passed to the command handler.</param>
            <param name="proposalId">A unique identifier associated with the proposal for use with telemetry.</param>
            <param name="acceptText">Localized text shown next to the accept button in the hint bar. If null, a localized string similar to "to accept" will be used.</param>
            <param name="nextText">Localized text shown next to the next suggestion button in the hint bar. If null, a localized string similar to "next suggestion" will be used.</param>
            <param name="scope">Scope of the code associated with the proposal.</param>
            <returns>null if the proposal is not valid by the rules defined in <see cref="M:Microsoft.VisualStudio.Language.Proposals.Proposal.ValidateEdits(System.Collections.Generic.IReadOnlyList{Microsoft.VisualStudio.Language.Proposals.ProposedEdit},Microsoft.VisualStudio.Text.VirtualSnapshotPoint,Microsoft.VisualStudio.Language.Proposals.CompletionState)" />.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Language.Proposals.Proposal.ValidateEdits(System.Collections.Generic.IReadOnlyList{Microsoft.VisualStudio.Language.Proposals.ProposedEdit},Microsoft.VisualStudio.Text.VirtualSnapshotPoint,Microsoft.VisualStudio.Language.Proposals.CompletionState)">
            <summary>
            Determine if a sequence of edits is valid given the <paramref name="caret" /> position and an optional <paramref name="completionState" />.
            </summary>
            <returns>false if any of the edits violate the constraints below.</returns>
            <remarks>
            Proposals are only valid if:
             If <paramref name="completionState" /> is non-null then <see cref="F:Microsoft.VisualStudio.Language.Proposals.CompletionState.ApplicableToSpan" /> must be on the same <see cref="T:Microsoft.VisualStudio.Text.ITextSnapshot" /> as <paramref name="caret" /> and
             <paramref name="caret" /> must be contained in the ApplicableToSpan.
             No edits intersect any other edit.
             If <paramref name="completionState" /> is non-null, then any edit that intersects <see cref="F:Microsoft.VisualStudio.Language.Proposals.CompletionState.ApplicableToSpan" /> must be a zero-length span that starts at the end of <see cref="F:Microsoft.VisualStudio.Language.Proposals.CompletionState.ApplicableToSpan" />.
             Otherwise, any edit that intersects the caret must have a length of zero.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Language.Proposals.Proposal.#ctor(System.String,System.Collections.Generic.IReadOnlyList{Microsoft.VisualStudio.Language.Proposals.ProposedEdit},Microsoft.VisualStudio.Text.VirtualSnapshotPoint,Microsoft.VisualStudio.Language.Proposals.CompletionState,Microsoft.VisualStudio.Language.Proposals.ProposalFlags,System.Func{System.Boolean},System.String,System.String,System.String,Microsoft.VisualStudio.Text.NormalizedSnapshotSpanCollection)">
            <summary>
            Create a proposal given one or more <paramref name="edits" />, a <paramref name="caret" /> position and an optional <paramref name="completionState" />.
            </summary>
            <param name="description">A description of the intent of the proposal. Can be null.</param>
            <param name="edits">A proposed edit for the proposal.</param>
            <param name="caret">The location of the caret at the time the proposal was generated.</param>
            <param name="completionState">The completion state at the time the proposal was generated.</param>
            <param name="flags">Flags associated with the proposal.</param>
            <param name="commitAction">An action to perform when the proposal is accepted. If null, <paramref name="edits" /> will be applied. Otherwise, the action is
            executed (and no edits are performed by the suggestion service, and the returned value will be passed to the command handler.</param>
            <param name="proposalId">A unique identifier associated with the proposal for use with telemetry.</param>
            <param name="acceptText">Localized text shown next to the accept button in the hint bar. If null, a localized string similar to "to accept" will be used.</param>
            <param name="nextText">Localized text shown next to the next suggestion button in the hint bar. If null, a localized string similar to "next suggestion" will be used.</param>
            <param name="scope">Scope of the code associated with the proposal.</param>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.Proposals.Proposal.Description">
            <summary>
            A description of the proposal.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.Proposals.Proposal.Edits">
            <summary>
            A list of edits that will be applied if the proposal is accepted.
            </summary>
            <remarks>All edits will be automatically updated as the user changes the buffer. If the user changes the buffer in a way this is
            incompatible with the proposed edit, then the proposal will be removed and <see cref="M:Microsoft.VisualStudio.Language.Suggestions.SuggestionBase.OnProposalUpdatedAsync(Microsoft.VisualStudio.Language.Suggestions.SuggestionSessionBase,Microsoft.VisualStudio.Language.Proposals.ProposalBase,Microsoft.VisualStudio.Language.Proposals.ProposalBase,Microsoft.VisualStudio.Language.Suggestions.ReasonForUpdate,Microsoft.VisualStudio.Text.VirtualSnapshotPoint,Microsoft.VisualStudio.Language.Proposals.CompletionState,System.Threading.CancellationToken)" />
            will be called with a <see cref="F:Microsoft.VisualStudio.Language.Suggestions.ReasonForUpdate.Diverged" />.</remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.Proposals.Proposal.AcceptText">
            <summary>
            Localized text shown next to the accept button in the hint bar. If empty, a localized
            string similar to "to accept" will be used.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.Proposals.Proposal.PreviewText">
            <summary>
            Localized text shown next to the accept button in the hint bar when displaying markers only using <see cref="F:Microsoft.VisualStudio.Language.Suggestions.EditDisplayStyle.MarkersOnlyThenGrayText" />. If null or empty, a localized
            string similar to "to preview" will be used.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.Proposals.Proposal.NextText">
            <summary>
            Localized text shown next to the next suggestion button in the hint bar. If empty, a localized
            string similar to "next suggestion" will be used.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.Proposals.Proposal.UndoDescription">
            <summary>
            Localized text used to describe the edit made by the proposal in the undo list. If null or empty, a localized
            string similar to "completion" will be used.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Language.Proposals.ProposalBase">
            <summary>
            Class that defines a set of proposed edits to the buffer that will be made if the suggestion is accepted.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.Proposals.ProposalBase.Description">
            <summary>
            A description of the proposal.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.Proposals.ProposalBase.AcceptText">
            <summary>
            Localized text shown next to the accept button in the hint bar. If null or empty, a localized
            string similar to "to accept" will be used.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.Proposals.ProposalBase.PreviewText">
            <summary>
            Localized text shown next to the accept button in the hint bar when displaying markers only using <see cref="F:Microsoft.VisualStudio.Language.Suggestions.EditDisplayStyle.MarkersOnlyThenGrayText" />. If null or empty, a localized
            string similar to "to preview" will be used.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.Proposals.ProposalBase.NextText">
            <summary>
            Localized text shown next to the next suggestion button in the hint bar. If null or empty, a localized
            string similar to "next suggestion" will be used.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.Proposals.ProposalBase.UndoDescription">
            <summary>
            Localized text used to describe the edit made by the proposal in the undo list. If null or empty, a localized
            string similar to "completion" will be used.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.Proposals.ProposalBase.Edits">
            <summary>
            A list of edits that will be applied if the proposal is accepted.
            </summary>
            <remarks>All edits will be automatically updated as the user changes the buffer. If the user changes the buffer in a way this is
            incompatible with the proposed edit, then the proposal will be removed and <see cref="M:Microsoft.VisualStudio.Language.Suggestions.SuggestionBase.OnProposalUpdatedAsync(Microsoft.VisualStudio.Language.Suggestions.SuggestionSessionBase,Microsoft.VisualStudio.Language.Proposals.ProposalBase,Microsoft.VisualStudio.Language.Proposals.ProposalBase,Microsoft.VisualStudio.Language.Suggestions.ReasonForUpdate,Microsoft.VisualStudio.Text.VirtualSnapshotPoint,Microsoft.VisualStudio.Language.Proposals.CompletionState,System.Threading.CancellationToken)" />
            will be called with a <see cref="F:Microsoft.VisualStudio.Language.Suggestions.ReasonForUpdate.Diverged" />.</remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.Proposals.ProposalBase.Caret">
            <summary>
            The position of the caret at the time the proposal was generated.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.Proposals.ProposalBase.CompletionState">
            <summary>
            The completion state at the time the proposal was generated.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.Proposals.ProposalBase.Flags">
            <summary>
            Flags describing how to process the proposal.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.Proposals.ProposalBase.CommitAction">
            <summary>
            Gets the action to be performed when the user accepts the proposal.
            </summary>
            <remarks>
            If null, the default commit action is performed. Otherwise <see cref="P:Microsoft.VisualStudio.Language.Proposals.ProposalBase.CommitAction" /> is executed and subsequent command handling will stop if
            the returned value is true.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.Proposals.ProposalBase.Scope">
            <summary>
            The scope of the code affected by the proposal.
            </summary>
            <remarks>Used to render a highlight associated with the proposal.</remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.Proposals.ProposalBase.ProposalId">
            <summary>
            Gets a unique identifier associated with the proposal that can be used when generating telemetry about the proposal.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Language.Proposals.ProposalBrokerBase">
            <summary>
            A broker that assembles the output from all of the <see cref="T:Microsoft.VisualStudio.Language.Proposals.ProposalSourceBase" />s associated with a view. This is created via the <see cref="T:Microsoft.VisualStudio.Language.Proposals.ProposalBrokerProviderBase" /> MEF export that
            is implemented by Visual Studio.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.Proposals.ProposalBrokerBase.View">
            <summary>
            The view for which the broker was created.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.Proposals.ProposalBrokerBase.AnyProposalSources">
            <summary>
            Returns true if there are any <see cref="T:Microsoft.VisualStudio.Language.Proposals.ProposalSourceBase" />s associated with the view.
            </summary>
            <remarks>
            The <see cref="T:Microsoft.VisualStudio.Language.Proposals.ProposalSourceBase" />s depend on the view's content type so this property can change if the view's content type changes.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Language.Proposals.ProposalBrokerBase.ShouldGenerateProposal(Microsoft.VisualStudio.Text.VirtualSnapshotPoint,Microsoft.VisualStudio.Language.Proposals.ProposalScenario,System.Char)">
            <summary>
            Should a proposal be generated at the <paramref name="caret" /> given <paramref name="scenario" /> and <paramref name="triggeringCharacter" />?.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Language.Proposals.ProposalBrokerBase.RequestProposals(Microsoft.VisualStudio.Text.VirtualSnapshotPoint,Microsoft.VisualStudio.Language.Proposals.CompletionState,Microsoft.VisualStudio.Language.Proposals.ProposalScenario,System.Char,System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            Request proposals from all of the applicable <see cref="T:Microsoft.VisualStudio.Language.Proposals.ProposalSourceBase" />s given <paramref name="caret" /> and <paramref name="completionState" />.
            Allow <paramref name="groupingDelay" /> to pass from the first <see cref="T:Microsoft.VisualStudio.Language.Proposals.ProposalSourceBase" /> to complete before giving up on the other sources.
            </summary>
            <returns>
            An <see cref="T:Microsoft.VisualStudio.Threading.AsyncQueue`1" /> of <see cref="T:Microsoft.VisualStudio.Language.Proposals.ProposalCollectionBase" />s. <see cref="M:Microsoft.VisualStudio.Threading.AsyncQueue`1.Complete" /> will be called on the queue when all <see cref="T:Microsoft.VisualStudio.Language.Proposals.ProposalSourceBase" />s
            have completed.
            </returns>
            <remarks>
            <para>
            The algorithm for enqueuing proposals is as follows:
            <code>
            1. Call <see cref="M:Microsoft.VisualStudio.Language.Proposals.ProposalSourceBase.RequestProposalsAsync(Microsoft.VisualStudio.Text.VirtualSnapshotPoint,Microsoft.VisualStudio.Language.Proposals.CompletionState,Microsoft.VisualStudio.Language.Proposals.ProposalScenario,System.Char,System.Threading.CancellationToken)" /> for each source.
            2. Wait until one source returns with a non-null/empty result.
            3. Wait an additional <paramref name="groupingDelay" /> to allow other sources to generate results.
            4. Enqueue all sources that generated results using the ordering specified by their <see cref="T:Microsoft.VisualStudio.Language.Proposals.ProposalSourceProviderBase" />.
            5. Enqueue remaining results in their order of completion.
            </code>
            </para>
            </remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.Language.Proposals.ProposalBrokerProviderBase">
            <summary>
            A source for <see cref="T:Microsoft.VisualStudio.Language.Proposals.ProposalBrokerBase" />s for an <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView" />
            </summary>
            <remarks>
            <para>This is a MEF export.</para>
            <para>This is a singleton that is implemented by Visual Studio.</para>
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Language.Proposals.ProposalBrokerProviderBase.GetProposalBroker(Microsoft.VisualStudio.Text.Editor.ITextView)">
            <summary>
            Get the <see cref="T:Microsoft.VisualStudio.Language.Proposals.ProposalBrokerBase" /> for the view.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Language.Proposals.ProposalCollection">
            <summary>
            A convenience class that implements <see cref="T:Microsoft.VisualStudio.Language.Proposals.ProposalCollectionBase" />.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Language.Proposals.ProposalCollectionBase">
            <summary>
            An interface that defines a collection of <see cref="T:Microsoft.VisualStudio.Language.Proposals.ProposalBase" />s about what changes the user might want to make.
            </summary>
            <remarks>
            There is also an <see cref="T:Microsoft.VisualStudio.Language.Proposals.LazyProposalCollectionBase" /> that can provide additional proposals but is only called after the initial set of
            proposals has been displayed (and not quickly dismissed by the user).
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.Proposals.ProposalCollectionBase.SourceName">
            <summary>
            Name of the <see cref="T:Microsoft.VisualStudio.Language.Proposals.ProposalSourceBase" /> that provided the proposal.
            </summary>
            <remarks>
            This value is only used for generating telemetry, it is never displayed directly to the end user.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.Proposals.ProposalCollectionBase.Proposals">
            <summary>
            Proposals associated with the collection. It is assumed there is at least one.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Language.Proposals.ProposalFlags.SingleTabToAccept">
            <summary>
            If set, accept the proposal with a single tab even if IntelliSense is up.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Language.Proposals.ProposalFlags.QueueProposalRequestOnCommit">
            <summary>
            If set, immediately queue a request for a new proposal if the user commits this proposal.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Language.Proposals.ProposalFlags.ShowCommitHighlight">
            <summary>
            Briefly show a highlight over the newly inserted/replaced text when the proposal is accepted.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Language.Proposals.ProposalFlags.SimulateBraceCompletion">
            <summary>
            The suggestion session will, if the proposal is accepted, simulate brace completion as if the user had typed the proposal (e.g. accepting "bar(" will result in "bar()" with the caret placed
            between the two parenthesis and the closing parenthesis being part of a brace completion session).
            </summary>
            <remarks>
            Note that, even if this flag is set, edits will only simulate brace completion if it is an insertion at the caret location.
            </remarks>
        </member>
        <member name="F:Microsoft.VisualStudio.Language.Proposals.ProposalFlags.MoveCaretToEnd">
            <summary>
            Move the caret to the end of the last edit after applying the edit.
            </summary>
            <remarks>
            This flag is ignored if <see cref="F:Microsoft.VisualStudio.Language.Proposals.ProposalFlags.SimulateBraceCompletion" /> is set or if any of the proposals explicitly specify an edit position via <see cref="P:Microsoft.VisualStudio.Language.Proposals.ProposedEdit.FinalCaretPosition" />.
            </remarks>
        </member>
        <member name="F:Microsoft.VisualStudio.Language.Proposals.ProposalFlags.DisableInIntelliSense">
            <summary>
            Do not display proposal if IntelliSense is being displayed.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Language.Proposals.ProposalFlags.FormatAfterCommit">
            <summary>
            Format modified text after committing.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Language.Proposals.ProposalManagerBase">
            <summary>
            Class used to control whether or not the inline completions will attempt to generate a proposal after typing a character. Created via the <see cref="T:Microsoft.VisualStudio.Language.Proposals.ProposalManagerProviderBase" /> MEF export.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Language.Proposals.ProposalManagerBase.TryGetIsProposalPosition(Microsoft.VisualStudio.Text.VirtualSnapshotPoint,Microsoft.VisualStudio.Language.Proposals.ProposalScenario,System.Char,System.Boolean@)">
            <summary>
            Try to determin whether a proposal should be generated in the given scenario.
            </summary>
            <param name="caret">Location of the caret.</param>
            <param name="scenario">The <see cref="T:Microsoft.VisualStudio.Language.Proposals.ProposalScenario" /> that instigated the request for a proposal.</param>
            <param name="triggerCharacter">The character typed for <see cref="F:Microsoft.VisualStudio.Language.Proposals.ProposalScenario.TypeChar" />.</param>
            <param name="value">Whether or not a proposal should be generated.</param>
            <returns>If true, return <paramref name="value" /> immediately. If false, call the next manager (if any).</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Language.Proposals.ProposalManagerProviderBase">
            <summary>
            A source for <see cref="T:Microsoft.VisualStudio.Language.Proposals.ProposalManagerBase" />s that control whether or not proposals are generated when the user types a character.
            </summary>
            <remarks>
            <para>The expectation is that IntelliCode will provide implementation of the <see cref="T:Microsoft.VisualStudio.Language.Proposals.ProposalManagerProviderBase" />s and <see cref="T:Microsoft.VisualStudio.Language.Proposals.ProposalManagerBase" />s and that these implementations will
            run entirely in-proc.</para>
            <para>If there are multiple <see cref="T:Microsoft.VisualStudio.Language.Proposals.ProposalManagerBase" />, then each manager's <see cref="M:Microsoft.VisualStudio.Language.Proposals.ProposalManagerBase.TryGetIsProposalPosition(Microsoft.VisualStudio.Text.VirtualSnapshotPoint,Microsoft.VisualStudio.Language.Proposals.ProposalScenario,System.Char,System.Boolean@)" />
            and the resulting value will be returned.</para>
            <para>
            This is a MEF export which should have the following attributes:
            <code>
              1. ContentType(s)
              2. Name
              3. (optional) Order
            </code>
            </para>
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Language.Proposals.ProposalManagerProviderBase.GetProposalManagerAsync(Microsoft.VisualStudio.Text.Editor.ITextView,System.Threading.CancellationToken)">
            <summary>
            Get the proposal manager for <paramref name="view" />.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Language.Proposals.ProposalManagerProviders">
            <summary>
            Names of proposal managers implemented by Visual Studio (used for ordering, <see cref="T:Microsoft.VisualStudio.Language.Proposals.ProposalManagerProviderBase" />).
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Language.Proposals.ProposalManagerProviders.IntelliCodeCPlusPlusProposalManager">
            <summary>
            The default <see cref="T:Microsoft.VisualStudio.Language.Proposals.ProposalSourceBase" /> for IntelliCode suggestions
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Language.Proposals.ProposalScenario">
            <summary>
            What triggered a request for a proposal?
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Language.Proposals.ProposalScenario.Completion">
            <summary>
            There was a change in the selected IntelliSense selection.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Language.Proposals.ProposalScenario.TypeChar">
            <summary>
            The user typed a character. In this case the triggeringCharacter parameter will indicate the character the user typed.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Language.Proposals.ProposalScenario.Return">
            <summary>
            The user typed return and a new line was inserted.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Language.Proposals.ProposalScenario.CaretMove">
            <summary>
            The caret was moved.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Language.Proposals.ProposalScenario.DivergedProposal">
            <summary>
            A proposal had been displayed and the user did something that didn't match the proposal.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Language.Proposals.ProposalScenario.CompletedProposal">
            <summary>
            The user accepted a proposal.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Language.Proposals.ProposalScenario.ExplicitInvocation">
            <summary>
            The user performed a command to explicitly generate a proposal.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Language.Proposals.ProposalScenario.Backspace">
            <summary>
            The user typed backspace.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Language.Proposals.ProposalScenario.CompletionAccepted">
            <summary>
            An Intellisence selection was accepted.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Language.Proposals.ProposalSourceBase">
            <summary>
            A source of proposals about the about the text that might follow the caret in the view. This is created by the <see cref="T:Microsoft.VisualStudio.Language.Proposals.ProposalSourceProviderBase" /> MEF export and is
            an extension point that 3rd parties can provide.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Language.Proposals.ProposalSourceBase.RequestProposalsAsync(Microsoft.VisualStudio.Text.VirtualSnapshotPoint,Microsoft.VisualStudio.Language.Proposals.CompletionState,Microsoft.VisualStudio.Language.Proposals.ProposalScenario,System.Char,System.Threading.CancellationToken)">
            <summary>
            Returns an <see cref="T:Microsoft.VisualStudio.Language.Proposals.ProposalCollectionBase" /> with any proposals for what might follow the <paramref name="caret" /> given the specified <paramref name="completionState" />, <paramref name="scenario" /> and 
            <paramref name="triggeringCharacter" />.
            </summary>
            <returns>
            The proposals for what the user might want. Can return null.
            </returns>
            <remarks>
            Can also return an <see cref="T:Microsoft.VisualStudio.Language.Proposals.LazyProposalCollectionBase" /> to allow additional proposals to be generated after the <see cref="P:Microsoft.VisualStudio.Language.Proposals.ProposalCollectionBase.Proposals" />.
            </remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.Language.Proposals.ProposalSourceProviderBase">
            <summary>
            A source for components that generate proposals in a view.
            </summary>
            <remarks>
            <para>The expectation is that there can be several <see cref="T:Microsoft.VisualStudio.Language.Proposals.ProposalSourceProviderBase" /> for a content type, some implemented by IntelliCode and others implemented by the
            appropriate language service or 3rd party extension.</para>
            <para>This is a MEF export which should have the following attributes:
            <code>
              1. ContentType(s)
              2. Name
              3. (optional) Order
            </code></para>
            </remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.Language.Proposals.ProposalSourceProviders">
            <summary>
            Names of proposal sources implemented by Visual Studio (used for ordering, <see cref="T:Microsoft.VisualStudio.Language.Proposals.ProposalSourceProviderBase" />).
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Language.Proposals.ProposalSourceProviders.IntelliCodeCPlusPlusProposalSource">
            <summary>
            The default <see cref="T:Microsoft.VisualStudio.Language.Proposals.ProposalSourceBase" /> for IntelliCode suggestions
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.Proposals.ProposedEdit.Span">
            <summary>
            The span of text that will be replaced by <see cref="P:Microsoft.VisualStudio.Language.Proposals.ProposedEdit.ReplacementText" />.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.Proposals.ProposedEdit.ReplacementText">
            <summary>
            The text used to replace <see cref="P:Microsoft.VisualStudio.Language.Proposals.ProposedEdit.Span" />.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.Proposals.ProposedEdit.Fields">
            <summary>
            A spans that describe the "fields" in <see cref="P:Microsoft.VisualStudio.Language.Proposals.ProposedEdit.ReplacementText" />, indicating position where (after committing a prediction), the user can edit the fields in a
            "snippet-like" experience.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.Proposals.ProposedEdit.FinalCaretPosition">
            <summary>
            The final caret position in <see cref="P:Microsoft.VisualStudio.Language.Proposals.ProposedEdit.ReplacementText" /> once the prediction has been committed and all field editing has finished.
            </summary>
            <remarks>
            If null, then the caret is movel only as a side-effect of the edits being applied.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.Proposals.ProposedEdit.FinalCaretVirtualOffset">
            <summary>
            The offset (in virtual space) when positioning the caret using <see cref="P:Microsoft.VisualStudio.Language.Proposals.ProposedEdit.FinalCaretPosition" />.
            </summary>
            <remarks>
            Ignored if <see cref="P:Microsoft.VisualStudio.Language.Proposals.ProposedEdit.FinalCaretPosition" /> is null or if <see cref="P:Microsoft.VisualStudio.Language.Proposals.ProposedEdit.FinalCaretPosition" /> positions the caret someplace other than at the end of an <see cref="T:Microsoft.VisualStudio.Text.ITextSnapshotLine" />.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Language.Proposals.ProposedEdit.#ctor(Microsoft.VisualStudio.Text.SnapshotSpan,System.String)">
            <summary>
            Create a new ProposedEdit.<paramref name="span" />
            </summary>
            <remarks>
            Note that the experience around managing proposed edits in which <paramref name="span" />.Length == 0 will be quite a bit different than edits in which <paramref name="span" />.Length &gt; 0
            (e.g. pure insertions vs. edits that replace text). In particular, any user edit around a replacement will be treated as if the user has diverged
            from the proposal (whereas an attempt will be made to reconcile some user edits with a pure insertion).
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Language.Proposals.ProposedEdit.#ctor(Microsoft.VisualStudio.Text.SnapshotSpan,System.String,System.Collections.Generic.IReadOnlyList{Microsoft.VisualStudio.Language.Proposals.Field})">
            <summary>
            Create a new ProposedEdit.
            </summary>
            <remarks>
            <para>Note that the experience around managing proposed edits in which span.Length == 0 will be quite a bit different than edits in which span.Length &gt; 0
            (e.g. pure insertions vs. edits that replace text). In particular, any user edit around a replacement will be treated as if the user has diverged
            from the proposal (whereas some edits around an insertion will mutate the edit appropriately).</para>
            <para>The spans in <paramref name="fields" /> correspond to positions within <paramref name="replacementText" />. For example if <paramref name="replacementText" /> is "for (int i = 0; (i &lt; length); ++i)"
            and but you want to treat "length" as a field, you'd return a <see cref="T:Microsoft.VisualStudio.Language.Proposals.Field" /> with a <see cref="F:Microsoft.VisualStudio.Language.Proposals.Field.Span" /> of [22, 28).</para>
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Language.Proposals.ProposedEdit.#ctor(Microsoft.VisualStudio.Text.SnapshotSpan,System.String,System.Collections.Generic.IReadOnlyList{Microsoft.VisualStudio.Language.Proposals.Field},System.Nullable{System.Int32},System.Int32)">
            <summary>
            Create a new ProposedEdit.
            </summary>
            <remarks>
            <para>Note that the experience around managing proposed edits in which span.Length == 0 will be quite a bit different than edits in which span.Length &gt; 0
            (e.g. pure insertions vs. edits that replace text). In particular, any user edit around a replacement will be treated as if the user has diverged
            from the proposal (whereas some edits around an insertion will mutate the edit appropriately).</para>
            <para>The spans in <paramref name="fields" /> correspond to positions within <paramref name="replacementText" />. For example if <paramref name="replacementText" /> is "for (int i = 0; (i &lt; length); ++i)"
            and but you want to treat "length" as a field, you'd return a <see cref="T:Microsoft.VisualStudio.Language.Proposals.Field" /> with a <see cref="F:Microsoft.VisualStudio.Language.Proposals.Field.Span" /> of [22, 28).</para>
            <para><paramref name="finalCaretPosition" /> corresponds to the "final" position of the caret after accepting the edit. For example, if the the replacement text is "if ()" and, after accepting
            the prediction, you want to place the caret between the parenthesis, you would set <paramref name="finalCaretPosition" /> to 4.</para>
            <para>If <paramref name="finalCaretPosition" /> causes the caret to be positioned at the end of an <see cref="T:Microsoft.VisualStudio.Text.ITextSnapshotLine" />, then <see cref="P:Microsoft.VisualStudio.Language.Proposals.ProposedEdit.FinalCaretVirtualOffset" /> can be used
            to position the caret in virtual space.</para>
            <para>If a <see cref="T:Microsoft.VisualStudio.Language.Proposals.ProposalBase" /> has multiple <see cref="T:Microsoft.VisualStudio.Language.Proposals.ProposedEdit" />s that each specify a non-null <see cref="P:Microsoft.VisualStudio.Language.Proposals.ProposedEdit.FinalCaretPosition" />, then the <see cref="P:Microsoft.VisualStudio.Language.Proposals.ProposedEdit.FinalCaretPosition" /> from
            the last edit is used.</para>
            <para>If none of the <see cref="T:Microsoft.VisualStudio.Language.Proposals.ProposedEdit" />s specify a <see cref="P:Microsoft.VisualStudio.Language.Proposals.ProposedEdit.FinalCaretPosition" />, then the caret is only moved as a side-effect of the edits being applied.</para>
            </remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.Language.Snippets.SnippetBroker">
             <summary>
             A service that starts Snippet sessions for an <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView" />.
            
             Snippet sessions allow the user to update multiple linked fields simultaneously
             and use Tab to navigate to the spans in the snippet that can be updated. A snippet
             session will end after navigating past the last field or making any buffer edits
             outside the active field.
             
             This is a MEF component part, and should be imported as follows:
             [Import]
             SnippetBroker snippetBroker = null;
             </summary>
             <remarks>
             All members must be called on the UI thread.
             </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Language.Snippets.SnippetBroker.StartFieldEditingSession(Microsoft.VisualStudio.Text.Editor.ITextView,Microsoft.VisualStudio.Language.Snippets.SnippetDefinition)">
            <summary>
            Start a snippet linked-field editing session from text already in the buffer (e.g. after accepting an IntelliCode suggestion)
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Language.Snippets.SnippetBroker.IsSnippetSessionActive(Microsoft.VisualStudio.Text.Editor.ITextView)">
            <summary>
            Determines whether there is an an active snippet session for the specified <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView" />.
            </summary>
            <param name="textView">The <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView" /> to check</param>
            <returns>
            <c>true</c> if a snippet session is active for the specified <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView" />, <c>false</c> otherwise.
            </returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Language.Snippets.SnippetDefinition">
            <summary>
            Class that defines the fields of a snippet.
            </summary>
            <remarks>
            The positions in the snippet are relative offsets into the text of the snippet
            that will be inserted into the buffer.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Language.Snippets.SnippetDefinition.#ctor(System.Collections.Generic.IReadOnlyList{Microsoft.VisualStudio.Language.Snippets.SnippetField},Microsoft.VisualStudio.Language.Snippets.SnippetOptions)">
            <summary>
            Creates a new snippet definition.
            </summary>
            <param name="fields">The primary tabstobs of the snippet that a user will update</param>
            <param name="options">The options used when activating this snippet</param>
        </member>
        <member name="T:Microsoft.VisualStudio.Language.Snippets.SnippetOptions">
            <summary>
            Defines the options for a <see cref="T:Microsoft.VisualStudio.Language.Snippets.SnippetDefinition" />
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.Snippets.SnippetOptions.FinalCaretPosition">
            <summary>
            The position the caret should be placed when the snippet is committed.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.Snippets.SnippetOptions.FinalCaretVirtualOffset">
            <summary>
            The offset (in virtual space) when positioning the caret using <see cref="P:Microsoft.VisualStudio.Language.Snippets.SnippetOptions.FinalCaretPosition" />.
            </summary>
            <remarks>
            Ignored if <see cref="P:Microsoft.VisualStudio.Language.Snippets.SnippetOptions.FinalCaretPosition" /> positions the caret someplace other than at the end of an <see cref="T:Microsoft.VisualStudio.Text.ITextSnapshotLine" />.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.Snippets.SnippetOptions.TextSnapshot">
            <summary>
            The snapshot of the buffer that this definition is valid for. If this is null,
            the spans for each field in the snippet are relative offsets to the inserted text.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Language.Snippets.SnippetField">
            <summary>
            Represents a primary field or tabstop of a snippet
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Language.Snippets.SnippetField.#ctor(Microsoft.VisualStudio.Text.Span,System.Collections.Generic.IEnumerable{Microsoft.VisualStudio.Language.Snippets.SnippetLinkedField},System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            Creates a new primary field of a snippet
            </summary>
            <param name="initialSpan">The initial span of the field.</param>
            <param name="linkedFields">The linked fields whose content depends on this field.</param>
            <param name="order">May be specified to order adjacent 0-length fields. Expected to be null for most snippets.</param>
            <param name="enclosingFieldIndex">May be specified to disambiguate if this field should be enclosed in an outer field. Expected to be null for most snippets.</param>
        </member>
        <member name="T:Microsoft.VisualStudio.Language.Snippets.SnippetLinkedField">
            <summary>
            Represents a linked field whose contents depend on a <see cref="T:Microsoft.VisualStudio.Language.Snippets.SnippetField" />
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Language.Snippets.SnippetLinkedField.#ctor(Microsoft.VisualStudio.Text.Span,System.Func{System.String,System.String},System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            Creates a new linked field of a snippet
            </summary>
            <param name="initialSpan">The initial span of the field.</param>
            <param name="transform">An optional transform that receives the text of the primary field and outputs
            the text to use for this linked field. If null, the linked field text will mirror the primary field.</param>
            <param name="order">May be specified to order adjacent 0-length fields. Expected to be null for most snippets.</param>
            <param name="enclosingFieldIndex">May be specified to disambiguate if this field should be enclosed in an outer field. Expected to be null for most snippets.</param>
        </member>
        <member name="T:Microsoft.VisualStudio.Language.Suggestions.EditDisplayStyle">
            <summary>
            How to display the suggestion to the user.
            </summary>
            <remarks>
            Only <see cref="F:Microsoft.VisualStudio.Language.Suggestions.EditDisplayStyle.GrayText" /> is supported at the moment.
            </remarks>
        </member>
        <member name="F:Microsoft.VisualStudio.Language.Suggestions.EditDisplayStyle.GrayText">
            <summary>
            Show the proposed edits as if the edits had been applied using gray text.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Language.Suggestions.EditDisplayStyle.DiffView">
            <summary>
            Show the differences between the original and proposed code using a diff-like adornment.
            </summary>
            <remarks>
            Not yet supported.
            </remarks>
        </member>
        <member name="F:Microsoft.VisualStudio.Language.Suggestions.EditDisplayStyle.SideBySide">
            <summary>
            Show the original and modified code side-by-side.
            </summary>
            <remarks>
            Not yet supported.
            </remarks>
        </member>
        <member name="F:Microsoft.VisualStudio.Language.Suggestions.EditDisplayStyle.MarkerOnly">
            <summary>
            Show highlights over text that would be changed by the suggestion (but do not preview the changes).
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Language.Suggestions.EditDisplayStyle.MarkersOnlyThenGrayText">
            <summary>
            Preview the proposed change: display using the as <see cref="F:Microsoft.VisualStudio.Language.Suggestions.EditDisplayStyle.MarkerOnly" /> style until the user tabs and then display using the <see cref="F:Microsoft.VisualStudio.Language.Suggestions.EditDisplayStyle.GrayText" /> style.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Language.Suggestions.EditDisplayStyle.StyleMask">
            <summary>
            Mask used to filter out the discrete edit styles from any option flags.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Language.Suggestions.EditDisplayStyle.ExtentHighlight">
            <summary>
            Show a vertical line to the left of all changes to indicate the range of modified text.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Language.Suggestions.EditDisplayStyle.ScopeHighlight">
            <summary>
            Show a scope highlight over the proposal's <see cref="P:Microsoft.VisualStudio.Language.Proposals.ProposalBase.Scope" />.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Language.Suggestions.EditDisplayStyle.DismissOnCaretMove">
            <summary>
            Automatically dismiss the suggestion if the caret is moved.
            </summary>
            <remarks>Even with this flag set, the proposal will be dismissed if the caret is moved outside of the <see cref="P:Microsoft.VisualStudio.Language.Proposals.ProposalBase.Scope" /> (if specified) or the range of the <see cref="P:Microsoft.VisualStudio.Language.Proposals.ProposalBase.Edits" /> (if not).</remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Language.Suggestions.ProposalDisplayedEventArgs.#ctor(System.String,Microsoft.VisualStudio.Text.Editor.ITextView,Microsoft.VisualStudio.Language.Proposals.ProposalBase)">
            <summary>
            Event args for <see cref="E:Microsoft.VisualStudio.Language.Suggestions.SuggestionServiceBase.ProposalDisplayed" />. Raised whenever a proposal is displayed to a user.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Language.Suggestions.ProposalRejectedEventArgs.#ctor(System.String,Microsoft.VisualStudio.Text.Editor.ITextView,Microsoft.VisualStudio.Language.Proposals.ProposalBase,Microsoft.VisualStudio.Language.Proposals.ProposalBase,Microsoft.VisualStudio.Language.Suggestions.ReasonForUpdate)">
            <summary>
            Event args for <see cref="E:Microsoft.VisualStudio.Language.Suggestions.SuggestionServiceBase.ProposalRejected" />. Raised whenever a proposal is no longer displayed (though
            another proposal may be displayed without the suggestion being dismissed).
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Language.Suggestions.ReasonForAccept">
            <summary>
            How was the suggestion accepted by the user?
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Language.Suggestions.ReasonForAccept.AcceptedByCommand">
            <summary>
            The suggestion was accepted by the user explicitly invoking the commit command.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Language.Suggestions.ReasonForAccept.AcceptedByOvertype">
            <summary>
            The suggestion was accepted by the user completely overtyping the suggestion.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Language.Suggestions.ReasonForDismiss">
            <summary>
            Why was a suggestion dismissed?
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Language.Suggestions.ReasonForDismiss.DismissedAfterUserEscape">
            <summary>
            User dismissed the suggestion by hitting Escape.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Language.Suggestions.ReasonForDismiss.DismissedAfterUserDelete">
            <summary>
            User dismissed the suggestion by hitting Delete.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Language.Suggestions.ReasonForDismiss.DismissedAfterViewClosed">
            <summary>
            The view containing the suggestion was closed.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Language.Suggestions.ReasonForDismiss.DismissedAfterCaretMoved">
            <summary>
            The caret was moved away from the proposed edit.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Language.Suggestions.ReasonForDismiss.DismissedBySession">
            <summary>
            The suggestion was dismissed by a call to <see cref="M:Microsoft.VisualStudio.Language.Suggestions.SuggestionSessionBase.DismissAsync(Microsoft.VisualStudio.Language.Suggestions.ReasonForDismiss,System.Threading.CancellationToken)" /> and <see cref="F:Microsoft.VisualStudio.Language.Suggestions.ReasonForDismiss.DismissedBySession" /> was
            given as the reason.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Language.Suggestions.ReasonForDismiss.DismissedAfterOutliningCollapsed">
            <summary>
            An outlining region that contained one of the edit spans was collapsed.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Language.Suggestions.ReasonForDismiss.DismissedAfterIntelliSenseDismissed">
            <summary>
            The user explicitly dismissed the IntelliSense session.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Language.Suggestions.ReasonForDismiss.DismissedAfterBufferChange">
            <summary>
            The buffer was modified by something other than a supported command (e.g. a format document instead of a typechar).
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Language.Suggestions.ReasonForDismiss.DismissedForRefinement">
            <summary>
            A refinement session -- Copilot Chat -- has take the proposal over (causing the gray text to be dismissed).
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Language.Suggestions.ReasonForDismiss.DismissedAfterCompletionChange">
            <summary>
            The user made a completion change that diverged from the current proposal and the <see cref="T:Microsoft.VisualStudio.Language.Suggestions.SuggestionSessionBase" /> as dismissed as a result.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Language.Suggestions.ReasonForDismiss.DismissedAfterCompletionItemCommitted">
            <summary>
            The user committed a completion item that diverged from the current proposal and the <see cref="T:Microsoft.VisualStudio.Language.Suggestions.SuggestionSessionBase" /> as dismissed as a result.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Language.Suggestions.ReasonForDismiss.DismissedAfterCompletionItemCommittedCommandPending">
            <summary>
            The user committed a completion item using a commit character that diverged from the current proposal and the <see cref="T:Microsoft.VisualStudio.Language.Suggestions.SuggestionSessionBase" /> as dismissed as a result.
            This update happens after the item is committed but before the commit character is added to the buffer.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Language.Suggestions.ReasonForDismiss.DismissedAfterTypeChar">
            <summary>
            The user typed a character that diverged from the current proposal and the <see cref="T:Microsoft.VisualStudio.Language.Suggestions.SuggestionSessionBase" /> as dismissed as a result.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Language.Suggestions.ReasonForDismiss.DismissedAfterReturn">
            <summary>
            The user hit return that diverged from the current proposal and the <see cref="T:Microsoft.VisualStudio.Language.Suggestions.SuggestionSessionBase" /> as dismissed as a result.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Language.Suggestions.ReasonForDismiss.DismissedAfterBackspace">
            <summary>
            The user hit backspace invalidating the current proposal and the <see cref="T:Microsoft.VisualStudio.Language.Suggestions.SuggestionSessionBase" /> as dismissed as a result.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Language.Suggestions.ReasonForDismiss.DismissedDueToInvalidProposal">
            <summary>
            The proposal given to <see cref="M:Microsoft.VisualStudio.Language.Suggestions.SuggestionSessionBase.DisplayProposalAsync(Microsoft.VisualStudio.Language.Proposals.ProposalBase,System.Threading.CancellationToken)" /> could not be reconciled with the
            current state of the buffer and the <see cref="T:Microsoft.VisualStudio.Language.Suggestions.SuggestionSessionBase" /> as dismissed as a result.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Language.Suggestions.ReasonForUpdate">
            <summary>
            Why was a proposal updated or did a user action diverge from the proposal, causing the proposal (but not the <see cref="T:Microsoft.VisualStudio.Language.Suggestions.SuggestionSessionBase" />) to be dismissed?
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Language.Suggestions.ReasonForUpdate.Updated">
            <summary>
            Bit indicating that the proposal was successfully updated after some user action
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Language.Suggestions.ReasonForUpdate.Diverged">
            <summary>
            Bit indicating that a user change happened that could not be reconciled with the user's action. If this bit has been set, then the proposal
            has been dismissed (but the <see cref="T:Microsoft.VisualStudio.Language.Suggestions.SuggestionSessionBase" /> is still active and can be used to display an alternate proposal).
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Language.Suggestions.ReasonForUpdate.UpdatedAfterCompletionChange">
            <summary>
            The <see cref="T:Microsoft.VisualStudio.Language.Proposals.CompletionState" />'s SelectedItem changed and proposal was updated.
            </summary>
            <remarks>
            This should never happen: changing the <see cref="T:Microsoft.VisualStudio.Language.Proposals.CompletionState" />'s SelectedItem will be treated as a divergence. Included for completeness.
            </remarks>
        </member>
        <member name="F:Microsoft.VisualStudio.Language.Suggestions.ReasonForUpdate.UpdatedAfterCompletionItemCommitted">
            <summary>
            The user committed the completion item using something like a tab (so no subsequent commands are pending).
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Language.Suggestions.ReasonForUpdate.UpdatedAfterCompletionItemCommittedCommandPending">
            <summary>
            The user committed the completion item using a commit character. This update happens after the item is committed but before the commit
            character is added to the buffer.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Language.Suggestions.ReasonForUpdate.UpdatedAfterTypeChar">
            <summary>
            The user executed a TypeChar command.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Language.Suggestions.ReasonForUpdate.UpdatedAfterReturn">
            <summary>
            The user executed a Return command.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Language.Suggestions.ReasonForUpdate.UpdatedAfterBackspace">
            <summary>
            The user backspaced.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Language.Suggestions.ReasonForUpdate.DivergedAfterCompletionChange">
            <summary>
            The <see cref="T:Microsoft.VisualStudio.Language.Proposals.CompletionState" />'s SelectedItem changed and proposal was dismissed.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Language.Suggestions.ReasonForUpdate.DivergedAfterCompletionItemCommitted">
            <summary>
            The user committed the completion item using something like a tab (so no subsequent commands are pending) and the change could not
            be reconciled with the proposal so the proposal was dismissed.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Language.Suggestions.ReasonForUpdate.DivergedAfterCompletionItemCommittedCommandPending">
            <summary>
            The user committed the completion item using a commit character and the change could not
            be reconciled with the proposal so the proposal was dismissed. This update happens after the item is committed but before the commit
            character is added to the buffer.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Language.Suggestions.ReasonForUpdate.DivergedAfterTypeChar">
            <summary>
            The user typed a character that could not be reconciled with the proposal.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Language.Suggestions.ReasonForUpdate.DivergedAfterReturn">
            <summary>
            The user hit return and that change could not be reconciled with the proposal.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Language.Suggestions.ReasonForUpdate.DivergedAfterBackspace">
            <summary>
            The user did a backspace and that change could not be reconciled with the proposal.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Language.Suggestions.ReasonForUpdate.DivergedDueToInvalidProposal">
            <summary>
            The proposal given to <see cref="M:Microsoft.VisualStudio.Language.Suggestions.SuggestionSessionBase.DisplayProposalAsync(Microsoft.VisualStudio.Language.Proposals.ProposalBase,System.Threading.CancellationToken)" /> could not be reconciled with the
            current state of the buffer.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Language.Suggestions.ReasonForUpdate.DivergedDueToChangeProposal">
            <summary>
            The proposal given to <see cref="M:Microsoft.VisualStudio.Language.Suggestions.SuggestionSessionBase.DisplayProposalAsync(Microsoft.VisualStudio.Language.Proposals.ProposalBase,System.Threading.CancellationToken)" /> has been removed because the user
            cycled to the next or previous proposal.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Language.Suggestions.SuggestionAcceptedEventArgs.#ctor(System.String,Microsoft.VisualStudio.Text.Editor.ITextView,Microsoft.VisualStudio.Language.Proposals.ProposalBase,Microsoft.VisualStudio.Language.Proposals.ProposalBase,Microsoft.VisualStudio.Language.Suggestions.ReasonForAccept)">
            <summary>
            Event args for <see cref="E:Microsoft.VisualStudio.Language.Suggestions.SuggestionServiceBase.SuggestionAccepted" />. Raised whenever the user accepts a proposal (causing the suggestion session to end).
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Language.Suggestions.SuggestionBase">
            <summary>
            A suggestion passed to <see cref="M:Microsoft.VisualStudio.Language.Suggestions.SuggestionManagerBase.TryDisplaySuggestionAsync(Microsoft.VisualStudio.Language.Suggestions.SuggestionBase,System.Threading.CancellationToken)" />.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.Suggestions.SuggestionBase.TipStyle">
            <summary>
            How should the tip be shown?
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.Suggestions.SuggestionBase.EditStyle">
            <summary>
            What style should be used to display the proposed edits?
            </summary>
            <remarks>
            Only <see cref="F:Microsoft.VisualStudio.Language.Suggestions.EditDisplayStyle.GrayText" /> is supported.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.Suggestions.SuggestionBase.HasMultipleSuggestions">
            <summary>
            Are there alternative suggestions?
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Language.Suggestions.SuggestionBase.OnAcceptedAsync(Microsoft.VisualStudio.Language.Suggestions.SuggestionSessionBase,Microsoft.VisualStudio.Language.Proposals.ProposalBase,Microsoft.VisualStudio.Language.Proposals.ProposalBase,Microsoft.VisualStudio.Language.Suggestions.ReasonForAccept,System.Threading.CancellationToken)">
            <summary>
            Called by the <see cref="T:Microsoft.VisualStudio.Language.Suggestions.SuggestionSessionBase" /> when the suggestion is accepted.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Language.Suggestions.SuggestionBase.OnDismissedAsync(Microsoft.VisualStudio.Language.Suggestions.SuggestionSessionBase,Microsoft.VisualStudio.Language.Proposals.ProposalBase,Microsoft.VisualStudio.Language.Proposals.ProposalBase,Microsoft.VisualStudio.Language.Suggestions.ReasonForDismiss,System.Threading.CancellationToken)">
            <summary>
            Called by the <see cref="T:Microsoft.VisualStudio.Language.Suggestions.SuggestionSessionBase" /> when the suggestion is is dismissed.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Language.Suggestions.SuggestionBase.OnProposalUpdatedAsync(Microsoft.VisualStudio.Language.Suggestions.SuggestionSessionBase,Microsoft.VisualStudio.Language.Proposals.ProposalBase,Microsoft.VisualStudio.Language.Proposals.ProposalBase,Microsoft.VisualStudio.Language.Suggestions.ReasonForUpdate,Microsoft.VisualStudio.Text.VirtualSnapshotPoint,Microsoft.VisualStudio.Language.Proposals.CompletionState,System.Threading.CancellationToken)">
            <summary>
            There has been some change (typically a change in the text buffer) that has caused a change in the proposal.
            </summary>
            <remarks>
            <para>This method should return quickly. If any substantial work needs to be done, it should be done in an asynchronous task
            that changes the proposal via <see cref="M:Microsoft.VisualStudio.Language.Suggestions.SuggestionSessionBase.DisplayProposalAsync(Microsoft.VisualStudio.Language.Proposals.ProposalBase,System.Threading.CancellationToken)" />.</para>
            <para>The suggestion service will attempt to reconcil the proposed edits with any changes the user makes.
            For example, suppose the original proposal was to insert "red" and the user types "r". In that case the edit
            will be updated to insert "ed" after the user's typed "r". If the change cannot be reconciled with the user's change,
            then the most recent version of the proposal will be returned and <paramref name="reason" /> will have the <see cref="F:Microsoft.VisualStudio.Language.Suggestions.ReasonForUpdate.Diverged" />
            flag set.
            </para>
            <para>
            Note that <paramref name="originalProposal" /> and <paramref name="currentProposal" /> may be null. This can happen if users
            actions cause a quick succession of state changes (e.g. scrolling through the IntelliSense list). In this case, the
            first change might cause the suggestion provider to clear its proposal -- set it to null -- so that, when the second state
            change happens, you'll get a ProposalUpdated event for that null proposal.
            </para>
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Language.Suggestions.SuggestionBase.OnChangeProposalAsync(Microsoft.VisualStudio.Language.Suggestions.SuggestionSessionBase,Microsoft.VisualStudio.Language.Proposals.ProposalBase,Microsoft.VisualStudio.Language.Proposals.ProposalBase,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            The user has requested an alternate proposal. Update the proposal via <see cref="M:Microsoft.VisualStudio.Language.Suggestions.SuggestionSessionBase.DisplayProposalAsync(Microsoft.VisualStudio.Language.Proposals.ProposalBase,System.Threading.CancellationToken)" />.
            </summary>
            <remarks> The callee is expected to call <see cref="M:Microsoft.VisualStudio.Language.Suggestions.SuggestionSessionBase.DisplayProposalAsync(Microsoft.VisualStudio.Language.Proposals.ProposalBase,System.Threading.CancellationToken)" /> with a new suggestion if one exists.</remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.Suggestions.SuggestionBase.Elements">
            <summary>
            A list of button elements that are displayed in the suggestion hint bar.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Language.Suggestions.SuggestionDismissedEventArgs.#ctor(System.String,Microsoft.VisualStudio.Text.Editor.ITextView,Microsoft.VisualStudio.Language.Proposals.ProposalBase,Microsoft.VisualStudio.Language.Proposals.ProposalBase,Microsoft.VisualStudio.Language.Suggestions.ReasonForDismiss)">
            <summary>
            Event args for <see cref="E:Microsoft.VisualStudio.Language.Suggestions.SuggestionServiceBase.SuggestionDismissed" />. Raised whenever a suggestion session is dismissed without accepting a proposal.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Language.Suggestions.SuggestionManagerBase">
            <summary>
            A suggestion manager for a <see cref="T:Microsoft.VisualStudio.Language.Suggestions.SuggestionProviderBase" /> and <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView" />. Created via <see cref="M:Microsoft.VisualStudio.Language.Suggestions.SuggestionServiceBase.TryRegisterProviderAsync(Microsoft.VisualStudio.Language.Suggestions.SuggestionProviderBase,Microsoft.VisualStudio.Text.Editor.ITextView,System.String,System.Threading.CancellationToken)" />.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.Suggestions.SuggestionManagerBase.View">
            <summary>
            The <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView" /> associated with the manager.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.Suggestions.SuggestionManagerBase.IsSuggestionDisplayed">
            <summary>
            Returns whether or not a suggestion is currently being displayed in the view.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.Suggestions.SuggestionManagerBase.CompletionState">
            <summary>
            Returns the completion state of the view (if any).
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Language.Suggestions.SuggestionManagerBase.DisableProviderAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Disable a provider with the given <paramref name="name" />. Dispose of the returned <see cref="T:Microsoft.VisualStudio.Threading.IAsyncDisposable" /> to reenable the provider.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Language.Suggestions.SuggestionManagerBase.TryDisplaySuggestionAsync(Microsoft.VisualStudio.Language.Suggestions.SuggestionBase,System.Threading.CancellationToken)">
            <summary>
            Try to display a <paramref name="suggestion" /> to the user.
            </summary>
            <returns>A <see cref="T:Microsoft.VisualStudio.Language.Suggestions.SuggestionSessionBase" /> if a suggestion can be displayed; null otherwise.</returns>
            <remarks>Note that nothing displayed until <see cref="M:Microsoft.VisualStudio.Language.Suggestions.SuggestionSessionBase.DisplayProposalAsync(Microsoft.VisualStudio.Language.Proposals.ProposalBase,System.Threading.CancellationToken)" /> is called.</remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Language.Suggestions.SuggestionProviderBase.EnabledAsync(System.Threading.CancellationToken)">
            <summary>
            Called when this provider has been enabled.
            </summary>
            <remarks>Providers are enabled by default.</remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Language.Suggestions.SuggestionProviderBase.DisabledAsync(System.Threading.CancellationToken)">
            <summary>
            Called when this provider has been disabled.
            </summary>
            <remarks>Providers are enabled by default.</remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Language.Suggestions.SuggestionProviderBase.SuggestionDisplayedAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Called when a suggestion is displayed by any provider.
            </summary>
            <param name="name">Name of the provider displaying the suggestion.</param>
            <param name="cancel">Cancellation token for task.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Language.Suggestions.SuggestionProviderBase.SuggestionDismissedAsync(System.Threading.CancellationToken)">
            <summary>
            Called when a suggestion displayed by a provider is dismissed.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Language.Suggestions.SuggestionProviderBase.OnCompletionSessionUiChangedAsync(Microsoft.VisualStudio.Language.Suggestions.SuggestionManagerBase,Microsoft.VisualStudio.Language.Proposals.CompletionState,System.Threading.CancellationToken)">
            <summary>
            Called whenever there is a change in the IntelliSense UI in the attached view.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Language.Suggestions.SuggestionProviderBase.OnCompletionItemAcceptedAsync(Microsoft.VisualStudio.Language.Suggestions.SuggestionManagerBase,System.Threading.CancellationToken)">
            <summary>
            Called whenever an IntelliSense item is accepted in the attached view.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Language.Suggestions.SuggestionServiceBase">
            <summary>
            MEF export for registering <see cref="T:Microsoft.VisualStudio.Language.Suggestions.SuggestionProviderBase" />s for an <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView" />.
            </summary>
            <remarks>
            <para>This is a MEF export.</para>
            <para>This is a singleton that is implemented by Visual Studio.</para>
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Language.Suggestions.SuggestionServiceBase.TryRegisterProviderAsync(Microsoft.VisualStudio.Language.Suggestions.SuggestionProviderBase,Microsoft.VisualStudio.Text.Editor.ITextView,System.String,System.Threading.CancellationToken)">
            <summary>
            Register a <paramref name="provider" /> for a specific <paramref name="view" />.
            </summary>
            <returns>
            Returns null if there is already a provider registered with the specified name.
            </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Language.Suggestions.SuggestionServiceBase.GetDisplayedProposal(Microsoft.VisualStudio.Text.Editor.ITextView)">
            <summary>
            Gets the proposal being displayed in <paramref name="view" />, if any.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Language.Suggestions.SuggestionServiceBase.DismissProposalAsync(Microsoft.VisualStudio.Text.Editor.ITextView,Microsoft.VisualStudio.Language.Suggestions.ReasonForDismiss,System.Threading.CancellationToken)">
            <summary>
            Dismiss any proposal displayed in <paramref name="view" /> for the indicated <paramref name="reason" />.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Language.Suggestions.SuggestionServiceBase.TryUpdateProposal(Microsoft.VisualStudio.Text.Editor.ITextView,Microsoft.VisualStudio.Language.Proposals.ProposalBase)">
            <summary>
            Try to update a <paramref name="proposal" /> given any changes to the view and underlying buffer.
            </summary>
            <returns>The updated proposal or null if the changes are incompatible with <paramref name="proposal" />.</returns>
            <remarks>Must be called from the UI thread.</remarks>
        </member>
        <member name="E:Microsoft.VisualStudio.Language.Suggestions.SuggestionServiceBase.ProposalDisplayed">
            <summary>
            Raised whenever a proposal is displayed to the user.
            </summary>
            <remarks>This event is intended to be used only for reporting telemetry.</remarks>
        </member>
        <member name="E:Microsoft.VisualStudio.Language.Suggestions.SuggestionServiceBase.ProposalRejected">
            <summary>
            Raised whenever a proposal is no longer displayed (though another proposal may be displayed without the suggestion being dismissed).
            </summary>
            <remarks>This event is intended to be used only for reporting telemetry.</remarks>
        </member>
        <member name="E:Microsoft.VisualStudio.Language.Suggestions.SuggestionServiceBase.SuggestionAccepted">
            <summary>
            Raised whenever the user accepts a proposal (causing the suggestion session to end).
            </summary>
            <remarks>This event is intended to be used only for reporting telemetry.</remarks>
        </member>
        <member name="E:Microsoft.VisualStudio.Language.Suggestions.SuggestionServiceBase.SuggestionDismissed">
            <summary>
            Raised whenever a suggestion session is dismissed without accepting a proposal.
            </summary>
            <remarks>This event is intended to be used only for reporting telemetry.</remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.Language.Suggestions.SuggestionServiceNames">
            <summary>
            Names of <see cref="T:Microsoft.VisualStudio.Language.Suggestions.SuggestionProviderBase" />s built into Visual Studio.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Language.Suggestions.SuggestionServiceNames.IntelliCodeLineCompletions">
            <summary>
            IntelliCode inline completion's <see cref="T:Microsoft.VisualStudio.Language.Suggestions.SuggestionProviderBase" />.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Language.Suggestions.SuggestionServiceNames.IntelliCodeSuggestions">
            <summary>
            IntelliCode suggestions's <see cref="T:Microsoft.VisualStudio.Language.Suggestions.SuggestionProviderBase" />.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Language.Suggestions.SuggestionServiceNames.IntelliCodeIntentHints">
            <summary>
            IntelliCode intent hints <see cref="T:Microsoft.VisualStudio.Language.Suggestions.SuggestionProviderBase" />.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Language.Suggestions.SuggestionServiceNames.IntelliCodeSearchHints">
            <summary>
            IntelliCode intent hints <see cref="T:Microsoft.VisualStudio.Language.Suggestions.SuggestionProviderBase" />.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Language.Suggestions.SuggestionServiceNames.IntelliCodeSuggestionHints">
            <summary>
            IntelliCode suggestions hints <see cref="T:Microsoft.VisualStudio.Language.Suggestions.SuggestionProviderBase" />.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Language.Suggestions.SuggestionServiceNames.IntelliCodeDiagnosticHints">
            <summary>
            IntelliCode diagnostic hints <see cref="T:Microsoft.VisualStudio.Language.Suggestions.SuggestionProviderBase" />.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.Suggestions.SuggestionSessionBase.View">
            <summary>
            The <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView" /> associated with the adornment.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.Suggestions.SuggestionSessionBase.Provider">
            <summary>
            The <see cref="T:Microsoft.VisualStudio.Language.Suggestions.SuggestionProviderBase" /> associated with the adornment.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.Suggestions.SuggestionSessionBase.Suggestion">
            <summary>
            The suggestion being displayed.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.Suggestions.SuggestionSessionBase.Proposal">
            <summary>
            The <see cref="P:Microsoft.VisualStudio.Language.Suggestions.SuggestionSessionBase.Proposal" /> associated with the adornment.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Language.Suggestions.SuggestionSessionBase.DisplayProposalAsync(Microsoft.VisualStudio.Language.Proposals.ProposalBase,System.Threading.CancellationToken)">
            <summary>
            Display <paramref name="content" /> to the user. Can be null (to hide the suggestion).
            </summary>
            <remarks>
            <see cref="M:Microsoft.VisualStudio.Language.Suggestions.SuggestionBase.OnProposalUpdatedAsync(Microsoft.VisualStudio.Language.Suggestions.SuggestionSessionBase,Microsoft.VisualStudio.Language.Proposals.ProposalBase,Microsoft.VisualStudio.Language.Proposals.ProposalBase,Microsoft.VisualStudio.Language.Suggestions.ReasonForUpdate,Microsoft.VisualStudio.Text.VirtualSnapshotPoint,Microsoft.VisualStudio.Language.Proposals.CompletionState,System.Threading.CancellationToken)" /> will be
            called with <see cref="F:Microsoft.VisualStudio.Language.Suggestions.ReasonForUpdate.DivergedDueToInvalidProposal" /> if the proposal cannot be reconcilled with the current state of the view and text buffer.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Language.Suggestions.SuggestionSessionBase.DismissAsync(Microsoft.VisualStudio.Language.Suggestions.ReasonForDismiss,System.Threading.CancellationToken)">
            <summary>
            Dismiss the suggestion.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Language.Suggestions.SuggestionSessionBase.CommitSuggestion(System.Boolean)">
             <summary>
             Commit the suggestion (as if the user had accepted the suggestion).
             </summary>
             <param name="commitIntelliSense">If IntelliSense is active, commit the IntelliSense selection prior to committing the suggestion.</param>
             <returns>True if subsequent command handling should be blocked.</returns>
             <remarks>
             <para>Currently defined as virtual to avoid a build break with IntelliCode. Will be changed to
             abstract soon.</para>
            <para>Will return false if no proposal is displayed.</para>
            <para>Must be called from the UI thread.</para>
             </remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.Language.Suggestions.TipElement">
            <summary>
            The description of a button displayed in the hint bar of a suggestion.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Language.Suggestions.TipElement.Content">
            <summary>
            The content displayed in the colored button. This can be a string, an <see cref="T:Microsoft.VisualStudio.Core.Imaging.ImageId" />, or null. If null, the string that corresponds
            to the keybinding of the <see cref="F:Microsoft.VisualStudio.Language.Suggestions.TipElement.CommandGuid" />, <see cref="F:Microsoft.VisualStudio.Language.Suggestions.TipElement.CommandId" /> will be displayed.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Language.Suggestions.TipElement.Label">
            <summary>
            The optional text label displayed to the right of the colored button.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Language.Suggestions.TipElement.CommandGuid">
            <summary>
            The VS command defined by <see cref="F:Microsoft.VisualStudio.Language.Suggestions.TipElement.CommandGuid" />, <see cref="F:Microsoft.VisualStudio.Language.Suggestions.TipElement.CommandId" /> will be executed when the user clicks on the tip element.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Language.Suggestions.TipElement.CommandId">
            <summary>
            The VS command defined by <see cref="F:Microsoft.VisualStudio.Language.Suggestions.TipElement.CommandGuid" />, <see cref="F:Microsoft.VisualStudio.Language.Suggestions.TipElement.CommandId" /> will be executed when the user clicks on the tip element.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Language.Suggestions.TipElement.CommandArg">
            <summary>
            The VS command argument passed to VS when the command is executed.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Language.Suggestions.TipElement.ToolTip">
            <summary>
            The tool tip shown if the user hovers over the tip element.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Language.Suggestions.TipStyle">
            <summary>
            Flags that describe how the suggestion is shown. Many of these will disappear once we have locked down the style.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Language.Suggestions.TipStyle.NeverShowTip">
            <summary>
            Never show the tip.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Language.Suggestions.TipStyle.AlwaysShowTip">
            <summary>
            Always show the tip.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Language.Suggestions.TipStyle.ShowTipOnHover">
            <summary>
            Show the tip when the user hovers over the adornment.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Language.Suggestions.TipStyle.HideTipDescription">
            <summary>
            Hide the description portion of the tip. By default, the description, accept tip, and next tip are shown.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Language.Suggestions.TipStyle.HideAcceptTip">
            <summary>
            Hide the accept tip portion (tab to accept) of the tip. By default, the description, accept tip, and next tip are shown.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Language.Suggestions.TipStyle.HideNextTip">
            <summary>
            Hide the next tip portion (ctrl-alt[, ...) of the tip. By default, the description, accept tip, and next tip are shown.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Language.Suggestions.TipStyle.TipAnchoredPlacement">
            <summary>
            Placed above and to the right of the anchor specified in <see cref="M:Microsoft.VisualStudio.Language.Suggestions.SuggestionManagerBase.TryDisplaySuggestionAsync(Microsoft.VisualStudio.Language.Suggestions.SuggestionBase,System.Threading.CancellationToken)" />.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Language.Suggestions.TipStyle.TipTopLeftPlacement">
            <summary>
            Placed above and to the right of the left edge of the edit (left is aligned with start if the edit span)
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Language.Suggestions.TipStyle.TipTopRightPlacement">
            <summary>
            Placed above and to the right of the edit (left aligned with the end of the first line of the edit)
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Language.Suggestions.TipStyle.TipRightPlacement">
            <summary>
            Placed to the right of the first line of the edit.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Language.Suggestions.TipStyle.TipBottomPlacement">
            <summary>
            Placed to the right of the last line of the edit.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Language.Suggestions.TipStyle.TipTopRightJustifiedPlacement">
            <summary>
            Placed above and with the right edge of the tip aligned with the right edge of the edit.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Language.Suggestions.TipStyle.TipPlacementMask">
            <summary>
            Mask used to mask out various possible tip placements.
            </summary>
        </member>
        <member name="T:Microsoft.Internal.VisualStudio.Language.Intellisense.ILegacyQuickInfoBrokerSupport">
            <summary>
            This interface supports the product infrastructure and should not be used.
            </summary>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.Language.Intellisense.ILegacyQuickInfoBrokerSupport.TriggerQuickInfoAsync(Microsoft.VisualStudio.Text.Editor.ITextView,Microsoft.VisualStudio.Text.ITrackingPoint,Microsoft.VisualStudio.Language.Intellisense.QuickInfoSessionOptions,Microsoft.VisualStudio.Utilities.PropertyCollection,System.Threading.CancellationToken)">
            <summary>
            This method supports the product infrastructure and should not be used.
            </summary>
        </member>
        <member name="T:Microsoft.Internal.VisualStudio.Language.Intellisense.LegacyQuickInfoMetadata">
            <summary>
            This interface supports the product infrastructure and should not be used.
            </summary>
            <remarks>
            This is a MEF metadata view, similar to IContentTypeMetadata, however it uses
            an explicit metadata class to allow it to be internal. Internal MEF metadata
            view interfaces are supported but are currently suffering from intermittent
            type load exceptions resulting from a bug in either the CLR or VS MEF.
            </remarks>
        </member>
        <member name="T:Microsoft.Internal.VisualStudio.Language.Intellisense.ILegacyQuickInfoRecalculateSupport">
            <summary>
            This interface supports the product infrastructure and should not be used.
            </summary>
        </member>
        <member name="T:Microsoft.Internal.VisualStudio.Language.Intellisense.ILegacyQuickInfoSource">
            <summary>
            This interface supports the product infrastructure and should not be used.
            </summary>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.Language.Intellisense.ILegacyQuickInfoSource.AugmentQuickInfoSession(Microsoft.VisualStudio.Language.Intellisense.IAsyncQuickInfoSession,System.Collections.Generic.IList{System.Object},Microsoft.VisualStudio.Text.ITrackingSpan@)">
            <summary>
            This interface supports the product infrastructure and should not be used.
            </summary>
        </member>
        <member name="T:Microsoft.Internal.VisualStudio.Language.Intellisense.ILegacyQuickInfoSourcesSupport">
            <summary>
            This interface supports the product infrastructure and should not be used.
            </summary>
        </member>
        <member name="P:Microsoft.Internal.VisualStudio.Language.Intellisense.ILegacyQuickInfoSourcesSupport.LegacySources">
            <summary>
            This interface supports the product infrastructure and should not be used.
            </summary>
        </member>
        <member name="T:System.Runtime.CompilerServices.IsExternalInit">
            <summary>
            Used by C# 9 for property <c>init</c> accessors.
            </summary>
        </member>
    </members>
<Signature xmlns="http://www.w3.org/2000/09/xmldsig#"><SignedInfo><CanonicalizationMethod Algorithm="http://www.w3.org/TR/2001/REC-xml-c14n-20010315" /><SignatureMethod Algorithm="http://www.w3.org/2001/04/xmldsig-more#rsa-sha256" /><Reference URI=""><Transforms><Transform Algorithm="http://www.w3.org/2000/09/xmldsig#enveloped-signature" /><Transform Algorithm="http://www.w3.org/TR/2001/REC-xml-c14n-20010315" /></Transforms><DigestMethod Algorithm="http://www.w3.org/2001/04/xmlenc#sha256" /><DigestValue>kxF8NRN+RBJp1Hxb0jbX70KpSeKa0zicdOA1aug9cCg=</DigestValue></Reference></SignedInfo><SignatureValue>uZ2dDOqRBSXqwiIDgk6BxMqfxPG2MIMhYn90r6VudPCUUKuChUsEMRTCg0kQRqrnyVI9gi90yBHZUBfis3B9T4L6AiOuCOvhmdNMWQZIoFgfc9bSm0vdd9OyY+zJmDX1qkcTJE8MPl81vQreY32BrZ5tIpPPm99hMfK6YFNKLwTKkM7yhnhjrPTaD8TlrFCleC5tn0Ao/kqIh1dogcCviDrM568vCeN3TsR4FtdeXn4sPU3azDhqGW/bO35HciYq5XyEWR27HiDT+Dfm8N/+YFWqifWeuaim8CsVLEyNOqgYr9OaKxQ6w3V7ABaxQeqSqLSr7pkOhJPpY4qMIJOipQ==</SignatureValue><KeyInfo><KeyValue><RSAKeyValue><Modulus>9CD8pjY3wxCoPmMhOkow7ycCltfqYnqk4wGNApzh2dTY+YqxozWTzJUOB38VxsgFQmXBFhOMdrGYGpvO9kdbNPkwHpTrW6hZqFuLLiRwGKEx4ZM5zVSqbHJuX2fPfUJ0Xmb+VrVsGw/BwBV2zz0rVtiSgqj3GeeGOsG7llfWyrSjyJqm5DHE3o04BAI/NuhkHOv04euiqJGvHFCL8+fXvyD9OAxq4fcJKtoyBb0PBA3oMNQeCsiUyLO+voZqVTOUsAWY0bN5YjkK4nq5DVaNdVrrowd5AX9gmz6D/TJTssns6pDCG00Y+Dh3ipWpnVmkhYcByyUSEKX3PLC8DkiAQQ==</Modulus><Exponent>AQAB</Exponent></RSAKeyValue></KeyValue><X509Data><X509Certificate>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</X509Certificate><X509Certificate>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</X509Certificate><X509Certificate>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</X509Certificate></X509Data></KeyInfo><Object Id="ts-countersig"><X509Data><X509Certificate>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</X509Certificate><X509Certificate>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</X509Certificate></X509Data><CounterSignature ts-format="cms-timestamp-message" xmlns="http://schemas.microsoft.com/xmldsig/timestamp/2003">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</CounterSignature></Object></Signature></doc>
