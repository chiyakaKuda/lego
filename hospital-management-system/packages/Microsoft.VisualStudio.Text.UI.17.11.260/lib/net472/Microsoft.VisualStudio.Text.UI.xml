<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Microsoft.VisualStudio.Text.UI</name>
    </assembly>
    <members>
        <member name="T:Microsoft.VisualStudio.Text.Adornments.ErrorTypeDefinition">
            <summary>
            Defines error types.
            </summary>
            <remarks> This is a MEF component part, and should be exported as:
            [Export(typeof(ErrorTypeDefinition))]
            </remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Adornments.IErrorProviderFactory">
            <summary>
            Gets a error tagger (a <see cref="T:Microsoft.VisualStudio.Text.Tagging.SimpleTagger`1" /> of type <see cref="T:Microsoft.VisualStudio.Text.Tagging.ErrorTag" />) for the given buffer, 
            or creates a new one if there is no error tagger already cached in the owned properties of the buffer.
            </summary>
            <remarks>This is a MEF somponent part, and should be exported with the following attribute:
            [Export(typeof(IErrorProviderFactory))]
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Adornments.IErrorProviderFactory.GetErrorTagger(Microsoft.VisualStudio.Text.ITextBuffer)">
            <summary>
            Gets the cached error tagger for a given <see cref="T:Microsoft.VisualStudio.Text.ITextBuffer" />. 
            If one does not exist, creates and caches a new <see cref="T:Microsoft.VisualStudio.Text.Tagging.SimpleTagger`1" /> 
            with the <see cref="T:Microsoft.VisualStudio.Text.ITextBuffer" />.
            </summary>
            <param name="textBuffer">The <see cref="T:Microsoft.VisualStudio.Text.ITextBuffer" /> with which to get the error tagger.</param>
            <returns>The cached error tagger for the <paramref name="textBuffer" />.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Adornments.IStructureContextSource">
            <summary>
            Provides context for structural block tool tips for a given sequence
            of <see cref="T:Microsoft.VisualStudio.Text.UI.Adornments.IStructureElement" />s.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Adornments.IStructureContextSource.GetStructureContextAsync(System.Collections.Generic.IEnumerable{Microsoft.VisualStudio.Text.UI.Adornments.IStructureElement},System.Threading.CancellationToken)">
            <summary>
            Gets the context for the given structure tags.
            </summary>
            <param name="elements">The structure tags to get context for.</param>
            <param name="token">The cancellation token for this asynchronous method call.</param>
            <returns>The object to be displayed in the structure tool tip.</returns>
            <remarks>
            If the object returned by this method implements ITextView, ITextView.Close() is called
            when the tooltip is dismissed.
            </remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Adornments.IStructureContextSourceProvider">
            <summary>
            Creates an <see cref="T:Microsoft.VisualStudio.Text.Adornments.IStructureContextSource" /> for a given buffer.
            </summary>
            <remarks>This is a MEF component part, and should be exported as follows:
            [Export(typeof(IStructureContextSourceProvider))]
            [Name("MyProviderName")]
            [ContentType("MyContentTypeName")]
            [Order(Before = "Foo", After = "Bar")]
            Component exporters must add the Name and Order attribute to define the order of the provider in the provider chain.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Adornments.IStructureContextSourceProvider.CreateStructureContextSource(Microsoft.VisualStudio.Text.Editor.ITextView)">
            <summary>
            Creates a structure context source for the given text view.
            </summary>
            <param name="textView">The text view for which to create an <see cref="T:Microsoft.VisualStudio.Text.Adornments.IStructureContextSource" />.</param>
            <returns>A valid <see cref="T:Microsoft.VisualStudio.Text.Adornments.IStructureContextSource" /> instance, or null if none could be created.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Adornments.ITextMarkerProviderFactory">
            <summary>
            Gets a text marker tagger (a <see cref="T:Microsoft.VisualStudio.Text.Tagging.SimpleTagger`1" /> of type <see cref="T:Microsoft.VisualStudio.Text.Tagging.TextMarkerTag" /> for a given buffer, or creates a new one if 
            no text marker tagger is already cached in the owned properties of the buffer.
            </summary>
            <remarks>This is a MEF Component, and should be exported with the following attribute:
            [Export(typeof(ITextMarkerProviderFactory))]
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Adornments.ITextMarkerProviderFactory.GetTextMarkerTagger(Microsoft.VisualStudio.Text.ITextBuffer)">
            <summary>
            Gets the cached text marker tagger for a given <see cref="T:Microsoft.VisualStudio.Text.ITextBuffer" />. 
            If one does not exist, creates and caches a new <see cref="T:Microsoft.VisualStudio.Text.Tagging.SimpleTagger`1" />
            with the <see cref="T:Microsoft.VisualStudio.Text.ITextBuffer" />.
            </summary>
            <param name="textBuffer">The <see cref="T:Microsoft.VisualStudio.Text.ITextBuffer" /> with which to get the text marker tagger.</param>
            <returns>The cached <see cref="T:Microsoft.VisualStudio.Text.Tagging.SimpleTagger`1" /> for <paramref name="textBuffer" />.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Adornments.PopupStyles">
            <summary>
            Represents the styles associated with pop-up windows.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Adornments.PopupStyles.None">
            <summary>
            Sets the default behavior: the pop-up window has no border, is not resizable, is not dismissed when the mouse moves,
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Adornments.PopupStyles.DismissOnMouseLeaveText">
            <summary>
            Dismiss the pop-up window if the mouse leaves the associated text span.  
            This setting is mutually exclusive with <see cref="F:Microsoft.VisualStudio.Text.Adornments.PopupStyles.DismissOnMouseLeaveTextOrContent" />.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Adornments.PopupStyles.DismissOnMouseLeaveTextOrContent">
            <summary>
            Dismiss the pop-up window if the mouse leaves the associated text span or the pop-up content.  
            This setting is mutually exclusive with <see cref="F:Microsoft.VisualStudio.Text.Adornments.PopupStyles.DismissOnMouseLeaveText" />.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Adornments.PopupStyles.PositionLeftOrRight">
            <summary>
            Try to position the pop-up window to the left or right of the visual span.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Adornments.PopupStyles.PreferLeftOrTopPosition">
            <summary>
             Try to position the pop-up window to the left or above the visual span.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Adornments.PopupStyles.RightOrBottomJustify">
            <summary>
             Align the right or bottom edges of the pop-up window with those of the visual span.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Adornments.PopupStyles.PositionClosest">
            <summary>
            Use the positioning preference specified, but if the opposite positioning can get the popup
            closer to the visual span, use the opposition positioning.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Adornments.PredefinedErrorTypeNames">
            <summary>
            Enumerates the predefined error types.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Adornments.PredefinedErrorTypeNames.SyntaxError">
            <summary>
            Represents syntax errors.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Adornments.PredefinedErrorTypeNames.CompilerError">
            <summary>
            Represents compiler errors.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Adornments.PredefinedErrorTypeNames.OtherError">
            <summary>
            Represents other errors.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Adornments.PredefinedErrorTypeNames.Warning">
            <summary>
            Represents compiler warnings.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Adornments.PredefinedErrorTypeNames.Information">
            <summary>
            Represents a piece of information.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Adornments.PredefinedErrorTypeNames.Suggestion">
            <summary>
            Represents a suggestion with no visual treatment.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Adornments.PredefinedErrorTypeNames.HintedSuggestion">
            <summary>
            Represents a suggestion with subtle visual treatment.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Adornments.PredefinedStructureTagTypes">
            <summary>
            Enumerates the predefined structural block types.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Adornments.PredefinedStructureTagTypes.Structural">
            <summary>
            Represents structural blocks, with vertical line adornments displayed.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Adornments.PredefinedStructureTagTypes.Nonstructural">
            <summary>
            Represents non-structural blocks, with no vertical line adornments
            displayed, only expand and collapse.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Adornments.PredefinedStructureTagTypes.Comment">
            <summary>
            Represents a code comment, with vertical line adornments.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Adornments.PredefinedStructureTagTypes.PreprocessorRegion">
            <summary>
            Represents a PreprocessorRegion, with vertical line adornments.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Adornments.PredefinedStructureTagTypes.Imports">
            <summary>
            Represents an Import or Imports Block, with vertical line adornments.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Adornments.PredefinedStructureTagTypes.Namespace">
            <summary>
            Represents a Namespace, with vertical line adornments.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Adornments.PredefinedStructureTagTypes.Type">
            <summary>
            Represents a Type, with vertical line adornments.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Adornments.PredefinedStructureTagTypes.Member">
            <summary>
            Represents a class Member, such as a method or property, with vertical line adornments.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Adornments.PredefinedStructureTagTypes.Statement">
            <summary>
            Represents a Statement, with vertical line adornments.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Adornments.PredefinedStructureTagTypes.Conditional">
            <summary>
            Represents a Conditional, with vertical line adornments.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Adornments.PredefinedStructureTagTypes.Loop">
            <summary>
            Represents a Loop, with vertical line adornments.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Adornments.PredefinedStructureTagTypes.Expression">
            <summary>
            Represents an Expression, with vertical line adornments.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Adornments.IToolTipPresenter">
            <summary>
            A platform-specific ToolTip implementation.
            </summary>
            <remarks>
            This type is proffered to the IDE via an <see cref="T:Microsoft.VisualStudio.Text.Adornments.IToolTipPresenterFactory" /> and is
            always constructed and called purely on the UI thread. Each <see cref="T:Microsoft.VisualStudio.Text.Adornments.IToolTipPresenter" />
            is a single-use object that is responsible for converting the given content to 
            into platform-specific UI elements and displaying them in a popup UI.
            </remarks>
        </member>
        <member name="E:Microsoft.VisualStudio.Text.Adornments.IToolTipPresenter.Dismissed">
            <summary>
            Invoked upon dismissal of the ToolTip's popup view.
            </summary>
            <remarks>
            This event should be fired regardless of the reason for the popup's dismissal.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Adornments.IToolTipPresenter.StartOrUpdate(Microsoft.VisualStudio.Text.ITrackingSpan,System.Collections.Generic.IEnumerable{System.Object})">
            <summary>
            Constructs a popup containing a platform-specific UI representation of <paramref name="content" />.
            </summary>
            <remarks>
            This method can be called multiple times to refresh the content and applicableToSpan.
            </remarks>
            <param name="applicableToSpan">The span of text for which the tooltip is kept open.</param>
            <param name="content">
            A platform independent representation of the tooltip content. <see cref="T:Microsoft.VisualStudio.Text.Adornments.IToolTipPresenter" />s
            should use the <see cref="T:Microsoft.VisualStudio.Text.Adornments.IViewElementFactoryService" /> to convert <paramref name="content" />
            to platform specific UI elements.
            </param>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Adornments.IToolTipPresenter.Dismiss">
            <summary>
            Dismisses the popup and causes <see cref="E:Microsoft.VisualStudio.Text.Adornments.IToolTipPresenter.Dismissed" /> to be fired.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Adornments.IToolTipPresenterFactory">
            <summary>
            Proffers a platform-specific <see cref="T:Microsoft.VisualStudio.Text.Adornments.IToolTipPresenter" /> to the IDE.
            </summary>
            <remarks>
            This class will always be constructed and called purely from the UI thread.
            Extenders can construct their own presenter and supersede the default
            one via MEF ordering. Presenter providers should return a new ToolTip each
            time they are called and should support multiple simultaneous open tips.
            </remarks>
            <example>
            <code>
            [Export(typeof(IToolTipPresenterFactory))]
            [Name(nameof("super cool tooltip factory"))]
            [Order(Before = "default")]
            </code>
            </example>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Adornments.IToolTipPresenterFactory.Create(Microsoft.VisualStudio.Text.Editor.ITextView,Microsoft.VisualStudio.Text.Adornments.ToolTipParameters)">
            <summary>
            Constructs a new instance of <see cref="T:Microsoft.VisualStudio.Text.Adornments.IToolTipPresenter" /> for the current platform.
            </summary>
            <param name="textView">
            The view that owns the tooltip.
            </param>
            <param name="parameters">
            Parameters to create the tooltip with. Never null.
            </param>
            <returns>A <see cref="T:Microsoft.VisualStudio.Text.Adornments.IToolTipPresenter" /> for the current platform.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Adornments.IToolTipService">
            <summary>
            Cross platform service for the creation and management of ToolTips.
            </summary>
            <remarks>
            This class is a MEF component part and it can be imported via the code in the example.
            </remarks>
            <example>
            <code>
            [Import]
            internal IToolTipService tooltipService;
            </code>
            </example>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Adornments.IToolTipService.CreatePresenter(Microsoft.VisualStudio.Text.Editor.ITextView,Microsoft.VisualStudio.Text.Adornments.ToolTipParameters)">
            <summary>
            Creates a new non-visible ToolTip presenter.
            </summary>
            <param name="textView">
            The view that owns the tooltip.
            </param>
            <param name="parameters">
            Parameters to create the tooltip with. Default is mouse tracking.
            </param>
            <returns>A new non-visible <see cref="T:Microsoft.VisualStudio.Text.Adornments.IToolTipPresenter" />.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Adornments.IViewElementFactory">
            <summary>
            Converts from an object to its equivalent platform specific UI element.
            </summary>
            <remarks>
            <para>
            This type allows the same intermediate type to be rendered on different platforms through
            the use of platform specific exports that live in that platform's UI layer.
            </para>
            <para>
            You must specify the type converted from and the type converted to
            using <see cref="T:Microsoft.VisualStudio.Utilities.TypeConversionAttribute" />.
            </para>
            <para>
            You can supersede an existing <see cref="T:Microsoft.VisualStudio.Text.Adornments.IViewElementFactory" /> converting
            for the same (to, from) pair via MEF <see cref="T:Microsoft.VisualStudio.Utilities.OrderAttribute" />s.
            </para>
            </remarks>
            <example>
            <code>
            [Export(typeof(IViewElementFactory))]
            [Name("My object converter")]
            [TypeConversion(from: typeof(object), to: typeof(UIElement))]
            [Order(Before = "Default object converter")]
            </code>
            </example>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Adornments.IViewElementFactory.CreateViewElement``1(Microsoft.VisualStudio.Text.Editor.ITextView,System.Object)">
            <summary>
            Converts <paramref name="model" /> into an equivalent object of type <typeparamref name="TView" />.
            </summary>
            <exception cref="T:System.ArgumentException">Thrown if the conversion is unknown or unsupported.</exception>
            <typeparam name="TView">The base type of the view element on the specific platform.</typeparam>
            <param name="textView">The view that owns the control that will host this view element.</param>
            <param name="model">The object to convert to a view element.</param>
            <returns>A new object of type <typeparamref name="TView" />.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Adornments.IViewElementFactoryService">
            <summary>
            A service for converting from data objects to their platform specific UI representation.
            </summary>
            <remarks>
            <para>
            This is a MEF service that can be obtained via the <see cref="T:System.ComponentModel.Composition.ImportAttribute" /> in a MEF exported class.
            </para>
            <para>
            The editor supports <see cref="T:Microsoft.VisualStudio.Text.Adornments.ClassifiedTextElement" />s, <see cref="T:Microsoft.VisualStudio.Text.Adornments.ContainerElement" />, <see cref="T:Microsoft.VisualStudio.Text.Adornments.ImageElement" />s, and <see cref="T:System.Object" />
            on all platforms. Text and image elements are converted to colorized text and images respectively and
            other objects are displayed as the <see cref="T:System.String" /> returned by <see cref="M:System.Object.ToString" />
            unless an extender exports a <see cref="T:Microsoft.VisualStudio.Text.Adornments.IViewElementFactory" /> for that type.
            </para>
            On Windows only, <see cref="T:Microsoft.VisualStudio.Text.ITextBuffer" />, <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView" />, and UIElement are also directly
            supported.
            </remarks>
            <example>
            <code>
            [Import]
            internal IViewElementFactoryService viewElementFactoryService;
            </code>
            </example>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Adornments.IViewElementFactoryService.CreateViewElement``1(Microsoft.VisualStudio.Text.Editor.ITextView,System.Object)">
            <summary>
            Converts <paramref name="model" /> into an equivalent object of type <typeparamref name="TView" />.
            </summary>
            <typeparam name="TView">The base type of the view element on the specific platform.</typeparam>
            <param name="textView">The textView that owns the control that will host this view element.</param>
            <param name="model">The object to convert to a view element.</param>
            <returns>A new object of type <typeparamref name="TView" /> or null if the conversion is unknown.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Adornments.ToolTipParameters">
            <summary>
            Determines behavior for a <see cref="T:Microsoft.VisualStudio.Text.Adornments.IToolTipPresenter" />.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Adornments.ToolTipParameters.Default">
            <summary>
            Default options for a mouse tracking tooltip.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Adornments.ToolTipParameters.#ctor(System.Boolean,System.Boolean,System.Func{System.Boolean},System.Boolean,System.Boolean)">
            <summary>
            Creates a new instance of <see cref="T:Microsoft.VisualStudio.Text.Adornments.ToolTipParameters" />.
            </summary>
            <param name="trackMouse">
            If true, dismisses the tooltip when the mouse leaves the applicable span.
            </param>
            <param name="ignoreBufferChange">
            If true, and if the tooltip is mouse tracking, does not dismiss when the buffer changes.
            </param>
            <param name="keepOpenFunc">
            A callback function that determines wehther or not to keep open the tooltip
            in mouse tracking sessions, despite the mouse being outside the tooltip.
            </param>
            <param name="ignoreCaretPositionChange">
            If true, and if the tooltip is span tracking, does not dismiss when the caret position changes.
            </param>
            /// <param name="dismissWhenOffscreen">
            If true, and the tooltip is span tracking, dismisses the tooltip if it's scrolled off the screen or focus changes. If false, hides the tooltip in these scenarios,
            but shows it again when the span is back on the screen.
            </param>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Adornments.ToolTipParameters.#ctor(System.Boolean,System.Boolean,System.Func{System.Boolean})">
            <summary>
            Creates a new instance of <see cref="T:Microsoft.VisualStudio.Text.Adornments.ToolTipParameters" />.
            </summary>
            <param name="trackMouse">
            If true, dismisses the tooltip when the mouse leaves the applicable span.
            </param>
            <param name="ignoreBufferChange">
            If true, and if the tooltip is mouse tracking, does not dismiss when the buffer changes.
            </param>
            <param name="keepOpenFunc">
            A callback function that determines wehther or not to keep open the tooltip
            in mouse tracking sessions, despite the mouse being outside the tooltip.
            </param>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Adornments.ToolTipParameters.TrackMouse">
            <summary>
            Gets whether or not the tooltip can be dismissed by the mouse leaving the
            applicable span.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Adornments.ToolTipParameters.IgnoreBufferChange">
            <summary>
            Gets whether or not the tooltip is closed when the buffer changes.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Adornments.ToolTipParameters.IgnoreCaretPositionChange">
            <summary>
            Gets whether or not the tooltip is closed when the caret position changes.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Adornments.ToolTipParameters.DismissWhenOffScreen">
            <summary>
            Gets whether or not the tooltip is dismissed if it goes off the screen through scrolling or changing windows.
            If this is set to false the tooltip is hidden, but reshown if you navigate back to the tooltip position.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Adornments.ToolTipParameters.KeepOpen">
            <summary>
            Gets whether or not the tooltip should stay open even if the
            mouse is outside of the tip.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Adornments.ClassifiedTextElement">
            <summary>
            Represents a block of classified text in an <see cref="T:Microsoft.VisualStudio.Text.Adornments.IToolTipService" /> <see cref="T:Microsoft.VisualStudio.Text.Adornments.IToolTipPresenter" />.
            </summary>
            <remarks>
            Classified text is a span of text with a corresponding classification type name. On
            <see cref="M:Microsoft.VisualStudio.Text.Adornments.IToolTipPresenter.StartOrUpdate(Microsoft.VisualStudio.Text.ITrackingSpan,System.Collections.Generic.IEnumerable{System.Object})" />,
            the classified text is converted to a platform-specific block of runs of formatted (colorized) text via
            the <see cref="T:Microsoft.VisualStudio.Text.Adornments.IViewElementFactoryService" /> and is displayed.
            </remarks>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Adornments.ClassifiedTextElement.TextClassificationTypeName">
            <summary>
            Classification name for text.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Adornments.ClassifiedTextElement.#ctor(Microsoft.VisualStudio.Text.Adornments.ClassifiedTextRun[])">
            <summary>
            Creates a new instance of classified text.
            </summary>
            <param name="runs">A sequence of zero or more runs of classified text.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Adornments.ClassifiedTextElement.#ctor(System.Collections.Generic.IEnumerable{Microsoft.VisualStudio.Text.Adornments.ClassifiedTextRun})">
            <summary>
            Creates a new instance of classified text.
            </summary>
            <param name="runs">A sequence of zero or more runs of classified text.</param>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Adornments.ClassifiedTextElement.Runs">
            <summary>
            A sequence of classified runs of text.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Adornments.ClassifiedTextElement.CreateHyperlink(System.String,System.String,System.Action)">
            <summary>
            Creates a new element with a hyperlink.
            </summary>
            <param name="text">The text rendered by this run.</param>
            <param name="tooltip">The tooltip for the hyperlink.</param>
            <param name="navigationAction">The action to execute on navigation.</param>
            <returns><see cref="T:Microsoft.VisualStudio.Text.Adornments.ClassifiedTextElement" /> containing the hyperlink.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Adornments.ClassifiedTextElement.CreatePlainText(System.String)">
            <summary>
            Creates a new element with plain text.
            </summary>
            <param name="text">The text rendered by this element.</param>
            <returns><see cref="T:Microsoft.VisualStudio.Text.Adornments.ClassifiedTextElement" /> containing the text.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Adornments.ClassifiedTextRun">
            <summary>
            Represents a contiguous run of classified text in an <see cref="T:Microsoft.VisualStudio.Text.Adornments.IToolTipService" /> <see cref="T:Microsoft.VisualStudio.Text.Adornments.IToolTipPresenter" />.
            </summary>
            <remarks>
            Classified text runs live in <see cref="T:Microsoft.VisualStudio.Text.Adornments.ClassifiedTextElement" />s and are a string, classification pair. On
            <see cref="M:Microsoft.VisualStudio.Text.Adornments.IToolTipPresenter.StartOrUpdate(Microsoft.VisualStudio.Text.ITrackingSpan,System.Collections.Generic.IEnumerable{System.Object})" />,
            the classified text is converted to a platform-specific run of formatted (colorized) text via
            the <see cref="T:Microsoft.VisualStudio.Text.Adornments.IViewElementFactoryService" /> and is displayed.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Adornments.ClassifiedTextRun.#ctor(System.String,System.String)">
            <summary>
            Creates a new run of classified text.
            </summary>
            <param name="classificationTypeName">
            A name indicating a <see cref="T:Microsoft.VisualStudio.Text.Classification.IClassificationType" /> that maps to a format that will be applied to the text.
            </param>
            <param name="text">The text rendered by this run.</param>
            <remarks>
            Classification types can be platform specific. Only classifications defined in PredefinedClassificationTypeNames
            are supported cross platform.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Adornments.ClassifiedTextRun.#ctor(System.String,System.String,Microsoft.VisualStudio.Text.Adornments.ClassifiedTextRunStyle)">
            <summary>
            Creates a new run of classified text.
            </summary>
            <param name="classificationTypeName">
            A name indicating a <see cref="T:Microsoft.VisualStudio.Text.Classification.IClassificationType" /> that maps to a format that will be applied to the text.
            </param>
            <param name="text">The text rendered by this run.</param>
            <param name="style">The style that will be applied to the text.</param>
            <remarks>
            Classification types can be platform specific. Only classifications defined in PredefinedClassificationTypeNames
            are supported cross platform.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Adornments.ClassifiedTextRun.#ctor(System.String,System.String,Microsoft.VisualStudio.Text.Adornments.ClassifiedTextRunStyle,System.String)">
            <summary>
            Creates a new run of classified and marked text.
            </summary>
            <param name="classificationTypeName">
            A name indicating a <see cref="T:Microsoft.VisualStudio.Text.Classification.IClassificationType" /> that maps to a format that will be applied to the text.
            </param>
            <param name="text">The text rendered by this run.</param>
            <param name="style">The style that will be applied to the text.</param>
            <param name="markerTagType">
            A name indicating <see cref="P:Microsoft.VisualStudio.Text.Tagging.ITextMarkerTag.Type" /> of <see cref="T:Microsoft.VisualStudio.Text.Tagging.ITextMarkerTag" /> whose background will be applied to the text.
            </param>
            <remarks>
            Classification types can be platform specific. Only classifications defined in PredefinedClassificationTypeNames
            are supported cross platform.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Adornments.ClassifiedTextRun.#ctor(System.String,System.String,System.Action,System.String,Microsoft.VisualStudio.Text.Adornments.ClassifiedTextRunStyle)">
            <summary>
            Creates a new run of classified text.
            </summary>
            <param name="classificationTypeName">
            A name indicating a <see cref="T:Microsoft.VisualStudio.Text.Classification.IClassificationType" /> that maps to a format that will be applied to the text.
            </param>
            <param name="text">The text rendered by this run.</param>
            <param name="style">The style that will be applied to the text.</param>
            <param name="navigationAction"></param>
            <param name="tooltip"></param>
            <remarks>
            Classification types can be platform specific. Only classifications defined in PredefinedClassificationTypeNames
            are supported cross platform.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Adornments.ClassifiedTextRun.ClassificationTypeName">
            <summary>
            The name of the classification which maps to formatting properties that will be applied to this text.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Adornments.ClassifiedTextRun.Text">
            <summary>
            The text that will be formatted by <see cref="P:Microsoft.VisualStudio.Text.Adornments.ClassifiedTextRun.ClassificationTypeName" />'s corresponding formatting.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Adornments.ClassifiedTextRun.MarkerTagType">
            <summary>
            The <see cref="P:Microsoft.VisualStudio.Text.Tagging.ITextMarkerTag.Type" /> of the <see cref="T:Microsoft.VisualStudio.Text.Tagging.ITextMarkerTag" /> whose properties will be applied to this text.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Adornments.ClassifiedTextRun.Style">
            <summary>
            The style that will be applied to the text.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Adornments.ClassifiedTextRun.Tooltip">
            <summary>
            The text that will be displayed on the hyperlink tooltip.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Adornments.ClassifiedTextRun.NavigationAction">
            <summary>
            The navigation action for the hyperlink.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Adornments.ClassifiedTextRunStyle">
            <summary>
            The text style for a <see cref="T:Microsoft.VisualStudio.Text.Adornments.ClassifiedTextRun" />.
            </summary>
            <remarks>
            By default, text is displayed using tooltip preferences, but colorized using text editor
            colors in order to make tooltips that look visually like UI, but match the semantic
            colorization of the code.
            </remarks>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Adornments.ClassifiedTextRunStyle.Plain">
            <summary>
            Plain text.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Adornments.ClassifiedTextRunStyle.Bold">
            <summary>
            Bolded text.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Adornments.ClassifiedTextRunStyle.Italic">
            <summary>
            Italic text.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Adornments.ClassifiedTextRunStyle.Underline">
            <summary>
            Underlined text.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Adornments.ClassifiedTextRunStyle.UseClassificationFont">
            <summary>
            Use the font specified by the classification.
            </summary>
            <remarks>
            If applied, the classification's code font is used instead
            of the default tooltip font.
            </remarks>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Adornments.ClassifiedTextRunStyle.UseClassificationStyle">
            <summary>
            Use the style specified by the classification.
            </summary>
            <remarks>
            If applied, the classification's bold, italic, and underline
            settings are used instead of the default tooltip style. Note
            that additional styles can be layered on top of the classification's
            style by adding <see cref="F:Microsoft.VisualStudio.Text.Adornments.ClassifiedTextRunStyle.Bold" />, <see cref="F:Microsoft.VisualStudio.Text.Adornments.ClassifiedTextRunStyle.Italic" />, or <see cref="F:Microsoft.VisualStudio.Text.Adornments.ClassifiedTextRunStyle.Underline" />.
            </remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Adornments.ContainerElement">
            <summary>
            Represents a container of zero or more elements for display in an <see cref="T:Microsoft.VisualStudio.Text.Adornments.IToolTipPresenter" />.
            </summary>
            <remarks>
            Elements are translated to platform-specific UI constructs via the <see cref="T:Microsoft.VisualStudio.Text.Adornments.IViewElementFactoryService" />.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Adornments.ContainerElement.#ctor(Microsoft.VisualStudio.Text.Adornments.ContainerElementStyle,System.Collections.Generic.IEnumerable{System.Object})">
            <summary>
            Constructs a new container.
            </summary>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="elements" /> is <c>null</c>.</exception>
            <param name="style">The layout style for the container.</param>
            <param name="elements">The <see cref="T:Microsoft.VisualStudio.Text.Adornments.IViewElementFactoryService" /> elements to display.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Adornments.ContainerElement.#ctor(Microsoft.VisualStudio.Text.Adornments.ContainerElementStyle,System.Object[])">
            <summary>
            Constructs a new container.
            </summary>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="elements" /> is <c>null</c>.</exception>
            <param name="style">The layout style for the container.</param>
            <param name="elements">The elements to translate to UI and display via the <see cref="T:Microsoft.VisualStudio.Text.Adornments.IViewElementFactoryService" />.</param>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Adornments.ContainerElement.Elements">
            <summary>
            The elements to be displayed in the container.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Adornments.ContainerElement.Style">
            <summary>
            The layout style for the container.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Adornments.ContainerElementStyle">
            <summary>
            The layout style for a <see cref="T:Microsoft.VisualStudio.Text.Adornments.ContainerElement" />.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Adornments.ContainerElementStyle.Wrapped">
            <summary>
            Contents are end-to-end, and wrapped when the control becomes too wide.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Adornments.ContainerElementStyle.Stacked">
            <summary>
            Contents are stacked vertically.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Adornments.ContainerElementStyle.VerticalPadding">
            <summary>
            Additional padding above and below content.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Adornments.ImageElement">
             <summary>
             Represents cross platform compatible image.
             </summary>
            
             <remarks>
             <see cref="T:Microsoft.VisualStudio.Text.Adornments.ImageElement" />s should be constructed with <see cref="T:Microsoft.VisualStudio.Core.Imaging.ImageId" />s
             that correspond to an image on that platform.
             </remarks>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Adornments.ImageElement.Empty">
            <summary>
            Represents the empty <see cref="T:Microsoft.VisualStudio.Text.Adornments.ImageElement" />. This field is read-only.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Adornments.ImageElement.#ctor(Microsoft.VisualStudio.Core.Imaging.ImageId)">
            <summary>
            Creates a new instance of an image element.
            </summary>
            <param name="imageId"> A unique identifier for an image</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Adornments.ImageElement.#ctor(Microsoft.VisualStudio.Core.Imaging.ImageId,System.String)">
            <summary>
            Creates a new instance of an image element.
            </summary>
            <param name="imageId"> A unique identifier for an image</param>
            <param name="automationName"> Localized description of the image</param>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Adornments.ImageElement.ImageId">
            <summary>
            A unique identifier for an image.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Adornments.ImageElement.AutomationName">
            <summary>
            Localized description of the image
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Adornments.ThematicBreakElement">
            <summary>
            Represents a thematic break in an <see cref="T:Microsoft.VisualStudio.Text.Adornments.IToolTipService" /> <see cref="T:Microsoft.VisualStudio.Text.Adornments.IToolTipPresenter" />.
            </summary>
            <remarks>
            The thematic break is converted to a platform-specific UI element via
            the <see cref="T:Microsoft.VisualStudio.Text.Adornments.IViewElementFactoryService" /> and is displayed.
            </remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Editor.IAccessibleAdornmentControl">
            <summary>
            Represents an adornment that should be read aloud by screen readers. Should mainly be implemented for unfocusable UI controls that live in/on a text line. 
            </summary>
            <remarks>This should be implemented by the control associated with the adornment tag./&gt;.</remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.IAccessibleAdornmentControl.GetAutomationText">
            <summary>
            Gets the text to be read by the screen reader.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.IAudioProvider.GetAudioCue(Microsoft.VisualStudio.Text.Tagging.ITag)">
            <summary>
            Get an <see cref="T:Microsoft.VisualStudio.Audio.AudioDefinition" /> that matches a given <see cref="T:Microsoft.VisualStudio.Text.Tagging.ITag" />
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Editor.Commanding.Commands.CodeCleanUpCommandArgs">
            <summary>
            Base class fort Code Cleanup actions. In the UI, bind to derived classes such as <see cref="T:Microsoft.VisualStudio.Text.Editor.Commanding.Commands.CodeCleanUpDefaultProfileCommandArgs" />.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Editor.Commanding.Commands.ErrorCommandArgsBase">
            <summary>
            Base <see cref="T:Microsoft.VisualStudio.Text.Editor.Commanding.EditorCommandArgs" /> type for navigation between errors.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.Commanding.Commands.ErrorCommandArgsBase.ErrorTagTypeNames">
            <summary>
            The list of <see cref="P:Microsoft.VisualStudio.Text.Tagging.IErrorTag.ErrorType" /> name strings of tags applicable to this command invocation.
            </summary>
            <remarks>
            Can be <c>null</c>, indicating that this command applies to all types of errors.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.Commanding.Commands.ErrorCommandArgsBase.#ctor(Microsoft.VisualStudio.Text.Editor.ITextView,Microsoft.VisualStudio.Text.ITextBuffer,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Creates an instance of <see cref="T:Microsoft.VisualStudio.Text.Editor.Commanding.Commands.ErrorCommandArgsBase" /> with a list of matching error types.
            </summary>
            <param name="textView">The <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView" /> upon which to invoke the command.</param>
            <param name="subjectBuffer">The <see cref="T:Microsoft.VisualStudio.Text.ITextBuffer" /> upon which to invoke the command.</param>
            <param name="errorTypeNames">A list of error type names to include.</param>
            <remarks>
            <paramref name="errorTypeNames" /> defaults to the set of all defined error types if not specified.
            </remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Editor.Commanding.Commands.IncrementLastSecondaryCaretCommandArgs">
            <summary>
            This command refers to the gesture which takes the last secondary caret as defined in
            <see cref="T:Microsoft.VisualStudio.Text.Editor.Commanding.Commands.RemoveLastSecondaryCaretCommandArgs" />, and moving it to the location where a caret would
            be added by <see cref="T:Microsoft.VisualStudio.Text.Editor.Commanding.Commands.InsertNextMatchingCaretCommandArgs" />. This command is only available if there are
            already multiple carets.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Editor.Commanding.Commands.InsertAllMatchingCaretsCommandArgs">
            <summary>
            This command refers to the gesture to select all instances of text that matches the current primary selection.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Editor.Commanding.Commands.InsertNextMatchingCaretCommandArgs">
            <summary>
            This command refers to the gesture to add a new caret at the next instance of whatever the primary selection contains within the given view.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Editor.Commanding.Commands.MoveLastCaretDownCommandArgs">
            <summary>
            This command refers to the gesture which takes the last secondary caret as defined in
            <see cref="T:Microsoft.VisualStudio.Text.Editor.Commanding.Commands.RemoveLastSecondaryCaretCommandArgs" />, and moving it to the location where a caret would
            be added by <see cref="T:Microsoft.VisualStudio.Text.Editor.Commanding.Commands.InsertNextMatchingCaretCommandArgs" />. This command is only available if there are
            already multiple carets.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Editor.Commanding.Commands.NavigateToNextIssueInDocumentCommandArgs">
            <summary>
            <see cref="T:Microsoft.VisualStudio.Text.Editor.Commanding.EditorCommandArgs" /> for next error command.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.Commanding.Commands.NavigateToNextIssueInDocumentCommandArgs.#ctor(Microsoft.VisualStudio.Text.Editor.ITextView,Microsoft.VisualStudio.Text.ITextBuffer)">
            <summary>
            Creates an instance of <see cref="T:Microsoft.VisualStudio.Text.Editor.Commanding.Commands.NavigateToNextIssueInDocumentCommandArgs" /> with a list of error types.
            </summary>
            <param name="textView">The <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView" /> upon which to invoke the command.</param>
            <param name="subjectBuffer">The <see cref="T:Microsoft.VisualStudio.Text.ITextBuffer" /> upon which to invoke the command.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.Commanding.Commands.NavigateToNextIssueInDocumentCommandArgs.#ctor(Microsoft.VisualStudio.Text.Editor.ITextView,Microsoft.VisualStudio.Text.ITextBuffer,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Creates an instance of <see cref="T:Microsoft.VisualStudio.Text.Editor.Commanding.Commands.NavigateToNextIssueInDocumentCommandArgs" /> with a list of error types.
            </summary>
            <param name="textView">The <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView" /> upon which to invoke the command.</param>
            <param name="subjectBuffer">The <see cref="T:Microsoft.VisualStudio.Text.ITextBuffer" /> upon which to invoke the command.</param>
            <param name="errorTypeNames">A list of error type names to include.</param>
            <remarks>
            <paramref name="errorTypeNames" /> defaults to the set of all defined error types if not specified.
            </remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Editor.Commanding.Commands.NavigateToPreviousIssueInDocumentCommandArgs">
            <summary>
            <see cref="T:Microsoft.VisualStudio.Text.Editor.Commanding.EditorCommandArgs" /> for next error command.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.Commanding.Commands.NavigateToPreviousIssueInDocumentCommandArgs.#ctor(Microsoft.VisualStudio.Text.Editor.ITextView,Microsoft.VisualStudio.Text.ITextBuffer)">
            <summary>
            Creates an instance of <see cref="T:Microsoft.VisualStudio.Text.Editor.Commanding.Commands.NavigateToNextIssueInDocumentCommandArgs" /> with a list of error types.
            </summary>
            <param name="textView">The <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView" /> upon which to invoke the command.</param>
            <param name="subjectBuffer">The <see cref="T:Microsoft.VisualStudio.Text.ITextBuffer" /> upon which to invoke the command.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.Commanding.Commands.NavigateToPreviousIssueInDocumentCommandArgs.#ctor(Microsoft.VisualStudio.Text.Editor.ITextView,Microsoft.VisualStudio.Text.ITextBuffer,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Creates an instance of <see cref="T:Microsoft.VisualStudio.Text.Editor.Commanding.Commands.NavigateToPreviousIssueInDocumentCommandArgs" /> with a list of error types.
            </summary>
            <param name="textView">The <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView" /> upon which to invoke the command.</param>
            <param name="subjectBuffer">The <see cref="T:Microsoft.VisualStudio.Text.ITextBuffer" /> upon which to invoke the command.</param>
            <param name="errorTypeNames">A list of error type names to include.</param>
            <remarks>
            <paramref name="errorTypeNames" /> defaults to the set of all defined error types if not specified.
            </remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Editor.Commanding.Commands.RemoveLastSecondaryCaretCommandArgs">
            <summary>
            This command refers to the gesture used to remove a secondary caret from a text view. The the caret to remove is identified
            as the last caret in a circular loop, starting at the primary caret. Effectively, that means either the caret directly above
            the primary caret, or the last one in the view. This command is not available if there is only one caret.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Editor.Commanding.Commands.RotatePrimaryCaretNextCommandArgs">
            <summary>
            This command refers to the gesture to change the primary caret to the next caret in the document, and make that visible to the user.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Editor.Commanding.Commands.RotatePrimaryCaretPreviousCommandArgs">
            <summary>
            This command refers to the gesture to make the primary caret the next one up in the document, and make it visible to the user.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.Commanding.Commands.SaveCommandArgs.IsImplicitSave">
            <summary>
            When save command is executed from an autosave event set to true
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.Commanding.Commands.ShowContextMenuCommandArgs.X">
            <summary>
            X coordinate for the context menu, optionally provided by the caller of the command.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.Commanding.Commands.ShowContextMenuCommandArgs.Y">
            <summary>
            Y coordinate for the context menu, optionally provided by the caller of the command.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.Commanding.Commands.ShowContextMenuCommandArgs.#ctor(Microsoft.VisualStudio.Text.Editor.ITextView,Microsoft.VisualStudio.Text.ITextBuffer)">
            <summary>
            Creates an empty instance of the <see cref="T:Microsoft.VisualStudio.Text.Editor.Commanding.Commands.ShowContextMenuCommandArgs" />, for the
            purpose of passing to the <see cref="M:Microsoft.VisualStudio.Commanding.IChainedCommandHandler`1.GetCommandState(`0,System.Func{Microsoft.VisualStudio.Commanding.CommandState})" />
            to determine the state of the command.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.Commanding.Commands.ShowContextMenuCommandArgs.#ctor(Microsoft.VisualStudio.Text.Editor.ITextView,Microsoft.VisualStudio.Text.ITextBuffer,System.Double,System.Double)">
            <summary>
            Creates an instance of the <see cref="T:Microsoft.VisualStudio.Text.Editor.Commanding.Commands.ShowContextMenuCommandArgs" /> to execute the command.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Editor.Commanding.EditorCommandArgs">
            <summary>
            A base class for all editor command arguments.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.Commanding.EditorCommandArgs.SubjectBuffer">
            <summary>
            A subject buffer to execute a command on.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.Commanding.EditorCommandArgs.TextView">
            <summary>
            An <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView" /> to execute a command on.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.Commanding.EditorCommandArgs.#ctor(Microsoft.VisualStudio.Text.Editor.ITextView,Microsoft.VisualStudio.Text.ITextBuffer)">
            <summary>
            Creates new instance of the <see cref="T:Microsoft.VisualStudio.Text.Editor.Commanding.EditorCommandArgs" /> with given
            <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView" /> and <see cref="T:Microsoft.VisualStudio.Text.ITextBuffer" />.
            </summary>
            <param name="textView">A <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView" /> to execute a command on.</param>
            <param name="subjectBuffer">A <see cref="T:Microsoft.VisualStudio.Text.ITextBuffer" /> to execute command on.</param>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Editor.Commanding.ICommandingTextBufferResolver">
            <summary>
            Given a text view and a command type, resolves a list of text buffers on which a command should be executed.
            Default implementation of this service returns a list of buffers in the text view which can be mapped
            to the caret position. Other implementations might take into acount text selection in addition to the caret position,
            for example when executing Format Document command in a projection scenario.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.Commanding.ICommandingTextBufferResolver.ResolveBuffersForCommand``1">
            <summary>
            Given a command type, resolves a list of text buffers on which a command should be executed.
            </summary>
            <typeparam name="TArgs">Command type.</typeparam>
            <returns>A list of text buffers on which a command should be executed.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Editor.Commanding.ICommandingTextBufferResolverProvider">
            <summary>
            Provides a <see cref="T:Microsoft.VisualStudio.Text.Editor.Commanding.ICommandingTextBufferResolver" /> for a given
            <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView" /> and content type.
            </summary>
            <remarks>This is a MEF component and should be exported as
            
            Export(typeof(ICommandingTextBufferResolverProvider))]
            [ContentType("MyContentType")]
            internal class MyBufferResolverProvider : ICommandingTextBufferResolverProvider
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.Commanding.ICommandingTextBufferResolverProvider.CreateResolver(Microsoft.VisualStudio.Text.Editor.ITextView)">
            <summary>
            Creates a <see cref="T:Microsoft.VisualStudio.Text.Editor.Commanding.ICommandingTextBufferResolver" /> for a given
            <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView" />.
            </summary>
            <param name="textView">A <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView" /> to create a text buffer resolver for.</param>
            <returns>A new instance of <see cref="T:Microsoft.VisualStudio.Text.Editor.Commanding.ICommandingTextBufferResolver" />.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Editor.Commanding.IEditorCommandHandlerService">
            <summary>
            A service to execute commands on a text view.
            </summary>
            <remarks>
            Instances of this service are created by <see cref="T:Microsoft.VisualStudio.Text.Editor.Commanding.IEditorCommandHandlerServiceFactory" />.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.Commanding.IEditorCommandHandlerService.GetCommandState``1(System.Func{Microsoft.VisualStudio.Text.Editor.ITextView,Microsoft.VisualStudio.Text.ITextBuffer,``0},System.Func{Microsoft.VisualStudio.Commanding.CommandState})">
            <summary>
            Get the <see cref="T:Microsoft.VisualStudio.Commanding.CommandState" /> for command handlers of a given command.
            </summary>
            <param name="argsFactory">A factory of <see cref="T:Microsoft.VisualStudio.Text.Editor.Commanding.EditorCommandArgs" /> that specifies what kind of command is being queried.</param>
            <param name="nextCommandHandler">The next command handler to be called if no command handlers were
            able to determine the command state.</param>
            <typeparam name="T">The type of the command being queried.</typeparam>
            <returns>The command state of a given command.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.Commanding.IEditorCommandHandlerService.Execute``1(System.Func{Microsoft.VisualStudio.Text.Editor.ITextView,Microsoft.VisualStudio.Text.ITextBuffer,``0},System.Action)">
            <summary>
            Execute a given command on the <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView" /> associated with this <see cref="T:Microsoft.VisualStudio.Text.Editor.Commanding.IEditorCommandHandlerService" /> instance.
            </summary>
            <param name="argsFactory">A factory of <see cref="T:Microsoft.VisualStudio.Text.Editor.Commanding.EditorCommandArgs" /> that specifies what kind of command is being executed.</param>
            <param name="nextCommandHandler">The next command handler to be called if no command handlers were
            able to handle the command.</param>
            <typeparam name="T">The type of the command being executed.</typeparam>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Editor.Commanding.IEditorCommandHandlerServiceFactory">
            <summary>
            A factory producing <see cref="T:Microsoft.VisualStudio.Text.Editor.Commanding.IEditorCommandHandlerService" /> used to execute commands in a given text view.
            </summary>
            <remarks>
            This is a MEF component and should be imported as
            
            [Import]
            private IEditorCommandHandlerServiceFactory factory;
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.Commanding.IEditorCommandHandlerServiceFactory.GetService(Microsoft.VisualStudio.Text.Editor.ITextView)">
            <summary>
            Gets or creates an <see cref="T:Microsoft.VisualStudio.Text.Editor.Commanding.IEditorCommandHandlerService" /> instance for a given <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView" />.
            </summary>
            <remarks>Only one <see cref="T:Microsoft.VisualStudio.Text.Editor.Commanding.IEditorCommandHandlerService" /> instance is ever created for each <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView" />.</remarks>
            <param name="textView">A text view to get or create <see cref="T:Microsoft.VisualStudio.Text.Editor.Commanding.IEditorCommandHandlerService" /> for.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.Commanding.IEditorCommandHandlerServiceFactory.GetService(Microsoft.VisualStudio.Text.Editor.ITextView,Microsoft.VisualStudio.Text.ITextBuffer)">
            <summary>
            Creates a new <see cref="T:Microsoft.VisualStudio.Text.Editor.Commanding.IEditorCommandHandlerService" /> instance for a given <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView" /> and <see cref="T:Microsoft.VisualStudio.Text.ITextBuffer" />.
            </summary>
            <param name="textView">A text view to create <see cref="T:Microsoft.VisualStudio.Text.Editor.Commanding.IEditorCommandHandlerService" /> for.</param>
            <param name="subjectBuffer">A text buffer to create <see cref="T:Microsoft.VisualStudio.Text.Editor.Commanding.IEditorCommandHandlerService" /> for.</param>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Editor.Commanding.IEditorCommandKeyBindingService">
            <summary>
            A service that can provide platform specific keybindings for a command.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.Commanding.IEditorCommandKeyBindingService.GetKeyBindings``1">
            <summary>
            Returns a list of keyboard bindings for a <typeparamref name="T" /> command.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Editor.Commanding.IEditorCommandPerformanceService">
            <summary>
            Allows measuring time used executing commands by <see cref="T:Microsoft.VisualStudio.Text.Editor.Commanding.IEditorCommandHandlerService" />
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.Commanding.IEditorCommandPerformanceService.BeforeExecution(Microsoft.VisualStudio.Commanding.CommandArgs)">
            <summary>
            Executed before command chain is executed.
            </summary>
            <param name="args">Argument is same object as in <see cref="M:Microsoft.VisualStudio.Text.Editor.Commanding.IEditorCommandPerformanceService.AfterExecution(Microsoft.VisualStudio.Commanding.CommandArgs)" /></param>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.Commanding.IEditorCommandPerformanceService.AfterExecution(Microsoft.VisualStudio.Commanding.CommandArgs)">
            <summary>
            Executed after whole command chain is executed.
            </summary>
            <param name="args">Argument is same object as in <see cref="M:Microsoft.VisualStudio.Text.Editor.Commanding.IEditorCommandPerformanceService.BeforeExecution(Microsoft.VisualStudio.Commanding.CommandArgs)" /></param>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Editor.Commanding.IEditorCommandPerformanceServiceFactory">
            <summary>
            Optional factory implemented by host to measure performance of command chains execution.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.Commanding.IEditorCommandPerformanceServiceFactory.GetService(Microsoft.VisualStudio.Text.Editor.ITextView)">
            <summary>
            Returns service implementation which tracks commands executuion performance.
            </summary>
            <param name="textView">Service can be view specific or not.</param>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Editor.InternalOptions">
            <summary>
            Various editor options that we shouldn't be made public.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Editor.InternalOptions.EditorVerticalScrollSensitivityId">
            <summary>
            The option definition that determines the vertical scroll sensitivity in Editor.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Editor.InternalOptions.EditorHorizontalScrollSensitivityId">
            <summary>
            The option definition that determines the horizontal scroll sensitivity in Editor.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Editor.InternalOptions.MaxRtfCopyLengthName">
            <summary>
            The option definition that determines the max RTF copy length in Editor.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Editor.InternalOptions.EnableRtfCopyName">
            <summary>
            The option definition that determines the max RTF copy length in Editor.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Editor.InternalOptions.UseAccurateClassificationForRtfCopyName">
            <summary>
            The option definition that determines whether or not accurate classification is enabled.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Editor.MouseClickKind.Off">
            <summary>
             Turn off the mouse click
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Editor.MouseClickKind.SingleClick">
            <summary>
             Mouse single click
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Editor.MouseClickKind.DoubleClick">
            <summary>
             Mouse double click
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Editor.PrimeEditorExtensionsKind">
            <summary>
            Determines which Editor extensions can be preloaded on file open.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Editor.PrimeEditorExtensionsKind.None">
            <summary>
            Don't preload any extensions
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Editor.PrimeEditorExtensionsKind.CreationListeners">
            <summary>
            Preload Creation Listeners
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Editor.StickyScrollScopeOverflowKind.ShowOuterScopes">
            <summary>
             Stick outer scopes
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Editor.StickyScrollScopeOverflowKind.ShowInnerScopes">
            <summary>
             Stick inner scopes
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Editor.ViewOptionDefinition`1">
            <summary>
            Defines a <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView" />-specific editor option.
            </summary>
            <remarks>
            This is a MEF component part, and should be exported with:
            [Export(typeof(EditorOptionDefinition))]
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.ViewOptionDefinition`1.IsApplicableToScope(Microsoft.VisualStudio.Utilities.IPropertyOwner)">
            <summary>
            Determines whether the option is applicable to the specified scope.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Editor.OptionsExtensionMethods.TextViewOptionExtensions">
            <summary>
            Provides methods for <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView" />-related options.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.OptionsExtensionMethods.TextViewOptionExtensions.IsVirtualSpaceEnabled(Microsoft.VisualStudio.Text.Editor.IEditorOptions)">
            <summary>
            Determines whether virtual space is enabled for the specified set of editor options.
            </summary>
            <param name="options">The set of editor options.</param>
            <returns><c>true</c> if virtual space is enabled, otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.OptionsExtensionMethods.TextViewOptionExtensions.IsOverwriteModeEnabled(Microsoft.VisualStudio.Text.Editor.IEditorOptions)">
            <summary>
            Determines whether overwrite mode is enabled with the specified set of editor options.
            </summary>
            <param name="options">The set of editor options.</param>
            <returns><c>true</c> if overwrite mode is enabled, otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.OptionsExtensionMethods.TextViewOptionExtensions.IsAutoScrollEnabled(Microsoft.VisualStudio.Text.Editor.IEditorOptions)">
            <summary>
            Determines whether auto-scroll is enabled with the specified set of editor options.
            </summary>
            <param name="options">The set of editor options.</param>
            <returns><c>true</c> if auto-scroll is enabled, otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.OptionsExtensionMethods.TextViewOptionExtensions.WordWrapStyle(Microsoft.VisualStudio.Text.Editor.IEditorOptions)">
            <summary>
            Gets the set of word wrap styles with the specified set of editor options.
            </summary>
            <param name="options">The set of editor options.</param>
            <returns>The <see cref="T:Microsoft.VisualStudio.Text.Editor.WordWrapStyles" /> of the set of editor options.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.OptionsExtensionMethods.TextViewOptionExtensions.IsVisibleWhitespaceEnabled(Microsoft.VisualStudio.Text.Editor.IEditorOptions)">
            <summary>
            Determines whether visible whitespace is enabled with the specified set of editor options.
            </summary>
            <param name="options">The set of editor options.</param>
            <returns><c>true</c> if visible whitespace is enabled, otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.OptionsExtensionMethods.TextViewOptionExtensions.DoesViewProhibitUserInput(Microsoft.VisualStudio.Text.Editor.IEditorOptions)">
            <summary>
            Determines whether the view prohibits all user input.
            </summary>
            <param name="options">The set of editor options.</param>
            <returns>if <c>true</c> then all user input to the view is prohibited.</returns>
            <remarks>The view's underlying buffer can still be modified even if this option is set.</remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.OptionsExtensionMethods.TextViewOptionExtensions.IsOutliningUndoEnabled(Microsoft.VisualStudio.Text.Editor.IEditorOptions)">
            <summary>
            Determines whether the option for outlining undo enabled in the specified <see cref="T:Microsoft.VisualStudio.Text.Editor.IEditorOptions" />.
            </summary>
            <param name="options">The <see cref="T:Microsoft.VisualStudio.Text.Editor.IEditorOptions" />.</param>
            <returns><c>true</c> if the option is enabled, otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.OptionsExtensionMethods.TextViewOptionExtensions.IsDragDropEditingEnabled(Microsoft.VisualStudio.Text.Editor.IEditorOptions)">
            <summary>
            Determines whether the option for drag/drop editing is enabled in the specified <see cref="T:Microsoft.VisualStudio.Text.Editor.IEditorOptions" />.
            </summary>
            <param name="options">The <see cref="T:Microsoft.VisualStudio.Text.Editor.IEditorOptions" /> used to look up the option value.</param>
            <returns><c>true</c> if the drag/drop editing option is enabled, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.OptionsExtensionMethods.TextViewOptionExtensions.IsViewportLeftClipped(Microsoft.VisualStudio.Text.Editor.IEditorOptions)">
            <summary>
            Determines whether the view's ViewportLeft property is clipped to the text width.
            </summary>
            <param name="options">The set of editor options.</param>
            <returns><c>true</c> if ViewportLeft is clipped, otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.OptionsExtensionMethods.TextViewOptionExtensions.ShouldMoveCaretToEndOnSelectAll(Microsoft.VisualStudio.Text.Editor.IEditorOptions)">
            <summary>
            Determines if the caret should be moved to the end of the selection after performing the "select all" operation.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Editor.OptionsExtensionMethods.TextViewHostOptionExtensions">
            <summary>
            Provides methods for <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView" /> host related options.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.OptionsExtensionMethods.TextViewHostOptionExtensions.IsVerticalScrollBarEnabled(Microsoft.VisualStudio.Text.Editor.IEditorOptions)">
            <summary>
            Determines whether the vertical scrollbar is enabled with the specified set of editor options.
            </summary>
            <param name="options">The set of editor options.</param>
            <returns><c>true</c> if the vertical scrollbar is enabled, otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.OptionsExtensionMethods.TextViewHostOptionExtensions.IsHorizontalScrollBarEnabled(Microsoft.VisualStudio.Text.Editor.IEditorOptions)">
            <summary>
            Determines whether the horizontal scrollbar is enabled with the specified set of editor options.
            </summary>
            <param name="options">The set of editor options.</param>
            <returns><c>true</c> if the horizontal scrollbar is enabled, otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.OptionsExtensionMethods.TextViewHostOptionExtensions.IsGlyphMarginEnabled(Microsoft.VisualStudio.Text.Editor.IEditorOptions)">
            <summary>
             Determines whether the glyph margin is enabled with the specified set of editor options.
            </summary>
            <param name="options">The set of editor options.</param>
            <returns><c>true</c> if the glyph margin is enabled, otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.OptionsExtensionMethods.TextViewHostOptionExtensions.IsSelectionMarginEnabled(Microsoft.VisualStudio.Text.Editor.IEditorOptions)">
            <summary>
            Determines whether the selection margin is enabled with the specified set of editor options.
            </summary>
            <param name="options">The set of editor options.</param>
            <returns><c>true</c> if the selection margin is enabled, otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.OptionsExtensionMethods.TextViewHostOptionExtensions.IsLineNumberMarginEnabled(Microsoft.VisualStudio.Text.Editor.IEditorOptions)">
            <summary>
            Determines whether the line number margin is enabled with the specified set of editor options.
            </summary>
            <param name="options">The set of editor options.</param>
            <returns><c>true</c> if the line number margin is enabled, otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.OptionsExtensionMethods.TextViewHostOptionExtensions.IsChangeTrackingEnabled(Microsoft.VisualStudio.Text.Editor.IEditorOptions)">
            <summary>
            Determines whether change tracking is enabled with the specified set of editor options.
            </summary>
            <param name="options">The set of editor options.</param>
            <returns><c>true</c> if change tracking is enabled, otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.OptionsExtensionMethods.TextViewHostOptionExtensions.IsOutliningMarginEnabled(Microsoft.VisualStudio.Text.Editor.IEditorOptions)">
            <summary>
             Determines whether the Outlining margin is enabled with the specified set of editor options.
            </summary>
            <param name="options">The set of editor options.</param>
            <returns><c>true</c> if the Outlining margin is enabled, otherwise <c>false</c>.</returns>
            <remarks>Disabling the margin does NOT turn off Outlining (it just hides the margin</remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.OptionsExtensionMethods.TextViewHostOptionExtensions.IsZoomControlEnabled(Microsoft.VisualStudio.Text.Editor.IEditorOptions)">
            <summary>
            Determines whether the zoom control is enabled with the specified set of editor options.
            </summary>
            <param name="options">The set of editor options.</param>
            <returns><c>true</c> if the zoom control is enabled, otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.OptionsExtensionMethods.TextViewHostOptionExtensions.IsInContrastMode(Microsoft.VisualStudio.Text.Editor.IEditorOptions)">
            <summary>
            Determines whether the editor is in either "Extra Contrast" or "High Contrast" modes.
            </summary>
            <param name="options">The set of editor options.</param>
            <returns><c>true</c> if the editor is in either "Extra Contrast" or "High Contrast" modes, otherwise <c>false</c>.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Editor.DefaultTextViewOptions">
            <summary>
            Defines common <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView" /> options.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Editor.DefaultTextViewOptions.CutOrCopyBlankLineIfNoSelectionId">
            <summary>
            Determines whether cut and copy causes a blank line to be cut or copied when the selection is empty.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Editor.DefaultTextViewOptions.CutOrCopyIfNoSelectionId">
            <summary>
            Determines whether cut and copy current line when the selection is empty.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Editor.DefaultTextViewOptions.ViewProhibitUserInputId">
            <summary>
            Determines whether to prohibit user input. The text in the view's
            buffer can still be modified, and other views on the same buffer may allow user input.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Editor.DefaultTextViewOptions.WordWrapStyleId">
            <summary>
            Gets the word wrap style for the underlying view.
            </summary>
            <remarks>Turning word wrap on will always hide the host's horizontal scroll bar. Turning word wrap off
            will always expose the host's horizontal scroll bar.</remarks>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Editor.DefaultTextViewOptions.UseVirtualSpaceId">
            <summary>
            Determines whether to enable virtual space in the view.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Editor.DefaultTextViewOptions.IsViewportLeftClippedId">
            <summary>
            Determines whether the view's ViewportLeft property is clipped to the text width.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Editor.DefaultTextViewOptions.OverwriteModeId">
            <summary>
            Determines whether overwrite mode is enabled.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Editor.DefaultTextViewOptions.AutoScrollId">
            <summary>
            Determines whether the view should auto-scroll on text changes.
            </summary>
            <remarks>
            If this option is enabled, whenever a text change occurs and the caret is on the last line,
            the view will be scrolled to make the caret visible.
            </remarks>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Editor.DefaultTextViewOptions.UseVisibleWhitespaceId">
            <summary>
            Determines whether to show spaces and tabs as visible glyphs.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Editor.DefaultTextViewOptions.UseVisibleWhitespaceOnlyForSelectionId">
            <summary>
            Determines whether to show spaces, tabs and EndOfLine as visible glyphs only under selection.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Editor.DefaultTextViewOptions.UseVisibleWhitespaceIncludeId">
            <summary>
            Determines whether to show spaces, tabs and EndOfLine as visible glyphs only for specific type of whitespace.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Editor.DefaultTextViewOptions.ShowBlockStructureId">
            <summary>
            Enables or disables the code block structure visualizer text adornment feature.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Editor.DefaultTextViewOptions.ShouldCaretsBeRenderedId">
            <summary>
            Should the carets be rendered.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Editor.DefaultTextViewOptions.ShouldSelectionsBeRenderedId">
            <summary>
            Should the selections be rendered.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Editor.DefaultTextViewOptions.ProduceScreenReaderFriendlyTextId">
            <summary>
            Whether or not to replace the coding characters and special symbols (such as (,),{,},etc.) with their textual representation
            for automated objects to produce friendly text for screen readers.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Editor.DefaultTextViewOptions.OutliningUndoOptionId">
            <summary>
            The default option that determines whether outlining is undoable.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Editor.DefaultTextViewOptions.DisplayUrlsAsHyperlinksId">
            <summary>
            Determines whether URLs should be displayed as hyperlinks.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Editor.DefaultTextViewOptions.DragDropEditingId">
            <summary>
            The default option that determines whether drag/drop editing is enabled.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Editor.DefaultTextViewOptions.BraceCompletionEnabledOptionName">
            <summary>
            Determines if automatic brace completion is enabled.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Editor.DefaultTextViewOptions.EnableBracePairColorizationId">
            <summary>
            Determines if brace pair colorization should be enabled.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Editor.DefaultTextViewOptions.CaretWidthOptionName">
            <summary>
            Defines how wide the caret should be rendered. This is typically used to support accessibility requirements.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Editor.DefaultTextViewOptions.ShouldMoveCaretToEndOnSelectAllId">
            <summary>
            The default option that determines whether to move the caret when performing the "select all" operation.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Editor.DefaultTextViewOptions.VerticalRulersName">
            <summary>
            Defines where vertical rulers, if any, are to be drawn in the editor.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Editor.DefaultTextViewOptions.ShowErrorSquigglesId">
            <summary>
            Enables or disables the error squiggle text adornment feature.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Editor.DefaultTextViewOptions.ShowSelectionMatchesId">
            <summary>
            Enables or disables the selection matching highlight feature.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Editor.DefaultTextViewOptions.MinimumErrorSeverityId">
            <summary>
            Allows toggling of minimum error severity
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Editor.DefaultTextViewOptions.LineSpacingOptionId">
            <summary>
            Determines the vertical spacing between lines.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Editor.DefaultTextViewOptions.ShowBidirectionalTextControlCharactersOptionId">
            <summary>
            Determines whether to show bidirectional text control characters as visible glyphs.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Editor.DefaultTextViewOptions.ShowZeroWidthCharactersOptionId">
            <summary>
            Determines whether to show zero width characters as visible glyphs.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Editor.DefaultTextViewOptions.EnableImageHoverPreviewId">
            <summary>
            The default option to enable Image Hover Preview.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Editor.DefaultTextViewOptions.EnableSpellCheckerOptionId">
            <summary>
            The default option that determines whether text spell checker is enabled.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Editor.DefaultTextViewOptions.EnableAudioCuesId">
            <summary>
            The default option that determines whether audio cues should be played for tags
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Editor.DefaultTextViewOptions.EnableVerticalScrollingId">
            <summary>
            Determines whether scrolling is enabled in the view.
            </summary>
            <remarks>
            If vertical scrolling is disabled, the view is always scrolled so the first line of the buffer is flush with the top of the view.
            </remarks>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Editor.DefaultTextViewOptions.EnableAutoBraceSurroundOptionId">
            <summary>
            Determines whether auto brace surround is enabled
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Editor.DefaultTextViewOptions.AllowBottomSpaceOptionId">
            <summary>
            Determines whether blank space is allowed at the bottom of the view.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Editor.DefaultTextViewHostOptions">
            <summary>
            Names of common <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView" /> host-related options.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Editor.DefaultTextViewHostOptions.VerticalScrollBarId">
            <summary>
            Determines whether to have a vertical scroll bar.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Editor.DefaultTextViewHostOptions.HorizontalScrollBarId">
            <summary>
            Determines whether to have a horizontal scroll bar.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Editor.DefaultTextViewHostOptions.GlyphMarginId">
            <summary>
            Determines whether to have a glyph margin.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Editor.DefaultTextViewHostOptions.SuggestionMarginId">
            <summary>
            Determines whether to have a suggestion margin.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Editor.DefaultTextViewHostOptions.SelectionMarginId">
            <summary>
            Determines whether to have a selection margin.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Editor.DefaultTextViewHostOptions.LineNumberMarginId">
            <summary>
            Determines whether to have a line number margin.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Editor.DefaultTextViewHostOptions.ChangeTrackingId">
            <summary>
            Determines whether to have the change tracking margin.
            </summary>
            <remarks>The change tracking margins will "reset" (lose the change history) when this option is turned off.
            If it is turned back on, it will track changes from the time the margin is turned on.</remarks>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Editor.DefaultTextViewHostOptions.OutliningMarginId">
            <summary>
            Determines whether to have an outlining margin.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Editor.DefaultTextViewHostOptions.ZoomControlId">
            <summary>
            Determines whether to have a zoom control.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Editor.DefaultTextViewHostOptions.IsInContrastModeId">
            <summary>
            Determines whether the editor is in either "Extra Contrast" or "High Contrast" modes.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Editor.DefaultTextViewHostOptions.IsInHighContrastThemeId">
             <summary>
             Determines whether the editor is in Windows High Contrast theme.
            
             This theme is the specific VS Windows High Contrast theme that is enabled by the user. This is different from the
             Blue theme with additional contrast and the Windows OS High Contrast mode. 
             </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Editor.DefaultTextViewHostOptions.ShowNavigationBarOptionId">
            <summary>
            Determines whether or not Navigation Bar are to be shown.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Editor.DefaultTextViewHostOptions.ShowScrollBarAnnotationsOptionName">
            <summary>
            Determines whether any annotations are shown over the vertical scroll bar.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Editor.DefaultTextViewHostOptions.ShowEnhancedScrollBarOptionName">
            <summary>
            Determines whether the vertical scroll bar is shown as a standard WPF scroll bar or the new enhanced scroll bar.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Editor.DefaultTextViewHostOptions.ShowChangeTrackingMarginOptionName">
            <summary>
            Determines whether changes are shown over the vertical scroll bar.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Editor.DefaultTextViewHostOptions.ChangeTrackingMarginWidthOptionName">
            <summary>
            Determines the width of the change tracking margin.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Editor.DefaultTextViewHostOptions.ShowPreviewOptionName">
            <summary>
            Determines whether a preview tip is shown when the mouse moves over the vertical scroll bar.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Editor.DefaultTextViewHostOptions.PreviewSizeOptionName">
            <summary>
            Determines the size (in lines of text) of the default tip.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Editor.DefaultTextViewHostOptions.ShowCaretPositionOptionName">
            <summary>
            Determines whether the vertical margin shows the location of the caret.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Editor.DefaultTextViewHostOptions.SourceImageMarginEnabledOptionName">
            <summary>
            Determines whether the source image margin is displayed.
            </summary>
            <remarks>
            This margin is only shown if this option and the ShowEnhancedScrollBarOption, and the SourceImageMarginWidth is &gt;= 25.0.
            </remarks>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Editor.DefaultTextViewHostOptions.SourceImageMarginWidthOptionName">
            <summary>
            Determines the width of the source image margin.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Editor.DefaultTextViewHostOptions.ShowMarksOptionName">
            <summary>
            Determines whether marks (bookmarks, breakpoints, etc.) are shown over the vertical scroll bar.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Editor.DefaultTextViewHostOptions.ShowErrorsOptionName">
            <summary>
            Determines whether errors are shown over the vertical scroll bar.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Editor.DefaultTextViewHostOptions.MarkMarginWidthOptionName">
            <summary>
            Determines the width of the marks margin.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Editor.DefaultTextViewHostOptions.ErrorMarginWidthOptionName">
            <summary>
            Determines the width of the error margin.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Editor.DefaultTextViewHostOptions.EnableFileHealthIndicatorOptionId">
            <summary>
            Determines whether to have a file health indicator.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Editor.DefaultTextViewHostOptions.RowColMarginOptionId">
            <summary>
            Determines whether the RowColMargin should be shown.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Editor.DefaultTextViewHostOptions.SelectionStateMarginOptionId">
            <summary>
            Determines whether the SelectionStateMargin should be shown.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Editor.DefaultTextViewHostOptions.InsertModeMarginOptionId">
            <summary>
            Determines whether the InsertModeMargin should be shown.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Editor.DefaultTextViewHostOptions.IndentationCharacterMarginOptionId">
            <summary>
            Determines whether the IndentationCharacterMargin should be shown.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Editor.DefaultTextViewHostOptions.UpdateIndentationCharacterOnEditOptionId">
            <summary>
            Determines whether we should infer tabs/spaces settings on every edit. This is typically true unless coding conventions set tabs settings.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Editor.DefaultTextViewHostOptions.LineEndingMarginOptionId">
            <summary>
            Determines whether the LineEndingMargin should be shown.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Editor.DefaultTextViewHostOptions.EditingStateMarginOptionId">
            <summary>
            Determines whether the any editing state margins should be shown.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Editor.DefaultTextViewHostOptions.InteractiveChangeMarginGestureOptionId">
            <summary>
            Option that defines mouse gesture to interact with Change Margin.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Editor.DefaultTextViewHostOptions.EnableWheelScrollingId">
            <summary>
            Option that defines whether mouse wheel scrolling is supported.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Editor.DefaultTextViewHostOptions.EnableStickyScrollId">
            <summary>
            The option to enable the sticky scroll.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Editor.DefaultTextViewHostOptions.MaxLineOfStickyScrollId">
            <summary>
            The option definition that maximum number of lines in sticky scroll.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Editor.DefaultTextViewHostOptions.StickyScrollScopeOverflowKindId">
            <summary>
            The option definition that show first or last lines of lines in sticky scroll.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Editor.DefaultTextViewHostOptions.EnablePopupScalingId">
            <summary>
            The option to enable scaling of text view popups along with text view zoom.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Editor.DefaultTextViewHostOptions.PrimeEditorExtensionsId">
            <summary>
            The option to customize preloading of Editor extensions.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Editor.DragDropEditing">
            <summary>
            Defines the view option for drag/drop editing.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.DragDropEditing.Default">
            <summary>
            Gets the default value, which is <c>true</c>.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.DragDropEditing.Key">
            <summary>
            Gets the default key for the drag/drop editing option.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Editor.OverwriteMode">
            <summary>
            Defines the view option for overwrite mode.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.OverwriteMode.Default">
            <summary>
            Gets the default value, which is <c>false</c>.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.OverwriteMode.Key">
            <summary>
            Gets the default text view host value.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Editor.UseVirtualSpace">
            <summary>
            Defines the Use Virtual Space option.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.UseVirtualSpace.Default">
            <summary>
            Gets the default value, which is <c>false</c>.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.UseVirtualSpace.Key">
            <summary>
            Gets the default text view value.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Editor.IsViewportLeftClipped">
            <summary>
            Defines the Use Virtual Space option.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.IsViewportLeftClipped.Default">
            <summary>
            Gets the default value, which is <c>true</c>.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.IsViewportLeftClipped.Key">
            <summary>
            Gets the default text view value.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Editor.ViewProhibitUserInput">
            <summary>
            Defines the Prohibit User Input option.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.ViewProhibitUserInput.Default">
            <summary>
            Gets the default value, which is <c>false</c>.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.ViewProhibitUserInput.Key">
            <summary>
            GGets the default text view host value.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Editor.CutOrCopyBlankLineIfNoSelection">
            <summary>
            Defines the option to cut or copy a blank line if the selection is empty.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.CutOrCopyBlankLineIfNoSelection.Default">
            <summary>
            Gets the default value, which is <c>true</c>.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.CutOrCopyBlankLineIfNoSelection.Key">
            <summary>
            Gets the default text view host value.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Editor.CutOrCopyIfNoSelection">
            <summary>
            Determines whether cut and copy current line when the selection is empty.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Editor.WordWrapStyle">
            <summary>
            Defines the word wrap style option.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.WordWrapStyle.Default">
            <summary>
            Gets the default value, which is <c>WordWrapStyles.None</c>.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.WordWrapStyle.Key">
            <summary>
            Gets the default text view host value.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Editor.UseVisibleWhitespace">
            <summary>
            Defines the Use Visible Whitespace option.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.UseVisibleWhitespace.Default">
            <summary>
            Gets the default value, which is <c>false</c>.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.UseVisibleWhitespace.Key">
            <summary>
            Gets the default text view host value.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Editor.UseVisibleWhitespaceOnlyForSelection">
            <summary>
            Defines the Use Visible Whitespace option.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.UseVisibleWhitespaceOnlyForSelection.Default">
            <summary>
            Gets the default value, which is <c>false</c>.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.UseVisibleWhitespaceOnlyForSelection.Key">
            <summary>
            Gets the default text view host value.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Editor.UseVisibleWhitespaceEnabledTypes">
            <summary>
            Defines the Use Visible Whitespace option.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.UseVisibleWhitespaceEnabledTypes.Default">
            <summary>
            Gets the default value, which is <c>false</c>.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.UseVisibleWhitespaceEnabledTypes.Key">
            <summary>
            Gets the default text view host value.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Editor.ShowBlockStructure">
            <summary>
            Defines the Show Block Structure option.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.ShowBlockStructure.Default">
            <summary>
            Gets the default value, which is <c>true</c>.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.ShowBlockStructure.Key">
            <summary>
            Gets the default text view host value.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Editor.ShouldCaretsBeRendered">
            <summary>
            Defines the Should Carets Be Rendered option.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.ShouldCaretsBeRendered.Default">
            <summary>
            Gets the default value, which is <c>true</c>.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.ShouldCaretsBeRendered.Key">
            <summary>
            Gets the default text view host value.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Editor.ShouldSelectionsBeRendered">
            <summary>
            Defines the Should Selection Be Rendered option.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.ShouldSelectionsBeRendered.Default">
            <summary>
            Gets the default value, which is <c>true</c>.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.ShouldSelectionsBeRendered.Key">
            <summary>
            Gets the default text view host value.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Editor.ProduceScreenReaderFriendlyText">
            <summary>
            Defines the option to enable providing annotated text in automation controls so that screen readers can properly
            read contents of code.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.ProduceScreenReaderFriendlyText.Default">
            <summary>
            Gets the default value, which is <c>false</c>.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.ProduceScreenReaderFriendlyText.Key">
            <summary>
            Gets the default text view host value.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Editor.VerticalScrollBarEnabled">
            <summary>
            Defines the option to enable the vertical scroll bar.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.VerticalScrollBarEnabled.Default">
            <summary>
            Gets the default value, which is <c>true</c>.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.VerticalScrollBarEnabled.Key">
            <summary>
            Gets the default text view host value.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Editor.HorizontalScrollBarEnabled">
            <summary>
            Defines the option to enable the horizontal scroll bar.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.HorizontalScrollBarEnabled.Default">
            <summary>
            Gets the default value, which is <c>true</c>.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.HorizontalScrollBarEnabled.Key">
            <summary>
            Gets the default text view host value.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Editor.GlyphMarginEnabled">
            <summary>
            Defines the option to enable the glyph margin.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.GlyphMarginEnabled.Default">
            <summary>
            Gets the default value, which is <c>true</c>.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.GlyphMarginEnabled.Key">
            <summary>
            Gets the default text view host value.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Editor.SuggestionMarginEnabled">
            <summary>
            Defines the option to enable the suggestion margin.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.SuggestionMarginEnabled.Default">
            <summary>
            Gets the default value, which is <c>true</c>.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.SuggestionMarginEnabled.Key">
            <summary>
            Gets the default text view host value.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Editor.SelectionMarginEnabled">
            <summary>
            Defines the option to enable the selection margin.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.SelectionMarginEnabled.Default">
            <summary>
            Gets the default value, which is <c>true</c>.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.SelectionMarginEnabled.Key">
            <summary>
            Gets the default text view host value.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Editor.LineNumberMarginEnabled">
            <summary>
            Defines the option to enable the line number margin.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.LineNumberMarginEnabled.Default">
            <summary>
            Gets the default value, which is <c>false</c>.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.LineNumberMarginEnabled.Key">
            <summary>
            Gets the default text view host value.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Editor.AutoScrollEnabled">
            <summary>
            Defines the option to enable auto-scroll.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.AutoScrollEnabled.Default">
            <summary>
            Gets the default value, which is <c>false</c>.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.AutoScrollEnabled.Key">
            <summary>
            Gets the default text view host value.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Editor.ChangeTrackingMarginEnabled">
            <summary>
            Defines the option to enable the change-tracking margin.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.ChangeTrackingMarginEnabled.Default">
            <summary>
            Gets the default value, which is <c>false</c>.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.ChangeTrackingMarginEnabled.Key">
            <summary>
            Gets the default text view host value.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Editor.OutliningMarginEnabled">
            <summary>
            Defines the option to enable the Outlining margin.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.OutliningMarginEnabled.Default">
            <summary>
            Gets the default value, which is <c>true</c>.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.OutliningMarginEnabled.Key">
            <summary>
            Gets the default text view host value.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Editor.OutliningUndoEnabled">
            <summary>
            The option definition that determines whether outlining is undoable.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.OutliningUndoEnabled.Default">
            <summary>
            Gets the default value (<c>true</c>)&gt;.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.OutliningUndoEnabled.Key">
            <summary>
            Gets the editor option key.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Editor.ZoomControlEnabled">
            <summary>
            Defines the option to enable the Zoom Control.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.ZoomControlEnabled.Default">
            <summary>
            Gets the default value, which is <c>true</c>.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.ZoomControlEnabled.Key">
            <summary>
            Gets the default text view host value.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Editor.IsInContrastModeOption">
            <summary>
            Determines whether the editor is in either "Extra Contrast" or "High Contrast" modes.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Editor.IsInHighContrastThemeOption">
             <summary>
             Determines whether the editor is in the Windows high contrast theme.
            
             This theme is the specific VS Windows High Contrast theme that is enabled by the user when in Windows OS High Contrast mode.
             This option is not checking for Blue (Extra Contrast) theme or the Windows OS High Contrast mode. 
             </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Editor.DisplayUrlsAsHyperlinks">
            <summary>
            The option definition that determines if URLs should be displayed as hyperlinks.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.DisplayUrlsAsHyperlinks.Default">
            <summary>
            Gets the default value (<c>true</c>)&gt;.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.DisplayUrlsAsHyperlinks.Key">
            <summary>
            Gets the editor option key.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Editor.CaretWidthOption">
            <summary>
            The option definition that determines how wide the caret should be rendered.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.CaretWidthOption.Default">
            <summary>
            Gets the default value <c>1.0</c>.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.CaretWidthOption.Key">
            <summary>
            Gets the editor option key.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Editor.FileHealthIndicatorEnabled">
            <summary>
            Defines the option to enable the File Health Indicator.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.FileHealthIndicatorEnabled.Default">
            <summary>
            Gets the default value, which is <c>true</c>.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.FileHealthIndicatorEnabled.Key">
            <summary>
            Gets the default text view host value.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Editor.RowColMarginEnabled">
            <summary>
            Defines the option to enable the RowColMargin.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.RowColMarginEnabled.Default">
            <summary>
            Gets the default value, which is <c>true</c>.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.RowColMarginEnabled.Key">
            <summary>
            Gets the default text view host value.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Editor.SelectionStateMarginEnabled">
            <summary>
            Defines the option to enable the SelectionStateMargin.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.SelectionStateMarginEnabled.Default">
            <summary>
            Gets the default value, which is <c>true</c>.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.SelectionStateMarginEnabled.Key">
            <summary>
            Gets the default text view host value.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Editor.InsertModeMarginEnabled">
            <summary>
            Defines the option to enable the InsertModeMargin.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.InsertModeMarginEnabled.Default">
            <summary>
            Gets the default value, which is <c>true</c>.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.InsertModeMarginEnabled.Key">
            <summary>
            Gets the default text view host value.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Editor.LineEndingMarginEnabled">
            <summary>
            Defines the option to enable the LineEndingMargin.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.LineEndingMarginEnabled.Default">
            <summary>
            Gets the default value, which is <c>true</c>.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.LineEndingMarginEnabled.Key">
            <summary>
            Gets the default text view host value.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Editor.IndentationCharacterMarginEnabled">
            <summary>
            Defines the option to enable the IndentationCharacterMargin
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.IndentationCharacterMarginEnabled.Default">
            <summary>
            Gets the default value, which is <c>true</c>.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.IndentationCharacterMarginEnabled.Key">
            <summary>
            Gets the default text view host value
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Editor.UpdateIndentationCharacterOption">
            <summary>
            Defines the option to enable updating the standard leading whitespace character based on the contents of the buffer after every edit.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.UpdateIndentationCharacterOption.Default">
            <summary>
            Gets the default value, which is <c>false</c>.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.UpdateIndentationCharacterOption.Key">
            <summary>
            Gets the default text view host value
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Editor.EditingStateMarginEnabledOption">
            <summary>
            Defines the option to enable all editing state margins
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.EditingStateMarginEnabledOption.Default">
            <summary>
            Gets the default value
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.EditingStateMarginEnabledOption.Key">
            <summary>
            Gets the default text view host value.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Editor.ShouldMoveCaretToEndOnSelectAll">
            <summary>
            The option definition that determines if the caret should be moved to the end of the selection after performing the "select all" operation.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.ShouldMoveCaretToEndOnSelectAll.Default">
            <summary>
            Gets the default value (true).
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.ShouldMoveCaretToEndOnSelectAll.Key">
            <summary>
            Gets the editor option key.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Editor.VerticalRulersOption">
            <summary>
            Determines whether to display the vertical rulers or not.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.VerticalRulersOption.Default">
            <summary>
            Default is empty array, which means vertical rulers are disabled.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.VerticalRulersOption.Key">
            <summary>
            Each array entry represents one vertical ruler, value represents text column(characters number).
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Editor.ShowErrorSquiggles">
            <summary>
            Defines the Show Error Squiggles.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.ShowErrorSquiggles.Default">
            <summary>
            Gets the default value, which is <c>true</c>.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.ShowErrorSquiggles.Key">
            <summary>
            Gets the default text view host value.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Editor.ShowSelectionMatches">
            <summary>
            Defines the Show Selection Matches.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.ShowSelectionMatches.Default">
            <summary>
            Gets the default value, which is <c>true</c>.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.ShowSelectionMatches.Key">
            <summary>
            Gets the default text view host value.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Editor.MinimumErrorSeverity">
            <summary>
            Determines what error severity to use for error squiggles
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.MinimumErrorSeverity.Default">
            <summary>
            Gets the default value.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.MinimumErrorSeverity.Key">
            <summary>
            Gets the key for the option.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Editor.LineSpacingOption">
            <summary>
            Defines the vertical line spacing option.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.LineSpacingOption.Default">
            <summary>
            Gets the default value, which is <c>1</c>.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.LineSpacingOption.Key">
            <summary>
            Gets the default text view host value.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Editor.ShowBidirectionalTextControlCharactersOption">
            <summary>
            Defines the Show Bidirectional Text Control Characters option.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.ShowBidirectionalTextControlCharactersOption.Default">
            <summary>
            Gets the default value, which is <c>true</c>, indicating that Bidirectional Text control characters will be displayed.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.ShowBidirectionalTextControlCharactersOption.Key">
            <summary>
            Gets the default text view host value.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Editor.ShowZeroWidthCharactersOption">
            <summary>
            Defines the Show Zero Width Characters option.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.ShowZeroWidthCharactersOption.Default">
            <summary>
            Gets the default value, which is <c>false</c>, indicating that Zero Width characters will not be displayed.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.ShowZeroWidthCharactersOption.Key">
            <summary>
            Gets the default text view host value.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Editor.ShowNavigationBarOption">
            <summary>
            Defines the Show Navigation Bar option.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.ShowNavigationBarOption.Default">
            <summary>
            Gets the default value, which is <c>true</c>, indicating whether or not navigation drop down bar should be displayed.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.ShowNavigationBarOption.Key">
            <summary>
            Gets the default text view host value.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Editor.InteractiveChangeMarginGesture">
            <summary>
            The option definition that how many times of mouse click will enable the performance of peek difference.
            This option is exposed to the users at Tools/Options/Text Editor/Advanced page.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Editor.EnableWheelScrolling">
            <summary>
            The option definition for whether or not wheel scrolling is enabled in the view (useful for scenarios
            where the view is sized to fit the content of the view).
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Editor.EnableVerticalScrollingOption">
            <summary>
            Whether vertical scrolling is enabled in the view. If not, the view is always scrolled so the first line of the buffer is flush with the top of the view.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Editor.EnableSpellCheckerOption">
            <summary>
            Defines the enable Spell Checker option.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.EnableSpellCheckerOption.Default">
            <summary>
            Gets the default value, which is <c>false</c>, indicating whether or not the spell checker should be enabled.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.EnableSpellCheckerOption.Key">
            <summary>
            Gets the default text view host value.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.EnableImageHoverPreviewOption.Default">
            <summary>
            Gets the default value indicating whether or not image hover preview should be enabled
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Editor.EnableAudioCuesOption">
            <summary>
            The option definition that determines whether audio cues should be played.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Editor.EnableStickyScrollOption">
            <summary>
            Customizes the Sticky Scroll Mode used by the Editor
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Editor.MaxLineOfStickyScrollOption">
            <summary>
            Customizes the maximum lines of Sticky Scroll used by the Editor
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Editor.StickyScrollScopeOverflowKindOption">
            <summary>
            Customizes the maximum lines of Sticky Scroll used by the Editor
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Editor.PrimeEditorExtensions">
            <summary>
            Customizes the Editor extensions that are preloaded
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Editor.EnableBracePairColorizationOption">
            <summary>
            Defines the enable brace pair colorization option.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.EnableBracePairColorizationOption.Default">
            <summary>
            Gets the default value indicating whether or not brace pair colorization should be enabled
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.EnableBracePairColorizationOption.Key">
            <summary>
            Gets the default value for brace pair colorization
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Editor.EnablePopupScalingOption">
            <summary>
            Defines an option that controls scaling of text view host popups along with text view zoom.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.EnablePopupScalingOption.Default">
             <summary>
             Gets the default value, which is <c>false</c>, indicating whether to scale popups along with text view zoom.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.EnablePopupScalingOption.Key">
            <summary>
            Gets the default value for brace pair colorization
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Editor.CaretPosition">
            <summary>
            Represents the position of a caret in an <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView" />.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.CaretPosition.#ctor(Microsoft.VisualStudio.Text.VirtualSnapshotPoint,Microsoft.VisualStudio.Text.IMappingPoint,Microsoft.VisualStudio.Text.PositionAffinity)">
            <summary>
            Initializes a new instance of a <see cref="T:Microsoft.VisualStudio.Text.Editor.CaretPosition" />.
            </summary>
            <param name="bufferPosition">The index of the caret. This corresponds to a gap between two characters in the underlying <see cref="T:Microsoft.VisualStudio.Text.ITextBuffer" />.</param>
            <param name="mappingPoint">A mapping point for the caret that can be used to find its position in any buffer.</param>
            <param name="caretAffinity">The <see cref="T:Microsoft.VisualStudio.Text.PositionAffinity" /> of the caret. The caret can have an affinity with 
            the preceding edge of the gap or the following edge of the gap.</param>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.CaretPosition.BufferPosition">
            <summary>
            Gets the position of the caret, corresponding to a gap between two characters in the <see cref="T:Microsoft.VisualStudio.Text.ITextBuffer" /> of the view.
            </summary>
            <remarks>
            This property gets the buffer position at the end of a line if the caret is positioned in virtual space.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.CaretPosition.Point">
            <summary>
            Gets the <see cref="T:Microsoft.VisualStudio.Text.IMappingPoint" />. This marks the position of the caret in the buffer.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.CaretPosition.Affinity">
            <summary>
            Gets the affinity of the caret. 
            <see cref="F:Microsoft.VisualStudio.Text.PositionAffinity.Predecessor" /> indicates that the caret is bound to the preceding edge of the gap. 
            <see cref="F:Microsoft.VisualStudio.Text.PositionAffinity.Successor" /> indicates that the caret is bound to the following edge of the gap.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.CaretPosition.VirtualBufferPosition">
            <summary>
            Gets the virtual buffer position as a <see cref="T:Microsoft.VisualStudio.Text.VirtualSnapshotPoint" />.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.CaretPosition.VirtualSpaces">
            <summary>
            Gets the number of spaces past the physical end of the line of the caret position.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.CaretPosition.ToString">
            <summary>
            Provides a string representation of the caret position.
            </summary>
            <returns>The string representation of the caret position.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.CaretPosition.GetHashCode">
            <summary>
            Gets the hash code for the <see cref="T:Microsoft.VisualStudio.Text.Editor.CaretPosition" />.
            </summary>
            <returns>The hash code.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.CaretPosition.Equals(System.Object)">
            <summary>
            Determines whether two <see cref="T:Microsoft.VisualStudio.Text.Editor.CaretPosition" /> objects are the same
            </summary>
            <returns><c>true</c> if the two objects are the same, otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.CaretPosition.op_Equality(Microsoft.VisualStudio.Text.Editor.CaretPosition,Microsoft.VisualStudio.Text.Editor.CaretPosition)">
            <summary>
            Determines whether two <see cref="T:Microsoft.VisualStudio.Text.Editor.CaretPosition" /> objects are the same.
            </summary>
            <returns><c>true</c> if the two objects are the same, otherwise <c>false.</c></returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.CaretPosition.op_Inequality(Microsoft.VisualStudio.Text.Editor.CaretPosition,Microsoft.VisualStudio.Text.Editor.CaretPosition)">
            <summary>
            Determines whether two <see cref="T:Microsoft.VisualStudio.Text.Editor.CaretPosition" /> objects are different.
            </summary>
            <returns><c>true</c> if the two objects are different, otherwise <c>false.</c></returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Editor.CaretPositionChangedEventArgs">
            <summary>
            Provides information for the <see cref="E:Microsoft.VisualStudio.Text.Editor.ITextCaret.PositionChanged" /> event.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.CaretPositionChangedEventArgs.#ctor(Microsoft.VisualStudio.Text.Editor.ITextView,Microsoft.VisualStudio.Text.Editor.CaretPosition,Microsoft.VisualStudio.Text.Editor.CaretPosition)">
            <summary>
            Initializes a new instance of <see cref="T:Microsoft.VisualStudio.Text.Editor.CaretPositionChangedEventArgs" />.
            </summary>
            <param name="textView">
            The <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView" /> that contains the caret.
            </param>
            <param name="oldPosition">
            The old <see cref="T:Microsoft.VisualStudio.Text.Editor.CaretPosition" />.
            </param>
            <param name="newPosition">
            The new <see cref="T:Microsoft.VisualStudio.Text.Editor.CaretPosition" />.
            </param>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.CaretPositionChangedEventArgs.TextView">
            <summary>
            Gets the <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView" /> that contains the caret.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.CaretPositionChangedEventArgs.OldPosition">
            <summary>
            Gets the old <see cref="T:Microsoft.VisualStudio.Text.Editor.CaretPosition" />.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.CaretPositionChangedEventArgs.NewPosition">
            <summary>
            Gets the new <see cref="T:Microsoft.VisualStudio.Text.Editor.CaretPosition" />.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Editor.ConnectionReason">
            <summary>
            Defines the reasons for connecting or disconnecting a text buffer and a text view.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Editor.ConnectionReason.TextViewLifetime">
            <summary>
            The <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView" /> has been opened or closed.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Editor.ConnectionReason.ContentTypeChange">
            <summary>
            The <see cref="T:Microsoft.VisualStudio.Utilities.IContentType" /> of the subject buffer has changed.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Editor.ConnectionReason.BufferGraphChange">
            <summary>
            A buffer has been added to or removed from <see cref="T:Microsoft.VisualStudio.Text.Projection.IBufferGraph" />.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Editor.IEditingState">
            <summary>
            Gets current information about the user's interaction with VS. This is used to populate status indicators as the user works. There will be one of these created for each view.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.IEditingState.Line">
            <summary>
            Gets the current line number of the caret.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.IEditingState.Column">
            <summary>
            Gets the current column number of the caret.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.IEditingState.Character">
            <summary>
            Gets the current character index on the line, for the caret. This differs from column in cases like
            word-wrap and tabs, where the caret can move more than one column as a result of typing a character.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.IEditingState.SelectionState">
            <summary>
            Gets a string describing the current selection mode.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.IEditingState.OverwriteMode">
            <summary>
            Gets whether the user is in Overwrite mode. True indicates Overwrite, false indicates Insert.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.IEditingState.Newline">
            <summary>
            Gets the standard newline (if any) for the document. If there is no standard, this will return null.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.IEditingState.LeadingCharacter">
            <summary>
            Gets the characters that will be inserted when tab is pressed.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Editor.IEditingStateFactory">
            <summary>
            This factory is designed to be used by tools that track trivia like what line number the caret is on
            or what the line endings are in the current document. Consumers should use the <see cref="T:Microsoft.VisualStudio.Text.Editor.IEditingStateFactory" /> to get a reference to
            an <see cref="T:Microsoft.VisualStudio.Text.Editor.IEditingState" /> and use that to query the data they need.
            </summary>
            <remarks>
            This is a MEF component part, and should be imported as follows:
            [Import]
            IEditingStateFactory factory = null;
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.IEditingStateFactory.GetOrCreateEditingState(Microsoft.VisualStudio.Text.Editor.ITextView)">
            <summary>
            Gets the editing state for a given text view.
            </summary>
            <param name="textView">Text view to request editing state for.</param>
            <returns>An object describing current interesting state for the text view.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Editor.IMapEditToData">
            <summary>
            Interface to facilitate mapping between positions in an <see cref="P:Microsoft.VisualStudio.Text.Editor.ITextView.TextViewModel" />'s <see cref="P:Microsoft.VisualStudio.Text.Editor.ITextViewModel.EditBuffer" /> and <see cref="P:Microsoft.VisualStudio.Text.Editor.ITextViewModel.DataBuffer" />.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.IMapEditToData.MapEditToData(System.Int32)">
            <summary>
            Map a position in an <see cref="P:Microsoft.VisualStudio.Text.Editor.ITextView.TextViewModel" />'s <see cref="P:Microsoft.VisualStudio.Text.Editor.ITextViewModel.EditBuffer" /> to a position in its <see cref="P:Microsoft.VisualStudio.Text.Editor.ITextViewModel.DataBuffer" />.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.IMapEditToData.MapDataToEdit(System.Int32)">
            <summary>
            Map a position in an <see cref="P:Microsoft.VisualStudio.Text.Editor.ITextView.TextViewModel" />'s <see cref="P:Microsoft.VisualStudio.Text.Editor.ITextViewModel.DataBuffer" /> to a position in its <see cref="P:Microsoft.VisualStudio.Text.Editor.ITextViewModel.EditBuffer" />.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Editor.IScrollMap">
            <summary>
            <para>Defines the mapping between character positions and scrollmap coordinates. This is not
            the same as the coordinate system in which the scrollbar is rendered.</para>
            </summary>
            <remarks>
            <para>Valid text positions range are [0...TextView.TextSnapshot.Length].</para>
            <para>Corresponding scrollmap coordinates are [0.0 ... CoordinateOfBufferEnd].</para>
            <para>Not every buffer position will have a distinct scrollmap coordinate. For example, every character on the same line of text will,
            generally, have the same scrollmap coordinate.</para>
            <para>Different scrollmap coordinates may map to the same buffer position. For example, scrollmap coordinates in the range [0.0, 1.0) will, generally,
            map to the first character of the buffer.</para>
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.IScrollMap.GetCoordinateAtBufferPosition(Microsoft.VisualStudio.Text.SnapshotPoint)">
            <summary>
            Gets the scrollmap coordinates of a buffer position.
            </summary>
            <param name="bufferPosition">The buffer position.</param>
            <returns>The scrollmap coordinate, which will be between 0.0 and CoordinateOfBufferEnd inclusive.</returns>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.IScrollMap.AreElisionsExpanded">
            <summary>
            Does the coordinate system used by this scroll map act as if all elisions are expanded?
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.IScrollMap.GetBufferPositionAtCoordinate(System.Double)">
            <summary>
            Gets the buffer position that corresponds to a scrollmap coordinate.
            </summary>
            <param name="coordinate">The scrollmap coordinate.</param>
            <returns>The corresponding buffer position.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="coordinate" /> is NaN.</exception>
            <remarks>Different buffer positions can have the same scroll map coordinates. This method is guaranteed only to be consistent: it will
            return the same position for the same coordinate. The exact character returned will depend on the implementation of the scroll map.
            It will generally be the first character on the line.</remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.IScrollMap.Start">
            <summary>
            The scrollmap coordinate of the start of the buffer.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.IScrollMap.End">
            <summary>
            The scrollmap coordinate of the end of the buffer.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.IScrollMap.ThumbSize">
            <summary>
            Gets the size of the text visible in the view (in scrollmap coordinates).
            </summary>
            <remarks>
            This is equivalent to the scrollbar thumb size. The total height of the scroll map, in scrollmap coordinates, 
            is CoordinateOfBufferEnd + ThumbSize.
            </remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Editor.IScrollMapFactoryService">
            <summary>
            Creates or reuses an <see cref="T:Microsoft.VisualStudio.Text.Editor.IScrollMap" /> for an <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView" />.
            </summary>
            <remarks>This is a MEF component part, and should be imported as follows:
            [Import]
            IScrollMapFactoryService factory = null;
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.IScrollMapFactoryService.Create(Microsoft.VisualStudio.Text.Editor.ITextView)">
            <summary>
            Creates or reuses an existing scroll map for the specified <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView" />.
            </summary>
            <param name="textView"><see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView" /> for which to get an <see cref="T:Microsoft.VisualStudio.Text.Editor.IScrollMap" />.</param>
            <returns>An <see cref="T:Microsoft.VisualStudio.Text.Editor.IScrollMap" /> for <paramref name="textView" />.</returns>
            <remarks>The coordinate system returned by this scroll map will act as if elisions are not expanded.</remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.IScrollMapFactoryService.Create(Microsoft.VisualStudio.Text.Editor.ITextView,System.Boolean)">
            <summary>
            Creates or reuses an existing scroll map for the specified <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView" />.
            </summary>
            <param name="textView"><see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView" /> for which to get an <see cref="T:Microsoft.VisualStudio.Text.Editor.IScrollMap" />.</param>
            <param name="areElisionsExpanded">Does the coordinate system used by this scroll map act as if all elisions are expanded?</param>
            <returns>An <see cref="T:Microsoft.VisualStudio.Text.Editor.IScrollMap" /> for <paramref name="textView" />.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Editor.ISmartIndent">
            <summary>
            Provides for computing the desired indentation for a line.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.ISmartIndent.GetDesiredIndentation(Microsoft.VisualStudio.Text.ITextSnapshotLine)">
            <summary>
            Gets the desired indentation of an <see cref="T:Microsoft.VisualStudio.Text.ITextSnapshotLine" />.
            </summary>
            <param name="line">The line for which to compute the indentation.</param>
            <returns>The number of spaces to place at the start of the line, or null if there is no desired indentation.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Editor.ISmartIndentationService">
            <summary>
            Provides a Visual Studio service that determines automatic indentation when the enter key is pressed or
            when navigating to an empty line.
            </summary>
            <remarks>This is a MEF component part, and should be imported as follows:
            [Import]
            ISmartIndentationService selector = null;
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.ISmartIndentationService.GetDesiredIndentation(Microsoft.VisualStudio.Text.Editor.ITextView,Microsoft.VisualStudio.Text.ITextSnapshotLine)">
            <summary>
            Gets the desired indentation of an <see cref="T:Microsoft.VisualStudio.Text.ITextSnapshotLine" /> as displayed in <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView" />.
            </summary>
            <param name="textView">The text view in which the line is displayed.</param>
            <param name="line">The line for which to compute the indentation.</param>
            <returns>The number of spaces to place at the start of the line, or null if there is no desired indentation.</returns>
            <remarks>
            This service consumes <see cref="T:Microsoft.VisualStudio.Text.Editor.ISmartIndentProvider" />s to determine how to perform the indentation.
            </remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Editor.ISmartIndentProvider">
            <summary>
            Gets an <see cref="T:Microsoft.VisualStudio.Text.Editor.ISmartIndent" /> object for a given <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView" />.
            Component exporters must supply at least one content type attribute to specify the applicable content types.
            </summary>
            <remarks>
            This is a MEF component part, and should be exported with the following attributes:
            [Export(typeof(ISmartIndentProvider))]
            [ContentType("some content type")]
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.ISmartIndentProvider.CreateSmartIndent(Microsoft.VisualStudio.Text.Editor.ITextView)">
            <summary>
            Creates an <see cref="T:Microsoft.VisualStudio.Text.Editor.ISmartIndent" /> object for the given <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView" />. 
            </summary>
            <param name="textView">
            The <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView" /> on which the <see cref="T:Microsoft.VisualStudio.Text.Editor.ISmartIndent" /> will navigate.
            </param>
            <returns>
            A valid <see cref="T:Microsoft.VisualStudio.Text.Editor.ISmartIndent" />. This value will never be <c>null</c>.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="textView" /> is <c>null</c>.</exception>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Editor.ITextCaret">
            <summary>
            <para>Represents the caret associated with an <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView" />.</para>
            </summary>
            <remarks>
            <para>Most properties and parameters that are doubles correspond to coordinates or distances in the text
            rendering coordinate system. In this coordinate system, x = 0.0 corresponds to the left edge of the drawing
            surface onto which text is rendered (x = view.ViewportLeft corresponds to the left edge of the viewport), and y = view.ViewportTop corresponds to the top edge of the viewport. The x-coordinate increases
            from left to right, and the y-coordinate increases from top to bottom. </para>
            <para>The horizontal and vertical axes of the view behave differently. When the text in the view is
            formatted, only the visible lines are formatted. As a result,
            a viewport cannot be scrolled horizontally and vertically in the same way.</para>
            <para>A viewport is scrolled horizontally by changing the left coordinate of the
            viewport so that it moves with respect to the drawing surface.</para>
            <para>A view can be scrolled vertically only by performing a new layout.</para>
            <para>Doing a layout in the view may cause the ViewportTop property of the view to change. For example, scrolling down one line will not translate any of the visible lines.
            Instead it will simply change the view's ViewportTop property (causing the lines to move on the screen even though their y-coordinates have not changed).</para>
            <para>Distances in the text rendering coordinate system correspond to logical pixels. If the text rendering
            surface is displayed without any scaling transform, then 1 unit in the text rendering coordinate system
            corresponds to one pixel on the display.</para>
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.ITextCaret.EnsureVisible">
            <summary>
            Makes the caret visible by scrolling the view up or down and left or right until the caret is visible.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.ITextCaret.MoveTo(Microsoft.VisualStudio.Text.Formatting.ITextViewLine,System.Double)">
            <summary>
            Moves the caret to the best <see cref="T:Microsoft.VisualStudio.Text.Editor.CaretPosition" /> for the specified x-coordinate and text line.
            </summary>
            <param name="textLine">
            The text line that will contain the caret.
            </param>
            <param name="xCoordinate">
            The x-coordinate of the caret in the text rendering coordinate system.
            </param>
            <returns>
            A <see cref="T:Microsoft.VisualStudio.Text.Editor.CaretPosition" /> that contains the valid values of the caret after the move has occurred.
            </returns>
            <remarks>This is equivalent to calling MoveTo(textLine, xCoordinate, true).</remarks>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="xCoordinate" /> is NaN.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.ITextCaret.MoveTo(Microsoft.VisualStudio.Text.Formatting.ITextViewLine,System.Double,System.Boolean)">
            <summary>
            Moves the caret to the best <see cref="T:Microsoft.VisualStudio.Text.Editor.CaretPosition" />  for the given x-coordinate and text line.
            </summary>
            <param name="textLine">
            The text line that will contain the caret.
            </param>
            <param name="xCoordinate">
            The x-coordinate of the caret in the text rendering coordinate system.
            </param>
            <param name="captureHorizontalPosition"><c>true</c> if the caret should capture its horizontal position for subsequent moves up or down.
            <c>false</c> if the caret should retain its previously-captured horizontal position.</param>
            <returns>
            A <see cref="T:Microsoft.VisualStudio.Text.Editor.CaretPosition" /> that contains the valid values of the caret after the move has occurred.
            </returns>
            <remarks>This method takes care of UTF-16 surrogate pairs and combining character sequences.</remarks>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="xCoordinate" /> is NaN.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.ITextCaret.MoveTo(Microsoft.VisualStudio.Text.Formatting.ITextViewLine)">
            <summary>
            Moves the caret to the specified <paramref name="textLine" /> while preserving its current x-coordinate.
            </summary>
            <param name="textLine">The text line that will contain the caret.</param>
            <returns>
            A <see cref="T:Microsoft.VisualStudio.Text.Editor.CaretPosition" /> that contains the valid values of the caret after the move has occurred.
            </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.ITextCaret.MoveTo(Microsoft.VisualStudio.Text.SnapshotPoint)">
            <summary>
            Moves the caret to the given index in the underlying <see cref="T:Microsoft.VisualStudio.Text.ITextBuffer" />.
            </summary>
            <param name="bufferPosition">The <see cref="T:Microsoft.VisualStudio.Text.SnapshotPoint" /> in the underlying text buffer to which
            to move the caret.</param>
            <returns>A <see cref="T:Microsoft.VisualStudio.Text.Editor.CaretPosition" /> that contains the valid values of the caret after the move has occurred.</returns>
            <remarks>This is equivalent to calling MoveTo(bufferPosition, PositionAffinity.Successor, true).</remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.ITextCaret.MoveTo(Microsoft.VisualStudio.Text.SnapshotPoint,Microsoft.VisualStudio.Text.PositionAffinity)">
            <summary>
            Moves the caret to the given index in the underlying <see cref="T:Microsoft.VisualStudio.Text.ITextBuffer" />.
            </summary>
            <param name="bufferPosition">The <see cref="T:Microsoft.VisualStudio.Text.SnapshotPoint" /> in the underlying text buffer to which
            to move the caret.</param>
            <param name="caretAffinity">The affinity of the caret. This will be ignored unless 
            <paramref name="bufferPosition" /> specifies a location that is at the seam between two word-wrapped lines.</param>
            <returns>A <see cref="T:Microsoft.VisualStudio.Text.Editor.CaretPosition" /> that contains the valid values of the caret position after the move has occurred.</returns>
            <remarks>This is equivalent to calling MoveTo(bufferPosition, caretAffinity, true).</remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.ITextCaret.MoveTo(Microsoft.VisualStudio.Text.SnapshotPoint,Microsoft.VisualStudio.Text.PositionAffinity,System.Boolean)">
            <summary>
            Moves the caret to the given index in the underlying <see cref="T:Microsoft.VisualStudio.Text.ITextBuffer" />.
            </summary>
            <param name="bufferPosition">The <see cref="T:Microsoft.VisualStudio.Text.SnapshotPoint" /> in the underlying text buffer to which
            to move the caret.</param>
            <param name="caretAffinity">The affinity of the caret. This will be ignored unless 
            <paramref name="bufferPosition" /> specifies a location that is at the seam between two word-wrapped lines.</param>
            <param name="captureHorizontalPosition"><c>true</c> if the caret should capture its horizontal position for subsequent moves up or down,
            <c>false</c> if the caret should retain its previously-captured horizontal position.</param>
            <returns>A <see cref="T:Microsoft.VisualStudio.Text.Editor.CaretPosition" /> that contains the valid values of the caret position after the move has occurred.</returns>
            <remarks>This method handles UTF-16 surrogate pairs and combining character sequences.  
            For example, if the text buffer consists of a high surrogate character at index 0 and a low surrogate character at index 1, 
            and <paramref name="bufferPosition" /> is 1 and 
            <paramref name="caretAffinity" /> is <see cref="F:Microsoft.VisualStudio.Text.PositionAffinity.Successor" />, 
            the actual valid caret index is 0 (since the high surrogate and low surrogate characters form one text element). 
            If <paramref name="caretAffinity" /> is<see cref="F:Microsoft.VisualStudio.Text.PositionAffinity.Predecessor" />, the actual valid caret index is 2.</remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.ITextCaret.MoveTo(Microsoft.VisualStudio.Text.VirtualSnapshotPoint)">
            <summary>
            Moves the caret to the specified <paramref name="bufferPosition" />.
            </summary>
            <param name="bufferPosition">The <see cref="T:Microsoft.VisualStudio.Text.VirtualSnapshotPoint" /> in the underlying text buffer to which
            to move the caret.</param>
            <returns>A <see cref="T:Microsoft.VisualStudio.Text.Editor.CaretPosition" /> that contains the valid values of the caret position after the move has occurred.</returns>
            <remarks>This is equivalent to calling MoveTo(bufferPosition, PositionAffinity.Successor, true).</remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.ITextCaret.MoveTo(Microsoft.VisualStudio.Text.VirtualSnapshotPoint,Microsoft.VisualStudio.Text.PositionAffinity)">
            <summary>
            Moves the caret to the specified <paramref name="bufferPosition" />.
            </summary>
            <param name="bufferPosition">The <see cref="T:Microsoft.VisualStudio.Text.VirtualSnapshotPoint" /> in the underlying text buffer to which
            to move the caret.</param>
            <param name="caretAffinity">The affinity of the caret. This will be ignored unless <paramref name="bufferPosition" /> 
            specifies a location that is at the seam between two word-wrapped lines.</param>
            <returns>A <see cref="T:Microsoft.VisualStudio.Text.Editor.CaretPosition" /> that contains the valid values of the caret position after the move has occurred.</returns>
            <remarks>This is equivalent to calling MoveTo(bufferPosition, caretAffinity, true).</remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.ITextCaret.MoveTo(Microsoft.VisualStudio.Text.VirtualSnapshotPoint,Microsoft.VisualStudio.Text.PositionAffinity,System.Boolean)">
            <summary>
            Moves the caret to the specified <paramref name="bufferPosition" />.
            </summary>
            <param name="bufferPosition">The <see cref="T:Microsoft.VisualStudio.Text.VirtualSnapshotPoint" /> in the underlying text buffer to which
            to move the caret.</param>
            <param name="caretAffinity">The affinity of the caret. This will be ignored unless <paramref name="bufferPosition" /> 
            specifies a location that is at the seam between two word-wrapped lines.</param>
            <param name="captureHorizontalPosition">If <c>true</c>, the caret will capture its horizontal position for subsequent moves up or down.
            If <c>false</c>, the caret retains its previously-captured horizontal position.</param>
            <returns>A <see cref="T:Microsoft.VisualStudio.Text.Editor.CaretPosition" /> that contains the valid values of the caret position after the move has occurred.</returns>
            <remarks>This method handles UTF-16 surrogate pairs and combining character sequences.  
            For example, if the text buffer consists of a high surrogate character at index 0 and a low surrogate character at index 1, 
            and <paramref name="bufferPosition" /> is 1 and <paramref name="caretAffinity" /> is <see cref="F:Microsoft.VisualStudio.Text.PositionAffinity.Successor" />, 
            the actual valid caret index is 0 (since the high surrogate and low surrogate characters form one text element). 
            If <paramref name="caretAffinity" /> is <see cref="F:Microsoft.VisualStudio.Text.PositionAffinity.Predecessor" />, the actual valid caret index is 2.</remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.ITextCaret.MoveToPreferredCoordinates">
            <summary>
            Moves the caret to the preferred x and y-coordinates.
            </summary>
            <returns>A <see cref="T:Microsoft.VisualStudio.Text.Editor.CaretPosition" /> that contains the valid values of the caret position after the move has occurred.</returns>
            <remarks>You cannot change the preferred coordinates by calling this method.</remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.ITextCaret.MoveToNextCaretPosition">
            <summary>
            Moves the caret to the next valid <see cref="T:Microsoft.VisualStudio.Text.Editor.CaretPosition" />.
            </summary>
            <returns>A <see cref="T:Microsoft.VisualStudio.Text.Editor.CaretPosition" /> containing the valid values of the caret after the move has occurred.</returns>
            <remarks>This method handles UTF-16 surrogate pairs and combining character sequences.</remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.ITextCaret.MoveToPreviousCaretPosition">
            <summary>
            Moves the caret to the previous valid <see cref="T:Microsoft.VisualStudio.Text.Editor.CaretPosition" />.
            </summary>
            <returns>A <see cref="T:Microsoft.VisualStudio.Text.Editor.CaretPosition" /> containing the valid values of the caret after the move has occurred.</returns>
            <remarks>This method handles UTF-16 surrogate pairs and combining character sequences.</remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.ITextCaret.ContainingTextViewLine">
            <summary>
            Gets the <see cref="T:Microsoft.VisualStudio.Text.Formatting.ITextViewLine" /> that contains the caret, provided that that text line is visible
            in the view.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.ITextCaret.Left">
            <summary>
            Gets the position of the left edge of the caret in the text rendering coordinate system.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.ITextCaret.Width">
            <summary>
            Gets the width of the caret in the text rendering coordinate system.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.ITextCaret.Right">
            <summary>
            Gets the position of the right edge of the caret in the text rendering coordinate system.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.ITextCaret.Top">
            <summary>
            Gets the position of the top edge of the caret in the text rendering coordinate system.
            </summary>
            <exception cref="T:System.InvalidOperationException">The caret does not lie in the text formatted by the view.</exception>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.ITextCaret.Height">
            <summary>
            Gets the height of the caret in the text rendering coordinate system.
            </summary>
            <exception cref="T:System.InvalidOperationException">The caret does not lie in the text formatted by the view.</exception>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.ITextCaret.Bottom">
            <summary>
            Gets the position of the bottom edge of the caret in the text rendering coordinate system.
            </summary>
            <exception cref="T:System.InvalidOperationException">The caret does not lie in the text formatted by the view.</exception>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.ITextCaret.Position">
            <summary>
            Gets the current position of the caret.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.ITextCaret.OverwriteMode">
            <summary>
            Determines whether the caret is in overwrite mode.
            </summary>
            <remarks>
            <para>When the caret is in overwrite mode, typed characters replace the character under the caret, 
            and a block is drawn instead of a vertical line.</para>
            <para>This is distinct from the IEditorOptions overwrite mode, 
            since the caret can switch modes based on its position in the view. 
            The caret is not in OverwriteMode when it is positioned at the end of the line in a view, or when there is a
            non-empty selection, even if IEditorOptions.OverwriteMode is true.</para>
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.ITextCaret.InVirtualSpace">
            <summary>
            Determines whether the caret lies in virtual space. A virtual space is one that is after the physical end of a line.
            </summary>
            <remarks>
            <para>This is distinct from the <see cref="T:Microsoft.VisualStudio.Text.Editor.IEditorOptions" /> UseVirtualSpace, 
            since virtual space can be enabled even if the caret does not lie in virtual space.</para>
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.ITextCaret.IsHidden">
            <summary>
            Gets or sets the visibility of the caret.
            </summary>
        </member>
        <member name="E:Microsoft.VisualStudio.Text.Editor.ITextCaret.PositionChanged">
            <summary>
            Occurs when the position of the caret has been explicitly changed.
            </summary>
            <remarks>
            The event is not raised if the caret position was changed as a consequence of tracking normal text edits.
            The normal behavior of the caret is to move after the typed character.
            </remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Editor.ITextSelection">
            <summary>
            Represents the selected text in an <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView" />
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.ITextSelection.TextView">
            <summary>
            Gets the text view to which this selection belongs.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.ITextSelection.Select(Microsoft.VisualStudio.Text.SnapshotSpan,System.Boolean)">
            <summary>
            Selects the text in the specified <paramref name="selectionSpan" />.
            </summary>
            <param name="selectionSpan">The <see cref="T:Microsoft.VisualStudio.Text.SnapshotSpan" /> of text to select in the 
            underlying text buffer.</param>
            <param name="isReversed"><c>true</c> if the selection was made in a reverse direction, otherwise <c>false</c>.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.ITextSelection.Select(Microsoft.VisualStudio.Text.VirtualSnapshotPoint,Microsoft.VisualStudio.Text.VirtualSnapshotPoint)">
            <summary>
            Select from the anchor point to the active point.
            </summary>
            <param name="anchorPoint">The anchor point</param>
            <param name="activePoint">The active point</param>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.ITextSelection.SelectedSpans">
            <summary>
            The currently-selected spans.
            </summary>
            <remarks>
            <para>This span collection will never be empty.  However, the spans in
            this collection may be 0-length.</para>
            <para>This value can be very expensive to compute the first time after the selection has changed.</para>
            <para>Use GetSelectionOnTextViewLine() unless you need the entire selection.</para>
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.ITextSelection.VirtualSelectedSpans">
            <summary>
            The currently-selected spans, as <see cref="T:Microsoft.VisualStudio.Text.VirtualSnapshotSpan" /> objects.
            </summary>
            <remarks>
            <para>This span collection will never be empty.  However, the spans in
            this collection may be 0-length.</para>
            <para>This value can be very expensive to compute the first time after the selection has changed.</para>
            <para>Use GetSelectionOnTextViewLine() unless you need the entire selection.</para>
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.ITextSelection.GetSelectionOnTextViewLine(Microsoft.VisualStudio.Text.Formatting.ITextViewLine)">
            <summary>
            Get the selection on a particular <see cref="T:Microsoft.VisualStudio.Text.Formatting.ITextViewLine" />.
            </summary>
            <param name="line">Line for which to get the selection.</param>
            <returns>The selection on <paramref name="line" />.</returns>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.ITextSelection.StreamSelectionSpan">
            <summary>
            Get the current selection as if it were a stream selection, regardless
            of the current selection mode.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.ITextSelection.Mode">
            <summary>
            Gets or sets the selection mode.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.ITextSelection.IsReversed">
            <summary>
            Is <c>true</c> if the <see cref="P:Microsoft.VisualStudio.Text.Editor.ITextSelection.ActivePoint" /> comes before the <see cref="P:Microsoft.VisualStudio.Text.Editor.ITextSelection.AnchorPoint" />.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.ITextSelection.Clear">
            <summary>
            Clears the selection.
            </summary>
            <remarks>
            After calling this method, <see cref="P:Microsoft.VisualStudio.Text.Editor.ITextSelection.IsEmpty" /> will be <c>true</c>.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.ITextSelection.IsEmpty">
            <summary>
            Determines whether the selection is empty.
            </summary>
            <remarks>The selection is empty if the active and anchor points are
            the same point.</remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.ITextSelection.IsActive">
            <summary>
            Whether or not the selection is active.
            </summary>
            <remarks>
            <para>
            If <see cref="P:Microsoft.VisualStudio.Text.Editor.ITextSelection.ActivationTracksFocus" /> is <c>true</c>, this property is automatically
            updated when the <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView" /> gains and loses aggregate focus.  You can still
            override it while <see cref="P:Microsoft.VisualStudio.Text.Editor.ITextSelection.ActivationTracksFocus" /> is <c>false</c>, but the value will change
            whenever focus changes.
            </para>
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.ITextSelection.ActivationTracksFocus">
            <summary>
            Determines whether <see cref="P:Microsoft.VisualStudio.Text.Editor.ITextSelection.IsActive" /> should track when the <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView" /> gains and
            loses aggregate focus.  The default is <c>true</c>.
            </summary>
            <remarks>
            <para>
            While the value of this property is <c>true</c>, the value of <see cref="P:Microsoft.VisualStudio.Text.Editor.ITextSelection.IsActive" /> will track
            <see cref="P:Microsoft.VisualStudio.Text.Editor.ITextView.HasAggregateFocus" />.  When the value of this property changes to <c>true</c>,
            the value of <see cref="P:Microsoft.VisualStudio.Text.Editor.ITextSelection.IsActive" /> will be immediately updated.
            </para>
            </remarks>
        </member>
        <member name="E:Microsoft.VisualStudio.Text.Editor.ITextSelection.SelectionChanged">
            <summary>
            Occurs when Select or Clear start to be called.  The sender of the event will be this <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextSelection" />.
            </summary>
            <remarks>
            This event is not raised if the selection shrinks or grows as a result of its associated span expanding or shrinking.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.ITextSelection.ActivePoint">
            <summary>
            Gets the active point of the selection.
            </summary>
            <remarks><para>This point normally corresponds to the end of the selection that contains to the caret position.</para>
            <para>If the selection is reversed, then this point will come before the AnchorPoint.</para></remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.ITextSelection.AnchorPoint">
            <summary>
            Gets the anchor point of the selection.
            </summary>
            <remarks><para>This normally corresponds to the end of the selection that does not contain to the caret position.</para>
            <para>If the selection is reversed, then this point will come after the ActivePoint.</para></remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.ITextSelection.Start">
            <summary>
            Gets the start point of the selection.
            </summary>
            <remarks>This is either the active point or the anchor point, whichever comes first.</remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.ITextSelection.End">
            <summary>
            Gets the end point of the selection.
            </summary>
            <remarks>This is either the active point or the anchor point, whichever comes last.</remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Editor.ITextView">
            <summary>
            Represents a view of text in an <see cref="T:Microsoft.VisualStudio.Text.ITextBuffer" />. It is the base class for a platform-specific interface
            that has methods to allow the formatted text to be rendered.
            </summary>
            <remarks>
            <para>A text view is a platform-independent representation of a contiguous block of formatted and adorned text,
            accessible through the <see cref="P:Microsoft.VisualStudio.Text.Editor.ITextView.TextViewLines" /> property.
            It also instantiates an instance of an IEditorOperations component part so that
            it can execute various commands.</para>
            <para>The text is formatted based on the classifiers attached to the underlying <see cref="T:Microsoft.VisualStudio.Text.ITextBuffer" />.</para>
            <para>Most properties and parameters that are doubles correspond to coordinates or distances in the text
            rendering coordinate system. In this coordinate system, x = 0.0 corresponds to the left edge of the drawing
            surface onto which text is rendered (x = view.ViewportLeft corresponds to the left edge of the viewport), and y = view.ViewportTop corresponds to the top edge of the viewport. The x-coordinate increases
            from left to right, and the y-coordinate increases from top to bottom. </para>
            <para>The horizontal and vertical axes of the view behave differently. When the text in the view is
            formatted, only the visible lines are formatted. As a result,
            a viewport cannot be scrolled horizontally and vertically in the same way.</para>
            <para>A viewport is scrolled horizontally by changing the left coordinate of the
            viewport so that it moves with respect to the drawing surface.</para>
            <para>A view can be scrolled vertically only by performing a new layout.</para>
            <para>Doing a layout in the view may cause the ViewportTop property of the view to change. For example, scrolling down one line will not translate any of the visible lines.
            Instead it will simply change the view's ViewportTop property (causing the lines to move on the screen even though their y-coordinates have not changed).</para>
            <para>Distances in the text rendering coordinate system correspond to logical pixels. If the text rendering
            surface is displayed without any scaling transform, then 1 unit in the text rendering coordinate system
            corresponds to one pixel on the display.</para>
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.ITextView.DisplayTextLineContainingBufferPosition(Microsoft.VisualStudio.Text.SnapshotPoint,System.Double,Microsoft.VisualStudio.Text.Editor.ViewRelativePosition)">
            <summary>
            Formats and displays the contents of the text buffer so that the <see cref="T:Microsoft.VisualStudio.Text.Formatting.ITextViewLine" /> containing <paramref name="bufferPosition" /> 
            is displayed at the desired position.
            </summary>
            <param name="bufferPosition">
            The position of the character that is to be contained in the <see cref="T:Microsoft.VisualStudio.Text.Formatting.ITextViewLine" /> displayed at the specified vertical position.
            </param>
            <param name="verticalDistance">
            The distance (in pixels) between the <see cref="T:Microsoft.VisualStudio.Text.Formatting.ITextViewLine" /> and the edge of the view. If <paramref name="relativeTo" /> is equal to
            <c>ViewRelativePosition.Top</c>, then the distance is from the top of the view to the top of the <see cref="T:Microsoft.VisualStudio.Text.Formatting.ITextViewLine" />. Otherwise,
            it is the distance from the bottom of the <see cref="T:Microsoft.VisualStudio.Text.Formatting.ITextViewLine" /> to the bottom on the view.
            Negative values are allowed, which might cause the line to be displayed outside the viewport.
            This method can become quite expensive if <paramref name="verticalDistance" /> is large. You 
            should avoid making <paramref name="verticalDistance" /> greater than the height of the view.
            </param>
            <param name="relativeTo">
            Specifies whether the line offset is relative to the top or bottom of the view.
            </param>
            <returns>
            The vertical distance (from the top or bottom of the view) 
            at which the <see cref="T:Microsoft.VisualStudio.Text.Formatting.ITextViewLine" /> containing the specified position is to be displayed.
            </returns>
            <remarks>
            <para>If word wrap is disabled in the view, then the <see cref="T:Microsoft.VisualStudio.Text.Formatting.ITextViewLine" /> 
            corresponds to the entire <see cref="T:Microsoft.VisualStudio.Text.ITextSnapshotLine" /> that contains <paramref name="bufferPosition" />.
            If word wrap is enabled in the view, then the <see cref="T:Microsoft.VisualStudio.Text.Formatting.ITextViewLine" /> 
            corresponds to the portion of the <see cref="T:Microsoft.VisualStudio.Text.ITextSnapshotLine" /> that both
            contains <paramref name="bufferPosition" /> and fits into the view. <paramref name="bufferPosition" /> may not be the first
            character in the <see cref="T:Microsoft.VisualStudio.Text.Formatting.ITextViewLine" />.</para>
            <para>The returned value will generally be equal to <paramref name="verticalDistance" />, except in cases where the view
            was repositioned to prevent a gap from appearing at the top or bottom of the view.</para>
            <para>Calling this method will cause the view to dispose of its current <see cref="P:Microsoft.VisualStudio.Text.Editor.ITextView.TextViewLines" />.</para>
            </remarks>
            <exception cref="T:System.ArgumentException"><paramref name="bufferPosition" /> is from the wrong
            <see cref="T:Microsoft.VisualStudio.Text.ITextSnapshot" /> or <see cref="T:Microsoft.VisualStudio.Text.ITextBuffer" />.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="relativeTo" /> is not a valid <see cref="T:Microsoft.VisualStudio.Text.Editor.ViewRelativePosition" />.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.ITextView.DisplayTextLineContainingBufferPosition(Microsoft.VisualStudio.Text.SnapshotPoint,System.Double,Microsoft.VisualStudio.Text.Editor.ViewRelativePosition,System.Nullable{System.Double},System.Nullable{System.Double})">
            <summary>
            Formats and displays the contents of the text buffer so that the <see cref="T:Microsoft.VisualStudio.Text.Formatting.ITextViewLine" /> containing <paramref name="bufferPosition" /> 
            is displayed at the desired position.
            </summary>
            <param name="bufferPosition">
            The position of the character that is to be contained in the <see cref="T:Microsoft.VisualStudio.Text.Formatting.ITextViewLine" /> displayed at the specified vertical position.
            </param>
            <param name="verticalDistance">
            The distance (in pixels) between the <see cref="T:Microsoft.VisualStudio.Text.Formatting.ITextViewLine" /> and the edge of the view. If <paramref name="relativeTo" /> is equal to
            <c>ViewRelativePosition.Top</c>, then the distance is from the top of the view to the top of the <see cref="T:Microsoft.VisualStudio.Text.Formatting.ITextViewLine" />. Otherwise,
            it is the distance from the bottom of the <see cref="T:Microsoft.VisualStudio.Text.Formatting.ITextViewLine" /> to the bottom on the view.
            Negative values are allowed, which might cause the line to be displayed outside the viewport.
            This method can become quite expensive if <paramref name="verticalDistance" /> is large. You 
            should avoid making <paramref name="verticalDistance" /> greater than the height of the view.
            </param>
            <param name="relativeTo">
            Specifies whether the line offset is relative to the top or bottom of the view.
            </param>
            <param name="viewportWidthOverride">
            If specified, the text is formatted as if the viewport had the specified width.
            </param>
            <param name="viewportHeightOverride">
            If specified, the text is formatted as if the viewport had the specified height.
            </param>
            <returns>
            The vertical distance (from the top or bottom of the view) 
            at which the <see cref="T:Microsoft.VisualStudio.Text.Formatting.ITextViewLine" /> containing the specified position is to be displayed.
            </returns>
            <remarks>
            <para>If word wrap is disabled in the view, then the <see cref="T:Microsoft.VisualStudio.Text.Formatting.ITextViewLine" /> 
            corresponds to the entire <see cref="T:Microsoft.VisualStudio.Text.ITextSnapshotLine" /> that contains <paramref name="bufferPosition" />.
            If word wrap is enabled in the view, then the <see cref="T:Microsoft.VisualStudio.Text.Formatting.ITextViewLine" /> 
            corresponds to the portion of the <see cref="T:Microsoft.VisualStudio.Text.ITextSnapshotLine" /> that both
            contains <paramref name="bufferPosition" /> and fits into the view. <paramref name="bufferPosition" /> may not be the first
            character in the <see cref="T:Microsoft.VisualStudio.Text.Formatting.ITextViewLine" />.</para>
            <para>The returned value will generally be equal to <paramref name="verticalDistance" />, except in cases where the view
            was repositioned to prevent a gap from appearing at the top or bottom of the view.</para>
            <para>Calling this method will cause the view to dispose of its current <see cref="P:Microsoft.VisualStudio.Text.Editor.ITextView.TextViewLines" />.</para>
            <para>The viewport width override will have no effect unless word wrap is enabled in the view.</para>
            <para>The viewport height and width overrides only change how text is formatted for this call. Subsequent calls will use the
            width and height of the viewport (unless explicitly overriden a second time).</para>
            </remarks>
            <exception cref="T:System.ArgumentException"><paramref name="bufferPosition" /> is from the wrong
            <see cref="T:Microsoft.VisualStudio.Text.ITextSnapshot" /> or <see cref="T:Microsoft.VisualStudio.Text.ITextBuffer" />.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="relativeTo" /> is not a valid <see cref="T:Microsoft.VisualStudio.Text.Editor.ViewRelativePosition" />.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.ITextView.GetTextElementSpan(Microsoft.VisualStudio.Text.SnapshotPoint)">
            <summary>
            Gets the <see cref="T:Microsoft.VisualStudio.Text.SnapshotSpan" /> of text that constitutes a text element (a single visual representation)
            at the given <see cref="T:Microsoft.VisualStudio.Text.SnapshotPoint" />.
            </summary>
            <param name="point">The <see cref="T:Microsoft.VisualStudio.Text.SnapshotPoint" /> in the text snapshot at which to get the text element.</param>
            <returns>A <see cref="T:Microsoft.VisualStudio.Text.SnapshotSpan" /> containing the bounds of the text element.</returns>
            <exception cref="T:System.ArgumentException"><paramref name="point" /> is from the wrong
            <see cref="T:Microsoft.VisualStudio.Text.ITextBuffer" />.</exception>
            <remarks>A text element may be a UTF-16 surrogate pair, consisting of a high
            surrogate character and a low surrogate character. If a point in the text buffer
            lies between a high surrogate character and a low surrogate character, the text element span will 
            start at the high surrogate character and end at the low surrogate character.</remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.ITextView.Close">
            <summary>
            Closes the text view and its view.
            </summary>
            <exception cref="T:System.InvalidOperationException">The text view host is already closed.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.ITextView.QueueSpaceReservationStackRefresh">
            <summary>
            Requests a refresh of the space reservation stack.
            </summary>
            <remarks>
            Refreshing the space reservation stack involves asking each of the space reservation managers/agents to reposition
            themselves.  This method will be called mostly by space reservation agents that wish to reposition their content.  The
            space reservation stack is refreshed asynchronously.  Calling QueueSpaceReservationStackRefresh will perform a refresh
            of the space reservation stack, but the effects will not be visible immediately on return of the call.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.ITextView.InLayout">
            <summary>
            Determines whether the view is in the process of being laid out.
            </summary>
            <remarks>Attempting to get the text view lines of the view while it is being laid out will throw an exception.</remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.ITextView.ViewScroller">
            <summary>
            Gets a helper that provides various methods to scroll or manipulate the view.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.ITextView.TextViewLines">
            <summary>
            Gets a read-only list of the <see cref="T:Microsoft.VisualStudio.Text.Formatting.ITextViewLine" /> objects rendered in this view.
            </summary>
            <remarks>
            This list will be dense. That is, all characters between the first character of the first <see cref="T:Microsoft.VisualStudio.Text.Formatting.ITextViewLine" /> through
            the last character of the last <see cref="T:Microsoft.VisualStudio.Text.Formatting.ITextViewLine" /> will be represented in one of the <see cref="T:Microsoft.VisualStudio.Text.Formatting.ITextViewLine" /> objects,
            except when the layout of the <see cref="T:Microsoft.VisualStudio.Text.Formatting.ITextViewLine" /> objects is in progress.
            <para>
            <see cref="T:Microsoft.VisualStudio.Text.Formatting.ITextViewLine" /> objects are disjoint. That is, a given character is part of only one <see cref="T:Microsoft.VisualStudio.Text.Formatting.ITextViewLine" />.
            </para>
            <para>
            The <see cref="T:Microsoft.VisualStudio.Text.Formatting.ITextViewLine" /> objects are sorted by the index of their first character.
            </para>
            <para>Some of the <see cref="T:Microsoft.VisualStudio.Text.Formatting.ITextViewLine" /> objects may not be visible, 
            and all <see cref="T:Microsoft.VisualStudio.Text.Formatting.ITextViewLine" /> objects will be disposed of when the view
            recomputes its layout.</para>
            <para>This property will be null during the view's initialization.</para>
            </remarks>
            <exception cref="T:System.InvalidOperationException">View is in the process of being laid out.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.ITextView.GetTextViewLineContainingBufferPosition(Microsoft.VisualStudio.Text.SnapshotPoint)">
            <summary>
            Gets the <see cref="T:Microsoft.VisualStudio.Text.Formatting.ITextViewLine" /> that contains the specified text buffer position.
            </summary>
            <param name="bufferPosition">
            The text buffer position used to search for a text line.
            </param>
            <returns>
            The <see cref="T:Microsoft.VisualStudio.Text.Formatting.ITextViewLine" /> that contains the specified buffer position.
            </returns>
            <remarks>
            <para>This method returns an <see cref="T:Microsoft.VisualStudio.Text.Formatting.ITextViewLine" /> if it exists in the view.</para>
            <para>If the line does not exist in the cache of formatted lines, it will be formatted and added to the cache.</para>
            <para>The returned <see cref="T:Microsoft.VisualStudio.Text.Formatting.ITextViewLine" /> could be invalidated by either a layout by the view or by subsequent calls to this method.</para>
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="bufferPosition" /> is not a valid buffer position.</exception>
            <exception cref="T:System.InvalidOperationException"> if the view has not completed initialization.</exception>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.ITextView.Caret">
            <summary>
            Gets the caret element.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.ITextView.Selection">
            <summary>
            Gets the selection element.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.ITextView.ProvisionalTextHighlight">
            <summary>
            Gets the span of text covered by the provisional text highlight.
            </summary>
            <remarks>
            If there is no provisional text, this method returns null.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.ITextView.Roles">
            <summary>
            The roles which this view plays. Roles partially determine the extensions that are instantiated for the view.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.ITextView.TextBuffer">
            <summary>
            Gets the <see cref="T:Microsoft.VisualStudio.Text.ITextBuffer" /> whose text is rendered in this view.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.ITextView.BufferGraph">
            <summary>
            Gets the <see cref="T:Microsoft.VisualStudio.Text.Projection.IBufferGraph" /> that contains the set of source buffers that contribute to this view.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.ITextView.TextSnapshot">
            <summary>
            Gets the <see cref="T:Microsoft.VisualStudio.Text.ITextSnapshot" /> of the text that is currently rendered in the view.
            </summary>
            <remarks>
            This snapshot will be identical to the CurrentSnapshot of <see cref="P:Microsoft.VisualStudio.Text.Editor.ITextView.TextBuffer" />, except when handling a
            Changed event on that buffer.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.ITextView.VisualSnapshot">
            <summary>
            Gets the <see cref="T:Microsoft.VisualStudio.Text.ITextSnapshot" /> of the visual buffer that is being rendered.
            </summary>
            <remarks>
            This snapshot should not be used in any method that requires a position in the text buffer, since
            those positions refer to <see cref="P:Microsoft.VisualStudio.Text.Editor.ITextView.TextSnapshot" />.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.ITextView.TextViewModel">
            <summary>
            Gets the <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextViewModel" /> of this text view.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.ITextView.TextDataModel">
            <summary>
            Gets the <see cref="T:Microsoft.VisualStudio.Text.ITextDataModel" /> of this text view.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.ITextView.MaxTextRightCoordinate">
            <summary>
            Gets the right coordinate of the longest line, whether or not that line is currently visible, in logical pixels.
            </summary>
            <remarks>This value is cached and may not represent the width of the widest line
            in the underlying buffer. For example, if the widest line has never been formatted,
            then it is not in the cache.</remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.ITextView.ViewportLeft">
            <summary>
            Gets or sets the position of the left edge of the viewport in the text rendering coordinate system.
            </summary>
            <remarks>
            When set, the horizontal offset is clipped to [0.0, Max(0.0, formatted text width - viewport width)] on non word-wrapped views,
            and [0,0] for views in which word-wrap is enabled.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.ITextView.ViewportTop">
            <summary>
            Gets the position of the top edge of the viewport in the text rendering coordinate system.
            </summary>
            <remarks>
            Scrolling the text is done by changing the set of formatted lines and/or the vertical offset of those lines.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.ITextView.ViewportRight">
            <summary>
            Gets the position of the right edge of the viewport in the text rendering coordinate system.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.ITextView.ViewportBottom">
            <summary>
            Gets the position of the bottom edge of the viewport in the text rendering coordinate system.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.ITextView.ViewportWidth">
            <summary>
            Gets the width of the visible content window in logical pixels.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.ITextView.ViewportHeight">
            <summary>
            Gets the height of the visible content window in logical pixels.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.ITextView.LineHeight">
            <summary>
            Gets the nominal height of a line of text in the view.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.ITextView.IsClosed">
            <summary>
            Determines whether this text view has been closed.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.ITextView.Options">
            <summary>
            Gets the options for this text view.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.ITextView.IsMouseOverViewOrAdornments">
            <summary>
            Determines whether the mouse is over the view or any of its adornments.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.ITextView.HasAggregateFocus">
            <summary>
            Determines whether the view or any of its adornments has focus.
            </summary>
        </member>
        <member name="E:Microsoft.VisualStudio.Text.Editor.ITextView.LayoutChanged">
            <summary>
            Occurs whenever the text displayed in the view changes.
            </summary>
            <remarks><para>This event is raised whenever the rendered text displayed in the <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView" /> changes.</para>
            <para>It is raised whenever the view does a layout (which happens when DisplayTextLineContainingBufferPosition is called or in response to text or classification changes).</para>
            <para>It ia also raised whenever the view scrolls horizontally or when its size changes.</para></remarks>
        </member>
        <member name="E:Microsoft.VisualStudio.Text.Editor.ITextView.ViewportLeftChanged">
            <summary>
            Occurs when the position of the viewport's left edge is changed. (e.g. when the view is horizontally scrolled)
            </summary>
            <remarks>Deprecated. Use LayoutChanged instead.</remarks>
        </member>
        <member name="E:Microsoft.VisualStudio.Text.Editor.ITextView.ViewportHeightChanged">
            <summary>
            Occurs when the viewport's height is changed.
            </summary>
            <remarks>Deprecated. Use LayoutChanged instead.</remarks>
        </member>
        <member name="E:Microsoft.VisualStudio.Text.Editor.ITextView.ViewportWidthChanged">
            <summary>
            Occurs when the viewport's width is changed.
            </summary>
            <remarks>Deprecated. Use LayoutChanged instead.</remarks>
        </member>
        <member name="E:Microsoft.VisualStudio.Text.Editor.ITextView.MouseHover">
            <summary>
            Occurs when the mouse has hovered over the same character.
            </summary>
            <remarks>
            This event is raised only once, unless either the mouse moves or the text in the view changes.
            <para>The delay between the time when the mouse stops moving and the time when the event is raised 
            can be changed by adding a <see cref="T:Microsoft.VisualStudio.Text.Editor.MouseHoverAttribute" /> to the event handler.
            If no <see cref="T:Microsoft.VisualStudio.Text.Editor.MouseHoverAttribute" /> is specified on the event handler, the delay will be 150ms.</para>
            </remarks>
        </member>
        <member name="E:Microsoft.VisualStudio.Text.Editor.ITextView.Closed">
            <summary>
            Occurs immediately after the text view is closed.
            </summary>
        </member>
        <member name="E:Microsoft.VisualStudio.Text.Editor.ITextView.LostAggregateFocus">
            <summary>
            Occurs when the keyboard focus switches away from the view and any of its adornments.
            </summary>
            <remarks>This event will not be raised when keyboard focus transitions from the view to one of its popups.</remarks>
        </member>
        <member name="E:Microsoft.VisualStudio.Text.Editor.ITextView.GotAggregateFocus">
            <summary>Occurs when the keyboard focus switches to the view or one of its adornments.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Editor.ITextView2">
            <summary>
            Extensions to <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView" />, augmenting functionality. For every member here
            there should also be an extension method in <see cref="T:Microsoft.VisualStudio.Text.Editor.TextViewExtensions" />.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.ITextView2.InOuterLayout">
            <summary>
            Determines whether the view is in the process of being laid out or is preparing to be laid out.
            </summary>
            <remarks>
            As opposed to <see cref="P:Microsoft.VisualStudio.Text.Editor.ITextView.InLayout" />, it is safe to get the <see cref="P:Microsoft.VisualStudio.Text.Editor.ITextView.TextViewLines" />
            but attempting to queue another layout will cause a reentrant layout exception.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.ITextView2.MultiSelectionBroker">
            <summary>
            Gets an object for managing selections within the view.
            </summary>
        </member>
        <member name="E:Microsoft.VisualStudio.Text.Editor.ITextView2.MaxTextRightCoordinateChanged">
            <summary>
            Raised whenever the view's MaxTextRightCoordinate is changed.
            </summary>
            <remarks>
            This event will only be rasied if the MaxTextRightCoordinate is changed by changing the MinMaxTextRightCoordinate property
            (it will not be raised as a side-effect of a layout even if the layout does change the MaxTextRightCoordinate).
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.ITextView2.QueuePostLayoutAction(System.Action)">
            <summary>
            Adds an action to be performed after any layouts are complete. If there is not a layout in progress, the action will
            be performed immediately. This must be called on the UI thread, and actions will be performed on the UI thread.
            </summary>
            <param name="action">The action to be performed.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.ITextView2.TryGetTextViewLines(Microsoft.VisualStudio.Text.Editor.ITextViewLineCollection@)">
            <summary>
            Attempts to get a read-only list of the <see cref="T:Microsoft.VisualStudio.Text.Formatting.ITextViewLine" /> objects rendered in this view.
            </summary>
            <remarks>
            This list will be dense. That is, all characters between the first character of the first <see cref="T:Microsoft.VisualStudio.Text.Formatting.ITextViewLine" /> through
            the last character of the last <see cref="T:Microsoft.VisualStudio.Text.Formatting.ITextViewLine" /> will be represented in one of the <see cref="T:Microsoft.VisualStudio.Text.Formatting.ITextViewLine" /> objects,
            except when the layout of the <see cref="T:Microsoft.VisualStudio.Text.Formatting.ITextViewLine" /> objects is in progress.
            <para>
            <see cref="T:Microsoft.VisualStudio.Text.Formatting.ITextViewLine" /> objects are disjoint. That is, a given character is part of only one <see cref="T:Microsoft.VisualStudio.Text.Formatting.ITextViewLine" />.
            </para>
            <para>
            The <see cref="T:Microsoft.VisualStudio.Text.Formatting.ITextViewLine" /> objects are sorted by the index of their first character.
            </para>
            <para>Some of the <see cref="T:Microsoft.VisualStudio.Text.Formatting.ITextViewLine" /> objects may not be visible, 
            and all <see cref="T:Microsoft.VisualStudio.Text.Formatting.ITextViewLine" /> objects will be disposed of when the view
            recomputes its layout.</para>
            <para>This list is occasionally not available due to layouts or other events, and callers should be prepared to handle
            a failure.</para>
            </remarks>
            <param name="textViewLines">Returns out the <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextViewLineCollection" /> requested.</param>
            <returns>True if succeeded, false otherwise.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.ITextView2.TryGetTextViewLineContainingBufferPosition(Microsoft.VisualStudio.Text.SnapshotPoint,Microsoft.VisualStudio.Text.Formatting.ITextViewLine@)">
            <summary>
            Attempts to get the <see cref="T:Microsoft.VisualStudio.Text.Formatting.ITextViewLine" /> that contains the specified text buffer position.
            </summary>
            <param name="bufferPosition">
            The text buffer position used to search for a text line.
            </param>
            <returns>
            True if succeeded, false otherwise.
            </returns>
            <remarks>
            <para>This method returns an <see cref="T:Microsoft.VisualStudio.Text.Formatting.ITextViewLine" /> if it exists in the view.</para>
            <para>If the line does not exist in the cache of formatted lines, it will be formatted and added to the cache.</para>
            <para>The returned <see cref="T:Microsoft.VisualStudio.Text.Formatting.ITextViewLine" /> could be invalidated by either a layout by the view or by subsequent calls to this method.</para>
            <para>It is occasionally invalid to retrieve an <see cref="T:Microsoft.VisualStudio.Text.Formatting.ITextViewLine" /> due to layouts or other events. Callers should be prepared to handle
            a failure.</para>
            </remarks>
            <param name="textViewLine">Returns out the <see cref="T:Microsoft.VisualStudio.Text.Formatting.ITextViewLine" /> requested.</param>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Editor.ITextViewConnectionListener">
            <summary>
            Listens to text buffers of a particular content type to find out when they are opened or closed
            in the text editor.
            </summary>
            <remarks>This is a MEF component part, and should be exported with the following attribute:
            [Export(typeof(ITextViewConnectionListener))]
            [ContentType("...")]
            [TextViewRole("...")]
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.ITextViewConnectionListener.SubjectBuffersConnected(Microsoft.VisualStudio.Text.Editor.ITextView,Microsoft.VisualStudio.Text.Editor.ConnectionReason,System.Collections.Generic.IReadOnlyCollection{Microsoft.VisualStudio.Text.ITextBuffer})">
            <summary>
            Called when one or more <see cref="T:Microsoft.VisualStudio.Text.ITextBuffer" /> objects of the appropriate <see cref="T:Microsoft.VisualStudio.Utilities.IContentType" /> are connected to a <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView" />.
            </summary>
            <remarks>
            A connection can occur at one of three times: (1) when the view is first created; (2) when the buffer becomes a member of the 
            <see cref="T:Microsoft.VisualStudio.Text.Projection.IBufferGraph" /> for the view; or (3) when the 
            <see cref="T:Microsoft.VisualStudio.Utilities.IContentType" /> of the buffer changes.
            </remarks>
            <param name="textView">The <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView" /> to which the subject buffers are being connected.</param>
            <param name="reason">The cause of the connection.</param>
            <param name="subjectBuffers">The non-empty list of <see cref="T:Microsoft.VisualStudio.Text.ITextBuffer" /> objects with matching
            content types.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.ITextViewConnectionListener.SubjectBuffersDisconnected(Microsoft.VisualStudio.Text.Editor.ITextView,Microsoft.VisualStudio.Text.Editor.ConnectionReason,System.Collections.Generic.IReadOnlyCollection{Microsoft.VisualStudio.Text.ITextBuffer})">
            <summary>
            Called when one or more <see cref="T:Microsoft.VisualStudio.Text.ITextBuffer" /> objects no longer satisfy the conditions for being included in the subject buffers.
            </summary>
            <remarks>
            Text buffers can be disconnected when they are removed as source buffers of some projection buffer, 
            or when their content type changes, or when the <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView" /> is closed.
            </remarks>
            <param name="textView">The <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView" /> from which the subject buffers are being disconnected.</param>
            <param name="reason">The cause of the disconnection.</param>
            <param name="subjectBuffers">The non-empty list of <see cref="T:Microsoft.VisualStudio.Text.ITextBuffer" /> objects.</param>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Editor.ITextViewCreationListener">
            <summary>
            Listens for when <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView" />s are created.
            </summary>
            <remarks>This is a MEF component part, and should be exported with the following attribute:
            [Export(typeof(ITextViewCreationListener))]
            [ContentType("...")]
            [TextViewRole("...")]
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.ITextViewCreationListener.TextViewCreated(Microsoft.VisualStudio.Text.Editor.ITextView)">
            <summary>
            Called when a text view having matching roles is created over a text data model having a matching content type.
            </summary>
            <param name="textView">The newly created text view.</param>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Editor.ITextViewLineCollection">
            <summary>
            <para>Represents a helper class for accessing the view's collection of <see cref="T:Microsoft.VisualStudio.Text.Formatting.ITextViewLine" /> objects. The
            TextViewLines property on the <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView" /> is used to get an instance of this interface.</para>
            </summary>
            <remarks>
            <para>The <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView" /> disposes its <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextViewLineCollection" />
            and all the <see cref="T:Microsoft.VisualStudio.Text.Formatting.ITextViewLine" /> objects it contains every time it generates a new layout.</para>
            <para>Most properties and parameters that are doubles correspond to coordinates or distances in the text
            rendering coordinate system. In this coordinate system, x = 0.0 corresponds to the left edge of the drawing
            surface onto which text is rendered (x = view.ViewportLeft corresponds to the left edge of the viewport), and y = view.ViewportTop corresponds to the top edge of the viewport. The x-coordinate increases
            from left to right, and the y-coordinate increases from top to bottom. </para>
            <para>The horizontal and vertical axes of the view behave differently. When the text in the view is
            formatted, only the visible lines are formatted. As a result,
            a viewport cannot be scrolled horizontally and vertically in the same way.</para>
            <para>A viewport is scrolled horizontally by changing the left coordinate of the
            viewport so that it moves with respect to the drawing surface.</para>
            <para>A view can be scrolled vertically only by performing a new layout.</para>
            <para>Doing a layout in the view may cause the ViewportTop property of the view to change. For example, scrolling down one line will not translate any of the visible lines.
            Instead it will simply change the view's ViewportTop property (causing the lines to move on the screen even though their y-coordinates have not changed).</para>
            <para>Distances in the text rendering coordinate system correspond to logical pixels. If the text rendering
            surface is displayed without any scaling transform, then 1 unit in the text rendering coordinate system
            corresponds to one pixel on the display.</para>
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.ITextViewLineCollection.ContainsBufferPosition(Microsoft.VisualStudio.Text.SnapshotPoint)">
            <summary>
            Determines whether the specified buffer position is contained by any of the <see cref="T:Microsoft.VisualStudio.Text.Formatting.ITextViewLine" /> objects in the collection.
            </summary>
            <param name="bufferPosition">The buffer position.</param>
            <returns><c>true</c> if <paramref name="bufferPosition" /> is contained by ones of the <see cref="T:Microsoft.VisualStudio.Text.Formatting.ITextViewLine" /> objects, otherwise <c>false</c>.</returns>
            <remarks>
            This method handles the special processing required for the last line of the buffer.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.ITextViewLineCollection.IntersectsBufferSpan(Microsoft.VisualStudio.Text.SnapshotSpan)">
            <summary>
            Detrmines whether the specified buffer span intersects any of the <see cref="T:Microsoft.VisualStudio.Text.Formatting.ITextViewLine" /> objects in the collection.
            </summary>
            <param name="bufferSpan">The buffer span.</param>
            <returns><c>true</c> if <paramref name="bufferSpan" /> is contained by ones of the <see cref="T:Microsoft.VisualStudio.Text.Formatting.ITextViewLine" /> objects, otherwise <c>false</c>.</returns>
            <remarks>
            This method handles the special processing required for the last line of the buffer.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.ITextViewLineCollection.GetTextViewLineContainingBufferPosition(Microsoft.VisualStudio.Text.SnapshotPoint)">
            <summary>
            Gets the <see cref="T:Microsoft.VisualStudio.Text.Formatting.ITextViewLine" /> that contains the specified text buffer position.
            </summary>
            <param name="bufferPosition">
            The text buffer position used to search for a text line.
            </param>
            <returns>
            An <see cref="T:Microsoft.VisualStudio.Text.Formatting.ITextViewLine" /> that contains the position, or null if none exists.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="bufferPosition" /> is not a valid buffer position.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.ITextViewLineCollection.GetTextViewLineContainingYCoordinate(System.Double)">
            <summary>
            Gets the <see cref="T:Microsoft.VisualStudio.Text.Formatting.ITextViewLine" /> that contains the specified y-coordinate.
            </summary>
            <param name="y">
            The y-coordinate in the text rendering coordinate.
            </param>
            <returns>
            A text line that contains the y-coordinate, or null if none exists.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="y" /> is NaN.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.ITextViewLineCollection.GetTextViewLinesIntersectingSpan(Microsoft.VisualStudio.Text.SnapshotSpan)">
            <summary>
            Gets all of the <see cref="T:Microsoft.VisualStudio.Text.Formatting.ITextViewLine" /> objects that intersect <paramref name="bufferSpan" />.
            </summary>
            <param name="bufferSpan">The span.</param>
            <returns>A sorted collection of <see cref="T:Microsoft.VisualStudio.Text.Formatting.ITextViewLine" /> objects that intersect the buffer span.</returns>
            <remarks>
            <para>This will return an empty list if there is no intersection between the
            <see cref="T:Microsoft.VisualStudio.Text.Formatting.ITextViewLine" /> objects in this collection and <paramref name="bufferSpan" />.</para>
            <para>This method handles the special processing required for the last line of the buffer.</para>
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.ITextViewLineCollection.GetTextElementSpan(Microsoft.VisualStudio.Text.SnapshotPoint)">
            <summary>
            Gets the span whose text element span contains the given buffer position.
            </summary>
            <param name="bufferPosition">The buffer position.</param>
            <returns>The <see cref="T:Microsoft.VisualStudio.Text.SnapshotSpan" /> that corresponds to the given text element index.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="bufferPosition" /> does not correspond to a position on this line.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.ITextViewLineCollection.GetCharacterBounds(Microsoft.VisualStudio.Text.SnapshotPoint)">
            <summary>
            Gets the text bounds of the specified text buffer position.
            </summary>
            <param name="bufferPosition">
            The text buffer-based index of the character.
            </param>
            <returns>
            A rectangular <see cref="T:Microsoft.VisualStudio.Text.Formatting.TextBounds" /> structure.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="bufferPosition" /> does not correspond to a position on this line.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.ITextViewLineCollection.GetNormalizedTextBounds(Microsoft.VisualStudio.Text.SnapshotSpan)">
            <summary>
            Gets a collection of <see cref="T:Microsoft.VisualStudio.Text.Formatting.TextBounds" /> structures for the text that corresponds to the given span.
            </summary>
            <param name="bufferSpan">
            The buffer span representing the text for which to compute the text bounds.
            </param>
            <returns>
            A read-only collection of <see cref="T:Microsoft.VisualStudio.Text.Formatting.TextBounds" /> structures that contain the text specified in <paramref name="bufferSpan" />.
            </returns>
            <remarks>
            <para>
            If the line contains bidirectional text, the <see cref="T:Microsoft.VisualStudio.Text.Formatting.TextBounds" /> objects that are returned may be disjoint.
            </para>
            <para>
            The height and top of the bounds will be the maximum of the height and the minimum of the top of all text
            in the line.
            </para>
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="bufferSpan" /> is not a legal span in the underlying text buffer.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.ITextViewLineCollection.GetIndexOfTextLine(Microsoft.VisualStudio.Text.Formatting.ITextViewLine)">
            <summary>
            Gets the index in the text lines of the given text view line.
            </summary>
            <param name="textLine">The <see cref="T:Microsoft.VisualStudio.Text.Formatting.ITextViewLine" /> for which to find the index.</param>
            <returns>The index of the <see cref="T:Microsoft.VisualStudio.Text.Formatting.ITextViewLine" /> in the view's TextLines list.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="textLine" /> is null.</exception>
            <exception cref="T:System.ObjectDisposedException"><paramref name="textLine" /> has been disposed.</exception>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.ITextViewLineCollection.FirstVisibleLine">
            <summary>
            Gets the first line that is not completely hidden.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.ITextViewLineCollection.LastVisibleLine">
            <summary>
            Gets the last line that is not completely hidden.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.ITextViewLineCollection.FormattedSpan">
            <summary>
            Gets the span of text contained in this <see cref="T:Microsoft.VisualStudio.Text.Formatting.ITextViewLine" /> collection. 
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.ITextViewLineCollection.IsValid">
            <summary>
            Determines whether this <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextViewLineCollection" /> object is still valid.
            </summary>
            <remarks>The <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView" /> will always invalidate the <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextViewLineCollection" />
            when performing a layout.</remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Editor.ITextViewMargin">
            <summary>
            Represents margins that are attached to an edge of an <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView" />.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.ITextViewMargin.MarginSize">
            <summary>
            Gets the size of the margin. 
            </summary>
            <remarks>For a horizontal margin this is the height of the margin, 
            since the width will be determined by the <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView" />. 
            For a vertical margin this is the width of the margin, since the height will be determined by the <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView" />.</remarks>
            <exception cref="T:System.ObjectDisposedException">The margin is disposed.</exception>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.ITextViewMargin.Enabled">
            <summary>
            Determines whether the margin is enabled.
            </summary>
            <exception cref="T:System.ObjectDisposedException">The margin is disposed.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.ITextViewMargin.GetTextViewMargin(System.String)">
            <summary>
            Gets the <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextViewMargin" /> with the given <paramref name="marginName" />.
            </summary>
            <param name="marginName">The name of the <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextViewMargin" />.</param>
            <returns>The <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextViewMargin" /> named <paramref name="marginName" />, or null if no match is found.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="marginName" /> is null.</exception>
            <remarks>A margin returns itself if it is passed its own name. If the name does not match and it is a container margin, it
            forwards the call to its children. Margin name comparisons are case-insensitive.</remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Editor.ITextViewModel">
            <summary>
            Represents a set of zero or more <see cref="T:Microsoft.VisualStudio.Text.ITextBuffer" /> objects that are unique to the presentation of text
            in a particular <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView" />.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.ITextViewModel.DataModel">
            <summary>
            The <see cref="T:Microsoft.VisualStudio.Text.ITextDataModel" /> that supplies the <see cref="P:Microsoft.VisualStudio.Text.Editor.ITextViewModel.DataBuffer" /> and the governing <see cref="T:Microsoft.VisualStudio.Utilities.IContentType" /> for the view.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.ITextViewModel.DataBuffer">
            <summary>
            Represents the <see cref="T:Microsoft.VisualStudio.Text.ITextBuffer" /> for the data level. The data level text buffer is the highest buffer in the graph that
            is shared across multiple views and is therefore the base of the view model.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.ITextViewModel.EditBuffer">
            <summary>
            The <see cref="T:Microsoft.VisualStudio.Text.ITextBuffer" /> in which editing positions are tracked and to which edits are applied.
            All the text that appears in the view must reside in this buffer.
            </summary>
            <remarks>
            This text buffer may be the same as the <see cref="P:Microsoft.VisualStudio.Text.Editor.ITextViewModel.DataBuffer" />, or it may be a projection buffer
            or elision buffer whose ultimate source is the data buffer.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.ITextViewModel.VisualBuffer">
            <summary>
            The <see cref="T:Microsoft.VisualStudio.Text.ITextBuffer" /> whose contents should be presented in the editor. 
            </summary>
            <remarks>
            This text buffer may be the same as the <see cref="P:Microsoft.VisualStudio.Text.Editor.ITextViewModel.EditBuffer" /> or it may be a projection buffer
            or elision buffer whose ultimate source is the edit buffer.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.ITextViewModel.IsPointInVisualBuffer(Microsoft.VisualStudio.Text.SnapshotPoint,Microsoft.VisualStudio.Text.PositionAffinity)">
            <summary>
            Determines whether a point in the edit buffer is represented in the visual buffer.
            </summary>
            <param name="editBufferPoint">A point in the <see cref="P:Microsoft.VisualStudio.Text.Editor.ITextViewModel.EditBuffer" />.</param>
            <param name="affinity">
            If the mapping is ambiguous, this parameter affects the mapping as follows:
            if <paramref name="affinity" /> is <see cref="F:Microsoft.VisualStudio.Text.PositionAffinity.Predecessor" />, the mapping targets 
            the position immediately after the preceding character in the projection buffer; if <paramref name="affinity" /> is 
            <see cref="F:Microsoft.VisualStudio.Text.PositionAffinity.Successor" />, the mapping targets the position immediately before the following character
            in the projection buffer. This parameter has no effect if the mapping is unambiguous.</param>
            <returns><c>true</c> if the point is represented in the visual buffer, otherwise <c>false</c>.</returns>
            <remarks>
            A point that is represented in the visual buffer may not be visible on screen, but if the view
            is scrolled to that position, then the point would become visible.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.ITextViewModel.GetNearestPointInVisualBuffer(Microsoft.VisualStudio.Text.SnapshotPoint)">
            <summary>
            Gets a point in the <see cref="P:Microsoft.VisualStudio.Text.Editor.ITextViewModel.VisualBuffer" /> that corresponds to the specified point in the edit
            buffer. If the point is hidden or has an alternative representation, gets
            the nearest point to it.
            </summary>
            <remarks>The definition of "nearest" depends on the implementation of the text view model.</remarks>
            <param name="editBufferPoint">A point in the <see cref="P:Microsoft.VisualStudio.Text.Editor.ITextViewModel.EditBuffer" />.</param>
            <returns>A point in the <see cref="P:Microsoft.VisualStudio.Text.Editor.ITextViewModel.VisualBuffer" /> that corresponds to the given point.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.ITextViewModel.GetNearestPointInVisualSnapshot(Microsoft.VisualStudio.Text.SnapshotPoint,Microsoft.VisualStudio.Text.ITextSnapshot,Microsoft.VisualStudio.Text.PointTrackingMode)">
            <summary>
            Gets a point in the <see cref="P:Microsoft.VisualStudio.Text.Editor.ITextViewModel.VisualBuffer" /> that corresponds to the specified point in the edit
            buffer. If the point is hidden or has an alternative representation, gets
            the nearest point to it.
            </summary>
            <remarks>The definition of "nearest" depends on the implementation of the text view model.</remarks>
            <param name="editBufferPoint">A point in the <see cref="P:Microsoft.VisualStudio.Text.Editor.ITextViewModel.EditBuffer" />.</param>
            <param name="targetVisualSnapshot">The snapshot of <see cref="P:Microsoft.VisualStudio.Text.Editor.ITextViewModel.VisualBuffer" /> to map to.</param>
            <param name="trackingMode">The <see cref="T:Microsoft.VisualStudio.Text.PointTrackingMode" /> to use when translating to targetVisualSnapshot.</param>
            <returns>A point in the <see cref="P:Microsoft.VisualStudio.Text.Editor.ITextViewModel.VisualBuffer" /> that corresponds to the given point in targetVisualSnapshot.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Editor.ITextViewModelProvider">
            <summary>
            Provides <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextViewModel" /> objects.
            </summary>
            <remarks>This is a MEF component part, and should be exported with the following attribute:
            [Export(typeof(ITextViewModelProvider))]
            Component exporters must specify at least one ContentTypeAttribute characterizing the data
            models to which they apply and at least one TextViewRoleAttribute characterizing the views to which they apply.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.ITextViewModelProvider.CreateTextViewModel(Microsoft.VisualStudio.Text.ITextDataModel,Microsoft.VisualStudio.Text.Editor.ITextViewRoleSet)">
            <summary>
            Creates an <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextViewModel" /> for the given <see cref="T:Microsoft.VisualStudio.Text.ITextDataModel" />.
            </summary>
            <param name="dataModel">The <see cref="T:Microsoft.VisualStudio.Text.ITextDataModel" /> for which to create the <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextViewModel" />.</param>
            <param name="roles">The <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextViewRoleSet" /> for the view that is about to be created.</param>
            <returns>The <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextViewModel" /> created for <paramref name="dataModel" />, 
            or <c>null</c> if the text view model cannot be created.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Editor.ITextViewRoleSet">
            <summary>
            Set of text view roles.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.ITextViewRoleSet.Contains(System.String)">
            <summary>
            Compute whether the given text view role is a member of the set.
            </summary>
            <exception cref="T:System.ArgumentNullException"><paramref name="textViewRole" /> is null.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.ITextViewRoleSet.ContainsAll(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Compute whether the set contains all of the given text view roles.
            </summary>
            <exception cref="T:System.ArgumentNullException"> if <paramref name="textViewRoles" /> is null.</exception>
            <param name="textViewRoles">The list of roles to check for inclusion.</param>
            <remarks>
            Returns <b>true</b> if <paramref name="textViewRoles" /> contains no roles. Null values 
            in <paramref name="textViewRoles" /> are ignored.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.ITextViewRoleSet.ContainsAny(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Compute whether the set contains at least one of the given text view roles. 
            </summary>
            <param name="textViewRoles">The list of roles to check for inclusion.</param>
            <exception cref="T:System.ArgumentNullException"> if <paramref name="textViewRoles" /> is null.</exception>
            <remarks>
            Returns <b>false</b> if <paramref name="textViewRoles" /> contains no roles. Null values 
            in <paramref name="textViewRoles" /> are ignored.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.ITextViewRoleSet.UnionWith(Microsoft.VisualStudio.Text.Editor.ITextViewRoleSet)">
            <summary>
            Compute the union of the set and another text view role set.
            </summary>
            <param name="roleSet"></param>
            <exception cref="T:System.ArgumentNullException"> if <paramref name="roleSet" /> is null.</exception>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Editor.ITextViewZoomManager">
            <summary>
            Provides methods to manipulate zoom level of text views.
            </summary>
            <remarks>This is a MEF Component, and should be imported as follows:
            <code>
            [Import]
            ITextViewZoomManager zoomManager = null;
            </code>
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.ITextViewZoomManager.ZoomIn(Microsoft.VisualStudio.Text.Editor.ITextView)">
            <summary>
            Zooms in to the text view by a scaling factor of 10%.
            </summary>
            <remarks>
            The maximum zooming scale is 400%.
            </remarks>
            <param name="textView">Text view to which zoom is applied.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.ITextViewZoomManager.ZoomOut(Microsoft.VisualStudio.Text.Editor.ITextView)">
            <summary>
            Zooms out of the text view by a scaling factor of 10%.
            </summary>
            <remarks>
            The minimum zooming scale is 20%.
            </remarks>
            <param name="textView">Text view to which zoom is applied.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.ITextViewZoomManager.ZoomTo(Microsoft.VisualStudio.Text.Editor.ITextView,System.Double)">
            <summary>
            Applies the given zoomLevel to the text view.
            </summary>
            <param name="textView">Text view to which zoom is applied.</param>
            <param name="zoomLevel">The zoom level to apply between 20% to 400%.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.ITextViewZoomManager.CanZoomIn(Microsoft.VisualStudio.Text.Editor.ITextView)">
            <summary>
            Checks if it can zoom in to the text view. Also returns <c>false</c> if current value is already 400%.
            </summary>
            <remarks>
            The maximum zooming scale is 400%.
            </remarks>
            <param name="textView">Text view to which zoom is applied.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.ITextViewZoomManager.CanZoomOut(Microsoft.VisualStudio.Text.Editor.ITextView)">
            <summary>
            Checks if it can zoom out of the text view. Also returns <c>false</c> if current value is already 20%.
            </summary>
            <remarks>
            The minimum zooming scale is 20%.
            </remarks>
            <param name="textView">Text view to which zoom is applied.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.ITextViewZoomManager.CanZoomTo(Microsoft.VisualStudio.Text.Editor.ITextView,System.Double)">
            <summary>
            Checks if it can apply the given zoomLevel to the text view. Also returns <c>false</c> if current value is same as zoomLevel.
            </summary>
            <param name="zoomLevel">The zoom level to apply between 20% to 400%.</param>
            <param name="textView">Text view to which zoom is applied.</param>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Editor.IVerticalFractionMap">
            <summary>
            <para>Maps between character positions and fractions of the total vertical extent of an <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView" />.</para>
            </summary>
            <remarks>
            <para>Valid text positions range are [0...TextView.TextSnapshot.Length].
            Valid scrollbar coordinates are [0.0 ... 1.0].
            0.0 corresponds to the top of the first line in the text view; 1.0 corresponds to the bottom of the last line in the view.
            Not every text position will have a unique value. For example, every character on
            the same text buffer line will have the same value, assuming that word wrap is not enabled.</para>
            <para>This interface is the base type of the <see cref="T:Microsoft.VisualStudio.Text.Editor.IScrollMap" /> interface, 
            which is created using the <see cref="T:Microsoft.VisualStudio.Text.Editor.IScrollMapFactoryService" />.</para>
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.IVerticalFractionMap.TextView">
            <summary>
            Gets the text view to which this fraction map applies.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.IVerticalFractionMap.GetFractionAtBufferPosition(Microsoft.VisualStudio.Text.SnapshotPoint)">
            <summary>
            Gets the fraction of the vertical extent of the view that corresponds to the specified buffer position.
            </summary>
            <param name="bufferPosition">The buffer position.</param>
            <returns>The corresponding fraction of the vertical extent of the view.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.IVerticalFractionMap.GetBufferPositionAtFraction(System.Double)">
            <summary>
            Gets the buffer position that corresponds to a fraction of the vertical extent of the view,
            if it exists.
            </summary>
            <param name="fraction">The fraction of the vertical extent of the view.</param>
            <returns>The corresponding character position.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="fraction" /> is NaN, less than 0.0 or greater than 1.0.</exception>
            <remarks>Different buffer positions can have the same fractions. This method is guaranteed only to be consistent: it will
            return the same position for the same fraction. The exact character returned depends on the implementation of the fraction map.
            It will, generally, be the first character on the line, but this is not guaranteed.</remarks>
        </member>
        <member name="E:Microsoft.VisualStudio.Text.Editor.IVerticalFractionMap.MappingChanged">
            <summary>
            Occurs when the mapping between character position and its vertical fraction has changed.
            For example, the view may have re-rendered some lines, changing their font size.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Editor.IVerticalScrollBar">
            <summary>
            Represents a vertical scroll bar.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.IVerticalScrollBar.Map">
            <summary>
            Gets the mapping between the text position and the scrollbar coordinate for the scrollbar.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.IVerticalScrollBar.GetYCoordinateOfBufferPosition(Microsoft.VisualStudio.Text.SnapshotPoint)">
            <summary>
            Gets the y-coordinate in the scrollbar track that corresponds to a buffer position.
            </summary>
            <param name="bufferPosition">Desired position.</param>
            <returns>Corresponding y-coordinate.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.IVerticalScrollBar.GetYCoordinateOfScrollMapPosition(System.Double)">
            <summary>
            Gets the y-coordinate in the scrollbar track that corresponds to a position in scroll map coordinates.
            </summary>
            <param name="scrollMapPosition">Desired position.</param>
            <returns>Corresponding y-coordinate.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.IVerticalScrollBar.GetBufferPositionOfYCoordinate(System.Double)">
            <summary>
            Gets the buffer position that corresponds to a y-coordinate in the scrollbar track.
            </summary>
            <param name="y">Desired y-coordinate.</param>
            <returns>A position in the buffer, even if <paramref name="y" /> is below or above the mapped range of coordinates.</returns>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.IVerticalScrollBar.ThumbHeight">
            <summary>
            Gets the height of the scrollbar thumb in pixels.
            </summary>
            <remarks>
            The last buffer position maps to the bottom of the scrollbar track minus the thumb height.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.IVerticalScrollBar.TrackSpanTop">
            <summary>
            Gets the y-coordinate of the top of the scrollbar track as it is rendered in the display (excluding the scroll buttons
            at the top and bottom).
            </summary>
            <remarks>
            <para>If mapping from scrollbar coordinates to positions in the scrollbar's track, the correct mapping is:</para>
            <para>pixel position = (scrollbar coordinate * TrackSpanHeight / (Map.Maximum + Map.ViewportSize)) + TrackSpanTop</para>
            <para>scrollbar coordinate = (pixel position - TrackSpanTop) * (Map.Maximum + Map.ViewportSize) / TrackSpanHeight</para>
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.IVerticalScrollBar.TrackSpanBottom">
            <summary>
            Gets the y-coordinate of the bottom of the scrollbar track as it is rendered in the display (excluding the scroll buttons
            at the top and bottom).
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.IVerticalScrollBar.TrackSpanHeight">
            <summary>
            Gets the height of the scrollbar track as it is rendered in the display (excluding the scroll buttons
            at the top and bottom).
            </summary>
        </member>
        <member name="E:Microsoft.VisualStudio.Text.Editor.IVerticalScrollBar.TrackSpanChanged">
            <summary>
            Occurs when the span of the scrollbar track dimensions is changed. For example, they could change as a result of resizing
            the view.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Editor.IViewScroller">
            <summary>
            Represents a helper class for the <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView" />, and provides basic functionality for scrolling. The
            <see cref="P:Microsoft.VisualStudio.Text.Editor.ITextView.ViewScroller" /> property of <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView" /> is used to get an instance of the this
            interface.
            </summary>
            <remarks>
            <para>Most properties and parameters that are doubles correspond to coordinates or distances in the text
            rendering coordinate system. In this coordinate system, x = 0.0 corresponds to the left edge of the drawing
            surface onto which text is rendered (x = view.ViewportLeft corresponds to the left edge of the viewport), and y = view.ViewportTop corresponds to the top edge of the viewport. The x-coordinate increases
            from left to right, and the y-coordinate increases from top to bottom. </para>
            <para>The horizontal and vertical axes of the view behave differently. When the text in the view is
            formatted, only the visible lines are formatted. As a result,
            a viewport cannot be scrolled horizontally and vertically in the same way.</para>
            <para>A viewport is scrolled horizontally by changing the left coordinate of the
            viewport so that it moves with respect to the drawing surface.</para>
            <para>A view can be scrolled vertically only by performing a new layout.</para>
            <para>Doing a layout in the view may cause the ViewportTop property of the view to change. For example, scrolling down one line will not translate any of the visible lines.
            Instead it will simply change the view's ViewportTop property (causing the lines to move on the screen even though their y-coordinates have not changed).</para>
            <para>Distances in the text rendering coordinate system correspond to logical pixels. If the text rendering
            surface is displayed without any scaling transform, then 1 unit in the text rendering coordinate system
            corresponds to one pixel on the display.</para>
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.IViewScroller.ScrollViewportVerticallyByPixels(System.Double)">
            <summary>
            Scrolls the viewport vertically by <paramref name="distanceToScroll" />.
            </summary>
            <param name="distanceToScroll">
            The distance to scroll in the text rendering coordinate system. Positive values scroll the viewport
            up, and negative values scroll the viewport down.
            </param>
            <remarks>
            <para>This can be very slow for large numbers of pixels. You should avoid
            using this method to scroll more than the height of the viewport in either direction.</para>
            <para>The viewport always contains at least one visible line along its top edge, and the distance
            scrolled will be clipped to ensure that this always remains true.</para>
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="distanceToScroll" /> is NaN.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.IViewScroller.ScrollViewportVerticallyByLine(Microsoft.VisualStudio.Text.Editor.ScrollDirection)">
            <summary>
            Scrolls the viewport vertically one line up or down.
            </summary>
            <param name="direction">
            The direction in which to scroll.
            </param>
            <remarks>
            <para>The viewport always contains at least one visible line along its top edge, and the distance
            scrolled is clipped to ensure that this always remains true.</para>
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="direction" /> is not a <see cref="T:Microsoft.VisualStudio.Text.Editor.ScrollDirection" />.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.IViewScroller.ScrollViewportVerticallyByLines(Microsoft.VisualStudio.Text.Editor.ScrollDirection,System.Int32)">
            <summary>
            Scrolls the viewport vertically by multiple lines up or down.
            </summary>
            <param name="direction">
            The direction in which to scroll.
            </param>
            <param name="count">
            The number of lines to scroll up or down.
            </param>
            <remarks>
            <para>The viewport always contains at least one visible line along its top edge, and the distance
            scrolled is clipped to ensure that this always remains true.</para>
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="direction" /> is not a <see cref="T:Microsoft.VisualStudio.Text.Editor.ScrollDirection" />.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="count" /> is negative.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.IViewScroller.ScrollViewportVerticallyByPage(Microsoft.VisualStudio.Text.Editor.ScrollDirection)">
            <summary>
            Scrolls the viewport vertically one page up or down.
            </summary>
            <param name="direction">
            The direction in which to scroll.
            </param>
            <returns><c>true</c> if the view was scrolled by a full page. <c>false</c> if the view had been positioned near the top/bottom of the document and, as a result, scrolled by less than the height of the viewport.</returns>
            <remarks>
            <para>The view will be scrolled by the height of the viewport minus whatever is needed to have the first line of the viewport be flush with the top of the view.</para>
            <para>The view cannot be scrolled so that there is a gap between the top of the view and the first line of text.</para>
            <para>The view cannot be scrolled the last line of the buffer is above the top of the view.</para>
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="direction" /> is not a <see cref="T:Microsoft.VisualStudio.Text.Editor.ScrollDirection" />.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.IViewScroller.ScrollViewportHorizontallyByPixels(System.Double)">
            <summary>
            Scrolls the viewport horizontally by <paramref name="distanceToScroll" />.
            </summary>
            <param name="distanceToScroll">
            The distance to scroll the viewport in the text rendering coordinate system. Positive values
            scroll the viewport to the right, and negative values scroll the viewport to the left.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="distanceToScroll" /> is NaN.</exception>
            <remarks>
            A view cannot be scrolled horizontally if word wrap is enabled.
            If word wrap is disabled, the horizontal offset of the view must be between [0.0, max(0.0, formatted content width - viewport width)].
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.IViewScroller.EnsureSpanVisible(Microsoft.VisualStudio.Text.SnapshotSpan)">
            <summary>
            Ensures that all the text in <paramref name="span" /> is entirely visible in the view.
            </summary>
            <param name="span">The span to make visible.</param>
            <remarks>
            This is equivalent to scroller.EnsureSpanVisible(span, EnsureSpanVisibleOptions.None);
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.IViewScroller.EnsureSpanVisible(Microsoft.VisualStudio.Text.SnapshotSpan,Microsoft.VisualStudio.Text.Editor.EnsureSpanVisibleOptions)">
            <summary>
            Ensures that all the text in <paramref name="span" /> is entirely visible in the view.
            </summary>
            <param name="span">The span to make visible.</param>
            <param name="options">The <see cref="T:Microsoft.VisualStudio.Text.Editor.EnsureSpanVisibleOptions" />.</param>
            <remarks>
            The view will not be scrolled if the text in <paramref name="span" /> is completely visible. If the text in <paramref name="span" /> is partially visible,
            then the view will be scrolled as little as possible to make the text completely visible.
            If none of the text in <paramref name="span" /> was visible, then it will be centered in the view.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.IViewScroller.EnsureSpanVisible(Microsoft.VisualStudio.Text.VirtualSnapshotSpan,Microsoft.VisualStudio.Text.Editor.EnsureSpanVisibleOptions)">
            <summary>
            Ensures that all the text in <paramref name="span" /> is entirely visible in the view.
            </summary>
            <param name="span">The span to make visible.</param>
            <param name="options">The <see cref="T:Microsoft.VisualStudio.Text.Editor.EnsureSpanVisibleOptions" />.</param>
            <remarks>
            The view will not be scrolled if the text in <paramref name="span" /> is completely visible. If the text in <paramref name="span" /> is partially visible,
            then the view will be scrolled as little as possible to make the text completely visible.
            If none of the text in <paramref name="span" /> was visible, then it will be centered in the view.
            </remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Editor.EnsureSpanVisibleOptions">
            <summary>
            Options to control the behavior of <see cref="T:Microsoft.VisualStudio.Text.Editor.IViewScroller" /> EnsureSpanVisible.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Editor.EnsureSpanVisibleOptions.ShowStart">
            <summary>
            Ensure that the start of the span is visible if it is impossible to display the entire span.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Editor.EnsureSpanVisibleOptions.MinimumScroll">
            <summary>
            Do the minimum amount of scrolling to display the span in the view.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Editor.EnsureSpanVisibleOptions.AlwaysCenter">
            <summary>
            Always center the span in the view.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Editor.EnsureSpanVisibleOptions.None">
            <summary>
            Ensure that the end of the span is visible if it is impossible to display the entire span. If none of the text
            in the span is currently visible, center the span in the view.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.IViewScroller2.ColumnWidth">
            <summary>
            Gets the width of a column in pixels.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.IViewScroller2.ScrollColumnLeft">
            <summary>
            Scrolls the view one column to the left.
            </summary>
            <remarks>
            A column is the width of a space in the default font.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.IViewScroller2.ScrollColumnRight">
            <summary>
            Scrolls the view one column to the right.
            </summary>
            <remarks>
            A column is the width of a space in the default font.
            </remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Editor.MarginContainerAttribute">
            <summary>
            Specifies the type of margin container.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.MarginContainerAttribute.#ctor(System.String)">
            <summary>
            Instantiates a new instance of a <see cref="T:Microsoft.VisualStudio.Text.Editor.MarginContainerAttribute" />.
            </summary>
            <param name="marginContainer">The name of the container for this margin.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="marginContainer" /> is null.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="marginContainer" /> is an empty string.</exception>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.MarginContainerAttribute.MarginContainer">
            <summary>
            The name of the margin container.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Editor.MouseHoverAttribute">
            <summary>
            An attribute to be placed on an event handler for <see cref="E:Microsoft.VisualStudio.Text.Editor.ITextView.MouseHover" />,
            specifying the delay between the time when the mouse stops moving
            and the generation of the hover event.
            </summary>
            <remarks>The default, if no MouseHoverAttribute is specified, is 150ms.</remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.MouseHoverAttribute.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of <see cref="T:Microsoft.VisualStudio.Text.Editor.MouseHoverAttribute" />.
            </summary>
            <param name="delay">The time in milliseconds between the time when the mouse stops moving and the generation of the hover event.</param>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.MouseHoverAttribute.Delay">
            <summary>
            Gets the time in milliseconds between the time when the mouse stops moving and the generation of the hover event.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Editor.MouseHoverEventArgs">
            <summary>
            Provides information for a MouseHover event of <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView" />.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.MouseHoverEventArgs.#ctor(Microsoft.VisualStudio.Text.Editor.ITextView,System.Int32,Microsoft.VisualStudio.Text.IMappingPoint)">
            <summary>
            Initializes a new instance of a <see cref="T:Microsoft.VisualStudio.Text.Editor.MouseHoverEventArgs" />.
            </summary>
            <param name="view">The view in which the hover event is being generated.</param>
            <param name="position">The position of the character under the mouse in the snapshot span of the view.</param>
            <param name="textPosition">The position mapped to the buffer graph of the character under the mouse.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="view" /> is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="position" /> is negative or greater than the length of the view's buffer.</exception>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.MouseHoverEventArgs.View">
            <summary>
            The view for which the hover event is being generated.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.MouseHoverEventArgs.Position">
            <summary>
            The position in the SnapshotSpan of the character under the mouse at the time of the hover.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.MouseHoverEventArgs.TextPosition">
            <summary>
            The position mapped to the buffer graph of the character under the mouse at the time of the hover.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Editor.PredefinedMarginNames">
            <summary>
            Specifies the names of the pre-defined margins supplied by Visual Studio.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Editor.PredefinedMarginNames.Left">
            <summary>
            The margin to the left of the text view.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Editor.PredefinedMarginNames.Right">
            <summary>
            The margin to the right of the text view.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Editor.PredefinedMarginNames.Top">
            <summary>
            The margin above the text view.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Editor.PredefinedMarginNames.Bottom">
            <summary>
            The margin below the text view.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Editor.PredefinedMarginNames.LeftSelection">
            <summary>
            The margin to the left of the text view that implements mouse handlers for line selection.
            This behavior is inherited by margins contained in the left selection margin.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Editor.PredefinedMarginNames.Outlining">
            <summary>
            The margin to the left of the text view that allows collapsing and expansion of outlining regions.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Editor.PredefinedMarginNames.LineNumber">
            <summary>
            The margin to the left of the text view that shows line numbers.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Editor.PredefinedMarginNames.HorizontalScrollBar">
            <summary>
            The standard horizontal scrollbar.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Editor.PredefinedMarginNames.HorizontalScrollBarContainer">
            <summary>
            The container margin that contains the <see cref="F:Microsoft.VisualStudio.Text.Editor.PredefinedMarginNames.HorizontalScrollBar" /> by default.
            </summary>
            <remarks>
            Other margins can be placed to the left or right of the <see cref="F:Microsoft.VisualStudio.Text.Editor.PredefinedMarginNames.HorizontalScrollBar" /> depending on their order attribute.
            </remarks>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Editor.PredefinedMarginNames.VerticalScrollBar">
            <summary>
            The standard vertical scrollbar.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Editor.PredefinedMarginNames.VerticalScrollBarContainer">
            <summary>
            The container margin that contains the <see cref="F:Microsoft.VisualStudio.Text.Editor.PredefinedMarginNames.VerticalScrollBar" /> by default.
            </summary>
            <remarks>
            Other margins can be placed above or below the <see cref="F:Microsoft.VisualStudio.Text.Editor.PredefinedMarginNames.VerticalScrollBar" /> depending on their order attribute.
            </remarks>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Editor.PredefinedMarginNames.RightControl">
            <summary>
            A vertical margin container in the <see cref="F:Microsoft.VisualStudio.Text.Editor.PredefinedMarginNames.Right" /> margin that contains the <see cref="F:Microsoft.VisualStudio.Text.Editor.PredefinedMarginNames.VerticalScrollBarContainer" />.
            </summary>
            <remarks>
            Margins that wish to appear on top or bottom of the vertical scrollbar and all its siblings should be added
            to this container margin.
            </remarks>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Editor.PredefinedMarginNames.BottomControl">
            <summary>
            A horizontal margin container in the <see cref="F:Microsoft.VisualStudio.Text.Editor.PredefinedMarginNames.Bottom" /> margin that contains the <see cref="F:Microsoft.VisualStudio.Text.Editor.PredefinedMarginNames.HorizontalScrollBarContainer" />.
            </summary>
            <remarks>
            Margins that wish to appear to the left or right of the horizontal scrollbar and all its siblings should be added to
            this container margin.
            </remarks>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Editor.PredefinedMarginNames.Spacer">
            <summary>
            The margin that appears between the line number and outlining margins and shows which text
            has changed in the current session.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Editor.PredefinedMarginNames.Glyph">
            <summary>
            The margin to the left of the text view that shows breakpoint and other glyphs.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Editor.PredefinedMarginNames.Suggestion">
            <summary>
            The margin to the left of the text view that shows suggestion glyphs such as the Light Bulb.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Editor.PredefinedMarginNames.ZoomControl">
            <summary>
            The margin to the left of the horizontal scroll bar that hosts a zoom control for zooming the view. 
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Editor.PredefinedMarginNames.BottomRightCorner">
            <summary>
            The margin to the right of the "Bottom" margin and below the "Right" margin.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Editor.PredefinedMarginNames.OverviewChangeTracking">
            <summary>
            Name of the margin that shows changes in the entire file.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Editor.PredefinedMarginNames.OverviewMark">
            <summary>
            Name of the margin that shows marks in the entire file.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Editor.PredefinedMarginNames.OverviewError">
            <summary>
            Name of the margin that shows errors in the entire file.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Editor.PredefinedMarginNames.OverviewSourceImage">
            <summary>
            Name of the margin that shows a zoomed-out image of the entire file.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Editor.PredefinedMarginNames.FileHealthIndicator">
            <summary>
            The margin to the left of the horizontal scroll bar that hosts a file health indicator.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Editor.PredefinedMarginNames.RowMargin">
            <summary>
            The margin to the right of the horizontal scrollbar containing the current caret line number.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Editor.PredefinedMarginNames.ChrMargin">
            <summary>
            The margin to the right of the horizontal scrollbar containing the current character index of the caret on it's given line.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Editor.PredefinedMarginNames.ColMargin">
            <summary>
            The margin to the right of the horizontal scrollbar containing the current column location of the caret on it's given line.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Editor.PredefinedMarginNames.SelectionStateMargin">
            <summary>
            The margin to the right of the horizontal scrollbar containing the state of selections in the view.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Editor.PredefinedMarginNames.InsertModeMargin">
            <summary>
            The margin to the right of the horizontal scrollbar containing the state of Insert/Overwrite mode.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Editor.PredefinedMarginNames.LineEndingMargin">
            <summary>
            The margin to the right of the horizontal scrollbar containing the state of newlines in the view.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Editor.PredefinedMarginNames.IndentationCharacterMargin">
            <summary>
            The margin to the right of the horizontal scrollbar describing what character gets inserted when you press tab.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Editor.PredefinedMarginNames.OuterTextViewTopBoundaryMargin">
            <summary>
            An invisible margin demarcating the top of the outer text view boundaries (text view + top margins which are considered
            to be part of the "outer" text view, such as Sticky Scroll margin).
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Editor.PredefinedTextViewRoles">
            <summary>
            Specifies the names of the pre-defined text view roles supplied by Visual Studio.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Editor.PredefinedTextViewRoles.Document">
            <summary>
            The predefined Document role. Applies to text views of entities, typically stored in files, that have
            a definite first line and last line. This excludes entities such as output logs or textual displays of
            data that are presented in a form.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Editor.PredefinedTextViewRoles.Structured">
            <summary>
            The predefined Structured role. Applies to text views of entities that have internal structure that should
            be exposed by editor facilities such as Outlining.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Editor.PredefinedTextViewRoles.Interactive">
            <summary>
            The predefined Interactive role. Applies to text views with which the user can interact using the mouse and/or
            keyboard. Views that are not interactive cannot display a caret or a selection and cannot have keyboard input.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Editor.PredefinedTextViewRoles.Editable">
            <summary>
            The predefined Editable role. Applies to text views that can be changed using the keyboard.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Editor.PredefinedTextViewRoles.Analyzable">
            <summary>
            The predefined Analyzable role. Applies to text views of entities that can be analyzed for errors or
            other information (such as "quick info").
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Editor.PredefinedTextViewRoles.Zoomable">
            <summary>
            The predefined Zoomable role. Applies to text views of entities that allow the user to perform zooming operations.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Editor.PredefinedTextViewRoles.PrimaryDocument">
            <summary>
            The predefined Primary Document role. Applies to text views of documents that are open for mainline editing,
            excluding auxiliary views of documents.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Editor.PredefinedTextViewRoles.Debuggable">
            <summary>
            The predefined Debuggable role. Applies to text views of entities in which the debugger can display information
            at runtime.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Editor.PredefinedTextViewRoles.PreviewTextView">
            <summary>
            The predefined role used for the preview window created by the enhanced scroll bar.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Editor.PredefinedTextViewRoles.EmbeddedPeekTextView">
            <summary>
            The predefined role used for text views embedded within a containing text view.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Editor.PredefinedTextViewRoles.EmbeddedPeekDiffTextView">
            <summary>
            The predefined role used for difference text views embedded within a containing text view.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Editor.PredefinedTextViewRoles.CodeDefinitionView">
            <summary>
            The predefined role used for code definition windows.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Editor.PredefinedTextViewRoles.Printable">
            <summary>
            The predefined role used for printable views.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Editor.PredefinedTextViewRoles.ChangePreview">
            <summary>
            The predefined role used for change previews (used by light bulbs, quick actions, etc.).
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Editor.PredefinedTextViewRoles.StickyScroll">
            <summary>
            The predefined role used by structure scope (aka Sticky Scroll) text view.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Editor.PredefinedTextViewRoles.SearchResultPreview">
            <summary>
            The predefined role used for search's code preview text view.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Editor.PredefinedTextViewRoles.TransparentBackground">
            <summary>
            The predefined role used for view with transparent background.
            </summary>
            <remarks>
            The view background will not be affected by theme changes.
            User will see the background of the control hosting the view.
            </remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Editor.ScrollDirection">
            <summary>
            The direction in which to scroll the <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView" />.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Editor.ScrollDirection.Up">
            <summary>
            Scroll up.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Editor.ScrollDirection.Down">
            <summary>
            Scroll down.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Editor.SkipPreloadAttribute">
            <summary>
            A MEF attribute determining if the part can be preloaded on background.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.SkipPreloadAttribute.SkipPreload">
            <summary>
            MEF requires a property to allow this attribute to be optional.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Editor.TextSelectionMode">
            <summary>
            Specifies the text selection mode.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Editor.TextSelectionMode.Stream">
            <summary>
            A simple selection (only one span)
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Editor.TextSelectionMode.Box">
            <summary>
            A box selection (from a start line and column to an end line and column).
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Editor.TextViewCreatedEventArgs">
            <summary>
            Provides information for newly created <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView" />.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.TextViewCreatedEventArgs.TextView">
            <summary>
            The newly created <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView" />.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.TextViewCreatedEventArgs.#ctor(Microsoft.VisualStudio.Text.Editor.ITextView)">
            <summary>
            Constructs a <see cref="T:Microsoft.VisualStudio.Text.Editor.TextViewCreatedEventArgs" />.
            </summary>
            <param name="textView">The <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView" /> that was created.</param>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Editor.TextViewExtensions">
            <summary>
            Utility <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView" /> extension methods.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.TextViewExtensions.IsEmbeddedTextView(Microsoft.VisualStudio.Text.Editor.ITextView)">
            <summary>
            Gets whether given <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView" /> is embedded in another <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView" />.
            </summary>
            <param name="textView">The <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView" /> for which to determine if it's embedded.</param>
            <returns><c>true</c> if given <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView" /> is embedded, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.TextViewExtensions.IsReadOnlyTextView(Microsoft.VisualStudio.Text.Editor.ITextView)">
            <summary>
            Gets whether given <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView" /> is considered read-only.
            </summary>
            <remarks>An <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView" /> is read-only if it is missing
            the <see cref="F:Microsoft.VisualStudio.Text.Editor.PredefinedTextViewRoles.Editable" /> role or if
            <see cref="F:Microsoft.VisualStudio.Text.Editor.DefaultTextViewOptions.ViewProhibitUserInputId" /> is set
            to <c>true</c>. This method does not take into account whether the
            underlying <see cref="T:Microsoft.VisualStudio.Text.ITextBuffer" /> is read-only.</remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.TextViewExtensions.TryGetContainingTextView(Microsoft.VisualStudio.Text.Editor.ITextView,Microsoft.VisualStudio.Text.Editor.ITextView@)">
            <summary>
            Gets containing <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView" /> for given embedded <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView" />.
            </summary>
            <param name="textView">An embedded <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView" />, for which to get a containing <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView" />.</param>
            <param name="containingTextView">A <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView" /> that contains given <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView" /> or null if
            given <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView" /> is not embedded in another <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView" />.</param>
            <returns><c>true</c> if containing <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView" /> was found, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.TextViewExtensions.GetInOuterLayout(Microsoft.VisualStudio.Text.Editor.ITextView)">
            <summary>
            Determines whether a view is in the process of being laid out or is preparing to be laid out.
            </summary>
            <param name="textView">The <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView" /> to check.</param>
            <remarks>
            As opposed to <see cref="P:Microsoft.VisualStudio.Text.Editor.ITextView.InLayout" />, it is safe to get the <see cref="P:Microsoft.VisualStudio.Text.Editor.ITextView.TextViewLines" />
            but attempting to queue another layout will cause a reentrant layout exception.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.TextViewExtensions.GetMultiSelectionBroker(Microsoft.VisualStudio.Text.Editor.ITextView)">
            <summary>
            Gets an object for managing selections within the view.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.TextViewExtensions.QueuePostLayoutAction(Microsoft.VisualStudio.Text.Editor.ITextView,System.Action)">
            <summary>
            See <see cref="M:Microsoft.VisualStudio.Text.Editor.ITextView2.QueuePostLayoutAction(System.Action)" />.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.TextViewExtensions.TryGetTextViewLines(Microsoft.VisualStudio.Text.Editor.ITextView,Microsoft.VisualStudio.Text.Editor.ITextViewLineCollection@)">
            <summary>
            See <see cref="M:Microsoft.VisualStudio.Text.Editor.ITextView2.TryGetTextViewLines(Microsoft.VisualStudio.Text.Editor.ITextViewLineCollection@)" />.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.TextViewExtensions.TryGetTextViewLineContainingBufferPosition(Microsoft.VisualStudio.Text.Editor.ITextView,Microsoft.VisualStudio.Text.SnapshotPoint,Microsoft.VisualStudio.Text.Formatting.ITextViewLine@)">
            <summary>
            See <see cref="M:Microsoft.VisualStudio.Text.Editor.ITextView2.TryGetTextViewLineContainingBufferPosition(Microsoft.VisualStudio.Text.SnapshotPoint,Microsoft.VisualStudio.Text.Formatting.ITextViewLine@)" />.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.TextViewExtensions.TryMoveCaretToAndEnsureVisible(Microsoft.VisualStudio.Text.Editor.ITextView,Microsoft.VisualStudio.Text.SnapshotPoint,Microsoft.VisualStudio.Text.Outlining.IOutliningManagerService,Microsoft.VisualStudio.Text.Editor.EnsureSpanVisibleOptions)">
            <summary>
            Attempts to move the caret to a given <see cref="T:Microsoft.VisualStudio.Text.SnapshotPoint" /> and returns true if successful.
            </summary>
            <param name="textView">An <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView" /> to perform the operation on.</param>
            <param name="point">A point to move the caret to.</param>
            <param name="outliningManagerService">An instance of <see cref="T:Microsoft.VisualStudio.Text.Outlining.IOutliningManagerService" /> to expand collapsed regions
            if the point is within one or more collapsed regions</param>
            <param name="ensureSpanVisibleOptions">Options to configure how to scroll the view if the point is outside the viewport.</param>
            <returns>true if the caret was moved as desired.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.TextViewExtensions.TryMoveCaretToAndEnsureVisible(Microsoft.VisualStudio.Text.Editor.ITextView,Microsoft.VisualStudio.Text.VirtualSnapshotPoint,Microsoft.VisualStudio.Text.Outlining.IOutliningManagerService,Microsoft.VisualStudio.Text.Editor.EnsureSpanVisibleOptions)">
            <summary>
            Attempts to move the caret to a given <see cref="T:Microsoft.VisualStudio.Text.VirtualSnapshotPoint" /> and returns true if successful.
            </summary>
            <param name="textView">An <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView" /> to perform the operation on.</param>
            <param name="point">A point to move the caret to (may be in virtual space).</param>
            <param name="outliningManagerService">An instance of <see cref="T:Microsoft.VisualStudio.Text.Outlining.IOutliningManagerService" /> to expand collapsed regions
            if the point is within one or more collapsed regions</param>
            <param name="ensureSpanVisibleOptions">Options to configure how to scroll the view if the point is outside the viewport.</param>
            <returns>true if the caret was moved as desired.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.TextViewExtensions.SelectSpan(Microsoft.VisualStudio.Text.Editor.ITextView,Microsoft.VisualStudio.Text.SnapshotSpan,Microsoft.VisualStudio.Text.Outlining.IOutliningManagerService,Microsoft.VisualStudio.Text.Editor.EnsureSpanVisibleOptions)">
            <summary>
            Selects a given span in the text view.
            </summary>
            <param name="textView">A text view to select the span in.</param>
            <param name="span">The span to select.</param>
            <param name="outliningManagerService">An instance of <see cref="T:Microsoft.VisualStudio.Text.Outlining.IOutliningManagerService" /> to expand collapsed regions if necessary.</param>
            <param name="ensureSpanVisibleOptions">Options to configure how to scroll the view if the point is outside the viewport.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.TextViewExtensions.NavigateToLineAndColumn(Microsoft.VisualStudio.Text.Editor.ITextView,System.Int32,System.Int32,Microsoft.VisualStudio.Text.Outlining.IOutliningManagerService,Microsoft.VisualStudio.Text.Editor.EnsureSpanVisibleOptions)">
            <summary>
            Moves the caret in a given text view to the specified 0-based line and column
            </summary>
            <param name="textView">The text view</param>
            <param name="lineNumber">0-based line number to move the caret to</param>
            <param name="columnNumber">0-based column number to move the caret to</param>
            <param name="outliningManagerService"></param>
            <param name="ensureSpanVisibleOptions"></param>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.TextViewExtensions.GetPositionInView(Microsoft.VisualStudio.Text.Editor.ITextView,Microsoft.VisualStudio.Text.SnapshotPoint)">
            <summary>
            Given a <see cref="T:Microsoft.VisualStudio.Text.SnapshotPoint" /> that may be in any snapshot in the view's buffer graph,
            returns a corresponding point in the view's visual buffer (top-level buffer).
            </summary>
            <param name="textView">The given text view</param>
            <param name="point">A point in one of the snapshots of the view's buffer graph.</param>
            <returns>A <see cref="T:Microsoft.VisualStudio.Text.SnapshotPoint" /> in the view's top buffer if the mapping was successful, and false otherwise</returns>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Editor.TextViewExtensions.ViewTelemetryKey">
            <summary>
            Name of the properties key used for telemetry events added via AddTelemetryData.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.TextViewExtensions.AddTelemetryData``1(Microsoft.VisualStudio.Text.Editor.ITextView,System.String,System.String,``0,System.Func{``0,``0})">
            <summary>
            Add aggregate telemetry to the view. If a <paramref name="view" /> has an entry for the <paramref name="eventName" />/<paramref name="propertyName" /> exists, then it is
            mutated using <paramref name="mutator" />, otherwise it is set to <paramref name="initialValue" />.
            </summary>
            <remarks>
            <para>This method can be called from any thread.</para>
            <para>The telemetry is reported when the view is closed.</para>
            </remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Editor.TextViewLayoutChangedEventArgs">
            <summary>
            Provides information for a Layout Changed event of <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView" />.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.TextViewLayoutChangedEventArgs.#ctor(Microsoft.VisualStudio.Text.Editor.ViewState,Microsoft.VisualStudio.Text.Editor.ViewState,System.Collections.Generic.IList{Microsoft.VisualStudio.Text.Formatting.ITextViewLine},System.Collections.Generic.IList{Microsoft.VisualStudio.Text.Formatting.ITextViewLine})">
            <summary>
            Initializes a new instance of a <see cref="T:Microsoft.VisualStudio.Text.Editor.TextViewLayoutChangedEventArgs" />.
            </summary>
            <param name="oldState">
            State of the view prior to the layout.
            </param>
            <param name="newState">
            State of the view after the layout.
            </param>
            <param name="newOrReformattedLines">A list of the new or reformatted <see cref="T:Microsoft.VisualStudio.Text.Formatting.ITextViewLine" />.</param>
            <param name="translatedLines">A list of the translated <see cref="T:Microsoft.VisualStudio.Text.Formatting.ITextViewLine" />.</param>
            <exception name="ArgumentNullException"><paramref name="oldState" />, <paramref name="newState" />, <paramref name="translatedLines" /> or <paramref name="newOrReformattedLines" /> is null.</exception>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.TextViewLayoutChangedEventArgs.OldViewState">
            <summary>
            State of the view prior to the layout.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.TextViewLayoutChangedEventArgs.NewViewState">
            <summary>
            State of the view after the layout.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.TextViewLayoutChangedEventArgs.HorizontalTranslation">
            <summary>
            Has the view translated horizontally since the last layout?
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.TextViewLayoutChangedEventArgs.VerticalTranslation">
            <summary>
            Has the view translated vertically since the last layout?
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.TextViewLayoutChangedEventArgs.OldSnapshot">
            <summary>
            Gets the old snapshot of the view.
            </summary>
            <remarks>Deprecated. Use OldViewState.EditSnapshot instead.</remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.TextViewLayoutChangedEventArgs.NewSnapshot">
            <summary>
            Gets the new snapshot produced by the changed layout.
            </summary>
            <remarks>Deprecated. Use NewViewState.EditSnapshot instead.</remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.TextViewLayoutChangedEventArgs.NewOrReformattedLines">
            <summary>
            Gets a read-only collection of new or reformatted lines.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.TextViewLayoutChangedEventArgs.TranslatedLines">
            <summary>
            Gets a read-only collection of translated lines.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.TextViewLayoutChangedEventArgs.NewOrReformattedSpans">
            <summary>
            Gets a collection the spans that are either new or have been reformatted.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.TextViewLayoutChangedEventArgs.TranslatedSpans">
            <summary>
            Gets a collection spans that have been translated.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.TextViewLayoutChangedEventArgs.AnyEditBufferChanges">
            <summary>
            Gets whether the layout was caused by any text changes on the edit buffer.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.TextViewLayoutChangedEventArgs.AnyVisualBufferChanges">
            <summary>
            Gets whether the layout was caused by any text changes on the visual buffer.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Editor.TextViewRoleAttribute">
            <summary>
            Use this attribute to specify the kinds of TextViews to which an extension applies.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.TextViewRoleAttribute.#ctor(System.String)">
            <summary>
            Construct a new instance of the attribute.
            </summary>
            <param name="role">The case-insensitive name of the role.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="role" /> is null or empty.</exception>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.TextViewRoleAttribute.TextViewRoles">
            <summary>
            The role name.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Editor.ViewRelativePosition">
            <summary>
            Defines the meaning of the verticalOffset parameter in the <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView" />.DisplayTextLineContaining(...).
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Editor.ViewRelativePosition.Top">
            <summary>
            The offset with respect to the top of the view.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Editor.ViewRelativePosition.Bottom">
            <summary>
            The offset with respect to the bottom of the view.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Editor.ViewState">
            <summary>
            View state at a particular point in time.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.ViewState.ViewportLeft">
            <summary>
            Gets the X-coordinate of the viewport's left edge.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.ViewState.ViewportTop">
            <summary>
            Gets the Y-coordinate of the viewport's top edge.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.ViewState.ViewportWidth">
            <summary>
            Gets the Width of the viewport.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.ViewState.ViewportHeight">
            <summary>
            Gets the Height of the viewport.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.ViewState.ViewportRight">
            <summary>
            Gets the X-coordinate of the viewport's right edge.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.ViewState.ViewportBottom">
            <summary>
            Gets the Y-coordinate of the viewport's bottom edge.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.ViewState.VisualSnapshot">
            <summary>
            Gets the View's visual snapshot.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.ViewState.EditSnapshot">
            <summary>
            Gets the view's edit snapshot.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.ViewState.#ctor(Microsoft.VisualStudio.Text.Editor.ITextView,System.Double,System.Double)">
            <summary>
            Constructs a <see cref="T:Microsoft.VisualStudio.Text.Editor.ViewState" />.
            </summary>
            <param name="view">The <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView" /> for this view state.</param>
            <param name="effectiveViewportWidth">The width of the view port for <paramref name="view" />.</param>
            <param name="effectiveViewportHeight">The height of the view port for <paramref name="view" />.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.ViewState.#ctor(Microsoft.VisualStudio.Text.Editor.ITextView)">
            <summary>
            Constructs a <see cref="T:Microsoft.VisualStudio.Text.Editor.ViewState" />.
            </summary>
            <param name="view">The <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView" /> for this view state.</param>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Editor.WhitespaceType">
            <summary>
            Sets a bitwise combination of enumeration values to specify which whitespace symbols are displayed on an <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView" />. 
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Editor.WordWrapStyles">
            <summary>
            Sets a bitwise combination of enumeration values to specify the word wrap style of an <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView" />. 
            </summary>
            <remarks>The VisibleGlyphs and AutoIndent bits will have no effect
            unless the WordWrap bit is also set.
            </remarks>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Editor.WordWrapStyles.None">
            <summary>
            Word wrap is disabled.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Editor.WordWrapStyles.WordWrap">
            <summary>
            Word wrap is enabled.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Editor.WordWrapStyles.VisibleGlyphs">
            <summary>
            If word wrap is enabled, use visible glyphs.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Editor.WordWrapStyles.AutoIndent">
            <summary>
            If word wrap is enabled, use auto-indent.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Editor.ZoomConstants">
            <summary>
            Defines the constants used for zoom operations 
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Editor.ZoomConstants.MaxZoom">
            <summary>
            The maximum zoom allowed on the text view
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Editor.ZoomConstants.MinZoom">
            <summary>
            The minimum zoom allowed on the text view
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Editor.ZoomConstants.DefaultZoom">
            <summary>
            The default zoom level on the text view
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Editor.ZoomConstants.ScalingFactor">
            <summary>
            The scaling factor used for zooming in and out of the view. The view zooms by a factor of 10%
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Editor.ErrorList.IErrorList">
            <summary>
            Lightweight abstraction for a list for displaying errors to the user in the host IDE.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.ErrorList.IErrorList.AddSource(Microsoft.VisualStudio.Text.Editor.ErrorList.IErrorListDataSource)">
            <summary>
            Adds a new data source to the error list.
            </summary>
            <param name="source">The source to add to the error list.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.ErrorList.IErrorList.RemoveSource(Microsoft.VisualStudio.Text.Editor.ErrorList.IErrorListDataSource)">
            <summary>
            Removes a previously registered data source from the error list.
            </summary>
            <param name="source">The data source to remove from the error list.</param>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.ErrorList.IErrorList.ErrorListView">
            <summary>
            Indicates whether the ErrorList is filtered to only Build errors, Live errors, or both
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Editor.ErrorList.ITaskList">
            <summary>
            Lightweight abstraction for a list for displaying task list items to the user in the host IDE.
            See <see cref="T:Microsoft.VisualStudio.Text.Editor.ErrorList.IErrorList" />
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.ErrorList.ITaskList.AddSource(Microsoft.VisualStudio.Text.Editor.ErrorList.IErrorListDataSource)">
            <summary>
            Adds a new data source to the task list.
            </summary>
            <param name="source">The source to add to the task list.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.ErrorList.ITaskList.RemoveSource(Microsoft.VisualStudio.Text.Editor.ErrorList.IErrorListDataSource)">
            <summary>
            Removes a previously registered data source from the task list.
            </summary>
            <param name="source">The data source to remove from the task list.</param>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Editor.ErrorList.IErrorListDataSource">
            <summary>
            Lightweight abstraction for a source of errors to display in a list to the user.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.ErrorList.IErrorListDataSource.Subscribe(Microsoft.VisualStudio.Text.Editor.ErrorList.IErrorListSink,System.Boolean)">
            <summary>
            Called by the platform to subscribe to this data source.
            </summary>
            <param name="sink">A callback for modifying the error list contents.</param>
            <param name="isTaskList">boolean to represent whether this is for the task list or not.</param>
            <returns>A handle that removes the source, when disposed.s</returns>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.ErrorList.IErrorListDataSource.ErrorListView">
            <summary>
            Indicates whether this data source should report build errors, live errors, or both - not applicable to task list
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Editor.ErrorList.IErrorListSink">
            <summary>
            A callback for modifying the error list contents.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.ErrorList.IErrorListSink.AddSnapshot(Microsoft.VisualStudio.Text.Editor.ErrorList.IErrorListSnapshot)">
            <summary>
            Adds a set of items to the error list.
            </summary>
            <param name="snapshot">The set of items to add.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.ErrorList.IErrorListSink.ReplaceSnapshot(Microsoft.VisualStudio.Text.Editor.ErrorList.IErrorListSnapshot,Microsoft.VisualStudio.Text.Editor.ErrorList.IErrorListSnapshot)">
            <summary>
            Replaces a set of items in the error list.
            </summary>
            <param name="oldSnapshot">The old set.</param>
            <param name="newSnapshot">The new set.</param>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Editor.ErrorList.IErrorListSnapshot">
            <summary>
            An immutable set of error list items.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.ErrorList.IErrorListSnapshot.Count">
            <summary>
            The number of items in the set.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.ErrorList.IErrorListSnapshot.VersionNumber">
            <summary>
            The version number of this set of items.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.ErrorList.IErrorListSnapshot.TryGetValue(System.Int32,System.String,System.Object@)">
            <summary>
            Gets value for supported columns.
            </summary>
            <param name="index"></param>
            <param name="keyName">A key from <see cref="T:Microsoft.VisualStudio.Text.Editor.ErrorList.ErrorListKeyNames" />.</param>
            <param name="contents">The value of the column.</param>
            <returns><c>true</c> if the <paramref name="contents" /> was fetched successfully.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Editor.ErrorList.ErrorListKeyNames">
            <summary>
            A set of well-known column names.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Editor.ErrorList.ErrorCategory">
            <summary>
            A set of well known severities.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Editor.ErrorList.ErrorSource.Build">
            <summary>
            Used to indicate any error generated by an explicit build command.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Editor.ErrorList.ErrorSource.Other">
            <summary>
            Used to indicate any error generated from any compilation process that was not explicitly invoked by the end-user (e.g. in response to typing a character).
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Editor.Caret">
            <summary>
            Manipulates the on-screen caret in the editor.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.Caret.MoveToNextCharacter(System.Boolean)">
            <summary>
            When implemented in a derived class, moves the caret to the next character.
            </summary>
            <param name="extendSelection">
            If <c>true</c>, the selection is extended when the caret is moved; if <c>false</c>, the selection is not extended.
            </param>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.Caret.MoveToPreviousCharacter(System.Boolean)">
            <summary>
             When implemented in a derived class, moves the caret to the previous character.
            </summary>
            <param name="extendSelection">
            If <c>true</c>, the selection is extended when the caret is moved; if <c>false</c>, the selection is not extended.
            </param>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.Caret.MoveToBeginningOfPreviousLine(System.Boolean)">
            <summary>
             When implemented in a derived class, moves the caret to the beginning of the previous line in the buffer.
            </summary>
            <param name="extendSelection">
            If <c>true</c>, the selection is extended when the caret is moved; if <c>false</c>, the selection is not extended.
            </param>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.Caret.MoveToBeginningOfNextLine(System.Boolean)">
            <summary>
             When implemented in a derived class, moves the caret to the beginning of the next line in the buffer.
            </summary>
            <param name="extendSelection">
            If <c>true</c>, the selection is extended when the caret is moved; if <c>false</c>, the selection is not extended.
            </param>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.Caret.MoveToBeginningOfPreviousViewLine(System.Boolean)">
            <summary>
             When implemented in a derived class, moves the caret to the beginning of the previous line in the view.
            </summary>
            <param name="extendSelection">
            If <c>true</c>, the selection is extended when the caret is moved; if <c>false</c>, the selection is not extended.
            </param>
            <remarks>
            If the caret is on the first line of the file, the caret is moved to the beginning of the line.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.Caret.MoveToBeginningOfNextViewLine(System.Boolean)">
            <summary>
             When implemented in a derived class, moves the caret to the beginning of the next line in the view.
            </summary>
            <param name="extendSelection">
            If <c>true</c>, the selection is extended when the caret is moved; if <c>false</c>, the selection is not extended.
            </param>
            <remarks>
            If the caret is on the last line of the file, the caret is moved to the end of the line.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.Caret.MoveToPreviousLine(System.Boolean)">
            <summary>
             When implemented in a derived class, moves the caret one line up, preserving its horizontal position.
            </summary>
            <param name="extendSelection">
            If <c>true</c>, the selection is extended when the caret is moved; if <c>false</c>, the selection is not extended.
            </param>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.Caret.MoveToNextLine(System.Boolean)">
            <summary>
             When implemented in a derived class, moves the caret one line down, preserving its horizontal position.
            </summary>
            <param name="extendSelection">
            If <c>true</c>, the selection is extended when the caret is moved; if <c>false</c>, the selection is not extended.
            </param>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.Caret.MovePageUp">
            <summary>
             When implemented in a derived class, moves the caret one page up.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.Caret.MovePageDown">
            <summary>
             When implemented in a derived class, moves the caret one page down.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.Caret.MovePageUp(System.Boolean)">
            <summary>
             When implemented in a derived class, moves the caret one page up.
            </summary>
            <param name="extendSelection">
            If <c>true</c>, the selection is extended when the caret is moved; if <c>false</c>, the selection is not extended.
            </param>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.Caret.MovePageDown(System.Boolean)">
            <summary>
             When implemented in a derived class, moves the caret one page down.
            </summary>
            <param name="extendSelection">
            If <c>true</c>, the selection is extended when the caret is moved; if <c>false</c>, the selection is not extended.
            </param>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.Caret.MoveToEndOfLine(System.Boolean)">
            <summary>
             When implemented in a derived class, moves the caret to the end of the line in the buffer.
            </summary>
            <param name="extendSelection">
            If <c>true</c>, the selection is extended when the caret is moved; if <c>false</c>, the selection is not extended.
            </param>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.Caret.MoveToStartOfLine(System.Boolean)">
            <summary>
             When implemented in a derived class, moves the caret to the start of the line in the buffer.
            </summary>
            <param name="extendSelection">
            If <c>true</c>, the selection is extended when the caret is moved; if <c>false</c>, the selection is not extended.
            </param>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.Caret.MoveToEndOfViewLine(System.Boolean)">
            <summary>
             When implemented in a derived class, moves the caret to the end of the line in the view.
            </summary>
            <param name="extendSelection">
            If <c>true</c>, the selection is extended when the caret is moved; if <c>false</c>, the selection is not extended.
            </param>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.Caret.MoveToStartOfViewLine(System.Boolean)">
            <summary>
             When implemented in a derived class, moves the caret to the start of the line in the view.
            </summary>
            <param name="extendSelection">
            If <c>true</c>, the selection is extended when the caret is moved; if <c>false</c>, the selection is not extended.
            </param>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.Caret.MoveTo(System.Int32,System.Boolean)">
            <summary>
             When implemented in a derived class, moves the caret to the position and optionally extends the selection
            if necessary.
            </summary>
            <param name="position">
            The position to place the caret.
            </param>
            <param name="extendSelection">
            If <c>true</c>, the selection is extended when the caret is moved; if <c>false</c>, the selection is not extended.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="position" /> is less than 0 or greater than the line number of the last line in the TextBuffer.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.Caret.MoveToLine(System.Int32,System.Boolean)">
            <summary>
             When implemented in a derived class, moves the caret to the start of the specified line.
            </summary>
            <param name="lineNumber">
            The line number to which to move the caret.
            </param>
            <param name="extendSelection">
            If <c>true</c>, the selection is extended when the caret is moved; if <c>false</c>, the selection is not extended.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="lineNumber" /> is less than 0 or greater than the line number of the last line in the TextBuffer.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.Caret.MoveToLine(System.Int32,System.Int32,System.Boolean)">
            <summary>
             When implemented in a derived class, moves the caret to an offset from the start of the specified line.
            </summary>
            <param name="lineNumber">
            The line number to which to move the caret.
            </param>
            <param name="offset">
            The number of characters from the start of the line at which the caret should be moved.
            </param>
            <param name="extendSelection">
            If <c>true</c>, the selection is extended when the caret is moved; if <c>false</c>, the selection is not extended.
            </param>
            <remarks>If <paramref name="offset" /> exceeds the length of the line and virtual space is enabled, the caret will be
            positioned in virtual space. Otherwise the caret will be placed at the end of the line.</remarks>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="lineNumber" /> is less than zero 
            or greater than the line number of the last line in the text buffer, or
            <paramref name="offset" /> is less than zero.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.Caret.MoveToStartOfDocument(System.Boolean)">
            <summary>
             When implemented in a derived class, moves the caret to the start of the document.
            </summary>
            <param name="extendSelection">
            If <c>true</c>, the selection is extended when the caret is moved; if <c>false</c>, the selection is not extended.
            </param>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.Caret.MoveToEndOfDocument(System.Boolean)">
            <summary>
             When implemented in a derived class, moves the caret to the end of the document.
            </summary>
            <param name="extendSelection">
            If <c>true</c>, the selection is extended when the caret is moved; if <c>false</c>, the selection is not extended.
            </param>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.Caret.MoveToNextWord(System.Boolean)">
            <summary>
            When implemented in a derived class,m oves the caret to the end of the current word, or to the beginning of the
            next word if it is already at the end of the current word.
            </summary>
            <param name="extendSelection">
            If <c>true</c>, the selection is extended when the caret is moved; if <c>false</c>, the selection is not extended.
            </param>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.Caret.MoveToPreviousWord(System.Boolean)">
            <summary>
             When implemented in a derived class, moves the caret to the start of the current word, or to the end of the
            previous word if it is already at the start of the current word.
            </summary>
            <param name="extendSelection">
            If <c>true</c>, the selection is extended when the caret is moved; if <c>false</c>, the selection is not extended.
            </param>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.Caret.EnsureVisible">
            <summary>
             When implemented in a derived class, ensures that the caret is visible on the screen.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.Caret.AdvancedCaret">
            <summary>
             When implemented in a derived class, gets advanced caret functionality.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Editor.DisplayTextPoint">
            <summary>
            Represents a point in the <see cref="T:Microsoft.VisualStudio.Text.Editor.TextBuffer" /> that behaves relative to the view in which it lives.
            </summary>
            <remarks>
            <para>
            While this point is immutable, its position may change in response
            to edits in the text.
            </para>
            <para>
            The start point is always before the end point.
            </para>
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.DisplayTextPoint.TextView">
            <summary>
             When implemented in a derived class, gets the <see cref="P:Microsoft.VisualStudio.Text.Editor.DisplayTextPoint.TextView" /> of this point.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.DisplayTextPoint.AdvancedTextViewLine">
            <summary>
            When implemented in a derived class, gets the <see cref="T:Microsoft.VisualStudio.Text.Formatting.ITextViewLine" /> that contains this point.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.DisplayTextPoint.StartOfViewLine">
            <summary>
            When implemented in a derived class, gets the position of the start of the line in the TextView that this DisplayTextPoint is on.
            </summary>
            <remarks>This value could be affected by whether or not Word Wrap is turned on in the view.</remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.DisplayTextPoint.EndOfViewLine">
            <summary>
            When implemented in a derived class, gets the position of the end of the line in the TextView that this DisplayTextPoint is on.
            </summary>
            <remarks>This value could be affected by whether or not Word Wrap is turned on in the view.</remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.DisplayTextPoint.MoveToEndOfViewLine">
            <summary>
            When implemented in a derived class, moves this point to the end of the line in the TextView that it is currently on.
            </summary>
            <remarks>This value could be affected by whether or not Word Wrap is turned on in the view.</remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.DisplayTextPoint.MoveToStartOfViewLine">
            <summary>
            When implemented in a derived class, moves this point to the start of the line in the TextView that it is currently on.
            </summary>
            <remarks>This value could be affected by whether or not Word Wrap is turned on in the view.</remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.DisplayTextPoint.MoveToBeginningOfNextViewLine">
            <summary>
            When implemented in a derived class, moves this point to the beginning of the next line in the TextView.
            </summary>
            <remarks>
            <para>This point moves to the end of the line if the point is on the last
            line.</para>
            <para>This value could be affected by whether or not Word Wrap is turned on in the view.</para>
            <para>If the point is on the last line of the file, the caret is moved to the end of the line.</para>
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.DisplayTextPoint.MoveToBeginningOfPreviousViewLine">
            <summary>
            When implemented in a derived class, moves this point to the beginning of the previous line in the TextView.
            </summary>
            <remarks>
            <para>This point moves to the start of the line if the point is on the first
            line.</para>
            <para>This value could be affected by whether or not Word Wrap is turned on in the view.</para>
            <para>If the point is on the first line of the file, the caret is moved to the beginning of the line.</para>
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.DisplayTextPoint.GetFirstNonWhiteSpaceCharacterOnViewLine">
            <summary>
            When implemented in a derived class, gets a display text point for the first 
            non-whitespace character on the current view line.
            </summary>
            <remarks>
            If a line is all white space, this method returns a <see cref="T:Microsoft.VisualStudio.Text.Editor.DisplayTextPoint" /> at the start of the line.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.DisplayTextPoint.DisplayColumn">
            <summary>
             When implemented in a derived class, gets the integer representation of the current position of this text point
            in relation to the visual start of the line.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.DisplayTextPoint.IsVisible">
            <summary>
             When implemented in a derived class, determines whether the point is currently visible on the screen.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.DisplayTextPoint.Clone">
            <summary>
            Creates a new <see cref="T:Microsoft.VisualStudio.Text.Editor.DisplayTextPoint" /> at this position that can be
            moved independently from this one.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.DisplayTextPoint.GetDisplayTextRange(Microsoft.VisualStudio.Text.Editor.DisplayTextPoint)">
            <summary>
             When implemented in a derived class, gets the <see cref="T:Microsoft.VisualStudio.Text.Editor.DisplayTextRange" /> that has this point and <paramref name="otherPoint" />
            as its start and end points.
            </summary>
            <returns>The <see cref="T:Microsoft.VisualStudio.Text.Editor.DisplayTextRange" /> that starts at this point and ends at <paramref name="otherPoint" />.</returns>
            <exception cref="T:System.InvalidOperationException"><paramref name="otherPoint" /> does not belong to the same buffer as this point, or
            <paramref name="otherPoint" /> does not belong to the same view as this point.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.DisplayTextPoint.GetDisplayTextRange(System.Int32)">
            <summary>
            When implemented in a derived class, gets the <see cref="T:Microsoft.VisualStudio.Text.Editor.DisplayTextRange" /> that has this point and <paramref name="otherPosition" />
            as its start and end positions.
            </summary>
            <returns>The <see cref="T:Microsoft.VisualStudio.Text.Editor.DisplayTextRange" /> that starts at this point and ends at <paramref name="otherPosition" />.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="otherPosition" /> is in negative or past the end of this buffer.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.DisplayTextPoint.CloneInternal">
            <summary>
            Clones this <see cref="T:Microsoft.VisualStudio.Text.Editor.DisplayTextPoint" />.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.DisplayTextPoint.CloneDisplayTextPointInternal">
            <summary>
            When implemented in a derived class, clones this <see cref="T:Microsoft.VisualStudio.Text.Editor.DisplayTextPoint" />.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Editor.DisplayTextRange">
            <summary>
            Represents a range in the <see cref="T:Microsoft.VisualStudio.Text.Editor.TextBuffer" /> that behaves relative to the view in which it lives.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.DisplayTextRange.TextView">
            <summary>
            When implemented in a derived class, gets the <see cref="P:Microsoft.VisualStudio.Text.Editor.DisplayTextRange.TextView" /> of this range.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.DisplayTextRange.Clone">
            <summary>
            Creates a clone of this text range than can be moved independently of this one.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.DisplayTextRange.GetDisplayStartPoint">
            <summary>
            When implemented in a derived class, gets the start point of this text range.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.DisplayTextRange.GetDisplayEndPoint">
            <summary>
            When implemented in a derived class, gets the end point of this text range.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.DisplayTextRange.Visibility">
            <summary>
            When implemented in a derived class, gets the visibility state of this text range.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.DisplayTextRange.CloneInternal">
            <summary>
            Clones this text range.
            </summary>
            <returns>The cloned <see cref="T:Microsoft.VisualStudio.Text.Editor.TextRange" />.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.DisplayTextRange.CloneDisplayTextRangeInternal">
            <summary>
            When implemented in a derived class, clones the <see cref="T:Microsoft.VisualStudio.Text.Editor.DisplayTextRange" />.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.DisplayTextRange.GetDisplayPointEnumeratorInternal">
            <summary>
            When implemented in a derived class, gets the enumerator of type <see cref="T:Microsoft.VisualStudio.Text.Editor.DisplayTextPoint" />.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.DisplayTextRange.GetEnumerator">
            <summary>
            Gets an enumerator of type <see cref="T:Microsoft.VisualStudio.Text.Editor.DisplayTextPoint" />.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.DisplayTextRange.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Gets the enumerator.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Editor.HowToShow">
            <summary>
            Defines the ways to display a point or range.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Editor.HowToShow.AsIs">
            <summary>
            Show the point or start of the range as it is on screen, or scroll the
            view the minimal amount in order to bring the point or range into view.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Editor.HowToShow.Centered">
            <summary>
            Show the point or start of the range centered on the screen.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Editor.HowToShow.OnFirstLineOfView">
            <summary>
            Show the point or start of the range on the first line of the view.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Editor.IBufferPrimitives">
            <summary>
            Represents common buffer primitives and an extensible mechanism for replacing their values and adding new options.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.IBufferPrimitives.Buffer">
            <summary>
            Gets the <see cref="T:Microsoft.VisualStudio.Text.Editor.TextBuffer" /> primitive used for text manipulation.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Editor.IBufferPrimitivesFactoryService">
            <summary>
            Creates buffer primitives.  
            </summary>
            <remarks>
            <para>
            This factory is designed to be used by other primitives. Consumers of the primitives 
            should use the <see cref="T:Microsoft.VisualStudio.Text.Editor.IEditorPrimitivesFactoryService" /> to get a reference to a <see cref="T:Microsoft.VisualStudio.Text.Editor.TextBuffer" /> 
            and use that to create the primitives.
            </para>
            </remarks>
            <remarks>This is a MEF component part, and should be imported as follows:
            [Import]
            IBufferPrimitivesFactoryService factory = null;
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.IBufferPrimitivesFactoryService.CreateTextBuffer(Microsoft.VisualStudio.Text.ITextBuffer)">
            <summary>
            Creates a <see cref="T:Microsoft.VisualStudio.Text.Editor.TextBuffer" /> primitive.
            </summary>
            <param name="textBuffer">The <see cref="T:Microsoft.VisualStudio.Text.ITextBuffer" /> on which to base this primitive.</param>
            <returns>The <see cref="T:Microsoft.VisualStudio.Text.Editor.TextBuffer" /> primitive for the given <see cref="T:Microsoft.VisualStudio.Text.ITextBuffer" />.</returns>
            <remarks>
            <para>
            This method always returns the same object if the same <see cref="T:Microsoft.VisualStudio.Text.ITextBuffer" /> is passed in.
            </para>
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.IBufferPrimitivesFactoryService.CreateTextPoint(Microsoft.VisualStudio.Text.Editor.TextBuffer,System.Int32)">
            <summary>
            Creates a new <see cref="T:Microsoft.VisualStudio.Text.Editor.TextPoint" /> primitive.
            </summary>
            <param name="textBuffer">The <see cref="T:Microsoft.VisualStudio.Text.Editor.TextBuffer" /> to which this <see cref="T:Microsoft.VisualStudio.Text.Editor.TextPoint" /> belongs.</param>
            <param name="position">The position of this <see cref="T:Microsoft.VisualStudio.Text.Editor.TextPoint" />.</param>
            <returns>A new <see cref="T:Microsoft.VisualStudio.Text.Editor.TextPoint" /> primitive at the given <paramref name="position" />.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.IBufferPrimitivesFactoryService.CreateTextRange(Microsoft.VisualStudio.Text.Editor.TextBuffer,Microsoft.VisualStudio.Text.Editor.TextPoint,Microsoft.VisualStudio.Text.Editor.TextPoint)">
            <summary>
            Creates a new <see cref="T:Microsoft.VisualStudio.Text.Editor.TextRange" /> primitive.
            </summary>
            <param name="textBuffer">The <see cref="T:Microsoft.VisualStudio.Text.Editor.TextBuffer" /> to which this <see cref="T:Microsoft.VisualStudio.Text.Editor.TextPoint" /> belongs.</param>
            <param name="startPoint">The <see cref="T:Microsoft.VisualStudio.Text.Editor.TextPoint" /> of the start.</param>
            <param name="endPoint">The <see cref="T:Microsoft.VisualStudio.Text.Editor.TextPoint" /> of the end.</param>
            <returns>A new <see cref="T:Microsoft.VisualStudio.Text.Editor.TextRange" /> primitive at the given <paramref name="startPoint" /> and <paramref name="endPoint" />.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Editor.IEditorPrimitivesFactoryService">
            <summary>
            A service that provides primitives for a given <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView" /> or <see cref="T:Microsoft.VisualStudio.Text.ITextBuffer" />.
            </summary>
            <remarks>This is a MEF component part, and should be imported as follows:
            [Import]
            IEditorPrimitivesFactoryService factory = null;
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.IEditorPrimitivesFactoryService.GetViewPrimitives(Microsoft.VisualStudio.Text.Editor.ITextView)">
            <summary>
            Gets the <see cref="T:Microsoft.VisualStudio.Text.Editor.IViewPrimitives" /> for the <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView" />.
            </summary>
            <param name="textView">The <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView" /> for which to get the <see cref="T:Microsoft.VisualStudio.Text.Editor.IViewPrimitives" />.</param>
            <returns>The <see cref="T:Microsoft.VisualStudio.Text.Editor.IViewPrimitives" /> for the given <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView" />.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.IEditorPrimitivesFactoryService.GetBufferPrimitives(Microsoft.VisualStudio.Text.ITextBuffer)">
            <summary>
            Gets the <see cref="T:Microsoft.VisualStudio.Text.Editor.IBufferPrimitives" /> for the <see cref="T:Microsoft.VisualStudio.Text.ITextBuffer" />.
            </summary>
            <param name="textBuffer">The <see cref="T:Microsoft.VisualStudio.Text.ITextBuffer" /> for which to fetch <see cref="T:Microsoft.VisualStudio.Text.Editor.IBufferPrimitives" />.</param>
            <returns>The <see cref="T:Microsoft.VisualStudio.Text.Editor.IBufferPrimitives" /> for the given <see cref="T:Microsoft.VisualStudio.Text.ITextBuffer" />.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Editor.IViewPrimitives">
            <summary>
            Represents common view primitives and an extensible mechanism for replacing their values and adding new options.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.IViewPrimitives.View">
            <summary>
            Gets the <see cref="P:Microsoft.VisualStudio.Text.Editor.IViewPrimitives.View" /> primitive used for scrolling the editor window.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.IViewPrimitives.Selection">
            <summary>
            Gets the <see cref="P:Microsoft.VisualStudio.Text.Editor.IViewPrimitives.Selection" /> primitive used for selection manipulation.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.IViewPrimitives.Caret">
            <summary>
            Gets the <see cref="P:Microsoft.VisualStudio.Text.Editor.IViewPrimitives.Caret" /> primitive used for caret movement.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Editor.EditorPrimitiveIds">
            <summary>
            Represents the common editor primitives produced by this subsystem.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Editor.EditorPrimitiveIds.ViewPrimitiveId">
            <summary>
            The ID for the view.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Editor.EditorPrimitiveIds.SelectionPrimitiveId">
            <summary>
            The ID for the selection.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Editor.EditorPrimitiveIds.CaretPrimitiveId">
            <summary>
            The ID for the caret.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Editor.EditorPrimitiveIds.BufferPrimitiveId">
            <summary>
            The ID for the buffer.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Editor.IViewPrimitivesFactoryService">
            <summary>
            Creates view primitives.  
            </summary>
            <remarks>
            <para>
            This factory is designed to  be used by other primitives. Consumers of the primitives 
            should use the <see cref="T:Microsoft.VisualStudio.Text.Editor.IEditorPrimitivesFactoryService" /> to get a reference to a 
            <see cref="T:Microsoft.VisualStudio.Text.Editor.TextView" /> and use that to create the primitives.
            </para>
            </remarks>
            <remarks>This is a MEF component part, and should be imported as follows:
            [Import]
            IViewPrimitivesFactoryService factory = null;
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.IViewPrimitivesFactoryService.CreateTextView(Microsoft.VisualStudio.Text.Editor.ITextView)">
            <summary>
            Creates a <see cref="T:Microsoft.VisualStudio.Text.Editor.TextView" /> primitive.
            </summary>
            <param name="textView">The <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView" /> on which to base this primitive.</param>
            <returns>The <see cref="T:Microsoft.VisualStudio.Text.Editor.TextView" /> primitive for the given <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView" />.</returns>
            <remarks>
            <para>
            This method always returns the same object if the same <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView" /> is passed in.
            </para>
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.IViewPrimitivesFactoryService.CreateDisplayTextPoint(Microsoft.VisualStudio.Text.Editor.TextView,System.Int32)">
            <summary>
            Creates a new <see cref="T:Microsoft.VisualStudio.Text.Editor.DisplayTextPoint" /> primitive.
            </summary>
            <param name="textView">The <see cref="T:Microsoft.VisualStudio.Text.Editor.TextView" /> to which this <see cref="T:Microsoft.VisualStudio.Text.Editor.DisplayTextPoint" /> belongs.</param>
            <param name="position">The position of this <see cref="T:Microsoft.VisualStudio.Text.Editor.DisplayTextPoint" />.</param>
            <returns>A new <see cref="T:Microsoft.VisualStudio.Text.Editor.DisplayTextPoint" /> primitive at the given <paramref name="position" />.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.IViewPrimitivesFactoryService.CreateDisplayTextRange(Microsoft.VisualStudio.Text.Editor.TextView,Microsoft.VisualStudio.Text.Editor.TextRange)">
            <summary>
            Creates a new <see cref="T:Microsoft.VisualStudio.Text.Editor.DisplayTextRange" /> primitive.
            </summary>
            <param name="textView">The <see cref="T:Microsoft.VisualStudio.Text.Editor.TextView" /> to which this <see cref="T:Microsoft.VisualStudio.Text.Editor.DisplayTextRange" /> belongs.</param>
            <param name="textRange">The <see cref="T:Microsoft.VisualStudio.Text.Editor.TextRange" /> in the <see cref="T:Microsoft.VisualStudio.Text.Editor.TextBuffer" />.</param>
            <returns>A new <see cref="T:Microsoft.VisualStudio.Text.Editor.DisplayTextRange" /> primitive at the given <paramref name="textView" /> and <paramref name="textRange" />.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.IViewPrimitivesFactoryService.CreateSelection(Microsoft.VisualStudio.Text.Editor.TextView)">
            <summary>
            Creates a <see cref="T:Microsoft.VisualStudio.Text.Editor.LegacySelection" /> primitive.
            </summary>
            <param name="textView">The <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView" /> on which to base this primitive.</param>
            <returns>The <see cref="T:Microsoft.VisualStudio.Text.Editor.LegacySelection" /> primitive for the given <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView" />.</returns>
            <remarks>
            <para>
            This method always returns the same object if the same <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView" /> is passed in.
            </para>
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.IViewPrimitivesFactoryService.CreateCaret(Microsoft.VisualStudio.Text.Editor.TextView)">
            <summary>
            Creates a <see cref="T:Microsoft.VisualStudio.Text.Editor.Caret" /> primitive.
            </summary>
            <param name="textView">The <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView" /> on which to base this primitive.</param>
            <returns>The <see cref="T:Microsoft.VisualStudio.Text.Editor.Caret" /> primitive for the given <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView" />.</returns>
            <remarks>
            <para>
            This method always returns the same object if the same <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView" /> is passed in.
            </para>
            </remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Editor.LegacySelection">
            <summary>
            Represents the selection on the screen.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.LegacySelection.SelectRange(Microsoft.VisualStudio.Text.Editor.TextRange)">
            <summary>
            When implemented in a derived class, selects the given text range.
            </summary>
            <param name="textRange">The range to select.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.LegacySelection.SelectRange(Microsoft.VisualStudio.Text.Editor.TextPoint,Microsoft.VisualStudio.Text.Editor.TextPoint)">
            <summary>
            When implemented in a derived class, selects the given text range, reversing the selection if needed. Ensures
            that the end point of the selection is visible on screen.
            </summary>
            <param name="selectionStart">The start point for the selection.</param>
            <param name="selectionEnd">The end point for the selection.</param>
            <remarks>If <paramref name="selectionStart" /> is positioned after <paramref name="selectionEnd" />, then the
            selection is reversed.</remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.LegacySelection.SelectAll">
            <summary>
            When implemented in a derived class, selects all the text in the document. Ensures that the end point
            of the selection is visible on screen.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.LegacySelection.SelectAll(System.Boolean)">
            <summary>
            When implemented in a derived class, selects all the text in the document. Ensures that the end point
            of the selection is visible on screen if <paramref name="moveCaretToEnd" /> is <c>true</c>.
            </summary>
            <param name="moveCaretToEnd">Default value is <c>true</c>.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.LegacySelection.ExtendSelection(Microsoft.VisualStudio.Text.Editor.TextPoint)">
            <summary>
            When implemented in a derived class, extends the selection from its current start point to the new end point. Ensures
            that the end point of the selection is visible on screen.
            </summary>
            <param name="newEnd">
            The text point to which to extend the selection.
            </param>
            <remarks>
            <paramref name="newEnd" /> may become the new start point, if <paramref name="newEnd" /> is before the current start point.
            </remarks>
            <exception cref="T:System.InvalidOperationException"><paramref name="newEnd" /> belongs to a different buffer.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.LegacySelection.Clear">
            <summary>
            When implemented in a derived class, resets any selection in the text.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.LegacySelection.AdvancedSelection">
            <summary>
            When implemented in a derived class, provides advanced selection manipulation functionality.
            </summary>
            <returns>The <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextSelection" />.</returns>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.LegacySelection.IsReversed">
            <summary>
            When implemented in a derived class, determines whether the end point represents the start of the selection.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Editor.TextBuffer">
            <summary>
            Provides methods for text insertion, deletion, and modification.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.TextBuffer.GetTextPoint(System.Int32)">
            <summary>
            When implemented in a derived class, gets a text point from a integer position.
            </summary>
            <param name="position">The position at which to get the text point.</param>
            <returns>The <see cref="T:Microsoft.VisualStudio.Text.Editor.TextPoint" />.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="position" /> is negative or past the end of the buffer.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.TextBuffer.GetTextPoint(System.Int32,System.Int32)">
            <summary>
            When implemented in a derived class, gets a text point from a line and column.
            </summary>
            <param name="line">The line on which to get this text point.</param>
            <param name="column">The line-relative position at which to get the text point.</param>
            <returns>The <see cref="T:Microsoft.VisualStudio.Text.Editor.TextPoint" />.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="line" /> is negative or greater than the number of lines in the buffer, or 
            <paramref name="column" /> is negative or past the end of the line.</exception>
            <remarks>
            The line and column are zero-based.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.TextBuffer.GetLine(System.Int32)">
            <summary>
            When implemented in a derived class, gets a <see cref="T:Microsoft.VisualStudio.Text.Editor.TextRange" /> representing a line in the <see cref="T:Microsoft.VisualStudio.Text.Editor.TextBuffer" />.
            </summary>
            <param name="line">The line.</param>
            <returns>A <see cref="T:Microsoft.VisualStudio.Text.Editor.TextRange" /> representing a line in the <see cref="T:Microsoft.VisualStudio.Text.Editor.TextBuffer" />.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="line" /> is negative or greater than the number of lines in the buffer.</exception>
            <remarks>
            <para>
            The <see cref="T:Microsoft.VisualStudio.Text.Editor.TextRange" /> returned does not include the line break characters for the line.
            </para>
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.TextBuffer.GetTextRange(Microsoft.VisualStudio.Text.Editor.TextPoint,Microsoft.VisualStudio.Text.Editor.TextPoint)">
            <summary>
            When implemented in a derived class, gets a text range from two text points.
            </summary>
            <param name="startPoint">The start point of the range.</param>
            <param name="endPoint">The end point of the range.</param>
            <returns>The text range that starts and ends at the two points.</returns>
            <remarks>The start point of the text range may become the end point if the start point is after the end point.</remarks>
            <exception cref="T:System.InvalidOperationException"><paramref name="startPoint" /> or <paramref name="endPoint" /> do not belong to this buffer.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.TextBuffer.GetTextRange(System.Int32,System.Int32)">
            <summary>
            When implemented in a derived class, gets a text range from two integer positions.
            </summary>
            <param name="startPosition">The start position of the range.</param>
            <param name="endPosition">The end position of the range.</param>
            <returns>The text range that starts and ends at the two positions.</returns>
            <remarks>The start position of the text range may become the end point if the start position is after the end position.</remarks>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="startPosition" /> is negative or past the end of the buffer.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="endPosition" /> is negative or past the end of the buffer.</exception>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.TextBuffer.AdvancedTextBuffer">
            <summary>
            When implemented in a derived class, provides advanced text manipulation functionality.
            </summary>
            <returns>The <see cref="T:Microsoft.VisualStudio.Text.ITextBuffer" />.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.TextBuffer.GetStartPoint">
            <summary>
            When implemented in a derived class, gets the start point of the buffer (always zero).
            </summary>
            <returns>The starting <see cref="T:Microsoft.VisualStudio.Text.Editor.TextPoint" />.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.TextBuffer.GetEndPoint">
            <summary>
            When implemented in a derived class, gets the end point of the buffer (always the last position in the buffer.
            </summary>
            <returns>The end <see cref="T:Microsoft.VisualStudio.Text.Editor.TextPoint" />.</returns>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.TextBuffer.Lines">
            <summary>
            When implemented in a derived class, gets the <see cref="T:Microsoft.VisualStudio.Text.Editor.TextRange" /> objectss representing lines in the buffer.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Editor.TextPoint">
            <summary>
            Represents a point in the <see cref="P:Microsoft.VisualStudio.Text.Editor.TextPoint.TextBuffer" />.
            </summary>
            <remarks>
            <para>
            While this point is immutable, its position may change in response
            to edits in the text.
            </para>
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.TextPoint.TextBuffer">
            <summary>
            When implemented in a derived class, gets the <see cref="P:Microsoft.VisualStudio.Text.Editor.TextPoint.TextBuffer" /> of this point.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.TextPoint.CurrentPosition">
            <summary>
            When implemented in a derived class, gets the integer representation of the current position of this text point 
            in relation to the start of the buffer.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.TextPoint.Column">
            <summary>
            When implemented in a derived class, gets the integer representation of the current position of this text point
            in relation to the start of the line this point is on.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.TextPoint.DeleteNext">
            <summary>
            When implemented in a derived class, deletes the character after this text point.
            </summary>
            <returns>
            <c>true</c> if the edit succeeded, otherwise <c>false</c>.
            </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.TextPoint.DeletePrevious">
            <summary>
            When implemented in a derived class, deletes the character before this text point.
            </summary>
            <returns>
            <c>true</c> if the edit succeeded, otherwise <c>false</c>.
            </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.TextPoint.GetFirstNonWhiteSpaceCharacterOnLine">
            <summary>
            When implemented in a derived class, gets a text point for the first non-whitespace
            character on the current line.
            </summary>
            <remarks>
            <para>
            If a line is all white space, this method returns a <see cref="T:Microsoft.VisualStudio.Text.Editor.TextPoint" /> at the end of the line, but before the
            line break.
            </para>
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.TextPoint.GetCurrentWord">
            <summary>
            When implemented in a derived class, gets the <see cref="T:Microsoft.VisualStudio.Text.Editor.TextRange" /> of the current word. The current word may be white space only.
            </summary>
            <returns>The <see cref="T:Microsoft.VisualStudio.Text.Editor.TextRange" /> of the current word.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.TextPoint.GetCurrentWord(System.Boolean)">
            <summary>
            When implemented in a derived class, gets the <see cref="T:Microsoft.VisualStudio.Text.Editor.TextRange" /> of the current word. The current word may be white space only.
            </summary>
            <returns>The <see cref="T:Microsoft.VisualStudio.Text.Editor.TextRange" /> of the current word.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.TextPoint.GetCurrentSubWord">
            <summary>
            When implemented in a derived class, gets the <see cref="T:Microsoft.VisualStudio.Text.Editor.TextRange" /> of the current subword. The current subword may be white space only.
            </summary>
            <returns>The <see cref="T:Microsoft.VisualStudio.Text.Editor.TextRange" /> of the current word.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.TextPoint.GetNextWord">
            <summary>
            When implemented in a derived class, gets the <see cref="T:Microsoft.VisualStudio.Text.Editor.TextRange" /> of the next word that is not white space.
            </summary>
            <returns>The <see cref="T:Microsoft.VisualStudio.Text.Editor.TextRange" /> of the next word.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.TextPoint.GetNextSubWord">
            <summary>
            When implemented in a derived class, gets the <see cref="T:Microsoft.VisualStudio.Text.Editor.TextRange" /> of the next subword that is not white space.
            </summary>
            <returns>The <see cref="T:Microsoft.VisualStudio.Text.Editor.TextRange" /> of the next word.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.TextPoint.GetPreviousWord">
            <summary>
            When implemented in a derived class, gets the <see cref="T:Microsoft.VisualStudio.Text.Editor.TextRange" /> of the previous word that is not white space.
            </summary>
            <returns>The <see cref="T:Microsoft.VisualStudio.Text.Editor.TextRange" /> of the previous word.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.TextPoint.GetPreviousSubWord">
            <summary>
            When implemented in a derived class, gets the <see cref="T:Microsoft.VisualStudio.Text.Editor.TextRange" /> of the previous subword that is not white space.
            </summary>
            <returns>The <see cref="T:Microsoft.VisualStudio.Text.Editor.TextRange" /> of the previous word.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.TextPoint.GetTextRange(Microsoft.VisualStudio.Text.Editor.TextPoint)">
            <summary>
            When implemented in a derived class, gets the <see cref="T:Microsoft.VisualStudio.Text.Editor.TextRange" /> that has this point and <paramref name="otherPoint" />
            as its start and end points.
            </summary>
            <returns>The <see cref="T:Microsoft.VisualStudio.Text.Editor.TextRange" /> that starts at this point and ends at <paramref name="otherPoint" />.</returns>
            <exception cref="T:System.InvalidOperationException"><paramref name="otherPoint" /> does not belong to the same buffer as this point.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.TextPoint.GetTextRange(System.Int32)">
            <summary>
            When implemented in a derived class, gets the <see cref="T:Microsoft.VisualStudio.Text.Editor.TextRange" /> that has this point and <paramref name="otherPosition" />
            as its start and end positions.
            </summary>
            <returns>The <see cref="T:Microsoft.VisualStudio.Text.Editor.TextRange" /> that starts at this point and ends at <paramref name="otherPosition" />.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="otherPosition" /> is negative or past the end of this buffer.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.TextPoint.InsertNewLine">
            <summary>
            When implemented in a derived class, inserts a new line character at this text point.
            </summary>
            <returns>
            Whether the edit succeeded.
            </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.TextPoint.InsertIndent">
            <summary>
            When implemented in a derived class, inserts a logical tab at this text point.
            </summary>
            <returns>
            <c>true</c> if the edit succeeded, otherwise <c>false</c>.
            </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.TextPoint.InsertText(System.String)">
            <summary>
            When implemented in a derived class, inserts <paramref name="text" /> at this text point.
            </summary>
            <param name="text">The text to insert.</param>
            <returns>
            <c>true</c> if the edit succeeded, otherwise <c>false</c>.
            </returns>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.TextPoint.LineNumber">
            <summary>
            When implemented in a derived class, gets the line this text point is on.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.TextPoint.StartOfLine">
            <summary>
            When implemented in a derived class, gets the position of the start of the line this text point is on.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.TextPoint.EndOfLine">
            <summary>
            When implemented in a derived class, gets the position of the end of the line this text point is on.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.TextPoint.RemovePreviousIndent">
            <summary>
            When implemented in a derived class, removes a logical tab before this text point.
            </summary>
            <returns>
            <c>true</c> if the edit succeeded, otherwise <c>false</c>.
            </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.TextPoint.TransposeCharacter">
            <summary>
            When implemented in a derived class, transposes the two characters on either side of this text point.
            </summary>
            <returns>
            <c>true</c> if the edit succeeded, otherwise <c>false</c>.
            </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.TextPoint.TransposeLine">
            <summary>
            When implemented in a derived class, transposes the line this point is one with the next line. If this point is on the last
            line of the file, the line is transposed with the previous one.
            </summary>
            <returns>
            <c>true</c> if the edit succeeded, otherwise <c>false</c>.
            </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.TextPoint.TransposeLine(System.Int32)">
            <summary>
            When implemented in a derived class, transposes the line this point is one with the given line number.
            </summary>
            <param name="lineNumber">The line number with which to transpose the line this point is on.</param>
            <returns>
            <c>true</c> if the edit succeeded, otherwise <c>false</c>.
            </returns>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.TextPoint.AdvancedTextPoint">
            <summary>
            When implemented in a derived class, gets the underlying <see cref="T:Microsoft.VisualStudio.Text.SnapshotPoint" /> of this text point.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.TextPoint.GetNextCharacter">
            <summary>
            When implemented in a derived class, gets the next character after this text point.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.TextPoint.GetPreviousCharacter">
            <summary>
            When implemented in a derived class, gets the previous character before this text point.
            </summary>
            <returns>The previous character.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.TextPoint.Find(System.String,Microsoft.VisualStudio.Text.Operations.FindOptions,Microsoft.VisualStudio.Text.Editor.TextPoint)">
            <summary>
            When implemented in a derived class, finds the start of the first occurrence of <paramref name="pattern" /> between this text point and <paramref name="endPoint" />.
            </summary>
            <param name="pattern">The pattern to find.</param>
            <param name="findOptions">The options to use while searching.</param>
            <param name="endPoint">The text point at which to stop searching.</param>
            <returns>The text range of the first occurrence of the pattern if it was found, otherwise a zero-length text range at this text point.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.TextPoint.Find(System.String,Microsoft.VisualStudio.Text.Editor.TextPoint)">
            <summary>
            When implemented in a derived class, finds the start of the first occurrence of <paramref name="pattern" /> between this text point and <paramref name="endPoint" />.
            </summary>
            <param name="pattern">The pattern to find.</param>
            <param name="endPoint">The text point at which to stop searching.</param>
            <returns>The text range of the first occurrence of the pattern if it was found, otherwise a zero-length text range at this text point.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.TextPoint.Find(System.String,Microsoft.VisualStudio.Text.Operations.FindOptions)">
            <summary>
            When implemented in a derived class, finds the start of the first occurrence of <paramref name="pattern" /> starting from this text point.
            </summary>
            <param name="pattern">The pattern to find.</param>
            <param name="findOptions">The options to use while searching.</param>
            <returns>The text range of the first occurrence of the pattern if it was found, otherwise a zero-length text range at this text point.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.TextPoint.Find(System.String)">
            <summary>
            When implemented in a derived class, finds the start of the first occurrence of <paramref name="pattern" /> starting from this text point.
            </summary>
            <param name="pattern">The pattern to find.</param>
            <returns>The text range of the first occurrence of the pattern if it was found, otherwise a zero-length text range at this text point.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.TextPoint.FindAll(System.String,Microsoft.VisualStudio.Text.Editor.TextPoint)">
            <summary>
            When implemented in a derived class, finds all matches of <paramref name="pattern" /> between this text point and <paramref name="endPoint" />.
            </summary>
            <param name="pattern">The pattern to find.</param>
            <param name="endPoint">The text point at which to stop searching.</param>
            <returns>A list of matches in the order they were found.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.TextPoint.FindAll(System.String,Microsoft.VisualStudio.Text.Operations.FindOptions,Microsoft.VisualStudio.Text.Editor.TextPoint)">
            <summary>
            When implemented in a derived class, finds all matches of <paramref name="pattern" /> between this text point and <paramref name="endPoint" />.
            </summary>
            <param name="pattern">The pattern to find.</param>
            <param name="endPoint">The text point at which to stop searching.</param>
            <param name="findOptions">The options to use while searching.</param>
            <returns>A list of matches in the order they were found.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.TextPoint.FindAll(System.String)">
            <summary>
            When implemented in a derived class, finds all matches of <paramref name="pattern" /> starting from this text point.
            </summary>
            <param name="pattern">The pattern to find.</param>
            <returns>A list of matches in the order they were found.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.TextPoint.FindAll(System.String,Microsoft.VisualStudio.Text.Operations.FindOptions)">
            <summary>
            When implemented in a derived class, finds all matches of <paramref name="pattern" /> starting from this text point.
            </summary>
            <param name="pattern">The pattern to find.</param>
            <param name="findOptions">The options to use while searching.</param>
            <returns>A list of matches in the order they were found.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.TextPoint.MoveTo(System.Int32)">
            <summary>
            When implemented in a derived class, moves this text point to a specific location.
            </summary>
            <param name="position">The new position of this text point.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="position" /> is negative or past the end of this buffer.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.TextPoint.MoveToNextCharacter">
            <summary>
            When implemented in a derived class, moves this point to the next character in the buffer.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.TextPoint.MoveToPreviousCharacter">
            <summary>
            When implemented in a derived class, moves this point to the previous character in the buffer.
            </summary>
            
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.TextPoint.Clone">
            <summary>
            Creates a new <see cref="T:Microsoft.VisualStudio.Text.Editor.TextPoint" /> at this position that can be
            moved independently from this one.
            </summary>
            <returns>The cloned <see cref="T:Microsoft.VisualStudio.Text.Editor.TextPoint" />.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.TextPoint.CloneInternal">
            <summary>
            When implemented in a derived class, clones the <see cref="T:Microsoft.VisualStudio.Text.Editor.TextPoint" />.
            </summary>
            <returns>The cloned <see cref="T:Microsoft.VisualStudio.Text.Editor.TextPoint" />.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.TextPoint.MoveToLine(System.Int32)">
            <summary>
            When implemented in a derived class, moves the text point at the start of the specified line and ensures it is visible.
            </summary>
            <param name="lineNumber">
            The line number on which to position the text point.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="lineNumber" /> is less than zero 
            or greater than the line number of the last line in the text buffer.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.TextPoint.MoveToEndOfLine">
            <summary>
            When implemented in a derived class, movea this point to the end of the line that it is currently on.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.TextPoint.MoveToStartOfLine">
            <summary>
            When implemented in a derived class, moves this point to the start of the line that it is currently on.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.TextPoint.MoveToEndOfDocument">
            <summary>
            When implemented in a derived class, moves this point to the end of the document.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.TextPoint.MoveToStartOfDocument">
            <summary>
            When implemented in a derived class, moves this point to the start of the document.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.TextPoint.MoveToBeginningOfNextLine">
            <summary>
            When implemented in a derived class, moves this point to the beginning of the next line.
            </summary>
            <remarks>
            This point moves to the end of the line if the point is on the last
            line.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.TextPoint.MoveToBeginningOfPreviousLine">
            <summary>
            When implemented in a derived class, moves this point to the beginning of the previous line.
            </summary>
            <remarks>
            This point moves to the start of the line if the point is on the first
            line.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.TextPoint.MoveToNextWord">
            <summary>
            When implemented in a derived class, moves this point to the end of the current word, or to the beginning of the
            next word if the point is already at the end of the current word.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.TextPoint.MoveToNextSubWord">
            <summary>
            When implemented in a derived class, moves this point to the end of the current word, or to the beginning of the
            next subword if the point is already at the end of the current word.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.TextPoint.MoveToPreviousWord">
            <summary>
            When implemented in a derived class, moves this point to the start of the current word, or the end of the
            previous word if the point is already at the start of the current word.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.TextPoint.MoveToPreviousSubWord">
            <summary>
            When implemented in a derived class, moves this point to the start of the current word, or the end of the
            previous subword if the point is already at the start of the current word.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Editor.TextRange">
            <summary>
            Represents a range of text in the buffer.
            </summary>
            <remarks>
            <para>
            While this range is immutable, edits to the text will cause
            it to adjust its location in response to the edits.
            </para>
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.TextRange.GetStartPoint">
            <summary>
            When implemented in a derived class, gets the start point of this text range.
            </summary>
            <returns>The starting <see cref="T:Microsoft.VisualStudio.Text.Editor.TextPoint" />.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.TextRange.GetEndPoint">
            <summary>
            When implemented in a derived class, gets the end point of this text range.
            </summary>
            <returns>The end <see cref="T:Microsoft.VisualStudio.Text.Editor.TextPoint" />.</returns>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.TextRange.TextBuffer">
            <summary>
            When implemented in a derived class, gets the <see cref="P:Microsoft.VisualStudio.Text.Editor.TextRange.TextBuffer" /> of this text range.
            </summary>
            <returns>The <see cref="P:Microsoft.VisualStudio.Text.Editor.TextRange.TextBuffer" /> of this text range.</returns>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.TextRange.AdvancedTextRange">
            <summary>
            When implemented in a derived class, gets the underlying <see cref="T:Microsoft.VisualStudio.Text.SnapshotSpan" /> of this <see cref="T:Microsoft.VisualStudio.Text.Editor.TextRange" />.
            The <see cref="T:Microsoft.VisualStudio.Text.SnapshotSpan" /> should be used only for advanced functionality.
            </summary>
            <returns>The <see cref="T:Microsoft.VisualStudio.Text.SnapshotSpan" />.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.TextRange.MakeUppercase">
            <summary>
            When implemented in a derived class, makes the text in this range uppercase.
            </summary>
            <returns>
            <c>true</c> if the edit succeeded, otherwise <c>false</c>.
            </returns>
            <remarks><para>If the range is empty, will apply to the character next to the range only.</para></remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.TextRange.MakeLowercase">
            <summary>
            When implemented in a derived class, makes the text in the this range lowercase.
            </summary>
            <returns>
            <c>true</c> if the edit succeeded, otherwise <c>false</c>.
            </returns>
            <remarks><para>If the range is empty, this method applies to the character next to the range only.</para></remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.TextRange.Capitalize">
            <summary>
            When implemented in a derived class, makes the first character in every word in this range uppercase, and makes the rest of the characters lowercase.
            </summary>
            <remarks>
            If the range is empty, this method applies to the character next to the range only.
            If the range starts in the middle of a word, only the part in the range will be made lowercase.
            </remarks>
            <returns>
            <c>true</c> if the edit succeeded, otherwise <c>false</c>.
            </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.TextRange.ToggleCase">
            <summary>
            When implemented in a derived class, switches the case of every character in this range.
            </summary>
            <remarks><para>If the range is empty, this method applies to the character next to the range only.</para></remarks>
            <returns>
            <c>true</c> if the edit succeeded, otherwise <c>false</c>.
            </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.TextRange.Delete">
            <summary>
            When implemented in a derived class, deletes all the text in this range.
            </summary>
            <returns>
            <c>true</c> if the edit succeeded, otherwise <c>false</c>.
            </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.TextRange.Indent">
            <summary>
            When implemented in a derived class, indents all the lines in this range.
            </summary>
            <returns>
            <c>true</c> if the edit succeeded, otherwise <c>false</c>.
            </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.TextRange.Unindent">
            <summary>
            When implemented in a derived class, unindents all the lines in this range.
            </summary>
            <returns>
            <c>true</c> if the edit succeeded, otherwise <c>false</c>.
            </returns>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.TextRange.IsEmpty">
            <summary>
            When implemented in a derived class, determines whether the <see cref="T:Microsoft.VisualStudio.Text.Editor.TextRange" /> is zero-length.
            </summary>
            <returns><c>true</c> if the <see cref="T:Microsoft.VisualStudio.Text.Editor.TextRange" /> is zero length, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.TextRange.Find(System.String)">
            <summary>
            When implemented in a derived class, finds the start of the first occurrence of <paramref name="pattern" /> in this text range.
            </summary>
            <param name="pattern">The pattern to find.</param>
            <returns>The text range of the first occurrence of the pattern if it was found, otherwise a zero-length text range at the start point of this range.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.TextRange.Find(System.String,Microsoft.VisualStudio.Text.Operations.FindOptions)">
            <summary>
            When implemented in a derived class, finds the start of the first occurrence of <paramref name="pattern" /> in this text range.
            </summary>
            <param name="pattern">The pattern to find.</param>
            <param name="findOptions">The options to use while searching.</param>
            <returns>The text range of the first occurrence of the pattern if it was found, otherwise a zero-length text range at the start point of this range.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.TextRange.FindAll(System.String)">
            <summary>
            When implemented in a derived class, finds all matches of <paramref name="pattern" /> starting in this text range.
            </summary>
            <param name="pattern">The pattern to find.</param>
            <returns>A list of matches in the order they were found.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.TextRange.FindAll(System.String,Microsoft.VisualStudio.Text.Operations.FindOptions)">
            <summary>
            When implemented in a derived class, finds all matches of <paramref name="pattern" /> starting in this text range.
            </summary>
            <param name="pattern">The pattern to find.</param>
            <param name="findOptions">The options to use while searching.</param>
            <returns>A list of matches in the order they were found.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.TextRange.ReplaceText(System.String)">
            <summary>
            When implemented in a derived class, replaces the text in this range with <paramref name="newText" />.
            </summary>
            <param name="newText">The new text.</param>
            <remarks>
            This <see cref="T:Microsoft.VisualStudio.Text.Editor.TextRange" /> spans the new text after it has been replaced.
            </remarks>
            <returns>
            <c>true</c> if the edit succeeded, otherwise <c>false</c>.
            </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.TextRange.GetText">
            <summary>
            When implemented in a derived class, gets the text in this range.
            </summary>
            <returns>The text in the range.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.TextRange.Clone">
            <summary>
            When implemented in a derived class, creates a clone of this text range than can be moved independently of this one.
            </summary>
            <returns>The cloned <see cref="T:Microsoft.VisualStudio.Text.Editor.TextRange" />.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.TextRange.CloneInternal">
            <summary>
            When implemented in a derived class, clones the text range.
            </summary>
            <returns>The cloned <see cref="T:Microsoft.VisualStudio.Text.Editor.TextRange" />.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.TextRange.SetStart(Microsoft.VisualStudio.Text.Editor.TextPoint)">
            <summary>
            When implemented in a derived class, sets the start point of this text range.
            </summary>
            <param name="startPoint">The new start point.</param>
            <remarks>
            If <paramref name="startPoint" /> occurs after
            the current end point in the buffer, <paramref name="startPoint" /> becomes the end point, and the current end point becomes the start point.
            </remarks>
            <exception cref="T:System.InvalidOperationException"><paramref name="startPoint" /> belongs to another buffer.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.TextRange.SetEnd(Microsoft.VisualStudio.Text.Editor.TextPoint)">
            <summary>
            When implemented in a derived class, sets the end point of this text range.
            </summary>
            <param name="endPoint">The new end point.</param>
            <remarks>
            <para>
            If <paramref name="endPoint" /> is before
            the current start point in the buffer, <paramref name="endPoint" /> becomes the start point, and the current start point becomes the end point.
            </para>
            </remarks>
            <exception cref="T:System.InvalidOperationException"><paramref name="endPoint" /> belongs to another buffer.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.TextRange.MoveTo(Microsoft.VisualStudio.Text.Editor.TextRange)">
            <summary>
            When implemented in a derived class, moves this text range to the range of <paramref name="newRange" />.
            </summary>
            <param name="newRange">The new range.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.TextRange.GetEnumeratorInternal">
            <summary>
            When implemented in a derived class, gets the enumerator of type <see cref="T:Microsoft.VisualStudio.Text.Editor.TextPoint" />.
            </summary>
            <returns>the enumerator of type <see cref="T:Microsoft.VisualStudio.Text.Editor.TextPoint" />.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.TextRange.GetEnumerator">
            <summary>
            Gets the enumerator.
            </summary>
            <returns>An enumerator of type <see cref="T:Microsoft.VisualStudio.Text.Editor.TextPoint" />.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.TextRange.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Gets the enumerator.
            </summary>
            <returns>The enumerator.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Editor.TextView">
            <summary>
            Provides methods for scrolling the editor window up and down.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.TextView.MoveLineToTop(System.Int32)">
            <summary>
            When implemented in a derived class, moves the current line to the top of the view without moving the caret.
            </summary>
            <param name="lineNumber">The number of lines to move.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.TextView.MoveLineToBottom(System.Int32)">
            <summary>
            When implemented in a derived class, moves the current line to the bottom of the view without moving the caret.
            </summary>
            <param name="lineNumber">The number of lines to move.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.TextView.ScrollUp(System.Int32)">
            <summary>
            When implemented in a derived class, scrolls the view up by one line.
            </summary>
            <param name="lines">The number of lines to scroll.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.TextView.ScrollDown(System.Int32)">
            <summary>
            When implemented in a derived class, scrolls the view down by one line.
            </summary>
            <param name="lines">The number of lines to scroll.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.TextView.ScrollPageDown">
            <summary>
            When implemented in a derived class, scrolls the view down by one page and does not move the caret.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.TextView.ScrollPageUp">
            <summary>
            When implemented in a derived class, scrolls the view up by one page and does not move the caret.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.TextView.Show(Microsoft.VisualStudio.Text.Editor.DisplayTextPoint,Microsoft.VisualStudio.Text.Editor.HowToShow)">
            <summary>
            When implemented in a derived class, shows the <paramref name="point" /> in the view.
            </summary>
            <param name="point">The point to  display.</param>
            <param name="howToShow">How the point should be displayed on the screen.</param>
            <returns><c>true</c> if the point was actually displayed, otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.TextView.Show(Microsoft.VisualStudio.Text.Editor.DisplayTextRange,Microsoft.VisualStudio.Text.Editor.HowToShow)">
            <summary>
            When implemented in a derived class, shows the <paramref name="textRange" /> in the view.
            </summary>
            <param name="textRange">The <see cref="T:Microsoft.VisualStudio.Text.Editor.TextRange" /> to  display.</param>
            <param name="howToShow">How the point should be displayed on the screen.</param>
            <returns>The <see cref="T:Microsoft.VisualStudio.Text.Formatting.VisibilityState" /> that describes how the range was actually displayed.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.TextView.GetTextPoint(System.Int32)">
            <summary>
            When implemented in a derived class, gets a display text point from a integer position.
            </summary>
            <param name="position">The position at which to get the text point.</param>
            <returns>The <see cref="T:Microsoft.VisualStudio.Text.Editor.DisplayTextPoint" />.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="position" /> is negative or past the end of the buffer.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.TextView.GetTextPoint(Microsoft.VisualStudio.Text.Editor.TextPoint)">
            <summary>
            When implemented in a derived class, gets a display text point from a buffer text point position.
            </summary>
            <param name="textPoint">The buffer text point to translate into a display text point.</param>
            <returns>The <see cref="T:Microsoft.VisualStudio.Text.Editor.DisplayTextPoint" />.</returns>
            <exception cref="T:System.ArgumentException"><paramref name="textPoint" /> does not belong to the same buffer as the view.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.TextView.GetTextPoint(System.Int32,System.Int32)">
            <summary>
            When implemented in a derived class, gets a display text point from a line and column.
            </summary>
            <param name="line">The line on which to get this text point.</param>
            <param name="column">The line-relative position at which to get the text point.</param>
            <returns>The <see cref="T:Microsoft.VisualStudio.Text.Editor.DisplayTextPoint" />.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="line" /> is negative or greater than the number of lines in the buffer, or
            <paramref name="column" /> is negative or past the end of the line.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.TextView.GetTextRange(Microsoft.VisualStudio.Text.Editor.TextPoint,Microsoft.VisualStudio.Text.Editor.TextPoint)">
            <summary>
            When implemented in a derived class, gets a display text range from two display text points.
            </summary>
            <param name="startPoint">The start point of the range.</param>
            <param name="endPoint">The end point of the range.</param>
            <returns>The text range that starts and ends at the two points.</returns>
            <remarks>The start point of the text range may become the end point if the start point occurs after the end point.</remarks>
            <exception cref="T:System.ArgumentException"><paramref name="startPoint" /> or <paramref name="endPoint" /> do not belong to this buffer.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.TextView.GetTextRange(Microsoft.VisualStudio.Text.Editor.TextRange)">
            <summary>
            When implemented in a derived class, gets a display text range from a text range on the buffer.
            </summary>
            <param name="textRange">The text range on the buffer.</param>
            <returns>The <see cref="T:Microsoft.VisualStudio.Text.Editor.DisplayTextPoint" />.</returns>
            <remarks>The start point of the text range may become the end point if the start point occurs after the end point.</remarks>
            <exception cref="T:System.ArgumentException"><paramref name="textRange" /> does not belong to the same buffer as the view.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.TextView.GetTextRange(System.Int32,System.Int32)">
            <summary>
            When implemented in a derived class, gets a display text range from two integer positions.
            </summary>
            <param name="startPosition">The start position of the range.</param>
            <param name="endPosition">The end position of the range.</param>
            <returns>The text range that starts and ends at the two positions.</returns>
            <remarks>The start position of the text range may become the end point if the start position occurs after the end position.</remarks>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="startPosition" /> is negative or past the end of the buffer.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="endPosition" /> is negative or past the end of the buffer.</exception>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.TextView.VisibleSpan">
            <summary>
            When implemented in a derived class, gets the <see cref="T:Microsoft.VisualStudio.Text.Editor.TextRange" /> of text currently visible on screen.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.TextView.AdvancedTextView">
            <summary>
            When implemented in a derived class, provides advanced view manipulation functionality.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.TextView.Caret">
            <summary>
            When implemented in a derived class, gets the <see cref="P:Microsoft.VisualStudio.Text.Editor.TextView.Caret" /> of this view.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.TextView.Selection">
            <summary>
            When implemented in a derived class, gets the <see cref="P:Microsoft.VisualStudio.Text.Editor.TextView.Selection" />. of this view. 
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.TextView.TextBuffer">
            <summary>
            When implemented in a derived class, gets the <see cref="P:Microsoft.VisualStudio.Text.Editor.TextView.TextBuffer" />. of this view. 
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Editor.Tags.ContainerStructureTag">
            <summary>
            Extends <see cref="T:Microsoft.VisualStudio.Text.Tagging.StructureTag" /> with <see cref="P:Microsoft.VisualStudio.Text.Editor.Tags.ContainerStructureTag.SubHeadings" /> property improving
            structure visualization support for secondary structure elements such as C# "else" statement,
            also support for the "catch" and "case"statement.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.Tags.ContainerStructureTag.#ctor(Microsoft.VisualStudio.Text.ITextSnapshot,System.Nullable{Microsoft.VisualStudio.Text.Span},System.Nullable{Microsoft.VisualStudio.Text.Span},System.Nullable{Microsoft.VisualStudio.Text.Span},System.Nullable{System.Int32},System.String,System.Boolean,System.Boolean,System.Boolean,System.Object,System.Object,System.Collections.Generic.IReadOnlyList{Microsoft.VisualStudio.Text.Tagging.SubHeadingStructureData})">
            <summary>
            Constructs an instance of the <see cref="T:Microsoft.VisualStudio.Text.Editor.Tags.ContainerStructureTag" />.
            </summary>
            <remarks>
            StructureTag offers explicit control of the block structure adornments.
            This class operates on the pay-to-play principle, in that,
            it will allow you to create a tag with just a subset of fields, but if a field is missing, it
            will attempt to guess the missing fields from the information that it has. The most useful example
            of this is to omit the GuideLineSpan and GuideLineHorizontalAnchorPoint to have the API guess
            them from the HeaderSpan and StatementSpan indentation. If enough information is missing, the tag
            does nothing.
            </remarks>
            <param name="snapshot">The snapshot used to generate this StructureTag.</param>
            <param name="outliningSpan">The block contents, used to determine the collapse region.</param>
            <param name="headerSpan">The control statement at the start of the block.</param>
            <param name="guideLineSpan">
            The vertical span within which the block structure guide is drawn.
            If this member is omitted, it is computed from the HeaderSpan and the OutliningSpan via heuristics.</param>
            <param name="guideLineHorizontalAnchor">
            A point capturing the horizontal offset at which the guide is drawn.
            If this member is omitted, it is computed from the HeaderSpan and the OutliningSpan via heuristics.</param>
            <param name="type">The structure type of the block.</param>
            <param name="isCollapsible">If true, block will have block adornments.</param>
            <param name="isDefaultCollapsed">If true, block is collapsed by default.</param>
            <param name="isImplementation">Defines whether or not the block defines a region following a function declaration.</param>
            <param name="collapsedForm">The form the block appears when collapsed.</param>
            <param name="collapsedHintForm">The form of the collapsed region tooltip.</param>
            <param name="subHeadings">Optional subheading control statement of this block (e.g. "catch" statement of the "try" block).</param>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.Tags.ContainerStructureTag.SubHeadings">
            <summary>
            Gets the optional <see cref="T:Microsoft.VisualStudio.Text.Tagging.SubHeadingStructureData" /> of the sub headings of the code block represented by this tag. This Tag will provide below information:
            Get the whole span of this code block.
            Gets the span of the statement that controls the structural block.
            Determines the semantic type of the structural block.
            </summary>
            <remarks>
            <para>
            An Example:
            <code>
            try 
            {
                //something;
            }
            catch
            {
                // something else;
            }
            </code>
            <see cref="P:Microsoft.VisualStudio.Text.Editor.Tags.ContainerStructureTag.SubHeadings" /> of the <see cref="T:Microsoft.VisualStudio.Text.Tagging.IContainerStructureTag" /> representing "try" will contain SubHeadingSpans representing "catch" and "finally".
            would be the same as the <see cref="P:Microsoft.VisualStudio.Text.Tagging.IStructureTag.HeaderSpan" /> of the <see cref="T:Microsoft.VisualStudio.Text.Tagging.IStructureTag" /> representing "try" statement block.
            This allows structure visualizing features to provide more useful context when visualizing "catch" structure blocks.
            </para>
            </remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.UI.Adornments.IStructureElement">
            <summary>
            Represents a unit of structure in a code <see cref="T:Microsoft.VisualStudio.Text.ITextBuffer" />.
            </summary>
            <remarks>
            This class is an immutable subtree of the code structure in the view.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.UI.Adornments.IStructureElement.Children">
            <summary>
            The <see cref="T:Microsoft.VisualStudio.Text.UI.Adornments.IStructureElement" />s nested within this one.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.UI.Adornments.IStructureElement.HeaderSpan">
            <summary>
            The span of text at the top of the structural element. e.g.: 'if (true)'
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.UI.Adornments.IStructureElement.GuideLineSpan">
            <summary>
            The vertical span within which the structure guide line adornment should
            be drawn.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.UI.Adornments.IStructureElement.OutliningSpan">
            <summary>
            The span of text to collapse when the outlining adornment is invoked.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.UI.Adornments.IStructureElement.ExtentSpan">
            <summary>
            The full extent of the block, from the start of the header to the end of the guideline.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.UI.Adornments.IStructureElement.GuideLineHorizontalAnchorPoint">
            <summary>
            The horizontal offset with which to align the structure guide line.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.UI.Adornments.IStructureElement.Type">
            <summary>
            One of the <see cref="T:Microsoft.VisualStudio.Text.Adornments.PredefinedStructureTagTypes" />, indicating the semantics
            of this structural element.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.UI.Adornments.IStructureElement.IsCollapsible">
            <summary>
            Indicates whether or not this element should display a collapse adornment.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.UI.Adornments.IStructureElement.IsDefaultCollapsed">
            <summary>
            Indicates whether or not this element should be collapsed at document open.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.UI.Adornments.IStructureElement.IsImplementation">
            <summary>
            Indicates whether or not this element is related to implementation of a method,
            function, or property.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.UI.Adornments.IStructureElement.GetCollapsedForm">
            <summary>
            Gets the text to display in the collapse adornment.
            </summary>
            <returns>The text to display in the collapse adornment.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.UI.Adornments.IStructureElement.GetCollapsedHintForm">
            <summary>
            Gets the text to display in the collapse adornment tooltip.
            </summary>
            <returns>The text displayed in the collapse adornment tooltip.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.BraceCompletion.BracePairAttribute">
            <summary>
            Specifies the opening and closing braces.
            </summary>
            <remarks>
            This attribute may be exported on an <see cref="T:Microsoft.VisualStudio.Text.BraceCompletion.IBraceCompletionSessionProvider" />, <see cref="T:Microsoft.VisualStudio.Text.BraceCompletion.IBraceCompletionContextProvider" />,
            or <see cref="T:Microsoft.VisualStudio.Text.BraceCompletion.IBraceCompletionDefaultProvider" />.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.BraceCompletion.BracePairAttribute.#ctor(System.Char,System.Char)">
            <summary>
            Instantiates a new instance of a <see cref="T:Microsoft.VisualStudio.Text.BraceCompletion.BracePairAttribute" />.
            </summary>
            <param name="openingBrace">The opening brace character for this brace completion session.</param>
            <param name="closingBrace">The closing brace character for this brace completion session.</param>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.BraceCompletion.BracePairAttribute.OpeningBraces">
            <summary>
            The opening brace character.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.BraceCompletion.BracePairAttribute.ClosingBraces">
            <summary>
            The closing brace character.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.BraceCompletion.BracePairAttribute.SupportsAutoSurround">
            <summary>
            Specifies if the brace pair supports auto surround. Set to true by default
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.BraceCompletion.BracePairAttribute.SupportsBraceCompletion">
            <summary>
            Specifies if the brace pair supports completion. Set to true by default
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.BraceCompletion.Implementation.IBraceCompletionAdornmentService.Point">
            <summary>
            Gets or sets the tracking point used by the brace completion adornment
            to indicate the closing brace. The adornment span is length one
            with the given point as the end.
            </summary>
            <remarks>Setting the tracking point to null clears the adornment.</remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.BraceCompletion.Implementation.IBraceCompletionAdornmentServiceFactory.GetOrCreateService(Microsoft.VisualStudio.Text.Editor.ITextView)">
            <summary>
            Creates an IBraceCompletionAdornmentService for the given text view.
            </summary>
            <remarks>Only one IBraceCompletionAdornmentService will exist per view.</remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.BraceCompletion.IBraceCompletionContext">
            <summary>
            Represents a simple context used to extend the default brace completion behaviors to include 
            language-specific behaviors such as parsing and formatting.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.BraceCompletion.IBraceCompletionContext.Start(Microsoft.VisualStudio.Text.BraceCompletion.IBraceCompletionSession)">
            <summary>
            Called before the session is added to the stack.
            </summary>
            <remarks>If additional formatting is required for the opening or closing brace it should be done here.</remarks>
            <param name="session">Default brace completion session</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.BraceCompletion.IBraceCompletionContext.Finish(Microsoft.VisualStudio.Text.BraceCompletion.IBraceCompletionSession)">
            <summary>
            Called after the session has been removed from the stack.
            </summary>
            <param name="session">Default brace completion session</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.BraceCompletion.IBraceCompletionContext.OnReturn(Microsoft.VisualStudio.Text.BraceCompletion.IBraceCompletionSession)">
            <summary>
            Called by the editor when return is pressed while both braces are on the same line
            and no typing has occurred in the session.
            </summary>
            <remarks>Called after the newline has been inserted into the buffer.</remarks>
            <remarks>Formatting for scenarios where the closing brace needs to be moved down an additional
            line past the caret should be done here.</remarks>
            <param name="session">Default brace completion session</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.BraceCompletion.IBraceCompletionContext.AllowOverType(Microsoft.VisualStudio.Text.BraceCompletion.IBraceCompletionSession)">
            <summary>
            Called by the editor when the closing brace character has been typed.
            </summary>
            <remarks>The closing brace character will not be inserted into the buffer until after this returns.</remarks>
            <remarks>Does not occur if there is any non-whitespace between the caret and the closing brace.</remarks>
            <remarks>Language-specific decisions may be made here to take into account scenarios such as an escaped closing char.</remarks>
            <param name="session">Default brace completion session</param>
            <returns>Returns true if the context is a valid overtype scenario.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.BraceCompletion.IBraceCompletionContextProvider">
            <summary>
            Represents an extension point used to create an <see cref="T:Microsoft.VisualStudio.Text.BraceCompletion.IBraceCompletionContext" />
            to provide language-specific handling on top of default <see cref="T:Microsoft.VisualStudio.Text.BraceCompletion.IBraceCompletionSession" />s.
            </summary>
            <remarks><see cref="T:Microsoft.VisualStudio.Text.BraceCompletion.IBraceCompletionContextProvider" /> extends the default brace completion 
            behaviors provided by <see cref="T:Microsoft.VisualStudio.Text.BraceCompletion.IBraceCompletionDefaultProvider" />. It allows for additional 
            formatting after the closing brace has been inserted as well as custom handling 
            of overtype scenarios and newline insertions.</remarks>
            <remarks>For a fully customizeable <see cref="T:Microsoft.VisualStudio.Text.BraceCompletion.IBraceCompletionSession" /> use <see cref="T:Microsoft.VisualStudio.Text.BraceCompletion.IBraceCompletionSessionProvider" />.</remarks>
            <remarks>
            <para>This is a MEF component part, and should be exported with the following attribute:
            [Export(typeof(IBraceCompletionContextProvider))]
            </para>
            <para>
            Exports must include at least one [BracePair] attribute and at least one [ContentType] attribute.
            </para>
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.BraceCompletion.IBraceCompletionContextProvider.TryCreateContext(Microsoft.VisualStudio.Text.Editor.ITextView,Microsoft.VisualStudio.Text.SnapshotPoint,System.Char,System.Char,Microsoft.VisualStudio.Text.BraceCompletion.IBraceCompletionContext@)">
            <summary>
            Creates an <see cref="T:Microsoft.VisualStudio.Text.BraceCompletion.IBraceCompletionContext" /> to handle language-specific 
            actions such as parsing and formatting.
            </summary>
            <remarks>Opening points within strings and comments are usually invalid points to start an <see cref="T:Microsoft.VisualStudio.Text.BraceCompletion.IBraceCompletionSession" /> and will return false.</remarks>
            <param name="textView">View containing the <paramref name="openingPoint" />.</param>
            <param name="openingPoint">Insertion point of the <paramref name="openingBrace" />.</param>
            <param name="openingBrace">Opening brace that has been typed by the user.</param>
            <param name="closingBrace">Closing brace character</param>
            <param name="context">Brace completion context if created.</param>
            <returns>Returns true if the <paramref name="openingPoint" /> was a valid point in the buffer to start a <see cref="T:Microsoft.VisualStudio.Text.BraceCompletion.IBraceCompletionSession" />.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.BraceCompletion.IBraceCompletionDefaultProvider">
            <summary>
            Represents an extension point for the default non language-specific
            brace completion behaviors. It should be used to export metadata 
            containing the opening and closing braces to provide 
            for the given ContentType.
            </summary>
            <remarks>
            <para>This is a MEF component part, and should be exported with the following attribute:
            [Export(typeof(IBraceCompletionDefaultProvider))]
            </para>
            <para>
            Exports must include at least one [BracePair] attribute and at least one [ContentType] attribute.
            </para>
            </remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.BraceCompletion.IBraceCompletionDynamicSessionProvider">
            <summary>
            Represents an extension point used to create an <see cref="T:Microsoft.VisualStudio.Text.BraceCompletion.IBraceCompletionSession" />
            for brace completion. In comparison with <see cref="T:Microsoft.VisualStudio.Text.BraceCompletion.IBraceCompletionSessionProvider" />,
            this interface will try to create a session to tracks a brace completion action for every
            typed characters instead of a defined set of characters defined through the <see cref="T:Microsoft.VisualStudio.Text.BraceCompletion.BracePairAttribute" />.
            This interface can be prefered when the kind of braces to handle varies based on the location of the caret in the document.
            If the braces to handle are fixed (it will always look for the same braces at runtime), then
            please use <see cref="T:Microsoft.VisualStudio.Text.BraceCompletion.IBraceCompletionSessionProvider" /> instead.
            </summary>
            <remarks>
            <para>This is a MEF component part, and should be exported with the following attribute:
            [Export(typeof(IBraceCompletionSessionFreeProvider))]
            </para>
            <para>
            Exports must include at least one [ContentType] attribute.
            </para>
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.BraceCompletion.IBraceCompletionDynamicSessionProvider.TryCreateSession(Microsoft.VisualStudio.Text.Editor.ITextView,Microsoft.VisualStudio.Text.SnapshotPoint,System.Char,Microsoft.VisualStudio.Text.BraceCompletion.IBraceCompletionSession@)">
            <summary>
            If appropriate, creates an <see cref="T:Microsoft.VisualStudio.Text.BraceCompletion.IBraceCompletionSession" /> based on the language context at the <paramref name="openingPoint" />.
            </summary>
            <remarks>Opening points within strings and comments are usually invalid points to start an <see cref="T:Microsoft.VisualStudio.Text.BraceCompletion.IBraceCompletionSession" /> and will return false.</remarks>
            <param name="textView">View containing the <paramref name="openingPoint" />.</param>
            <param name="openingPoint">Insertion point of the <paramref name="typedChar" /> within the subject buffer. 
            The content type of the subject buffer will match one of the [ContentType] attributes for this extension.</param>
            <param name="typedChar">The character that has been typed by the user in the editor.</param>
            <param name="session">Brace completion session if created.</param>
            <returns>Returns true if the <paramref name="openingPoint" /> was a valid point in the buffer to start a <see cref="T:Microsoft.VisualStudio.Text.BraceCompletion.IBraceCompletionSession" />.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.BraceCompletion.IBraceCompletionDynamicSessionProvider.GetAvailableBracePairs(Microsoft.VisualStudio.Text.SnapshotPoint)">
            <summary>
            Gets the list of brace pair that are known by the language service at the given <paramref name="snapshotPoint" />.
            </summary>
            <param name="snapshotPoint">A location in a document.</param>
            <returns>Returns an array of brace pair that are associated to the language at the given location.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.BraceCompletion.IBraceCompletionManager">
            <summary>
            A per text view manager for brace completion.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.BraceCompletion.IBraceCompletionManager.Enabled">
            <summary>
            Returns true if brace completion is enabled.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.BraceCompletion.IBraceCompletionManager.HasActiveSessions">
            <summary>
            Returns true if there are currently active sessions.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.BraceCompletion.IBraceCompletionManager.ActiveSessionCount">
            <summary>
            Returns number of currently active sessions.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.BraceCompletion.IBraceCompletionManager.OpeningBraces">
            <summary>
            Opening brace characters the brace completion manager is currently registered to handle.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.BraceCompletion.IBraceCompletionManager.ClosingBraces">
            <summary>
            Closing brace characters the brace completion manager is currently registered to handle.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.BraceCompletion.IBraceCompletionManager.PreTypeChar(System.Char,System.Boolean@)">
            <summary>
            Called by the editor when a character has been typed and before it is 
            inserted into the buffer.
            </summary>
            <param name="character">Typed character</param>
            <param name="handledCommand">Set to true to prevent the closing brace character from being 
            inserted into the buffer.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.BraceCompletion.IBraceCompletionManager.PostTypeChar(System.Char)">
            <summary>
            Called by the editor after a character has been typed.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.BraceCompletion.IBraceCompletionManager.PreTab(System.Boolean@)">
            <summary>
            Called by the editor when tab has been pressed and before it is inserted into the buffer.
            </summary>
            <param name="handledCommand">Set to true to prevent the tab from being inserted into the buffer.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.BraceCompletion.IBraceCompletionManager.PostTab">
            <summary>
            Called by the editor after the tab has been inserted.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.BraceCompletion.IBraceCompletionManager.PreBackspace(System.Boolean@)">
            <summary>
            Called by the editor before the character has been removed.
            </summary>
            <param name="handledCommand">Set to true to prevent the backspace action from completing.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.BraceCompletion.IBraceCompletionManager.PostBackspace">
            <summary>
            Called by the editor after the character has been removed.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.BraceCompletion.IBraceCompletionManager.PreDelete(System.Boolean@)">
            <summary>
            Called by the editor when delete is pressed within the session.
            </summary>
            <param name="handledCommand">Set to true to prevent the deletion.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.BraceCompletion.IBraceCompletionManager.PostDelete">
            <summary>
            Called by the editor after the delete action.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.BraceCompletion.IBraceCompletionManager.PreReturn(System.Boolean@)">
            <summary>
            Called by the editor when return is pressed within the session.
            </summary>
            <param name="handledCommand">Set to true to prevent the new line insertion.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.BraceCompletion.IBraceCompletionManager.PostReturn">
            <summary>
            Called by the editor after the new line has been inserted.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.BraceCompletion.IBraceCompletionManagerFactory">
            <summary>
            A service that returns an <see cref="T:Microsoft.VisualStudio.Text.BraceCompletion.IBraceCompletionManager" /> that manages brace completion for a particular <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView" />.
            </summary>
            <remarks>This is a MEF component part, and should be imported as follows:
            [Import]
            IBraceCompletionManagerFactory braceCompletionManagerFactory = null;
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.BraceCompletion.IBraceCompletionManagerFactory.TryGetBraceCompletionManager(Microsoft.VisualStudio.Text.Editor.ITextView)">
            <summary>
            Returns an <see cref="T:Microsoft.VisualStudio.Text.BraceCompletion.IBraceCompletionManager" /> that manages brace completion for a particular <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView" />.
            </summary>
            <param name="textView">A text view to get a <see cref="T:Microsoft.VisualStudio.Text.BraceCompletion.IBraceCompletionManager" /> for.</param>
            <returns>An <see cref="T:Microsoft.VisualStudio.Text.BraceCompletion.IBraceCompletionManager" /> that manages brace completion for a particular <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView" /> or null if brace completion is not enabled for the text view.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.BraceCompletion.IBraceCompletionManagerInternal">
            <summary>
            A per text view manager for brace completion.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.BraceCompletion.IBraceCompletionManagerInternal.ActiveSessions">
            <summary>
            Returns all of the active sessions.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.BraceCompletion.IBraceCompletionManagerInternal.TopSession">
            <summary>
            Returns the first active session, if it exists.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.BraceCompletion.IBraceCompletionManagerInternal.DismissTopSession">
            <summary>
            Dismiss the top session if it exists and return true. Returns false otherwise.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.BraceCompletion.IBraceCompletionSession">
            <summary>
            Represents a brace completion session for the purpose of tracking a pair of braces
            and handling actions occurring between the OpeningPoint and ClosingPoint.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.BraceCompletion.IBraceCompletionSession.OpeningPoint">
            <summary>
            Gets the starting point of the session.
            </summary>
            <remarks>The OpeningPoint and ClosingPoint are used to determine if the caret is within the session.
            If either one is null after Start has been called the session will be removed from the stack.</remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.BraceCompletion.IBraceCompletionSession.ClosingPoint">
            <summary>
            Gets the ending point of the session.
            </summary>
            <remarks>The OpeningPoint and ClosingPoint are used to determine if the caret is within the session.
            If either one is null after Start has been called the session will be removed from the stack.</remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.BraceCompletion.IBraceCompletionSession.TextView">
            <summary>
            Gets the text view in which the brace completion session is occurring.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.BraceCompletion.IBraceCompletionSession.SubjectBuffer">
            <summary>
            Gets the subject buffer in which the brace completion session is occurring.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.BraceCompletion.IBraceCompletionSession.OpeningBrace">
            <summary>
            Gets the opening brace character.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.BraceCompletion.IBraceCompletionSession.ClosingBrace">
            <summary>
            Gets the closing brace character.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.BraceCompletion.IBraceCompletionSession.Start">
            <summary>
            Called before the session is added to the stack.
            </summary>
            <remarks>This method is called after the opening brace has been inserted into the buffer.</remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.BraceCompletion.IBraceCompletionSession.Finish">
            <summary>
            Called after the session has been removed from the stack.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.BraceCompletion.IBraceCompletionSession.PreOverType(System.Boolean@)">
            <summary>
            Called by the editor when the closing brace character has been typed and before it is 
            inserted into the buffer.
            </summary>
            <param name="handledCommand">Set to true to prevent the closing brace character from being 
            inserted into the buffer.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.BraceCompletion.IBraceCompletionSession.PostOverType">
            <summary>
            Called by the editor after the closing brace character has been typed.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.BraceCompletion.IBraceCompletionSession.PreTab(System.Boolean@)">
            <summary>
            Called by the editor when tab has been pressed and before it is inserted into the buffer.
            </summary>
            <param name="handledCommand">Set to true to prevent the tab from being inserted into the buffer.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.BraceCompletion.IBraceCompletionSession.PostTab">
            <summary>
            Called by the editor after the tab has been inserted.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.BraceCompletion.IBraceCompletionSession.PreBackspace(System.Boolean@)">
            <summary>
            Called by the editor before the character has been removed.
            </summary>
            <param name="handledCommand">Set to true to prevent the backspace action from completing.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.BraceCompletion.IBraceCompletionSession.PostBackspace">
            <summary>
            Called by the editor after the character has been removed.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.BraceCompletion.IBraceCompletionSession.PreDelete(System.Boolean@)">
            <summary>
            Called by the editor when delete is pressed within the session.
            </summary>
            <param name="handledCommand">Set to true to prevent the deletion.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.BraceCompletion.IBraceCompletionSession.PostDelete">
            <summary>
            Called by the editor after the delete action.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.BraceCompletion.IBraceCompletionSession.PreReturn(System.Boolean@)">
            <summary>
            Called by the editor when return is pressed within the session.
            </summary>
            <param name="handledCommand">Set to true to prevent the newline insertion.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.BraceCompletion.IBraceCompletionSession.PostReturn">
            <summary>
            Called by the editor after the newline has been inserted.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.BraceCompletion.IBraceCompletionSessionProvider">
            <summary>
            Represents an extension point used to create an <see cref="T:Microsoft.VisualStudio.Text.BraceCompletion.IBraceCompletionSession" />
            for brace completion. A session tracks a set of braces and handles actions
            performed by the user within the braces to allow for over typing of the 
            closing brace and additional formatting.
            </summary>
            <remarks>
            <para>This is a MEF component part, and should be exported with the following attribute:
            [Export(typeof(IBraceCompletionSessionProvider))]
            </para>
            <para>
            Exports must include at least one [BracePair] attribute and at least one [ContentType] attribute.
            </para>
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.BraceCompletion.IBraceCompletionSessionProvider.TryCreateSession(Microsoft.VisualStudio.Text.Editor.ITextView,Microsoft.VisualStudio.Text.SnapshotPoint,System.Char,System.Char,Microsoft.VisualStudio.Text.BraceCompletion.IBraceCompletionSession@)">
            <summary>
            If appropriate, creates an <see cref="T:Microsoft.VisualStudio.Text.BraceCompletion.IBraceCompletionSession" /> based on the language context at the <paramref name="openingPoint" />.
            </summary>
            <remarks>Opening points within strings and comments are usually invalid points to start an <see cref="T:Microsoft.VisualStudio.Text.BraceCompletion.IBraceCompletionSession" /> and will return false.</remarks>
            <param name="textView">View containing the <paramref name="openingPoint" />.</param>
            <param name="openingPoint">Insertion point of the <paramref name="openingBrace" /> within the subject buffer. 
            The content type of the subject buffer will match one of the [ContentType] attributes for this extension.</param>
            <param name="openingBrace">Opening brace that has been typed by the user.</param>
            <param name="closingBrace">Closing brace character</param>
            <param name="session">Brace completion session if created.</param>
            <returns>Returns true if the <paramref name="openingPoint" /> was a valid point in the buffer to start a <see cref="T:Microsoft.VisualStudio.Text.BraceCompletion.IBraceCompletionSession" />.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Classification.IViewClassifierAggregatorService">
            <summary>
            A service that returns an <see cref="T:Microsoft.VisualStudio.Text.Classification.IClassifier" /> that aggregates and normalizes all <see cref="T:Microsoft.VisualStudio.Text.Classification.IClassifier" />
            contributions for all <see cref="T:Microsoft.VisualStudio.Text.ITextBuffer" />s in the buffer graph of a particular <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView" />.
            </summary>
            <remarks>
            <para>The normalized classifications produced by this aggregator are sorted and do not overlap. If a span of text
            had multiple classifications based on the original classifier contributions, then in the normalized
            classification it has a transient classification (<see cref="T:Microsoft.VisualStudio.Text.Classification.IClassificationTypeRegistryService" />) that corresponds to
            all of the original classifications.</para>
            <para>Classifier aggregators are cached for each <see cref="T:Microsoft.VisualStudio.Text.ITextBuffer" /> and <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView" /> combination.</para>
            </remarks>
            <remarks>This is a MEF component part, and should be imported as follows:
            [Import]
            IViewClassifierAggregatorService aggregator = null;
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Classification.IViewClassifierAggregatorService.GetClassifier(Microsoft.VisualStudio.Text.Editor.ITextView)">
            <summary>
            Gets the cached <see cref="T:Microsoft.VisualStudio.Text.Classification.IClassifier" /> for the given <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView" />.
            If one does not exist, an <see cref="T:Microsoft.VisualStudio.Text.Classification.IClassifier" /> will be created and cached for each <see cref="T:Microsoft.VisualStudio.Text.ITextBuffer" /> in the
            view's buffer graph.
            </summary>
            <param name="textView">The <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView" /> to use in retrieving or creating the <see cref="T:Microsoft.VisualStudio.Text.Classification.IClassifier" />.</param>
            <returns>The cached <see cref="T:Microsoft.VisualStudio.Text.Classification.IClassifier" />.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="textView" /> is null.</exception>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Differencing.DifferenceHighlightMode">
            <summary>
            The highlight mode for this <see cref="T:Microsoft.VisualStudio.Text.Differencing.IDifferenceViewer" />.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Differencing.DifferenceHighlightMode.CodeContour">
            <summary>
            In this mode, line differences should be displayed only to the last character on each line.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Differencing.DifferenceHighlightMode.WholeLine">
            <summary>
            In this mode, line differences should be displayed so that they take up the entire width of the viewport.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Differencing.DifferenceHighlightMode2">
            <summary>
            The highlight mode for this <see cref="T:Microsoft.VisualStudio.Text.Differencing.IDifferenceViewer" />.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Differencing.DifferenceHighlightMode2.CodeContour">
            <summary>
            In this mode, line differences should be displayed only to the last character on each line.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Differencing.DifferenceHighlightMode2.WholeLine">
            <summary>
            In this mode, line differences should be displayed so that they take up the entire width of the viewport.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Differencing.DifferenceHighlightMode2.BlockOutline">
            <summary>
            In this mode, line and word differences are shown as outlined rectangles.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Differencing.DifferenceHighlightMode3">
            <summary>
            The highlight mode for this <see cref="T:Microsoft.VisualStudio.Text.Differencing.IDifferenceViewer" />.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Differencing.DifferenceHighlightMode3.CodeContour">
            <summary>
            In this mode, line differences should be displayed only to the last character on each line.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Differencing.DifferenceHighlightMode3.WholeLine">
            <summary>
            In this mode, line differences should be displayed so that they take up the entire width of the viewport.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Differencing.DifferenceHighlightMode3.BlockOutline">
            <summary>
            In this mode, line and word differences are shown as outlined rectangles.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Differencing.DifferenceHighlightMode3.BlockOutlineWithWordDiffs">
            <summary>
            In this mode, line differences are shown as outlined rectangles and
            word differences are shown as colored rectangles.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Differencing.DifferenceViewerOptions.ViewModeId">
            <summary>
            The <see cref="T:Microsoft.VisualStudio.Text.Differencing.DifferenceViewMode" /> the difference viewer should use (side-by-side, inline, one side at a time).
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Differencing.DifferenceViewerOptions.HighlightModeId">
            <summary>
            The <see cref="T:Microsoft.VisualStudio.Text.Differencing.DifferenceHighlightMode" /> for the line changed markers.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Differencing.DifferenceViewerOptions.ScrollToFirstDiffId">
            <summary>
            If <c>true</c>, the difference viewer will scroll each contained view to the first visible difference after
            the files are compared.  If <c>false</c>, the scrolled area is left alone.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Differencing.DifferenceViewerOptions.SynchronizeSideBySideViewsId">
            <summary>
            If <c>true</c>, the left and right views of the side by side view are aligned with each other.
            </summary>
            <remarks>This option is ignored in the other view modes.</remarks>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Differencing.DifferenceViewerOptions.ShowDiffOverviewMarginId">
            <summary>
            If <c>true</c>, show the difference overview margin.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Differencing.DifferenceViewerOptions.SummaryDiffId">
            <summary>
            The <see cref="T:Microsoft.VisualStudio.Text.Differencing.SummaryDiffMode" /> for the summary diff button. Can be either "Summarize" or "Expand".
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Differencing.DifferenceViewerOptions.ShowDifferencesId">
            <summary>
            If this is <c>false</c>, then the difference viewer will, even if a baseline has been specified, not show any differences.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Differencing.DifferenceViewerOption`1">
            <summary>
            A base class that can be used for options that are specific to an <see cref="T:Microsoft.VisualStudio.Text.Differencing.IDifferenceViewer" />.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Differencing.SummaryDiffMode.Summarize">
            <summary>
            The difference view is summarized, only showing lines that differ from the comparison file along with context lines.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Differencing.SummaryDiffMode.Expand">
            <summary>
            The difference view is expanded, showing all lines whether they differ from comparison files or not.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Differencing.DifferenceViewerRoles">
            <summary>
            The text view roles associated with an <see cref="T:Microsoft.VisualStudio.Text.Differencing.IDifferenceViewer" />.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Differencing.DifferenceViewerRoles.DiffTextViewRole">
            <summary>
            The text view role for any view owned by an <see cref="T:Microsoft.VisualStudio.Text.Differencing.IDifferenceViewer" /> when the underlying difference buffer will never have a null <see cref="P:Microsoft.VisualStudio.Text.Differencing.IDifferenceBuffer.BaseLeftBuffer" />.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Differencing.DifferenceViewerRoles.LeftViewTextViewRole">
            <summary>
            The text view role for the <see cref="P:Microsoft.VisualStudio.Text.Differencing.IDifferenceViewer.LeftView" /> when the underlying difference buffer will never have a null <see cref="P:Microsoft.VisualStudio.Text.Differencing.IDifferenceBuffer.BaseLeftBuffer" />.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Differencing.DifferenceViewerRoles.RightViewTextViewRole">
            <summary>
            The text view role for the <see cref="P:Microsoft.VisualStudio.Text.Differencing.IDifferenceViewer.RightView" /> when the underlying difference buffer will never have a null <see cref="P:Microsoft.VisualStudio.Text.Differencing.IDifferenceBuffer.BaseLeftBuffer" />.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Differencing.DifferenceViewerRoles.InlineViewTextViewRole">
            <summary>
            The text view role for the <see cref="P:Microsoft.VisualStudio.Text.Differencing.IDifferenceViewer.InlineView" /> when the underlying difference buffer will never have a null <see cref="P:Microsoft.VisualStudio.Text.Differencing.IDifferenceBuffer.BaseLeftBuffer" />.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Differencing.DifferenceViewerRoles.UbiquitousDiffTextViewRole">
            <summary>
            The text view role for any view owned by an <see cref="T:Microsoft.VisualStudio.Text.Differencing.IDifferenceViewer" /> when the underlying difference buffer supports a null <see cref="P:Microsoft.VisualStudio.Text.Differencing.IDifferenceBuffer.BaseLeftBuffer" />.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Differencing.DifferenceViewerRoles.UbiquitousLeftViewTextViewRole">
            <summary>
            The text view role for the <see cref="P:Microsoft.VisualStudio.Text.Differencing.IDifferenceViewer.LeftView" /> when the underlying difference buffer supports a null <see cref="P:Microsoft.VisualStudio.Text.Differencing.IDifferenceBuffer.BaseLeftBuffer" />.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Differencing.DifferenceViewerRoles.UbiquitousRightViewTextViewRole">
            <summary>
            The text view role for the <see cref="P:Microsoft.VisualStudio.Text.Differencing.IDifferenceViewer.RightView" /> when the underlying difference buffer supports a null <see cref="P:Microsoft.VisualStudio.Text.Differencing.IDifferenceBuffer.BaseLeftBuffer" />.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Differencing.DifferenceViewerRoles.UbiquitousInlineViewTextViewRole">
            <summary>
            The text view role for the <see cref="P:Microsoft.VisualStudio.Text.Differencing.IDifferenceViewer.InlineView" /> when the underlying difference buffer supports a null <see cref="P:Microsoft.VisualStudio.Text.Differencing.IDifferenceBuffer.BaseLeftBuffer" />.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Differencing.DifferenceViewMode">
            <summary>
            The view mode for an <see cref="T:Microsoft.VisualStudio.Text.Differencing.IDifferenceViewer" />.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Differencing.DifferenceViewMode.Inline">
            <summary>
            View differences inline, mixing the removed and added regions in one view pane.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Differencing.DifferenceViewMode.LeftViewOnly">
            <summary>
            Show only the left file.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Differencing.DifferenceViewMode.RightViewOnly">
            <summary>
            Show only the right file.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Differencing.DifferenceViewMode.SideBySide">
            <summary>
            View differences side-by-side, where the left pane is the left file and the right pane is the right file.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Differencing.DifferenceViewType">
            <summary>
            The view type for a view created by an <see cref="T:Microsoft.VisualStudio.Text.Differencing.IDifferenceViewer" />.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Differencing.DifferenceViewType.InlineView">
            <summary>
            View displaying the contents of the inline buffer (which is combines text from the left and right buffers).
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Differencing.DifferenceViewType.LeftView">
            <summary>
            View containing the contents of the left buffer.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Differencing.DifferenceViewType.RightView">
            <summary>
            View containing the contents of the right buffer.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Differencing.IDifferenceViewer">
            <summary>
            A difference viewer is a container for viewing an <see cref="T:Microsoft.VisualStudio.Text.Differencing.IDifferenceBuffer" /> in an inline or side-by-side
            mode.  It keeps the scroll state of the different views in sync, and provides helpers for scrolling to differences
            and matches in all views.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Differencing.IDifferenceViewer.DifferenceBuffer">
            <summary>
            The <see cref="T:Microsoft.VisualStudio.Text.Differencing.IDifferenceBuffer" /> that this viewer is displaying.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Differencing.IDifferenceViewer.InlineView">
            <summary>
            The view for displaying <see cref="F:Microsoft.VisualStudio.Text.Differencing.DifferenceViewMode.Inline" /> differences.
            </summary>
            <remarks>Will never be <c>null</c>, but will only be visible when <see cref="P:Microsoft.VisualStudio.Text.Differencing.IDifferenceViewer.ViewMode" />
            is set to <see cref="F:Microsoft.VisualStudio.Text.Differencing.DifferenceViewMode.Inline" />.</remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Differencing.IDifferenceViewer.LeftView">
            <summary>
            The view for displaying the left buffer for <see cref="F:Microsoft.VisualStudio.Text.Differencing.DifferenceViewMode.SideBySide" /> differences.
            </summary>
            <remarks>Will never be <c>null</c>, but will only be visible when <see cref="P:Microsoft.VisualStudio.Text.Differencing.IDifferenceViewer.ViewMode" />
            is set to <see cref="F:Microsoft.VisualStudio.Text.Differencing.DifferenceViewMode.SideBySide" />.</remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Differencing.IDifferenceViewer.RightView">
            <summary>
            The view for displaying the right buffer for <see cref="F:Microsoft.VisualStudio.Text.Differencing.DifferenceViewMode.SideBySide" /> differences.
            </summary>
            <remarks>Will never be <c>null</c>, but will only be visible when <see cref="P:Microsoft.VisualStudio.Text.Differencing.IDifferenceViewer.ViewMode" />
            is set to <see cref="F:Microsoft.VisualStudio.Text.Differencing.DifferenceViewMode.SideBySide" />.</remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Differencing.IDifferenceViewer.ViewMode">
            <summary>
            The view mode (inline or side-by-side).
            </summary>
        </member>
        <member name="E:Microsoft.VisualStudio.Text.Differencing.IDifferenceViewer.ViewModeChanged">
            <summary>
            Raised when the <see cref="P:Microsoft.VisualStudio.Text.Differencing.IDifferenceViewer.ViewMode" /> changes.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Differencing.IDifferenceViewer.ActiveViewType">
            <summary>
            Identifies the active view that last had focus.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Differencing.IDifferenceViewer.Options">
            <summary>
            Used to get or set general difference viewer options (<see cref="T:Microsoft.VisualStudio.Text.Differencing.DifferenceViewerOptions" />).
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Differencing.IDifferenceViewer.AreViewsSynchronized">
            <summary>
            Are the left and right views are synchronized in the side by side view.
            </summary>
            <remarks>
            <para>In the side by side view, the left and right views are, normally, synchronized so that so that matching text always shown in each view.
            If this synchronization is turned off, then each view will scroll independently.</para>
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Differencing.IDifferenceViewer.Close">
            <summary>
            Close the viewer and all contained hosts.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Differencing.IDifferenceViewer.IsClosed">
            <summary>
            Determine if this viewer is closed.
            </summary>
        </member>
        <member name="E:Microsoft.VisualStudio.Text.Differencing.IDifferenceViewer.Closed">
            <summary>
            Raised when the view is closed.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Differencing.IDifferenceViewer.ScrollToNextChange(System.Boolean)">
            <summary>
            Given the cursor position in the last focused text view, scroll and move the caret to the next difference.
            </summary>
            <param name="wrap">Wrap to the first difference if there is no next difference.</param>
            <returns><c>true</c> on success (if there was a next difference), <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Differencing.IDifferenceViewer.ScrollToNextChange(Microsoft.VisualStudio.Text.SnapshotPoint,System.Boolean)">
            <summary>
            Scroll and move the caret to the next difference after the specified location.
            </summary>
            <param name="point">Location to start scrolling from.</param>
            <param name="wrap">Wrap to the first difference if there is no next difference.</param>
            <returns><c>true</c> on success (if there was a next difference), <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Differencing.IDifferenceViewer.ScrollToPreviousChange(System.Boolean)">
            <summary>
            Given the cursor position in the last focused text view, scroll and move the caret to the previous difference.
            </summary>
            <param name="wrap">Wrap to the last difference if there is no previous difference.</param>
            <returns><c>true</c> on success (if there was a previous difference), <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Differencing.IDifferenceViewer.ScrollToPreviousChange(Microsoft.VisualStudio.Text.SnapshotPoint,System.Boolean)">
            <summary>
            Scroll and move the caret to the previous difference before the specified location.
            </summary>
            <param name="point">Location to start scrolling from.</param>
            <param name="wrap">Wrap to the last difference if there is no previous difference.</param>
            <returns><c>true</c> on success (if there was a next difference), <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Differencing.IDifferenceViewer.ScrollToChange(Microsoft.VisualStudio.Text.Differencing.Difference)">
            <summary>
            Scroll and move the caret to the start of the given difference.
            </summary>
            <param name="difference">The difference to scroll to.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Differencing.IDifferenceViewer.ScrollToMatch(Microsoft.VisualStudio.Text.Differencing.Match)">
            <summary>
            Scroll and move the caret to the start of the given match.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Differencing.IDifferenceViewer2.RightViewExists">
            <summary>
            Does the right view exist?
            </summary>
            <remarks>
            Differences views are created lazily <see cref="P:Microsoft.VisualStudio.Text.Differencing.IDifferenceViewer.RightView" /> will create the view if it does not already exist.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Differencing.IDifferenceViewer2.LeftViewExists">
            <summary>
            Does the left view exist?
            </summary>
            <remarks>
            Differences views are created lazily <see cref="P:Microsoft.VisualStudio.Text.Differencing.IDifferenceViewer.LeftView" /> will create the view if it does not already exist.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Differencing.IDifferenceViewer2.InlineViewExists">
            <summary>
            Does the Inline view exist?
            </summary>
            <remarks>
            Differences views are created lazily <see cref="P:Microsoft.VisualStudio.Text.Differencing.IDifferenceViewer.InlineView" /> will create the view if it does not already exist.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Differencing.IDifferenceViewer3.DisplayDifferences">
            <summary>
            Should the differences be displayed?
            </summary>
            <remarks>
            <para>This will be true if and only if there is a baseline and if the <see cref="F:Microsoft.VisualStudio.Text.Differencing.DifferenceViewerOptions.ShowDifferencesId" /> option is true.</para>
            <para><see cref="E:Microsoft.VisualStudio.Text.Differencing.IDifferenceViewer.ViewModeChanged" /> will be raised whenever this value changes.</para>
            </remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Differencing.IDifferenceViewerTextViewModel">
            <summary>
            A <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextViewModel" /> used by <see cref="T:Microsoft.VisualStudio.Text.Differencing.IDifferenceViewer" />.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Differencing.IDifferenceViewerTextViewModel.ViewType">
            <summary>
            The view type for a view created by an <see cref="T:Microsoft.VisualStudio.Text.Differencing.IDifferenceViewer" />.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Differencing.IDifferenceViewerTextViewModel.CurrentSnapshotDifference">
            <summary>
            The currently-used snapshot difference that matches up with the current snapshot
            of the inline buffer.
            </summary>
            <remarks>Will be <c>null</c> before the first snapshot difference is computed.</remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Differencing.IDifferenceViewerTextViewModel.AreViewsSynchronized">
            <summary>
            Are the left and right views are synchronized in the side by side view.
            </summary>
            <remarks>
            <para>In the side by side view, the left and right views are, normally, synchronized so that so that matching text always shown in each view.
            If this synchronization is turned off, then each view will scroll independently.</para>
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Differencing.IDifferenceViewerTextViewModel.LeftView">
            <summary>
            The view for displaying the left buffer for <see cref="F:Microsoft.VisualStudio.Text.Differencing.DifferenceViewMode.SideBySide" /> differences.
            </summary>
            <remarks>Will never be <c>null</c>, but will only be visible when view mode
            is set to <see cref="F:Microsoft.VisualStudio.Text.Differencing.DifferenceViewMode.SideBySide" />.</remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Differencing.IDifferenceViewerTextViewModel.RightView">
            <summary>
            The view for displaying the right buffer for <see cref="F:Microsoft.VisualStudio.Text.Differencing.DifferenceViewMode.SideBySide" /> differences.
            </summary>
            <remarks>Will never be <c>null</c>, but will only be visible when view mode
            is set to <see cref="F:Microsoft.VisualStudio.Text.Differencing.DifferenceViewMode.SideBySide" />.</remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.IncrementalSearch.IIncrementalSearch">
            <summary>
            Defines an incremental search operation. 
            </summary>
            <remarks>
            <para>
            The <see cref="T:Microsoft.VisualStudio.Text.IncrementalSearch.IIncrementalSearch" /> interface is associated
            with a <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView" />.
            </para>
            <para>
            After the Start() method is called, the current caret position is marked as the start of the search, 
            and the <see cref="M:Microsoft.VisualStudio.Text.IncrementalSearch.IIncrementalSearch.AppendCharAndSearch(System.Char)" /> and <see cref="M:Microsoft.VisualStudio.Text.IncrementalSearch.IIncrementalSearch.DeleteCharAndSearch" /> operations can be used to change the search term. 
            The direction of the search is set to forward by default, although this setting can be changed with the <see cref="P:Microsoft.VisualStudio.Text.IncrementalSearch.IIncrementalSearch.SearchDirection" /> property.
            If a matching term is found, it is selected and the caret is moved to the end of the selected word. 
            </para>
            <para>
            Every search operation returns an <see cref="T:Microsoft.VisualStudio.Text.IncrementalSearch.IncrementalSearchResult" />, which includes 
            information about the search, such as whether the search looped around the start or 
            end of the buffer, whether the search looped around the starting position of the search,
            and whether the item was found. It is the responsibility of the caller
            to pass this information to the end user.
            </para>
            <para>
            Incremental search performs its search on the text snapshot of the <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView" />. As a result, if the
            result falls within a collapsed outlining region, the region will be expanded before the result is selected.
            </para>
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.IncrementalSearch.IIncrementalSearch.Start">
            <summary>
            Starts an incremental search operation, and marks the position of the caret
            as the starting position for the search.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            An incremental search session is in progress.
            To avoid raising this exception, check the <see cref="P:Microsoft.VisualStudio.Text.IncrementalSearch.IIncrementalSearch.IsActive" /> property before calling
            <c>Start</c>.
            </exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.IncrementalSearch.IIncrementalSearch.Dismiss">
            <summary>
            Terminates an incremental search operation.
            </summary>
            <exception creg="System.InvalidOperationException">
            <see cref="M:Microsoft.VisualStudio.Text.IncrementalSearch.IIncrementalSearch.Dismiss" /> was called before <see cref="M:Microsoft.VisualStudio.Text.IncrementalSearch.IIncrementalSearch.Start" />. A search must be
            started before it can be terminated.
            </exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.IncrementalSearch.IIncrementalSearch.AppendCharAndSearch(System.Char)">
            <summary>
            Extends the current term being searched for by one character. If a new term is matched, it 
            is selected. The selection can be used to access the match.
            </summary>
            <param name="toAppend">
            The character to append to the current search term.
            </param>
            <returns>
            An <see cref="T:Microsoft.VisualStudio.Text.IncrementalSearch.IncrementalSearchResult" /> that contains information about whether the search term was found and whether
            the search wrapped around the beginning or end of the buffer.
            </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.IncrementalSearch.IIncrementalSearch.DeleteCharAndSearch">
            <summary>
            Removes the last character of the current search term and updates the
            search results based on the new term. 
            </summary>
            <returns>
            An <see cref="T:Microsoft.VisualStudio.Text.IncrementalSearch.IncrementalSearchResult" /> that indicates whether the new search term was found
            and whether the search wrapped around the beginning or end of 
            the buffer.
            </returns>
            <exception cref="T:System.InvalidOperationException">
            The search string is empty. To avoid this exception,
            check the <see cref="P:Microsoft.VisualStudio.Text.IncrementalSearch.IIncrementalSearch.SearchString" /> property before calling this method.
            </exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.IncrementalSearch.IIncrementalSearch.SelectNextResult">
            <summary>
            Selects the next result in an incremental search operation. 
            The matched term will be selected.
            </summary>
            <returns>
            An <see cref="T:Microsoft.VisualStudio.Text.IncrementalSearch.IncrementalSearchResult" /> indicating whether the newly selected item caused a
            wrap around the end or beginning of the document and whether the search looped around the first item found.
            </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.IncrementalSearch.IIncrementalSearch.Clear">
            <summary>
            Clears the existing search term without changing the selection.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.IncrementalSearch.IIncrementalSearch.SearchString">
            <summary>
            Gets or sets the current search term.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.IncrementalSearch.IIncrementalSearch.IsActive">
            <summary>
            Determines whether an incremental search is in process.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.IncrementalSearch.IIncrementalSearch.SearchDirection">
            <summary>
            Gets or sets the direction of the incremental search.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.IncrementalSearch.IIncrementalSearch.TextView">
            <summary>
            Gets the <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView" /> associated with this search.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.IncrementalSearch.IIncrementalSearchFactoryService">
            <summary>
            Used to get or create an incremental search service for a given <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView" />.
            There will always be a maximum of one <see cref="T:Microsoft.VisualStudio.Text.IncrementalSearch.IIncrementalSearch" />
            for a given <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView" />.
            </summary>
            <remarks>This is a MEF component part, and should be imported as follows:
            [Import]
            IIncrementalSearchFactoryService factory = null;
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.IncrementalSearch.IIncrementalSearchFactoryService.GetIncrementalSearch(Microsoft.VisualStudio.Text.Editor.ITextView)">
            <summary>
            Gets an <see cref="T:Microsoft.VisualStudio.Text.IncrementalSearch.IIncrementalSearch" /> for the specified <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView" />.
            If there is no <see cref="T:Microsoft.VisualStudio.Text.IncrementalSearch.IIncrementalSearch" /> for the view, one
            will be created.
            </summary>
            <param name="textView">
            The <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView" /> over which the incremental search is to be performed.
            </param>
            <returns>
            An <see cref="T:Microsoft.VisualStudio.Text.IncrementalSearch.IIncrementalSearch" /> associated with the <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView" />.
            </returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.IncrementalSearch.IncrementalSearchDirection">
            <summary>
            Determines the direction of the incremental search.
            See <see cref="T:Microsoft.VisualStudio.Text.IncrementalSearch.IIncrementalSearch" /> for more information.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.IncrementalSearch.IncrementalSearchDirection.Forward">
            <summary>
            Forward search.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.IncrementalSearch.IncrementalSearchDirection.Backward">
             <summary>
            Backward search.
             </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.IncrementalSearch.IncrementalSearchResult">
            <summary>
            Consolidates the result of an incremental search operation.
            </summary>
            <remarks>
            This result indicates whether the item was found, whether the search
            caused the cursor to wrap around the beginning or end of the buffer, and
            the position of the first result.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.IncrementalSearch.IncrementalSearchResult.PassedStartOfBuffer">
            <summary>
            Determines whether the search wrapped around the start of the buffer to its end.
            </summary>
            <remarks>This is applicable only if the search direction is backward.</remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.IncrementalSearch.IncrementalSearchResult.PassedEndOfBuffer">
            <summary>
            Determines whether the search wrapped around the end of the buffer to its beginning.
            </summary>
            <remarks>This is applicable only if the search direction is forward.</remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.IncrementalSearch.IncrementalSearchResult.PassedStartOfSearch">
            <summary>
            Determines whether the search passed the first item found.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.IncrementalSearch.IncrementalSearchResult.ResultFound">
            <summary>
            Determines whether the search for the term was successful.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.IncrementalSearch.IncrementalSearchResult.#ctor(System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of <see cref="T:Microsoft.VisualStudio.Text.IncrementalSearch.IncrementalSearchResult" /> with the specified properties.
            </summary>
            <param name="passedEndOfBuffer"></param>
            <param name="passedStartOfBuffer"></param>
            <param name="passedStartOfSearch"></param>
            <param name="resultFound"></param>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.IncrementalSearch.IncrementalSearchResult.Equals(System.Object)">
            <summary>
            Determines whether the contents of two <see cref="T:Microsoft.VisualStudio.Text.IncrementalSearch.IncrementalSearchResult" /> objects are the same.
            </summary>
            <param name="obj">The object to be compared.</param>
            <returns><c>true</c> if both objects have the same content, otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.IncrementalSearch.IncrementalSearchResult.op_Equality(Microsoft.VisualStudio.Text.IncrementalSearch.IncrementalSearchResult,Microsoft.VisualStudio.Text.IncrementalSearch.IncrementalSearchResult)">
            <summary>
            Determines whether the contents of two <see cref="T:Microsoft.VisualStudio.Text.IncrementalSearch.IncrementalSearchResult" /> objects are the same.
            </summary>
            <returns><c>true</c> if both objects have the same content, otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.IncrementalSearch.IncrementalSearchResult.op_Inequality(Microsoft.VisualStudio.Text.IncrementalSearch.IncrementalSearchResult,Microsoft.VisualStudio.Text.IncrementalSearch.IncrementalSearchResult)">
            <summary>
            Determines whether the contents of two <see cref="T:Microsoft.VisualStudio.Text.IncrementalSearch.IncrementalSearchResult" /> objects are different.
            </summary>
            <returns><c>true</c> if both objects have different content, otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.IncrementalSearch.IncrementalSearchResult.GetHashCode">
            <summary>
            Gets the hash code for the object.
            </summary>
            <returns>base class' implementation</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Formatting.IAdornmentElement">
            <summary>
            Represents a sequence element that consists of an adornment.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Formatting.IAdornmentElement.Width">
            <summary>
            Gets the width of the adornment (in logical pixels).
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Formatting.IAdornmentElement.TopSpace">
            <summary>
            Gets the amount of space (in logical pixels) to reserve above top of the text for the <see cref="T:Microsoft.VisualStudio.Text.Formatting.ITextViewLine" />.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Formatting.IAdornmentElement.Baseline">
            <summary>
            The distance (in logical pixel)s between the top of the adornment text and the baseline of the
            <see cref="T:Microsoft.VisualStudio.Text.Formatting.ITextViewLine" />.
            </summary>
            <remarks><para>This property should be equal to <see cref="P:Microsoft.VisualStudio.Text.Formatting.IAdornmentElement.TextHeight" /> unless you plan to draw into the space between the baseline of
            <see cref="T:Microsoft.VisualStudio.Text.Formatting.ITextViewLine" /> and its TextBottom.</para>
            <para>The size of the baseline affects the amount of space reserved for text on an <see cref="T:Microsoft.VisualStudio.Text.Formatting.ITextViewLine" />, which is used to
            determine the vertical size of the caret.</para>
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Formatting.IAdornmentElement.TextHeight">
            <summary>
            Gets the height of the adornment text. 
            </summary>
            <remarks><para>This affects the amount of space reserved for text on an <see cref="T:Microsoft.VisualStudio.Text.Formatting.ITextViewLine" />, which is used to
            determine the vertical size of the caret.</para></remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Formatting.IAdornmentElement.BottomSpace">
            <summary>
            The amount of space (in logical pixels) to reserve below the bottom of the text in the <see cref="T:Microsoft.VisualStudio.Text.Formatting.ITextViewLine" />.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Formatting.IAdornmentElement.IdentityTag">
            <summary>
            Gets the unique identifier associated with this adornment.
            </summary>
            <remarks>This ID can be passed to <see cref="T:Microsoft.VisualStudio.Text.Formatting.ITextViewLine" />.GetAdornmentBounds() to find the location
            of this adornment on a line in the view.</remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Formatting.IAdornmentElement.ProviderTag">
            <summary>
            Gets the unique identifier associated with the provider of the adornment.
            </summary>
            <remarks>This ID can be passed to <see cref="M:Microsoft.VisualStudio.Text.Formatting.ITextViewLine.GetAdornmentTags(System.Object)" /> to find the list
            off adornment identity tags located on the line.</remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Formatting.IAdornmentElement.Affinity">
            <summary>
            Gets the <see cref="T:Microsoft.VisualStudio.Text.PositionAffinity" /> of the adornment.
            </summary>
            <remarks>This is used only when the length of the adornment element span in the source buffer is zero.</remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Formatting.ISequenceElement">
            <summary>
            Represents the basic element in a sequence of elements that compose an <see cref="T:Microsoft.VisualStudio.Text.Formatting.ITextViewLine" />.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Formatting.ISequenceElement.Span">
            <summary>
            Gets the <see cref="T:Microsoft.VisualStudio.Text.IMappingSpan" /> of the element.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Formatting.ISequenceElement.ShouldRenderText">
            <summary>
            Determines whether the text in the span should be rendered in the <see cref="T:Microsoft.VisualStudio.Text.Formatting.ITextViewLine" />.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Formatting.ITextAndAdornmentCollection">
            <summary>
            Represents a list of <see cref="T:Microsoft.VisualStudio.Text.Formatting.ISequenceElement" /> objects generated by the <see cref="T:Microsoft.VisualStudio.Text.Formatting.ITextAndAdornmentSequencer" />.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Formatting.ITextAndAdornmentCollection.Sequencer">
            <summary>
            Gets the <see cref="T:Microsoft.VisualStudio.Text.Formatting.ITextAndAdornmentSequencer" /> that generated the collection.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Formatting.ITextAndAdornmentSequencer">
            <summary>
            Creates a sequence of text and adornment elements to compose an <see cref="T:Microsoft.VisualStudio.Text.ITextSnapshotLine" />.  
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Formatting.ITextAndAdornmentSequencer.BufferGraph">
            <summary>
            Gets the <see cref="T:Microsoft.VisualStudio.Text.Projection.IBufferGraph" /> used by the sequencer.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Formatting.ITextAndAdornmentSequencer.TopBuffer">
            <summary>
            Gets the visual <see cref="T:Microsoft.VisualStudio.Text.ITextBuffer" /> of the buffer graph.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Formatting.ITextAndAdornmentSequencer.SourceBuffer">
            <summary>
            Gets the edit buffer of the buffer graph.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Formatting.ITextAndAdornmentSequencer.CreateTextAndAdornmentCollection(Microsoft.VisualStudio.Text.ITextSnapshotLine,Microsoft.VisualStudio.Text.ITextSnapshot)">
            <summary>
            Creates a sequence of text and adornment elements that compose the specified <see cref="T:Microsoft.VisualStudio.Text.ITextSnapshotLine" />.
            </summary>
            <param name="topLine">The <see cref="T:Microsoft.VisualStudio.Text.ITextSnapshotLine" /> in the <see cref="P:Microsoft.VisualStudio.Text.Formatting.ITextAndAdornmentSequencer.TopBuffer" /> to sequence.</param>
            <param name="sourceTextSnapshot">The <see cref="T:Microsoft.VisualStudio.Text.ITextSnapshot" /> of the <see cref="P:Microsoft.VisualStudio.Text.Formatting.ITextAndAdornmentSequencer.SourceBuffer" /> that corresponds to topLine.</param>
            <returns>A normalized collection of <see cref="T:Microsoft.VisualStudio.Text.Formatting.ISequenceElement" /> objects that contain the text and adornment elements.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Formatting.ITextAndAdornmentSequencer.CreateTextAndAdornmentCollection(Microsoft.VisualStudio.Text.SnapshotSpan,Microsoft.VisualStudio.Text.ITextSnapshot)">
            <summary>
            Creates a sequence of text and adornment elements that compose the specified <see cref="T:Microsoft.VisualStudio.Text.SnapshotSpan" />.
            </summary>
            <param name="topSpan">The <see cref="T:Microsoft.VisualStudio.Text.SnapshotSpan" /> in the <see cref="P:Microsoft.VisualStudio.Text.Formatting.ITextAndAdornmentSequencer.TopBuffer" /> to sequence.</param>
            <param name="sourceTextSnapshot">The <see cref="T:Microsoft.VisualStudio.Text.ITextSnapshot" /> of the <see cref="P:Microsoft.VisualStudio.Text.Formatting.ITextAndAdornmentSequencer.SourceBuffer" /> that corresponds to topSpan.</param>
            <returns>A normalized collection of <see cref="T:Microsoft.VisualStudio.Text.Formatting.ISequenceElement" /> objects that contain the text and adornment elements.</returns>
        </member>
        <member name="E:Microsoft.VisualStudio.Text.Formatting.ITextAndAdornmentSequencer.SequenceChanged">
            <summary>
            Occurs when there has been a change in the data used by the sequencer.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Formatting.ITextAndAdornmentSequencerFactoryService">
            <summary>
            Service to create an instance of an <see cref="T:Microsoft.VisualStudio.Text.Formatting.ITextAndAdornmentSequencer" />.
            </summary>
            <remarks>This is a MEF component part, and should be imported as follows:
            [Import]
            ITextAndAdornmentSequencerFactoryService factory = null;
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Formatting.ITextAndAdornmentSequencerFactoryService.Create(Microsoft.VisualStudio.Text.Editor.ITextView)">
            <summary>
            Creates an <see cref="T:Microsoft.VisualStudio.Text.Formatting.ITextAndAdornmentSequencer" /> for the specified <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView" />.
            </summary>
            <param name="view">The <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView" />.</param>
            <returns>The <see cref="T:Microsoft.VisualStudio.Text.Formatting.ITextAndAdornmentSequencer" />.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Formatting.ITextAndAdornmentSequencerInternal">
            <summary>
            Creates a sequence of text and adornment elements to compose an <see cref="T:Microsoft.VisualStudio.Text.ITextSnapshotLine" />.  
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Formatting.ITextAndAdornmentSequencerInternal.CreateTextAndAdornmentCollection(Microsoft.VisualStudio.Text.TextSnapshotLineData,Microsoft.VisualStudio.Text.ITextSnapshot)">
            <summary>
            Creates a sequence of text and adornment elements that compose the specified <see cref="T:Microsoft.VisualStudio.Text.ITextSnapshotLine" />.
            </summary>
            <param name="topLine">The <see cref="T:Microsoft.VisualStudio.Text.TextSnapshotLineData" /> in the TopBuffer to sequence.</param>
            <param name="sourceTextSnapshot">The <see cref="T:Microsoft.VisualStudio.Text.ITextSnapshot" /> of the SourceBuffer that corresponds to topLine.</param>
            <returns>A normalized collection of <see cref="T:Microsoft.VisualStudio.Text.Formatting.ISequenceElement" /> objects that contain the text and adornment elements.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Formatting.ITextViewLine">
            <summary>
            Represents text that has been formatted for display in a text view.
            </summary>
            <remarks>
            <para>Most properties and parameters that are doubles correspond to coordinates or distances in the text
            rendering coordinate system. In this coordinate system, x = 0.0 corresponds to the left edge of the drawing
            surface onto which text is rendered (x = view.ViewportLeft corresponds to the left edge of the viewport), and y = view.ViewportTop corresponds to the top edge of the viewport. The x-coordinate increases
            from left to right, and the y-coordinate increases from top to bottom. </para>
            <para>The horizontal and vertical axes of the view behave differently. When the text in the view is
            formatted, only the visible lines are formatted. As a result,
            a viewport cannot be scrolled horizontally and vertically in the same way.</para>
            <para>A viewport is scrolled horizontally by changing the left coordinate of the
            viewport so that it moves with respect to the drawing surface.</para>
            <para>A view can be scrolled vertically only by performing a new layout.</para>
            <para>Doing a layout in the view may cause the ViewportTop property of the view to change. For example, scrolling down one line will not translate any of the visible lines.
            Instead it will simply change the view's ViewportTop property (causing the lines to move on the screen even though their y-coordinates have not changed).</para>
            <para>Distances in the text rendering coordinate system correspond to logical pixels. If the text rendering
            surface is displayed without any scaling transform, then 1 unit in the text rendering coordinate system
            corresponds to one pixel on the display.</para>
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Formatting.ITextViewLine.GetBufferPositionFromXCoordinate(System.Double,System.Boolean)">
            <summary>
            Gets the buffer position of the character whose character bounds contains the given x-coordinate.
            </summary>
            <param name="xCoordinate">The x-coordinate of the desired character.</param>
            <param name="textOnly">If true, then this method will return null if <paramref name="xCoordinate" /> is over an adornment.</param>
            <returns>The text buffer-based point of the character at x, or null if there is no character at that position.</returns>
            <remarks>
            <para>
            Please note that the rightmost edge of a character bound is considered to be contained in its following character.
            </para>
            <para>
            The rightmost edge of the last character's bounds don't map to any character.
            </para>
            <para>
            If <paramref name="textOnly" /> is true and <paramref name="xCoordinate" /> is over an adornment, then the text position assoicated with the adornment is returned.
            </para>
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Formatting.ITextViewLine.GetBufferPositionFromXCoordinate(System.Double)">
            <summary>
            Gets the buffer position of the character whose character bounds contains the given x-coordinate.
            </summary>
            <param name="xCoordinate">The x-coordinate of the desired character.</param>
            <returns>The text buffer-based point of the character at x, or null if there is no character at that position.</returns>
            <remarks>
            <para>
            This is equivalent to GetBufferPositionFromXCoordinate(xCoordinate, false).
            </para>
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Formatting.ITextViewLine.GetVirtualBufferPositionFromXCoordinate(System.Double)">
            <summary>
            Gets the buffer position of the character whose character bounds contains the given x-coordinate.
            </summary>
            <param name="xCoordinate">The x-coordinate of the desired character.</param>
            <returns>The text buffer-based point of the character at x</returns>
            <remarks>
            <para>
            If there are no characters at the provided x-coordinate, a point in virtual space will be returned.
            </para>
            <para>
            If the provided x-coordinate is to the left of the start of the line, the buffer position of the line's
            left edge will be returned.
            </para>
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Formatting.ITextViewLine.GetInsertionBufferPositionFromXCoordinate(System.Double)">
            <summary>
            Gets the buffer position used if new data were to be inserted at the given x-coordinate.
            </summary>
            <param name="xCoordinate">The x-coordinate of the desired point.</param>
            <remarks>
            <para>
            If there are no characters at the provided x-coordinate, a point in virtual space will be returned.
            </para>
            <para>
            If the provided x-coordinate is to the left of the start of the line, the buffer position of the line's
            left edge will be returned.
            </para>
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Formatting.ITextViewLine.ContainsBufferPosition(Microsoft.VisualStudio.Text.SnapshotPoint)">
            <summary>
            Determines whether the specified buffer position lies within this text line.
            </summary>
            <param name="bufferPosition">The buffer position.</param>
            <returns><c>true</c> if <paramref name="bufferPosition" /> lies within this text line, otherwise <c>false</c>.</returns>
            <remarks>
            This method handles the special processing required for the last line of the buffer.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Formatting.ITextViewLine.GetTextElementSpan(Microsoft.VisualStudio.Text.SnapshotPoint)">
            <summary>
            Gets the span whose text elementindex corresponds to the given buffer position.
            </summary>
            <param name="bufferPosition">The buffer position.</param>
            <returns>The <see cref="T:Microsoft.VisualStudio.Text.SnapshotSpan" /> that corresponds to the given text element.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Formatting.ITextViewLine.GetCharacterBounds(Microsoft.VisualStudio.Text.SnapshotPoint)">
            <summary>
            Calculates the bounds of the character at the specified buffer position.
            </summary>
            <param name="bufferPosition">
            The text buffer-based index of the character.
            </param>
            <returns>
            A <see cref="T:Microsoft.VisualStudio.Text.Formatting.TextBounds" /> structure.
            </returns>
            <remarks>Bi-directional text will have a leading edge that lies to the right of its trailing edge.</remarks>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="bufferPosition" /> does not correspond to a position on this line.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Formatting.ITextViewLine.GetCharacterBounds(Microsoft.VisualStudio.Text.VirtualSnapshotPoint)">
            <summary>
            Calculates the bounds of the character at the specified buffer position.
            </summary>
            <param name="bufferPosition">
            The text buffer-based index of the character.
            </param>
            <returns>
            A <see cref="T:Microsoft.VisualStudio.Text.Formatting.TextBounds" /> structure.
            </returns>
            <remarks>Bi-directional text will have a leading edge that lies to the right of its trailing edge.</remarks>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="bufferPosition" /> does not correspond to a position on this line.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Formatting.ITextViewLine.GetExtendedCharacterBounds(Microsoft.VisualStudio.Text.SnapshotPoint)">
            <summary>
            Calculates the bounds of the character at the specified buffer position, including any adjacent
            space-negotiating adornments.
            </summary>
            <param name="bufferPosition">
            The text buffer-based index of the character.
            </param>
            <returns>
            A <see cref="T:Microsoft.VisualStudio.Text.Formatting.TextBounds" /> structure.
            </returns>
            <remarks>Bi-directional text will have a leading edge that lies to the right of its trailing edge.</remarks>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="bufferPosition" /> does not correspond to a position on this line.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Formatting.ITextViewLine.GetExtendedCharacterBounds(Microsoft.VisualStudio.Text.VirtualSnapshotPoint)">
            <summary>
            Calculates the bounds of the character at the specified virtual buffer position, including any adjacent
            space-negotiating adornments.
            </summary>
            <param name="bufferPosition">
            The text buffer-based index of the character.
            </param>
            <returns>
            A <see cref="T:Microsoft.VisualStudio.Text.Formatting.TextBounds" /> structure.
            </returns>
            <remarks>Bi-directional text will have a leading edge that lies to the right of its trailing edge.</remarks>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="bufferPosition" /> does not correspond to a position on this line.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Formatting.ITextViewLine.GetAdornmentBounds(System.Object)">
            <summary>
            Calculates the bounds of the specified adornment.
            </summary>
            <param name="identityTag">
            The <c>IAdornmentElement.IdentityTag</c> of the adornment whose bounds should be calculated.
            </param>
            <returns>
            A <see cref="T:Microsoft.VisualStudio.Text.Formatting.TextBounds" /> structure if this line contains an adornment with the specified <paramref name="identityTag" />,
            otherwise null.
            </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Formatting.ITextViewLine.GetNormalizedTextBounds(Microsoft.VisualStudio.Text.SnapshotSpan)">
            <summary>
            Gets a collection of <see cref="T:Microsoft.VisualStudio.Text.Formatting.TextBounds" /> structures for the text that corresponds to the given span.
            </summary>
            <param name="bufferSpan">
            The <see cref="T:Microsoft.VisualStudio.Text.SnapshotSpan" /> representing the text for which to compute the text bounds.
            </param>
            <returns>
            A collection of <see cref="T:Microsoft.VisualStudio.Text.Formatting.TextBounds" /> structures that contain the text specified in <paramref name="bufferSpan" />.
            </returns>
            <remarks>
            <para>
            If the line contains bidirectional text, the <see cref="T:Microsoft.VisualStudio.Text.Formatting.TextBounds" /> structures that are returned may be disjoint.
            </para>
            <para>
            The height and top of the bounds will correspond to the top and bottom of this <see cref="T:Microsoft.VisualStudio.Text.Formatting.ITextViewLine" />.
            </para>
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="bufferSpan" /> is not a legal span in the underlying text buffer.</exception>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Formatting.ITextViewLine.IdentityTag">
            <summary>
            Gets a tag that can be used to track the identity of an <see cref="T:Microsoft.VisualStudio.Text.Formatting.ITextViewLine" /> across layouts in the view.
            </summary>
            <remarks>
            <para>
            If an <see cref="T:Microsoft.VisualStudio.Text.Formatting.ITextViewLine" /> has the same identity tag as the <see cref="T:Microsoft.VisualStudio.Text.Formatting.ITextViewLine" /> from an earlier layout,
            then both text view lines correspond to the same text, even when the
            text has been moved without being modifed, or when the text view lines appear at different locations
            in the view.
            </para>
            <para>
            This property can be called even when the <see cref="T:Microsoft.VisualStudio.Text.Formatting.ITextViewLine" /> is invalid.
            </para>
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Formatting.ITextViewLine.IntersectsBufferSpan(Microsoft.VisualStudio.Text.SnapshotSpan)">
            <summary>
            Determines whether a <paramref name="bufferSpan" /> intersects this text line.
            </summary>
            <param name="bufferSpan">The buffer span.</param>
            <returns><c>true</c> if <paramref name="bufferSpan" /> intersects the text line, otherwise <c>false</c>.</returns>
            <remarks>
            This method handles the special processing required for the last line of the buffer.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Formatting.ITextViewLine.GetAdornmentTags(System.Object)">
            <summary>
            Gets the adornments positioned on the line.
            </summary>
            <param name="providerTag">The identity tag of the provider.
            This tag should match <c>SpaceNegotiatingAdornmentTag.ProviderTag</c>.</param>
            <returns>A sequence of adornment identity tags in order of their appearance on the line. The collection is always non-null but may be empty.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="providerTag " /> is null.</exception>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Formatting.ITextViewLine.Snapshot">
            <summary>
            Gets the <see cref="T:Microsoft.VisualStudio.Text.ITextSnapshot" /> on which this map is based.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Formatting.ITextViewLine.IsFirstTextViewLineForSnapshotLine">
            <summary>
            Determines whether this <see cref="T:Microsoft.VisualStudio.Text.Formatting.ITextViewLine" /> is the first line in the list of lines formatted for a particular
            <see cref="T:Microsoft.VisualStudio.Text.ITextSnapshotLine" />.
            </summary>
            <remarks>This property will always be <c>true</c> for lines that are not word-wrapped.</remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Formatting.ITextViewLine.IsLastTextViewLineForSnapshotLine">
            <summary>
            Determines whether this <see cref="T:Microsoft.VisualStudio.Text.Formatting.ITextViewLine" /> is the last line in the list of lines formatted for a particular
            <see cref="T:Microsoft.VisualStudio.Text.ITextSnapshotLine" />.
            </summary>
            <remarks>This property will always be <c>true</c> for lines that are not word-wrapped.</remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Formatting.ITextViewLine.Baseline">
            <summary>
            Gets the distance from the top of the text to the baseline text on the line.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Formatting.ITextViewLine.Extent">
            <summary>
            Gets the extent of the line, excluding any line break characters.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Formatting.ITextViewLine.ExtentAsMappingSpan">
            <summary>
            Gets the <see cref="T:Microsoft.VisualStudio.Text.IMappingSpan" /> that corresponds to the <see cref="P:Microsoft.VisualStudio.Text.Formatting.ITextViewLine.Extent" /> of the line.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Formatting.ITextViewLine.ExtentIncludingLineBreak">
            <summary>
            Gets the extent of the line, including any line break characters.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Formatting.ITextViewLine.ExtentIncludingLineBreakAsMappingSpan">
            <summary>
            Gets the <see cref="T:Microsoft.VisualStudio.Text.IMappingSpan" /> that corresponds to <see cref="P:Microsoft.VisualStudio.Text.Formatting.ITextViewLine.ExtentIncludingLineBreak" />.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Formatting.ITextViewLine.Start">
            <summary>
            Gets the position in <see cref="P:Microsoft.VisualStudio.Text.Formatting.ITextViewLine.Snapshot" /> of the first character in the line.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Formatting.ITextViewLine.Length">
            <summary>
            Gets the length of the line, excluding any line break characters.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Formatting.ITextViewLine.LengthIncludingLineBreak">
            <summary>
            Gets the length of the line, including any line break characters.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Formatting.ITextViewLine.End">
            <summary>
             Gets the position of the first character past the end of the line, excluding any
            line break characters. In most cases this property references a line break character, except 
            for the last line in the buffer, in which case it contains a
            position past the end of the buffer.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Formatting.ITextViewLine.EndIncludingLineBreak">
            <summary>
            Gets the position of the first character past the end of the line, including any
            line break characters In most cases this property references the first character in 
            the following line, unless this is the last line, in which case it contains a
            position past the end of the buffer.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Formatting.ITextViewLine.LineBreakLength">
            <summary>
            Gets the length of the line break sequence (for example, "\r\n") that appears at the end of this line.
            </summary>
            <value>A integer in the range [0..2].</value>
            <remarks>
            If this <see cref="T:Microsoft.VisualStudio.Text.Formatting.ITextViewLine" /> corresponds to a line that was word-wrapped, then the length of its
            line break will be zero. The length of the line break will also be zero for the last line in the buffer.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Formatting.ITextViewLine.Left">
            <summary>
            Gets the position of the left edge of this line in the text rendering coordinate system.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Formatting.ITextViewLine.Top">
            <summary>
            Gets the position of the top edge of this line in the text rendering coordinate system.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Formatting.ITextViewLine.Height">
            <summary>
            Gets the distance between the top and bottom edge of this line.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Formatting.ITextViewLine.TextTop">
            <summary>
            Gets the y-coordinate of the top of the text in the rendered line.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Formatting.ITextViewLine.TextBottom">
            <summary>
            Gets the y-coordinate of the bottom of the text in the rendered line.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Formatting.ITextViewLine.TextHeight">
            <summary>
            Gets the vertical distance between the top and bottom of the text in the rendered line.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Formatting.ITextViewLine.TextLeft">
            <summary>
            Gets the x-coordinate of the left edge of the text in the rendered line.
            </summary>
            <remarks>This will always be the same as <see cref="P:Microsoft.VisualStudio.Text.Formatting.ITextViewLine.Left" />.</remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Formatting.ITextViewLine.TextRight">
            <summary>
            Gets the x-coordinate of the right edge of the text in the rendered line.
            </summary>
            <remarks>This does not include the <see cref="P:Microsoft.VisualStudio.Text.Formatting.ITextViewLine.EndOfLineWidth" /> for lines that have a line break.</remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Formatting.ITextViewLine.TextWidth">
            <summary>
            Gets the horizontal distance between <see cref="P:Microsoft.VisualStudio.Text.Formatting.ITextViewLine.TextRight" /> and <see cref="P:Microsoft.VisualStudio.Text.Formatting.ITextViewLine.TextLeft" />.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Formatting.ITextViewLine.Width">
            <summary>
            Gets the distance between the left and right edges of this line.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Formatting.ITextViewLine.Bottom">
            <summary>
            Gets the position of the bottom edge of this line in the text rendering coordinate system.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Formatting.ITextViewLine.Right">
            <summary>
            Gets the position of the right edge of this line in the text rendering coordinate system.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Formatting.ITextViewLine.EndOfLineWidth">
            <summary>
            Gets the distance from the right edge of the last character in this line to
            the end of the space of this line. This may include padding for line break
            characters or for end of file characters.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Formatting.ITextViewLine.VirtualSpaceWidth">
            <summary>
            Get the width of the virtual spaces at the end of this line.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Formatting.ITextViewLine.IsValid">
            <summary>
            Determines whether this text view line is still valid.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Formatting.ITextViewLine.LineTransform">
            <summary>
            Gets the <see cref="P:Microsoft.VisualStudio.Text.Formatting.ITextViewLine.LineTransform" /> used to render this line.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Formatting.ITextViewLine.DefaultLineTransform">
            <summary>
            Gets the default <see cref="P:Microsoft.VisualStudio.Text.Formatting.ITextViewLine.LineTransform" /> used to render this line.
            </summary>
            <remarks>
            This is the line transform used if no other extension defines a <see cref="P:Microsoft.VisualStudio.Text.Formatting.ITextViewLine.LineTransform" /> for the line.</remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Formatting.ITextViewLine.VisibilityState">
            <summary>
            Gets the visibility state of this rendered text line with respect to the top and bottom of the view.
            </summary>
            <exception cref="T:System.ObjectDisposedException">This <see cref="T:Microsoft.VisualStudio.Text.Formatting.ITextViewLine" /> has been disposed.</exception>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Formatting.ITextViewLine.DeltaY">
            <summary>
            Gets the change in the top of this rendered textline between between the value of <see cref="P:Microsoft.VisualStudio.Text.Formatting.ITextViewLine.Top" />
            in the current layout and the value of <see cref="P:Microsoft.VisualStudio.Text.Formatting.ITextViewLine.Top" /> in the previous layout.
            </summary>
            <remarks>This property is 0.0 for rendered text lines that did not exist in the
            previous layout.</remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Formatting.ITextViewLine.Change">
            <summary>
            Gets the change to this rendered textline between the current layout and
            the previous layout.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Formatting.LineTransform">
            <summary>
            Represents the transform from a formatted text line to a rendered text line.
            </summary>
            <remarks>
            <para>Most properties and parameters that are doubles correspond to coordinates or distances in the text
            rendering coordinate system. In this coordinate system, x = 0.0 corresponds to the left edge of the drawing
            surface onto which text is rendered (x = view.ViewportLeft corresponds to the left edge of the viewport), and y = view.ViewportTop corresponds to the top edge of the viewport. The x-coordinate increases
            from left to right, and the y-coordinate increases from top to bottom. </para>
            <para>The horizontal and vertical axes of the view behave differently. When the text in the view is
            formatted, only the visible lines are formatted. As a result,
            a viewport cannot be scrolled horizontally and vertically in the same way.</para>
            <para>A viewport is scrolled horizontally by changing the left coordinate of the
            viewport so that it moves with respect to the drawing surface.</para>
            <para>A view can be scrolled vertically only by performing a new layout.</para>
            <para>Doing a layout in the view may cause the ViewportTop property of the view to change. For example, scrolling down one line will not translate any of the visible lines.
            Instead it will simply change the view's ViewportTop property (causing the lines to move on the screen even though their y-coordinates have not changed).</para>
            <para>Distances in the text rendering coordinate system correspond to logical pixels. If the text rendering
            surface is displayed without any scaling transform, then 1 unit in the text rendering coordinate system
            corresponds to one pixel on the display.</para>
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Formatting.LineTransform.#ctor(System.Double)">
            <summary>
            Initializes a new instance of a <see cref="T:Microsoft.VisualStudio.Text.Formatting.LineTransform" />. 
            </summary>
            <param name="verticalScale">The vertical scale factor to be applied to the text of the line, but not the space above and below the line.</param>
            <remarks>
            <para>All <see cref="T:Microsoft.VisualStudio.Text.Formatting.LineTransform" /> objects on a formatted line of text are combined using the <see cref="M:Microsoft.VisualStudio.Text.Formatting.LineTransform.Combine(Microsoft.VisualStudio.Text.Formatting.LineTransform,Microsoft.VisualStudio.Text.Formatting.LineTransform)" /> operator below. 
            The resulting <see cref="T:Microsoft.VisualStudio.Text.Formatting.LineTransform" /> determines the placement and scaling of the rendered line of text.</para>
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Formatting.LineTransform.#ctor(System.Double,System.Double,System.Double)">
            <summary>
            Initializes a new instance of a <see cref="T:Microsoft.VisualStudio.Text.Formatting.LineTransform" />.  
            </summary>
            <param name="topSpace">The amount of space required above the text of the line before applying <paramref name="verticalScale" />.</param>
            <param name="bottomSpace">The amount of space required below the text of the line before applying <paramref name="verticalScale" />.</param>
            <param name="verticalScale">The vertical scale factor to be applied to the text of the line, but not the space above and below the line.</param>
            <remarks>
            <para>All the <see cref="T:Microsoft.VisualStudio.Text.Formatting.LineTransform" /> objects on a formatted line of text are combined
            using the <see cref="M:Microsoft.VisualStudio.Text.Formatting.LineTransform.Combine(Microsoft.VisualStudio.Text.Formatting.LineTransform,Microsoft.VisualStudio.Text.Formatting.LineTransform)" /> operator, and the combined <see cref="T:Microsoft.VisualStudio.Text.Formatting.LineTransform" /> determines 
            the placement and scaling of the rendered line of text.</para>
            <para>Negative <paramref name="topSpace" /> and <paramref name="bottomSpace" /> values will be ignored,
            since they will always be combined with
            at least one <see cref="T:Microsoft.VisualStudio.Text.Formatting.LineTransform" /> with non-negative space requests.</para>
            <para>The rendered height of a line will be 
            ((line text height) + <paramref name="topSpace" /> + <paramref name="bottomSpace" />) * <paramref name="verticalScale" />.</para>
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Formatting.LineTransform.#ctor(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Initializes a new instance of a <see cref="T:Microsoft.VisualStudio.Text.Formatting.LineTransform" />.  
            </summary>
            <param name="topSpace">The amount of space required above the text of the line before applying <paramref name="verticalScale" />.</param>
            <param name="bottomSpace">The amount of space required below the text of the line before applying <paramref name="verticalScale" />.</param>
            <param name="verticalScale">The vertical scale factor to be applied to the text of the line and the space above and below the line.</param>
            <param name="right">The x-coordinate of the right edge the line (typically the right edge of any adornment on the line that extends to the right of the line's text).</param>
            <remarks>
            <para>All the <see cref="T:Microsoft.VisualStudio.Text.Formatting.LineTransform" /> objects on a formatted line of text are combined
            using the <see cref="M:Microsoft.VisualStudio.Text.Formatting.LineTransform.Combine(Microsoft.VisualStudio.Text.Formatting.LineTransform,Microsoft.VisualStudio.Text.Formatting.LineTransform)" /> operator, and the combined <see cref="T:Microsoft.VisualStudio.Text.Formatting.LineTransform" /> determines 
            the placement and scaling of the rendered line of text.</para>
            <para>Negative <paramref name="topSpace" /> and <paramref name="bottomSpace" /> values will be ignored,
            since they will always be combined with
            at least one <see cref="T:Microsoft.VisualStudio.Text.Formatting.LineTransform" /> with non-negative space requests.</para>
            <para>The rendered height of a line will be 
            ((line text height) + <paramref name="topSpace" /> + <paramref name="bottomSpace" />) * <paramref name="verticalScale" />.</para>
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Formatting.LineTransform.TopSpace">
            <summary>
            Gets the amount of space required above the text of the line before applying the <see cref="P:Microsoft.VisualStudio.Text.Formatting.LineTransform.VerticalScale" /> factor.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Formatting.LineTransform.BottomSpace">
            <summary>
            Gets the amount of space required below the text of the line before applying the <see cref="P:Microsoft.VisualStudio.Text.Formatting.LineTransform.VerticalScale" /> factor.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Formatting.LineTransform.VerticalScale">
            <summary>
            Gets the vertical scale factor to be applied to the text of the line. The scale factor does not affect
            and the space above and below the line.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Formatting.LineTransform.Right">
            <summary>
            Gets the x-coordinate of the effective right edge of the line.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Formatting.LineTransform.Combine(Microsoft.VisualStudio.Text.Formatting.LineTransform,Microsoft.VisualStudio.Text.Formatting.LineTransform)">
            <summary>
            Combines two <see cref="T:Microsoft.VisualStudio.Text.Formatting.LineTransform" /> objects.
            </summary>
            <param name="transform1">The first <see cref="T:Microsoft.VisualStudio.Text.Formatting.LineTransform" /> to combine.</param>
            <param name="transform2">The second <see cref="T:Microsoft.VisualStudio.Text.Formatting.LineTransform" /> to combine.</param>
            <returns>The combined <see cref="T:Microsoft.VisualStudio.Text.Formatting.LineTransform" />.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Formatting.LineTransform.GetHashCode">
            <summary>
            Gets the hash code for this object.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Formatting.LineTransform.Equals(System.Object)">
            <summary>
            Determines whether two <see cref="T:Microsoft.VisualStudio.Text.Formatting.LineTransform" /> objects are the same.
            </summary>
            <param name="obj">The object to compare for equality.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Formatting.LineTransform.op_Equality(Microsoft.VisualStudio.Text.Formatting.LineTransform,Microsoft.VisualStudio.Text.Formatting.LineTransform)">
            <summary>
            Determines whether two <see cref="T:Microsoft.VisualStudio.Text.Formatting.LineTransform" /> objects are the same.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Formatting.LineTransform.op_Inequality(Microsoft.VisualStudio.Text.Formatting.LineTransform,Microsoft.VisualStudio.Text.Formatting.LineTransform)">
            <summary>
            Determines whether two <see cref="T:Microsoft.VisualStudio.Text.Formatting.LineTransform" /> objects are different.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Formatting.TextAndAdornmentSequenceChangedEventArgs">
            <summary>
            Provides information for the tag aggregator TagsChanged event,
            and returns the span of changed tags as a mapping span.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Formatting.TextAndAdornmentSequenceChangedEventArgs.Span">
            <summary>
            Gets the span over which tags have changed.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Formatting.TextAndAdornmentSequenceChangedEventArgs.#ctor(Microsoft.VisualStudio.Text.IMappingSpan)">
            <summary>
            Initializes a new instance of <see cref="T:Microsoft.VisualStudio.Text.Formatting.TextAndAdornmentSequenceChangedEventArgs" /> with the specified <see cref="T:Microsoft.VisualStudio.Text.IMappingSpan" />.
            </summary>
            <param name="span">The span that changed.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="span" /> is null.</exception>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Formatting.TextBounds">
            <summary>
            The bounds of a span of text in a given text line.
            </summary>
            <remarks>
            <para>Most properties and parameters that are doubles correspond to coordinates or distances in the text
            rendering coordinate system. In this coordinate system, x = 0.0 corresponds to the left edge of the drawing
            surface onto which text is rendered (x = view.ViewportLeft corresponds to the left edge of the viewport), and y = view.ViewportTop corresponds to the top edge of the viewport. The x-coordinate increases
            from left to right, and the y-coordinate increases from top to bottom. </para>
            <para>The horizontal and vertical axes of the view behave differently. When the text in the view is
            formatted, only the visible lines are formatted. As a result,
            a viewport cannot be scrolled horizontally and vertically in the same way.</para>
            <para>A viewport is scrolled horizontally by changing the left coordinate of the
            viewport so that it moves with respect to the drawing surface.</para>
            <para>A view can be scrolled vertically only by performing a new layout.</para>
            <para>Doing a layout in the view may cause the ViewportTop property of the view to change. For example, scrolling down one line will not translate any of the visible lines.
            Instead it will simply change the view's ViewportTop property (causing the lines to move on the screen even though their y-coordinates have not changed).</para>
            <para>Distances in the text rendering coordinate system correspond to logical pixels. If the text rendering
            surface is displayed without any scaling transform, then 1 unit in the text rendering coordinate system
            corresponds to one pixel on the display.</para>
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Formatting.TextBounds.#ctor(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Initializes a new instance of <see cref="T:Microsoft.VisualStudio.Text.Formatting.TextBounds" />.
            </summary>
            <param name="leading">
            The x-coordinate of the leading edge of the bounding rectangle.
            </param>
            <param name="top">
            The y-coordinate of the top edge of the bounding rectangle.
            </param>
            <param name="bidiWidth">;
            The distance between the leading and trailing edges of the bounding rectangle. This can be negative for right-to-left text.
            </param>
            <param name="height">
            The height of the rectangle. The height must be non-negative.
            </param>
            <param name="textTop">
            The top of the text, measured from the line that contains the text.
            </param>
            <param name="textHeight">
            The height of the text, measured from the line that contains the text.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="leading" /> or <paramref name="bidiWidth" /> is not a valid number, or
            <paramref name="height" /> is negative or not a valid number.</exception>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Formatting.TextBounds.Leading">
            <summary>
            Gets the position of the leading edge of the rectangle in the text rendering coordinate system.
            </summary>
            <remarks>
            In right-to-left text, the leading edge is to the right of the trailing edge.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Formatting.TextBounds.Top">
            <summary>
            Gets the position of the top edge of the rectangle in the text rendering coordinate system.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Formatting.TextBounds.TextTop">
            <summary>
            Gets the top of the text on the line containing the text.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Formatting.TextBounds.Width">
            <summary>
            Gets the distance between the leading and trailing edges of the rectangle in the text rendering coordinate system.
            </summary>
            <remarks>
            This value will always be non-negative.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Formatting.TextBounds.Height">
            <summary>
            Gets the distance between the top and bottom edges of the rectangle in the text rendering coordinate system.
            </summary>
            <remarks>
            This value will always be positive.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Formatting.TextBounds.TextHeight">
            <summary>
            Gets the height of the text on the line containing the characters.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Formatting.TextBounds.Trailing">
            <summary>
            Gets the position of the trailing edge of the rectangle in the text rendering coordinate system.
            </summary>
            <remarks>
            In right-to-left text, the trailing edge is positioned to the left of the leading edge.
            If the text has a non-zero width end of line glyph, this property includes the 
            width of that character.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Formatting.TextBounds.Bottom">
            <summary>
            Gets the position of the bottom edge of the rectangle in the text rendering coordinate system.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Formatting.TextBounds.TextBottom">
            <summary>
            Gets the bottom of the text on the line containing the characters.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Formatting.TextBounds.Left">
            <summary>
            Gets the position of the left edge of the rectangle in the text rendering coordinate system.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Formatting.TextBounds.Right">
            <summary>
            Gets the position of the right edge of the rectangle in the text rendering coordinate system.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Formatting.TextBounds.IsRightToLeft">
            <summary>
            Returns true if the bounds correspond to a right to left character
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Formatting.TextBounds.ToString">
            <summary>
            Converts the <see cref="T:Microsoft.VisualStudio.Text.Formatting.TextBounds" /> object to a string.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Formatting.TextBounds.GetHashCode">
            <summary>
            Gets the hash code of the see cref="TextBounds"/&gt; object.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Formatting.TextBounds.Equals(System.Object)">
            <summary>
            Determines whether two <see cref="T:Microsoft.VisualStudio.Text.Formatting.TextBounds" /> objects are the same.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Formatting.TextBounds.op_Equality(Microsoft.VisualStudio.Text.Formatting.TextBounds,Microsoft.VisualStudio.Text.Formatting.TextBounds)">
            <summary>
            Determines whether two <see cref="T:Microsoft.VisualStudio.Text.Formatting.TextBounds" /> objects are the same.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Formatting.TextBounds.op_Inequality(Microsoft.VisualStudio.Text.Formatting.TextBounds,Microsoft.VisualStudio.Text.Formatting.TextBounds)">
            <summary>
            Determines whether two <see cref="T:Microsoft.VisualStudio.Text.Formatting.TextBounds" /> objects are different.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Formatting.TextViewLineChange">
            <summary>
            Defines the possible types of change in a rendered text line between one layout and another.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Formatting.TextViewLineChange.None">
            <summary>
            No change type is specified.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Formatting.TextViewLineChange.NewOrReformatted">
            <summary>
            The line is new or reformatted.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Formatting.TextViewLineChange.Translated">
            <summary>
            The text has not changed, but some change has caused the y-coordinate to change. For example,
            a line was inserted above this line, or the user scrolled the view up or down.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Formatting.VisibilityState">
            <summary>
            Specifies the visibility of an <see cref="T:Microsoft.VisualStudio.Text.Formatting.ITextViewLine" /> with respect to the visible area when the line was rendered.
            </summary>
            <remarks>
            <para>An <see cref="T:Microsoft.VisualStudio.Text.Formatting.ITextViewLine" /> is considered partially visible when its
            bottom is equal to the top of the visible area.</para>
            <para>Unattached lines are lines that were not formatted as part of a layout in the text view.</para>
            </remarks>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Formatting.VisibilityState.Unattached">
            <summary>
            The line is unattached, that is, it was not formatted as part of a layout in the text view.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Formatting.VisibilityState.Hidden">
            <summary>
            The line is hidden, that is, not visible inside the view. Lines are also hidden when 
            their bottom edge is even with the top of the view or their top edge is even with the top of the view.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Formatting.VisibilityState.PartiallyVisible">
            <summary>
            The line is partially visible, that is, 
            some portion of the line extends above the top of the view and/or below the bottom of the view.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Formatting.VisibilityState.FullyVisible">
            <summary>
            The line is fully visible.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Formatting.IRtfBuilderService">
            <summary>
            Generates RTF-formatted text from a collection of snapshot spans.
            </summary>
            <remarks>
            This is a MEF component part and should be imported using the following attribute:
            [Import(typeof(IRtfBuilderService))] 
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Formatting.IRtfBuilderService.GenerateRtf(Microsoft.VisualStudio.Text.NormalizedSnapshotSpanCollection,System.String)">
            <summary>
            Gets an RTF string containing the formatted text of the snapshot spans.
            </summary>
            <remarks>
            The generated RTF text is based on an in-order walk of the snapshot spans.
            </remarks>
            <param name="spans">
            The collection of snapshot spans.
            </param>
            <param name="delimiter">
            A delimiter string to be inserted between the RTF generated code for the <see cref="T:Microsoft.VisualStudio.Text.SnapshotSpan" />s in the <see cref="T:Microsoft.VisualStudio.Text.NormalizedSnapshotSpanCollection" />.
            </param>
            <returns>
            A <see cref="T:System.String" /> containing RTF data.
            </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Formatting.IRtfBuilderService.GenerateRtf(Microsoft.VisualStudio.Text.NormalizedSnapshotSpanCollection)">
            <summary>
            Gets an RTF string containing the formatted text of the snapshot spans.
            </summary>
            <remarks>
            The generated RTF text is based on an in-order walk of the snapshot spans. A new line "\par" rtf keyword will be placed between the provided
            <see cref="T:Microsoft.VisualStudio.Text.SnapshotSpan" />s.
            </remarks>
            <param name="spans">
            The collection of snapshot spans.
            </param>
            <returns>
            A <see cref="T:System.String" /> containing RTF data.
            </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Formatting.IRtfBuilderService.GenerateRtf(Microsoft.VisualStudio.Text.NormalizedSnapshotSpanCollection,Microsoft.VisualStudio.Text.Editor.ITextView,System.String)">
            <summary>
            Gets an RTF string that contains the formatted text of the spans.
            </summary>
            <remarks>
            The generated RTF text is based on an in-order walk of the snapshot spans, 
            with the characteristics and formatting properties of <paramref name="textView" />.
            All the snapshot spans must belong to <paramref name="textView" />.
            </remarks>
            <param name="spans">
            The collection of snapshot spans.
            </param>
            <param name="textView">
            The <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView" /> that contains the snapshot spans.
            </param>
            <param name="delimiter">
            A delimiter string to be inserted between the RTF generated code for the <see cref="T:Microsoft.VisualStudio.Text.SnapshotSpan" />s in the <see cref="T:Microsoft.VisualStudio.Text.NormalizedSnapshotSpanCollection" />.
            </param>
            <returns>
            A <see cref="T:System.String" /> containing RTF data.
            </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Formatting.IRtfBuilderService.GenerateRtf(Microsoft.VisualStudio.Text.NormalizedSnapshotSpanCollection,Microsoft.VisualStudio.Text.Editor.ITextView)">
            <summary>
            Gets an RTF string that contains the formatted text of the spans.
            </summary>
            <remarks>
            The generated RTF text is based on an in-order walk of the snapshot spans, 
            with the characteristics and formatting properties of <paramref name="textView" />.
            All the snapshot spans must belong to <paramref name="textView" />. A new line "\par" rtf keyword will be 
            placed between the provided <see cref="T:Microsoft.VisualStudio.Text.SnapshotSpan" />s.
            </remarks>
            <param name="spans">
            The collection of snapshot spans.
            </param>
            <param name="textView">
            The <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView" /> that contains the snapshot spans.
            </param>
            <returns>
            A <see cref="T:System.String" /> containing RTF data.
            </returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Formatting.IRtfBuilderService2">
            <summary>
            Generates RTF-formatted text from a collection of snapshot spans.
            </summary>
            <remarks>
            This is a MEF component part and should be imported using the following attribute:
            [Import(typeof(IRtfBuilderService))] 
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Formatting.IRtfBuilderService2.GenerateRtf(Microsoft.VisualStudio.Text.NormalizedSnapshotSpanCollection,System.String,System.Threading.CancellationToken)">
            <summary>
            Gets an RTF string containing the formatted text of the snapshot spans.
            </summary>
            <remarks>
            The generated RTF text is based on an in-order walk of the snapshot spans.
            </remarks>
            <param name="spans">
            The collection of snapshot spans.
            </param>
            <param name="delimiter">
            A delimiter string to be inserted between the RTF generated code for the <see cref="T:Microsoft.VisualStudio.Text.SnapshotSpan" />s in the <see cref="T:Microsoft.VisualStudio.Text.NormalizedSnapshotSpanCollection" />.
            </param>
            <param name="cancellationToken">
            <see cref="T:System.Threading.CancellationToken" /> used to indicate when to abandon the effort to generate the rich text.
            </param>
            <returns>
            A <see cref="T:System.String" /> containing RTF data.
            </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Formatting.IRtfBuilderService2.GenerateRtf(Microsoft.VisualStudio.Text.NormalizedSnapshotSpanCollection,System.Threading.CancellationToken)">
            <summary>
            Gets an RTF string containing the formatted text of the snapshot spans.
            </summary>
            <remarks>
            The generated RTF text is based on an in-order walk of the snapshot spans. A new line "\par" rtf keyword will be placed between the provided
            <see cref="T:Microsoft.VisualStudio.Text.SnapshotSpan" />s.
            </remarks>
            <param name="spans">
            The collection of snapshot spans.
            </param>
            <param name="cancellationToken">
            <see cref="T:System.Threading.CancellationToken" /> used to indicate when to abandon the effort to generate the rich text.
            </param>
            <returns>
            A <see cref="T:System.String" /> containing RTF data.
            </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Formatting.IRtfBuilderService2.GenerateRtf(Microsoft.VisualStudio.Text.NormalizedSnapshotSpanCollection,Microsoft.VisualStudio.Text.Editor.ITextView,System.String,System.Threading.CancellationToken)">
            <summary>
            Gets an RTF string that contains the formatted text of the spans.
            </summary>
            <remarks>
            The generated RTF text is based on an in-order walk of the snapshot spans, 
            with the characteristics and formatting properties of <paramref name="textView" />.
            All the snapshot spans must belong to <paramref name="textView" />.
            </remarks>
            <param name="spans">
            The collection of snapshot spans.
            </param>
            <param name="textView">
            The <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView" /> that contains the snapshot spans.
            </param>
            <param name="delimiter">
            A delimiter string to be inserted between the RTF generated code for the <see cref="T:Microsoft.VisualStudio.Text.SnapshotSpan" />s in the <see cref="T:Microsoft.VisualStudio.Text.NormalizedSnapshotSpanCollection" />.
            </param>
            <param name="cancellationToken">
            <see cref="T:System.Threading.CancellationToken" /> used to indicate when to abandon the effort to generate the rich text.
            </param>
            <returns>
            A <see cref="T:System.String" /> containing RTF data.
            </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Formatting.IRtfBuilderService2.GenerateRtf(Microsoft.VisualStudio.Text.NormalizedSnapshotSpanCollection,Microsoft.VisualStudio.Text.Editor.ITextView,System.Threading.CancellationToken)">
            <summary>
            Gets an RTF string that contains the formatted text of the spans.
            </summary>
            <remarks>
            The generated RTF text is based on an in-order walk of the snapshot spans, 
            with the characteristics and formatting properties of <paramref name="textView" />.
            All the snapshot spans must belong to <paramref name="textView" />. A new line "\par" rtf keyword will be 
            placed between the provided <see cref="T:Microsoft.VisualStudio.Text.SnapshotSpan" />s.
            </remarks>
            <param name="spans">
            The collection of snapshot spans.
            </param>
            <param name="textView">
            The <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView" /> that contains the snapshot spans.
            </param>
            <param name="cancellationToken">
            <see cref="T:System.Threading.CancellationToken" /> used to indicate when to abandon the effort to generate the rich text.
            </param>
            <returns>
            A <see cref="T:System.String" /> containing RTF data.
            </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Formatting.IRtfBuilderServiceInternal.GenerateRtfInternal(Microsoft.VisualStudio.Text.NormalizedSnapshotSpanCollection,Microsoft.VisualStudio.Text.Editor.ITextView)">
            <summary>
            Generates RTF-formatted text from a collection of snapshot spans with printer colors.
            </summary>
            <param name="spans">The collection of snapshot spans.</param>
            <param name="textView">The <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView" /> that contains the snapshot spans.</param>
            <returns>A <see cref="T:System.String" /> containing RTF data with printer colors.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.AbstractSelectionPresentationProperties">
            <summary>
            Provides UI specific properties about an <see cref="T:Microsoft.VisualStudio.Text.Selection" />.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.AbstractSelectionPresentationProperties.PreferredXCoordinate">
            <summary>
            Gets the position that the caret prefers to occupy on a given line. This position may not be honored
            if virtual space is off and the line is insufficiently long. See <see cref="P:Microsoft.VisualStudio.Text.AbstractSelectionPresentationProperties.CaretBounds" /> for the
            actual location.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.AbstractSelectionPresentationProperties.PreferredYCoordinate">
            <summary>
            Gets the position that the caret prefers to occupy vertically in the view. This position is used for operations
            such as page up/down, but may not be honored if there is an adornment at the desired location. See
            <see cref="P:Microsoft.VisualStudio.Text.AbstractSelectionPresentationProperties.CaretBounds" /> for the actual location.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.AbstractSelectionPresentationProperties.CaretBounds">
            <summary>
            Gets the caret location and size.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.AbstractSelectionPresentationProperties.IsWithinViewport">
            <summary>
            Gets whether the caret is shown in its entirety on the screen.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.AbstractSelectionPresentationProperties.IsOverwriteMode">
            <summary>
            Gets whether the caret should be rendered as overwrite.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.AbstractSelectionPresentationProperties.ContainingTextViewLine">
            <summary>
            Gets the <see cref="T:Microsoft.VisualStudio.Text.Formatting.ITextViewLine" /> that contains the <see cref="P:Microsoft.VisualStudio.Text.Selection.InsertionPoint" />.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.AbstractSelectionPresentationProperties.TryGetContainingTextViewLine(Microsoft.VisualStudio.Text.Formatting.ITextViewLine@)">
            <summary>
            Tries to get the <see cref="T:Microsoft.VisualStudio.Text.Formatting.ITextViewLine" /> that contains the <see cref="P:Microsoft.VisualStudio.Text.Selection.InsertionPoint" />.
            This can fail if the call happens during a view layout or after the view is closed.
            </summary>
            <param name="line">Returns out the requested line if available, or null otherwise.</param>
            <returns>True if successful, false otherwise.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.IMultiSelectionBroker">
            <summary>
            Manages all the caret and selecting behavior for an <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView" />.
            Handles multiple selections, and box selection. Throughout this namespace carets
            are considered to be part of Selections, and are represented by <see cref="P:Microsoft.VisualStudio.Text.Selection.InsertionPoint" />.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.IMultiSelectionBroker.TextView">
            <summary>
            Gets the view for which this broker manages selections.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.IMultiSelectionBroker.CurrentSnapshot">
            <summary>
            Gets the current <see cref="T:Microsoft.VisualStudio.Text.ITextSnapshot" /> that is associated with anchor,
            active, and insertion points for everything managed by this broker. This snapshot
            will always be based in the <see cref="P:Microsoft.VisualStudio.Text.Editor.ITextViewModel.EditBuffer" /> for the associated
            <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView" />.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.IMultiSelectionBroker.AllSelections">
             <summary>
             Gets a list of all selections associated with <see cref="P:Microsoft.VisualStudio.Text.IMultiSelectionBroker.TextView" />. They will
             be sorted in the order of appearence in the underlying snapshot. This property is
             intended for edit operations and may be computationally expensive. If not all
             selections are required, use <see cref="M:Microsoft.VisualStudio.Text.IMultiSelectionBroker.GetSelectionsIntersectingSpan(Microsoft.VisualStudio.Text.SnapshotSpan)" /> instead.
            
             This returns a selection as an <see cref="T:Microsoft.VisualStudio.Text.Selection" />.
             </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.IMultiSelectionBroker.HasMultipleSelections">
            <summary>
            Gets whether there are multiple selections in <see cref="P:Microsoft.VisualStudio.Text.IMultiSelectionBroker.AllSelections" />.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.IMultiSelectionBroker.GetSelectionsIntersectingSpan(Microsoft.VisualStudio.Text.SnapshotSpan)">
            <summary>
            Gets a list of all the selections that intersect the given span. Virtual whitespace is ignored for this method.
            </summary>
            <param name="span">The span of interest.</param>
            <returns>The list of <see cref="T:Microsoft.VisualStudio.Text.Selection" /> objects.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.IMultiSelectionBroker.GetSelectionsIntersectingSpans(Microsoft.VisualStudio.Text.NormalizedSnapshotSpanCollection)">
            <summary>
            Gets a list of all the selections that intersect the given span collection. Virtual whitespace is ignored for this method.
            </summary>
            <param name="spanCollection"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.IMultiSelectionBroker.AddSelection(Microsoft.VisualStudio.Text.Selection)">
            <summary>
            Adds a selection to <see cref="P:Microsoft.VisualStudio.Text.IMultiSelectionBroker.AllSelections" />.
            </summary>
            <param name="selection">The selection to add</param>.
            <remarks>This will throw if it not based on <see cref="P:Microsoft.VisualStudio.Text.IMultiSelectionBroker.CurrentSnapshot" />.</remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.IMultiSelectionBroker.AddSelectionRange(System.Collections.Generic.IEnumerable{Microsoft.VisualStudio.Text.Selection})">
            <summary>
            Adds a list of selections to <see cref="P:Microsoft.VisualStudio.Text.IMultiSelectionBroker.AllSelections" />.
            </summary>
            <param name="range">The list of selections to add.</param>
            <remarks>This will throw if any of the selections are not based on <see cref="P:Microsoft.VisualStudio.Text.IMultiSelectionBroker.CurrentSnapshot" />.</remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.IMultiSelectionBroker.SetSelection(Microsoft.VisualStudio.Text.Selection)">
            <summary>
            Clears the current selections and adds one as the new value. This also becomes the <see cref="P:Microsoft.VisualStudio.Text.IMultiSelectionBroker.PrimarySelection" />.
            </summary>
            <param name="selection">The selection to leave as the value of <see cref="P:Microsoft.VisualStudio.Text.IMultiSelectionBroker.PrimarySelection" /> and sole
            member of <see cref="P:Microsoft.VisualStudio.Text.IMultiSelectionBroker.AllSelections" />.</param>
            <remarks>This will throw if it not based on <see cref="P:Microsoft.VisualStudio.Text.IMultiSelectionBroker.CurrentSnapshot" />.</remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.IMultiSelectionBroker.SetSelectionRange(System.Collections.Generic.IEnumerable{Microsoft.VisualStudio.Text.Selection},Microsoft.VisualStudio.Text.Selection)">
            <summary>
            Clears the current selections, adds the provided range, and sets the primary selection.
            </summary>
            <param name="range">Selections that should be part of <see cref="P:Microsoft.VisualStudio.Text.IMultiSelectionBroker.AllSelections" />.</param>
            <param name="primary">The selection that should be set as <see cref="P:Microsoft.VisualStudio.Text.IMultiSelectionBroker.PrimarySelection" />.</param>
            <remarks>
            If range is null or does not contain primary, primary will also be added to <see cref="P:Microsoft.VisualStudio.Text.IMultiSelectionBroker.AllSelections" />.
            This will throw if any of the selections are not based on <see cref="P:Microsoft.VisualStudio.Text.IMultiSelectionBroker.CurrentSnapshot" />.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.IMultiSelectionBroker.TryRemoveSelection(Microsoft.VisualStudio.Text.Selection)">
            <summary>
            Removes a selection from the view.
            </summary>
            <param name="selection">The selection to remove.</param>
            <returns><c>true</c> if successful. <c>false</c> otherwise. This can fail if either the selection passed in does not exist in the view, or
            it is the last one.</returns>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.IMultiSelectionBroker.PrimarySelection">
            <summary>
            Gets the primary selection which should remain after invoking <see cref="M:Microsoft.VisualStudio.Text.IMultiSelectionBroker.ClearSecondarySelections" />.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.IMultiSelectionBroker.TrySetAsPrimarySelection(Microsoft.VisualStudio.Text.Selection)">
            <summary>
            Attempts to set the provided selection to be the new <see cref="P:Microsoft.VisualStudio.Text.IMultiSelectionBroker.PrimarySelection" />.
            </summary>
            <param name="candidate">The new candidate for primary selection.</param>
            <returns>Whether the set operation was successful. This will return <c>false</c> if the candidate is not
            found in <see cref="P:Microsoft.VisualStudio.Text.IMultiSelectionBroker.AllSelections" />.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.IMultiSelectionBroker.ClearSecondarySelections">
            <summary>
            Removes all but the <see cref="P:Microsoft.VisualStudio.Text.IMultiSelectionBroker.PrimarySelection" /> from the session.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.IMultiSelectionBroker.PerformActionOnAllSelections(Microsoft.VisualStudio.Text.PredefinedSelectionTransformations)">
            <summary>
            Performs a predefined manipulation on all <see cref="T:Microsoft.VisualStudio.Text.Selection" />s contained by <see cref="P:Microsoft.VisualStudio.Text.IMultiSelectionBroker.TextView" />.
            </summary>
            <param name="action">The manipulation to perform.</param>
            <remarks>Overlapping selections will be merged after all manipulations have been applied.</remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.IMultiSelectionBroker.PerformActionOnAllSelections(System.Action{Microsoft.VisualStudio.Text.ISelectionTransformer})">
            <summary>
            Performs a custom action on all <see cref="T:Microsoft.VisualStudio.Text.Selection" />s contained by <see cref="P:Microsoft.VisualStudio.Text.IMultiSelectionBroker.TextView" />.
            </summary>
            <param name="action">The action to perform. This will be called once per Selection
            and the supplied <see cref="T:Microsoft.VisualStudio.Text.ISelectionTransformer" /> contains methods to adjust an individual Selection.</param>
            <remarks>Overlapping selections will be merged after all actions have been performed.</remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.IMultiSelectionBroker.TryPerformActionOnSelection(Microsoft.VisualStudio.Text.Selection,Microsoft.VisualStudio.Text.PredefinedSelectionTransformations,Microsoft.VisualStudio.Text.Selection@)">
            <summary>
            Attempts to perform a predefined action on a single <see cref="T:Microsoft.VisualStudio.Text.Selection" />.
            </summary>
            <param name="before">The selection on which to perform the manipulation</param>
            <param name="action">The manipulation to perform.</param>
            <param name="after">Overlapping selections will be merged after the manipulation has been performed.
            This parameter reports back the Selection post manipulation and post merge.</param>
            <returns><c>true</c> if the manipulation was performed. <c>false</c> otherwise. Typically, <c>false</c> implies that the
            before Selection did not exist in <see cref="P:Microsoft.VisualStudio.Text.IMultiSelectionBroker.AllSelections" />.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.IMultiSelectionBroker.TryPerformActionOnSelection(Microsoft.VisualStudio.Text.Selection,System.Action{Microsoft.VisualStudio.Text.ISelectionTransformer},Microsoft.VisualStudio.Text.Selection@)">
            <summary>
            Attempts to perform a custom action on a single <see cref="T:Microsoft.VisualStudio.Text.Selection" />.
            </summary>
            <param name="before">The selection on which to perform the action.</param>
            <param name="action">The action to perform.</param>
            <param name="after">Overlapping selections will be merged after the action has been performed.
            This parameter reports back the Selection post action and post merge.</param>
            <returns><c>true</c> if the action was performed. <c>false</c> otherwise. Typically, <c>false</c> implies that the
            beforeSelection did not exist in <see cref="P:Microsoft.VisualStudio.Text.IMultiSelectionBroker.AllSelections" />.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.IMultiSelectionBroker.TryEnsureVisible(Microsoft.VisualStudio.Text.Selection,Microsoft.VisualStudio.Text.Editor.EnsureSpanVisibleOptions)">
            <summary>
            Attempts to make the given Selection visible in the view.
            </summary>
            <param name="selection">The selection to ensure visiblity on.</param>
            <param name="options">How the selection span should be made visible.</param>
            <returns><c>true</c> if the selection was in <see cref="P:Microsoft.VisualStudio.Text.IMultiSelectionBroker.AllSelections" /> and is now in view. <c>false</c> otherwise.</returns>
            /// <remarks>
            This will first ensure that the selection span is visible, erring on the side of showing the <see cref="P:Microsoft.VisualStudio.Text.Selection.ActivePoint" />.
            Then if the <see cref="P:Microsoft.VisualStudio.Text.Selection.InsertionPoint" /> is different than the <see cref="P:Microsoft.VisualStudio.Text.Selection.ActivePoint" />, the
            <see cref="P:Microsoft.VisualStudio.Text.Selection.InsertionPoint" /> will be ensured visible.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.IMultiSelectionBroker.SetBoxSelection(Microsoft.VisualStudio.Text.Selection)">
            <summary>
            Adds a box of selections with the given points as its corners.
            </summary>
            <param name="selection">A selection defining the characteristics of the box.</param>
            <remarks>
            Calling this method will clear all existing selections.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.IMultiSelectionBroker.BoxSelection">
             <summary>
             If <see cref="P:Microsoft.VisualStudio.Text.IMultiSelectionBroker.IsBoxSelection" /> is <c>true</c>, returns an instantiated <see cref="T:Microsoft.VisualStudio.Text.Selection" />
             which the caller can interrogate or manipulate to work with the box itself. Calls to
             <see cref="P:Microsoft.VisualStudio.Text.IMultiSelectionBroker.AllSelections" /> or <see cref="M:Microsoft.VisualStudio.Text.IMultiSelectionBroker.GetSelectionsIntersectingSpan(Microsoft.VisualStudio.Text.SnapshotSpan)" /> will return individual
             per line entries rather than the full box.
            
             If <see cref="P:Microsoft.VisualStudio.Text.IMultiSelectionBroker.IsBoxSelection" /> is <c>false</c>, this will return null.
             </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.IMultiSelectionBroker.IsBoxSelection">
            <summary>
            Returns <c>true</c> if <see cref="M:Microsoft.VisualStudio.Text.IMultiSelectionBroker.SetBoxSelection(Microsoft.VisualStudio.Text.Selection)" /> has been
            called, and selections are being managed by the box geometry, instead of manually by the user. <see cref="M:Microsoft.VisualStudio.Text.IMultiSelectionBroker.ClearSecondarySelections" />
            and <see cref="M:Microsoft.VisualStudio.Text.IMultiSelectionBroker.BreakBoxSelection" /> will both revert this to <c>false</c>, and several other methods like
            <see cref="M:Microsoft.VisualStudio.Text.IMultiSelectionBroker.AddSelection(Microsoft.VisualStudio.Text.Selection)" /> will indirectly also set this back to <c>false</c>.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.IMultiSelectionBroker.BreakBoxSelection">
            <summary>
            Clears <see cref="P:Microsoft.VisualStudio.Text.IMultiSelectionBroker.BoxSelection" />, but retains the current state of selections. This is a useful utility when performing gestures like End and Home
            where each selection moves, but the result is not necessarily a box.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.IMultiSelectionBroker.SelectedSpans">
            <summary>
            Gets the list of spans within <see cref="P:Microsoft.VisualStudio.Text.IMultiSelectionBroker.CurrentSnapshot" /> that are selected. While two selections cannot
            overlap, they may inhabit virtual space, and selections may be adjacent. This will merge those spans and return
            the minimum set of spans that could be used to describe the selection. This can be a costly operation
            and should only be run when needed.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.IMultiSelectionBroker.VirtualSelectedSpans">
            <summary>
            Gives the set of spans selected. There is exactly one span per selection, but it may be empty.
            They will be sorted in the order of appearence in the document.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.IMultiSelectionBroker.SelectionExtent">
            <summary>
            Gets the span containing all selections, complete with virtual space.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.IMultiSelectionBroker.AreSelectionsActive">
            <summary>
            Whether or not selections are active within <see cref="P:Microsoft.VisualStudio.Text.IMultiSelectionBroker.TextView" />.
            </summary>
            <remarks>
            <para>
            If <see cref="P:Microsoft.VisualStudio.Text.IMultiSelectionBroker.ActivationTracksFocus" /> is <c>true</c>, this property is automatically
            updated when the <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView" /> gains and loses aggregate focus.  You can still
            override it while <see cref="P:Microsoft.VisualStudio.Text.IMultiSelectionBroker.ActivationTracksFocus" /> is <c>false</c>, but the value will change
            whenever focus changes.
            </para>
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.IMultiSelectionBroker.ActivationTracksFocus">
            <summary>
            Determines whether <see cref="P:Microsoft.VisualStudio.Text.IMultiSelectionBroker.AreSelectionsActive" /> should track when the <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView" /> gains and
            loses aggregate focus.  The default is <c>true</c>.
            </summary>
            <remarks>
            <para>
            While the value of this property is <c>true</c>, the value of <see cref="P:Microsoft.VisualStudio.Text.IMultiSelectionBroker.AreSelectionsActive" /> will track
            <see cref="P:Microsoft.VisualStudio.Text.Editor.ITextView.HasAggregateFocus" />.  When the value of this property changes to <c>true</c>,
            the value of <see cref="P:Microsoft.VisualStudio.Text.IMultiSelectionBroker.AreSelectionsActive" /> will be immediately updated.
            </para>
            </remarks>
        </member>
        <member name="E:Microsoft.VisualStudio.Text.IMultiSelectionBroker.MultiSelectionSessionChanged">
            <summary>
            Occurs when selections are added/removed/updated. Also when the primary selection is changed, and when
            box selection mode is entered/exited.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.IMultiSelectionBroker.BeginBatchOperation">
            <summary>
            Temporarily disables <see cref="E:Microsoft.VisualStudio.Text.IMultiSelectionBroker.MultiSelectionSessionChanged" />, but instead queues up all actions
            to be included in the resultant <see cref="E:Microsoft.VisualStudio.Text.IMultiSelectionBroker.MultiSelectionSessionChanged" /> once the operation
            is completed. Selection merges will also be deferred until the end of batch operations.
            </summary>
            <returns>An object that should be disposed once the batch operation is complete.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.IMultiSelectionBroker.TryGetSelectionPresentationProperties(Microsoft.VisualStudio.Text.Selection,Microsoft.VisualStudio.Text.AbstractSelectionPresentationProperties@)">
            <summary>
            Trys to get the UI properties associated with the given Selection.
            </summary>
            <param name="selection">The selection of interest.</param>
            <param name="properties">Returns out the properties if successful.</param>
            <returns><c>true</c> if the supplied selection was found and the properties returned. <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.IMultiSelectionBroker.TransformSelection(Microsoft.VisualStudio.Text.Selection,Microsoft.VisualStudio.Text.PredefinedSelectionTransformations)">
            <summary>
            Performs the given transformation on the given Selection without updating <see cref="P:Microsoft.VisualStudio.Text.IMultiSelectionBroker.AllSelections" />.
            The behavior of Preferred X and Y coordinates for selections that are already in the broker is undefined.
            </summary>
            <param name="source">The selection to transform</param>
            <param name="transformation">The transformation to perform</param>
            <returns>The transformed selection</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.ISelectionTransformer">
            <summary>
            Allows changing existing <see cref="P:Microsoft.VisualStudio.Text.ISelectionTransformer.Selection" /> objects as part of <see cref="M:Microsoft.VisualStudio.Text.IMultiSelectionBroker.PerformActionOnAllSelections(System.Action{Microsoft.VisualStudio.Text.ISelectionTransformer})" />
            and <see cref="M:Microsoft.VisualStudio.Text.IMultiSelectionBroker.TryPerformActionOnSelection(Microsoft.VisualStudio.Text.Selection,System.Action{Microsoft.VisualStudio.Text.ISelectionTransformer},Microsoft.VisualStudio.Text.Selection@)" />.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.ISelectionTransformer.Selection">
            <summary>
            Gets the Selection to transform. This will change through calls to <see cref="M:Microsoft.VisualStudio.Text.ISelectionTransformer.PerformAction(Microsoft.VisualStudio.Text.PredefinedSelectionTransformations)" />,
            <see cref="M:Microsoft.VisualStudio.Text.ISelectionTransformer.MoveTo(Microsoft.VisualStudio.Text.VirtualSnapshotPoint,System.Boolean,Microsoft.VisualStudio.Text.PositionAffinity)" />, and
            <see cref="M:Microsoft.VisualStudio.Text.ISelectionTransformer.MoveTo(Microsoft.VisualStudio.Text.VirtualSnapshotPoint,Microsoft.VisualStudio.Text.VirtualSnapshotPoint,Microsoft.VisualStudio.Text.VirtualSnapshotPoint,Microsoft.VisualStudio.Text.PositionAffinity)" />.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.ISelectionTransformer.MoveTo(Microsoft.VisualStudio.Text.VirtualSnapshotPoint,System.Boolean,Microsoft.VisualStudio.Text.PositionAffinity)">
            <summary>
            Moves the insertion and active points to the given location.
            </summary>
            <param name="point">The point to move to.</param>
            <param name="select">If <c>true</c>, leaves the anchor point where it is. If <c>false</c>, moves the anchor point too.</param>
            <param name="insertionPointAffinity">
            The affinity of the insertion point. This is used in places like word-wrap where one buffer position can represent both the
            end of one line and the beginning of the next.
            </param>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.ISelectionTransformer.MoveTo(Microsoft.VisualStudio.Text.VirtualSnapshotPoint,Microsoft.VisualStudio.Text.VirtualSnapshotPoint,Microsoft.VisualStudio.Text.VirtualSnapshotPoint,Microsoft.VisualStudio.Text.PositionAffinity)">
            <summary>
            Sets the anchor, active, and insertion points to the specified locations.
            </summary>
            <param name="anchorPoint">Specifies the stationary end of the selection span.</param>
            <param name="activePoint">Specifies the mobile end of the selection span.</param>
            <param name="insertionPoint">Specifies the location of the caret.</param>
            <param name="insertionPointAffinity">
            Specifies the affinity of the insertion point. This is used in places like word-wrap where one buffer position can represent both the
            end of one line and the beginning of the next.
            </param>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.ISelectionTransformer.CapturePreferredReferencePoint">
            <summary>
            Updates internal state to cache the current location as the desired reference point for navigation events.
            </summary>
            <remarks>
            This affects events like <see cref="F:Microsoft.VisualStudio.Text.PredefinedSelectionTransformations.MoveToPreviousLine" /> where the current
            X location of the rendered caret is used to project to the new location. Typically this method should be called
            in cases where the user is stating where they want to focus. Since this grabs the current state, there is no
            equivalent release method.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.ISelectionTransformer.CapturePreferredXReferencePoint">
            <summary>
            Updates internal state to cache the current x location as the desired reference point for navigation events.
            </summary>
            <remarks>
            This affects events like <see cref="F:Microsoft.VisualStudio.Text.PredefinedSelectionTransformations.MoveToPreviousLine" /> where the current
            X location of the rendered caret is used to project to the new location. Typically this method should be called
            in cases where the user is stating where they want to focus. Since this grabs the current state, there is no
            equivalent release method.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.ISelectionTransformer.CapturePreferredYReferencePoint">
            <summary>
            Updates internal state to cache the current y location as the desired reference point for navigation events.
            </summary>
            <remarks>
            This affects events like <see cref="F:Microsoft.VisualStudio.Text.PredefinedSelectionTransformations.MovePageUp" /> where the current
            Y location of the rendered caret is used to project to the new location. Typically this method should be called
            in cases where the user is stating where they want to focus. Since this grabs the current state, there is no
            equivalent release method.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.ISelectionTransformer.PerformAction(Microsoft.VisualStudio.Text.PredefinedSelectionTransformations)">
            <summary>
            Transforms <see cref="P:Microsoft.VisualStudio.Text.ISelectionTransformer.Selection" /> in a predefined way.
            </summary>
            <param name="action">The kind of transformation to perform</param>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.PredefinedSelectionTransformations">
            <summary>
            Defines a set of actions that are predefined for manipulating selections within a view. For custom manipulations see the usage
            of <see cref="T:Microsoft.VisualStudio.Text.ISelectionTransformer" />. These transformations can be passed in to
            <see cref="M:Microsoft.VisualStudio.Text.IMultiSelectionBroker.PerformActionOnAllSelections(Microsoft.VisualStudio.Text.PredefinedSelectionTransformations)" />,
            <see cref="M:Microsoft.VisualStudio.Text.IMultiSelectionBroker.TryPerformActionOnSelection(Microsoft.VisualStudio.Text.Selection,Microsoft.VisualStudio.Text.PredefinedSelectionTransformations,Microsoft.VisualStudio.Text.Selection@)" />,
            and <see cref="M:Microsoft.VisualStudio.Text.ISelectionTransformer.PerformAction(Microsoft.VisualStudio.Text.PredefinedSelectionTransformations)" />.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.PredefinedSelectionTransformations.ClearSelection">
            <summary>
            Resets the active and anchor points to be at the insertion point.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.PredefinedSelectionTransformations.MoveToNextCaretPosition">
            <summary>
            Moves the active, anchor, and insertion points ahead one position in the view.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.PredefinedSelectionTransformations.SelectToNextCaretPosition">
            <summary>
            Moves the active and insertion points ahead one position in the view, keeping the anchor point where it is.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.PredefinedSelectionTransformations.MoveToPreviousCaretPosition">
            <summary>
            Moves the active, anchor, and insertion points back one position in the view.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.PredefinedSelectionTransformations.SelectToPreviousCaretPosition">
            <summary>
            Moves the active and insertion points back one position in the view, keeping the anchor point where it is.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.PredefinedSelectionTransformations.MoveToNextWord">
            <summary>
            Moves the active, anchor, and insertion points ahead to the beginning of the next word.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.PredefinedSelectionTransformations.SelectToNextWord">
            <summary>
            Moves the active and insertion points ahead to the beginning of the next word, keeping the anchor point where it is.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.PredefinedSelectionTransformations.MoveToPreviousWord">
            <summary>
            Moves the active, anchor, and insertion points back to the end of the previous word.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.PredefinedSelectionTransformations.SelectToPreviousWord">
            <summary>
            Moves the active and insertion points back to the end of the previous word, keeping the anchor point where it is.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.PredefinedSelectionTransformations.MoveToBeginningOfLine">
            <summary>
            Moves the active, anchor, and insertion points back to the beginning of the current line.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.PredefinedSelectionTransformations.SelectToBeginningOfLine">
            <summary>
            Moves the active and insertion points back to the beginning of the current line, keeping the anchor point where it is.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.PredefinedSelectionTransformations.MoveToHome">
            <summary>
            Moves the active, anchor, and insertion points alternately between the beginning of the line, and the first non-whitespace character.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.PredefinedSelectionTransformations.SelectToHome">
            <summary>
            Moves the active and insertion points alternately between the beginning of the line, and the first non-whitespace character, keeping the anchor point where it is.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.PredefinedSelectionTransformations.MoveToEndOfLine">
            <summary>
            Moves the active, anchor, and insertion points ahead to the end of the current line.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.PredefinedSelectionTransformations.SelectToEndOfLine">
            <summary>
            Moves the active and insertion points ahead to the end of the current line, keeping the anchor point where it is.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.PredefinedSelectionTransformations.MoveToNextLine">
            <summary>
            Moves the active, anchor, and insertion points ahead to next line, staying as close to the user's preferred x-coordinate in the view as possible.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.PredefinedSelectionTransformations.SelectToNextLine">
            <summary>
            Moves the active and insertion points ahead to next line, staying as close to the user's preferred x-coordinate in the view as possible, keeping the anchor point where it is.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.PredefinedSelectionTransformations.MoveToPreviousLine">
            <summary>
            Moves the active, anchor, and insertion points back to the previous line, staying as close to the user's preferred x-coordinate in the view as possible.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.PredefinedSelectionTransformations.SelectToPreviousLine">
            <summary>
            Moves the active and insertion points back to the previous line, staying as close to the user's preferred x-coordinate in the view as possible, keeping the anchor point where it is.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.PredefinedSelectionTransformations.MovePageUp">
            <summary>
            Moves the active, anchor, and insertion points back one viewport height, staying as close to the user's preferred x and y coordinates in the view as possible.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.PredefinedSelectionTransformations.SelectPageUp">
            <summary>
            Moves the active and insertion points back one viewport height, staying as close to the user's preferred x and y coordinates in the view as possible, keeping the anchor point where it is.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.PredefinedSelectionTransformations.MovePageDown">
            <summary>
            Moves the active, anchor, and insertion points ahead one viewport height, staying as close to the user's preferred x and y coordinates in the view as possible.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.PredefinedSelectionTransformations.SelectPageDown">
            <summary>
            Moves the active and insertion points ahead one viewport height, staying as close to the user's preferred x and y coordinates in the view as possible, keeping the anchor point where it is.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.PredefinedSelectionTransformations.MoveToStartOfDocument">
            <summary>
            Moves the active, anchor, and insertion points back to the beginning of the document.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.PredefinedSelectionTransformations.SelectToStartOfDocument">
            <summary>
            Moves the active and insertion points back to the beginning of the document, keeping the anchor point where it is.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.PredefinedSelectionTransformations.MoveToEndOfDocument">
            <summary>
            Moves the active, anchor, and insertion points ahead to the end of the document.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.PredefinedSelectionTransformations.SelectToEndOfDocument">
            <summary>
            Moves the active and insertion points ahead to the end of the document, keeping the anchor point where it is.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.PredefinedSelectionTransformations.SelectCurrentWord">
            <summary>
            Moves the anchor point to the beginning of the current word. Moves the active and insertion points to the end of the current word.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.PredefinedSelectionTransformations.MoveToNextSubWord">
            <summary>
            Moves the active, anchor, and insertion points ahead to the beginning of the next subword.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.PredefinedSelectionTransformations.SelectToNextSubWord">
            <summary>
            Moves the active and insertion points ahead to the beginning of the next subword, keeping the anchor point where it is.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.PredefinedSelectionTransformations.MoveToPreviousSubWord">
            <summary>
            Moves the active, anchor, and insertion points back to the end of the previous word.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.PredefinedSelectionTransformations.SelectToPreviousSubWord">
            <summary>
            Moves the active and insertion points back to the end of the previous subword, keeping the anchor point where it is.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.PredefinedSelectionTransformations.ExpandSelectionToEntireLine">
            <summary>
            <para>
            Expand selections to entire line(s).
            Method works for both single and multicaret selection scenario.
            Moves the <see cref="P:Microsoft.VisualStudio.Text.Selection.AnchorPoint" /> to the start of line, and moves the caret, <see cref="P:Microsoft.VisualStudio.Text.Selection.InsertionPoint" />,
            and <see cref="P:Microsoft.VisualStudio.Text.Selection.ActivePoint" /> to the end of line.
            </para>
            <para>
            If <see cref="P:Microsoft.VisualStudio.Text.Selection.AnchorPoint" /> and <see cref="P:Microsoft.VisualStudio.Text.Selection.InsertionPoint" /> are on different lines:
            When <see cref="P:Microsoft.VisualStudio.Text.Selection.AnchorPoint" /> is the above of the <see cref="P:Microsoft.VisualStudio.Text.Selection.InsertionPoint" />:
            moves the <see cref="P:Microsoft.VisualStudio.Text.Selection.AnchorPoint" /> to the start of
            the line where <see cref="P:Microsoft.VisualStudio.Text.Selection.AnchorPoint" /> locates, and moves the Caret, <see cref="P:Microsoft.VisualStudio.Text.Selection.InsertionPoint" />, and
            <see cref="P:Microsoft.VisualStudio.Text.Selection.ActivePoint" /> to the end of line where <see cref="P:Microsoft.VisualStudio.Text.Selection.InsertionPoint" /> locates.
            </para>
            <para>
            When <see cref="P:Microsoft.VisualStudio.Text.Selection.InsertionPoint" /> is above of the <see cref="P:Microsoft.VisualStudio.Text.Selection.AnchorPoint" />:
            moves the <see cref="P:Microsoft.VisualStudio.Text.Selection.AnchorPoint" /> to the start of the line where <see cref="P:Microsoft.VisualStudio.Text.Selection.InsertionPoint" /> locates,
            and moves the Caret, <see cref="P:Microsoft.VisualStudio.Text.Selection.InsertionPoint" />, and <see cref="P:Microsoft.VisualStudio.Text.Selection.ActivePoint" /> to the
            end of line where <see cref="P:Microsoft.VisualStudio.Text.Selection.AnchorPoint" /> locates.
            </para>
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Selection">
            <summary>
            Manages the insertion, anchor, and active points for a single caret and its associated
            selection.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Selection.Invalid">
            <summary>
            A static instance of a selection that is invalid and can be used to check for instantiation.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Selection.#ctor(Microsoft.VisualStudio.Text.VirtualSnapshotPoint,Microsoft.VisualStudio.Text.PositionAffinity)">
            <summary>
            Instantiates a new Selection with a zero-width extent at the provided insertion point.
            </summary>
            <param name="insertionPoint">The location where a caret should be rendered and edits performed.</param>
            <param name="insertionPointAffinity">
            The affinity of the insertion point. This is used in places like word-wrap where one buffer position can represent both the
            end of one line and the beginning of the next.
            </param>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Selection.#ctor(Microsoft.VisualStudio.Text.SnapshotPoint,Microsoft.VisualStudio.Text.PositionAffinity)">
            <summary>
            Instantiates a new Selection with a zero-width extent at the provided insertion point.
            </summary>
            <param name="insertionPoint">The location where a caret should be rendered and edits performed.</param>
            <param name="insertionPointAffinity">
            The affinity of the insertion point. This is used in places like word-wrap where one buffer position can represent both the
            end of one line and the beginning of the next.
            </param>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Selection.#ctor(Microsoft.VisualStudio.Text.VirtualSnapshotSpan,System.Boolean)">
            <summary>
            Instantiates a new Selection with the given extent. Anchor and active points are defined by isReversed, and the
            insertion point is located at the active point.
            </summary>
            <param name="extent">The span that the selection covers.</param>
            <param name="isReversed">
            True implies that <see cref="P:Microsoft.VisualStudio.Text.Selection.ActivePoint" /> comes before <see cref="P:Microsoft.VisualStudio.Text.Selection.AnchorPoint" />.
            The <see cref="P:Microsoft.VisualStudio.Text.Selection.InsertionPoint" /> is set to the <see cref="P:Microsoft.VisualStudio.Text.Selection.ActivePoint" />.
            <see cref="P:Microsoft.VisualStudio.Text.Selection.InsertionPointAffinity" /> is set to <see cref="F:Microsoft.VisualStudio.Text.PositionAffinity.Predecessor" /> when isReversed is true.
            <see cref="F:Microsoft.VisualStudio.Text.PositionAffinity.Successor" /> otherwise.
            </param>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Selection.#ctor(Microsoft.VisualStudio.Text.SnapshotSpan,System.Boolean)">
            <summary>
            Instantiates a new Selection with the given extent. Anchor and active points are defined by isReversed, and the
            insertion point is located at the active point.
            </summary>
            <param name="extent">The span that the selection covers.</param>
            <param name="isReversed">
            True implies that <see cref="P:Microsoft.VisualStudio.Text.Selection.ActivePoint" /> comes before <see cref="P:Microsoft.VisualStudio.Text.Selection.AnchorPoint" />.
            The <see cref="P:Microsoft.VisualStudio.Text.Selection.InsertionPoint" /> is set to the <see cref="P:Microsoft.VisualStudio.Text.Selection.ActivePoint" />.
            <see cref="P:Microsoft.VisualStudio.Text.Selection.InsertionPointAffinity" /> is set to <see cref="F:Microsoft.VisualStudio.Text.PositionAffinity.Predecessor" /> when isReversed is true.
            <see cref="F:Microsoft.VisualStudio.Text.PositionAffinity.Successor" /> otherwise.
            </param>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Selection.#ctor(Microsoft.VisualStudio.Text.VirtualSnapshotPoint,Microsoft.VisualStudio.Text.VirtualSnapshotPoint)">
            <summary>
            Instantiates a new Selection with the given anchor and active points, and the
            insertion point is located at the active point.
            </summary>
            <param name="anchorPoint">The location of the fixed selection endpoint, meaning if a user were to hold shift and click,
            this point would remain where it is.</param>
            <param name="activePoint">location of the movable selection endpoint, meaning if a user were to hold shift and click,
            this point would be changed to the location of the click.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Selection.#ctor(Microsoft.VisualStudio.Text.SnapshotPoint,Microsoft.VisualStudio.Text.SnapshotPoint)">
            <summary>
            Instantiates a new Selection with the given anchor and active points, and the
            insertion point is located at the active point.
            </summary>
            <param name="anchorPoint">The location of the fixed selection endpoint, meaning if a user were to hold shift and click,
            this point would remain where it is.</param>
            <param name="activePoint">location of the movable selection endpoint, meaning if a user were to hold shift and click,
            this point would be changed to the location of the click.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Selection.#ctor(Microsoft.VisualStudio.Text.VirtualSnapshotPoint,Microsoft.VisualStudio.Text.VirtualSnapshotPoint,Microsoft.VisualStudio.Text.VirtualSnapshotPoint,Microsoft.VisualStudio.Text.PositionAffinity)">
            <summary>
            Instantiates a new Selection.
            </summary>
            <param name="insertionPoint">The location where a caret should be rendered and edits performed.</param>
            <param name="anchorPoint">The location of the fixed selection endpoint, meaning if a user were to hold shift and click,
            this point would remain where it is.</param>
            <param name="activePoint">location of the movable selection endpoint, meaning if a user were to hold shift and click,
            this point would be changed to the location of the click.</param>
            <param name="insertionPointAffinity">
            The affinity of the insertion point. This is used in places like word-wrap where one buffer position can represent both the
            end of one line and the beginning of the next.
            </param>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Selection.#ctor(Microsoft.VisualStudio.Text.SnapshotPoint,Microsoft.VisualStudio.Text.SnapshotPoint,Microsoft.VisualStudio.Text.SnapshotPoint,Microsoft.VisualStudio.Text.PositionAffinity)">
            <summary>
            Instantiates a new Selection.
            </summary>
            <param name="insertionPoint">The location where a caret should be rendered and edits performed.</param>
            <param name="anchorPoint">The location of the fixed selection endpoint, meaning if a user were to hold shift and click,
            this point would remain where it is.</param>
            <param name="activePoint">location of the movable selection endpoint, meaning if a user were to hold shift and click,
            this point would be changed to the location of the click.</param>
            <param name="insertionPointAffinity">
            The affinity of the insertion point. This is used in places like word-wrap where one buffer position can represent both the
            end of one line and the beginning of the next.
            </param>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Selection.IsValid">
            <summary>
            Gets whether this selection contains meaningful data.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Selection.InsertionPoint">
            <summary>
            Gets the location where a caret should be rendered and edits performed.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Selection.AnchorPoint">
            <summary>
            Gets the location of the fixed selection endpoint, meaning if a user were to hold shift and click,
            this point would remain where it is. If this is an empty selection, this will be at the
            <see cref="P:Microsoft.VisualStudio.Text.Selection.InsertionPoint" />.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Selection.ActivePoint">
            <summary>
            Gets the location of the movable selection endpoint, meaning if a user were to hold shift and click,
            this point would be changed to the location of the click. If this is an empty selection, this will be at the
            <see cref="P:Microsoft.VisualStudio.Text.Selection.InsertionPoint" />.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Selection.InsertionPointAffinity">
            <summary>
            Gets the affinity of the insertion point.
            This is used in places like word-wrap where one buffer position can represent both the
            end of one line and the beginning of the next.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Selection.IsReversed">
            <summary>
            True if <see cref="P:Microsoft.VisualStudio.Text.Selection.AnchorPoint" /> is later in the document than <see cref="P:Microsoft.VisualStudio.Text.Selection.ActivePoint" />. False otherwise.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Selection.IsEmpty">
            <summary>
            True if <see cref="P:Microsoft.VisualStudio.Text.Selection.AnchorPoint" /> equals <see cref="P:Microsoft.VisualStudio.Text.Selection.ActivePoint" />. False otherwise.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Selection.Start">
            <summary>
            Returns the smaller of <see cref="P:Microsoft.VisualStudio.Text.Selection.ActivePoint" /> and <see cref="P:Microsoft.VisualStudio.Text.Selection.AnchorPoint" />.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Selection.End">
            <summary>
            Returns the larger of <see cref="P:Microsoft.VisualStudio.Text.Selection.ActivePoint" /> and <see cref="P:Microsoft.VisualStudio.Text.Selection.AnchorPoint" />.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Selection.Extent">
            <summary>
            Returns the span from <see cref="P:Microsoft.VisualStudio.Text.Selection.Start" /> to <see cref="P:Microsoft.VisualStudio.Text.Selection.End" />.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Operations.IEditorOperations">
            <summary>
            Defines operations relating to the editor.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Operations.IEditorOperations.SelectAndMoveCaret(Microsoft.VisualStudio.Text.VirtualSnapshotPoint,Microsoft.VisualStudio.Text.VirtualSnapshotPoint)">
            <summary>
            Selects from the given anchor point to active point, moving the caret to the new active
            point of the selection.  The selected span will be made visible.
            </summary>
            <param name="anchorPoint">The anchor point of the new selection.</param>
            <param name="activePoint">The active point of the new selection and position of the caret.</param>
            <remarks>This puts the selection in stream selection mode and does the minimum amount of required scrolling to ensure the selected span is visible.</remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Operations.IEditorOperations.SelectAndMoveCaret(Microsoft.VisualStudio.Text.VirtualSnapshotPoint,Microsoft.VisualStudio.Text.VirtualSnapshotPoint,Microsoft.VisualStudio.Text.Editor.TextSelectionMode)">
            <summary>
            Selects from the given anchor point to active point, moving the caret to the new active
            point of the selection.  Additionally, ensure the selection is in the given selection
            mode, and make the selected span visible.
            </summary>
            <param name="anchorPoint">The anchor point of the new selection.</param>
            <param name="activePoint">The active point of the new selection and position of the caret.</param>
            <param name="selectionMode">The selection mode of the new selection.</param>
            <remarks>This does the minimum amount of required scrolling to ensure the selected span is visible.</remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Operations.IEditorOperations.SelectAndMoveCaret(Microsoft.VisualStudio.Text.VirtualSnapshotPoint,Microsoft.VisualStudio.Text.VirtualSnapshotPoint,Microsoft.VisualStudio.Text.Editor.TextSelectionMode,System.Nullable{Microsoft.VisualStudio.Text.Editor.EnsureSpanVisibleOptions})">
            <summary>
            Selects from the given anchor point to active point, moving the caret to the new active
            point of the selection.  Additionally, ensure the selection is in the given selection
            mode, and make the selected span visible.
            </summary>
            <param name="anchorPoint">The anchor point of the new selection.</param>
            <param name="activePoint">The active point of the new selection and position of the caret.</param>
            <param name="selectionMode">The selection mode of the new selection.</param>
            <param name="scrollOptions">What, if any, scrolling is done in the view after the selection is made. If null, no scrolling is done.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Operations.IEditorOperations.MoveToNextCharacter(System.Boolean)">
            <summary>
            Moves the caret to the next character.
            </summary>
            <param name="extendSelection">
            If <c>true</c>, the selection is extended when the caret is moved; if <c>false</c>, the selection is not extended.
            </param>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Operations.IEditorOperations.MoveToPreviousCharacter(System.Boolean)">
            <summary>
            Moves the caret to the previous character.
            </summary>
            <param name="extendSelection">
            If <c>true</c>, the selection is extended when the caret is moved; if <c>false</c>, the selection is not extended.
            </param>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Operations.IEditorOperations.MoveToNextWord(System.Boolean)">
            <summary>
            Moves the caret to the next word.
            </summary>
            <param name="extendSelection">
            If <c>true</c>, the selection is extended when the caret is moved; if <c>false</c>, the selection is not extended.
            </param>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Operations.IEditorOperations.MoveToPreviousWord(System.Boolean)">
            <summary>
            Moves the caret to the previous word.
            </summary>
            <param name="extendSelection">
            If <c>true</c>, the selection is extended when the caret is moved; if <c>false</c>, the selection is not extended.
            </param>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Operations.IEditorOperations.MoveLineUp(System.Boolean)">
            <summary>
            Moves the caret one line up.
            </summary>
            <param name="extendSelection">
            If <c>true</c>, the selection is extended when the caret is moved; if <c>false</c>, the selection is not extended.
            </param>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Operations.IEditorOperations.MoveLineDown(System.Boolean)">
            <summary>
            Moves the caret one line down.
            </summary>
            <param name="extendSelection">
            If <c>true</c>, the selection is extended when the caret is moved; if <c>false</c>, the selection is not extended.
            </param>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Operations.IEditorOperations.PageUp(System.Boolean)">
            <summary>
            Moves the caret one page up.
            </summary>
            <param name="extendSelection">
            If <c>true</c>, the selection is extended when the caret is moved; if <c>false</c>, the selection is not extended.
            </param>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Operations.IEditorOperations.PageDown(System.Boolean)">
            <summary>
            Moves the caret one page down.
            </summary>
            <param name="extendSelection">
            If <c>true</c>, the selection is extended when the caret is moved; if <c>false</c>, the selection is not extended.
            </param>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Operations.IEditorOperations.MoveToEndOfLine(System.Boolean)">
            <summary>
            Moves the caret to the end of the line.
            </summary>
            <param name="extendSelection">
            If <c>true</c>, the selection is extended when the caret is moved; if <c>false</c>, the selection is not extended.
            </param>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Operations.IEditorOperations.MoveToStartOfLine(System.Boolean)">
            <summary>
            Moves the caret to the first column on the current line.
            </summary>
            <param name="extendSelection">
            If <c>true</c>, the selection is extended when the caret is moved; if <c>false</c>, the selection is not extended.
            </param>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Operations.IEditorOperations.MoveToHome(System.Boolean)">
            <summary>
            Moves the caret to the first text column on the line; if the caret is already
            at the first text column or there is no text, move the caret to the first column
            on the line.
            </summary>
            <param name="extendSelection">
            If <c>true</c>, the selection is extended when the caret is moved; if <c>false</c>, the selection is not extended.
            </param>
            <remarks>This is effectively the behavior of pressing the Home key</remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Operations.IEditorOperations.GotoLine(System.Int32)">
            <summary>
            Moves the caret to the start of the specified line.
            </summary>
            <param name="lineNumber">
            The line number to which to move the caret.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="lineNumber" /> is less than zero 
            or greater than the line number of the last line in the text buffer.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Operations.IEditorOperations.MoveToStartOfDocument(System.Boolean)">
            <summary>
            Moves the caret to the start of the document.
            </summary>
            <param name="extendSelection">
            If <c>true</c>, the selection is extended when the caret is moved; if <c>false</c>, the selection is not extended.
            </param>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Operations.IEditorOperations.MoveToEndOfDocument(System.Boolean)">
            <summary>
            Moves the caret at the end of the document.
            </summary>
            <param name="extendSelection">
            If <c>true</c>, the selection is extended when the caret is moved; if <c>false</c>, the selection is not extended.
            </param>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Operations.IEditorOperations.MoveCurrentLineToTop">
            <summary>
            Moves the current line to the top of the view.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Operations.IEditorOperations.MoveCurrentLineToBottom">
            <summary>
            Moves the current line to the bottom of the view.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Operations.IEditorOperations.MoveToStartOfLineAfterWhiteSpace(System.Boolean)">
            <summary>
            Moves the caret to the start of the line after all white space.
            </summary>
            <param name="extendSelection">
            If <c>true</c>, the selection is extended when the caret is moved; if <c>false</c>, the selection is not extended.
            </param>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Operations.IEditorOperations.MoveToStartOfNextLineAfterWhiteSpace(System.Boolean)">
            <summary>
            Moves the caret to the start of the next line after all white space.
            </summary>
            <param name="extendSelection">
            If <c>true</c>, the selection is extended when the caret is moved; if <c>false</c>, the selection is not extended.
            </param>
            <remarks>
            <para>
            If the caret is on the last line, this method moves it to the start of the line after all white space.
            </para>
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Operations.IEditorOperations.MoveToStartOfPreviousLineAfterWhiteSpace(System.Boolean)">
            <summary>
            Moves the caret to the start of the previous line after all white space.
            </summary>
            <param name="extendSelection">
            If <c>true</c>, the selection is extended when the caret is moved; if <c>false</c>, the selection is not extended.
            </param>
            <remarks>
            <para>
            If the caret is on the first line, this method moves it to the start of the ine after all white space.
            </para>
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Operations.IEditorOperations.MoveToLastNonWhiteSpaceCharacter(System.Boolean)">
            <summary>
            Moves the caret to just before the last non-white space character in the line.
            </summary>
            <param name="extendSelection">
            If <c>true</c>, the selection is extended when the caret is moved; if <c>false</c>, the selection is not extended.
            </param>
            <remarks>
            If the line is blank, the caret is moved to the start of the line.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Operations.IEditorOperations.MoveToTopOfView(System.Boolean)">
            <summary>
            Moves the caret to the first fully-visible line of the view.
            </summary>
            <param name="extendSelection">
            If <c>true</c>, the selection is extended when the caret is moved; if <c>false</c>, the selection is not extended.
            </param>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Operations.IEditorOperations.MoveToBottomOfView(System.Boolean)">
            <summary>
            Moves the caret to the last fully-visible line of the view.
            </summary>
            <param name="extendSelection">
            If <c>true</c>, the selection is extended when the caret is moved; if <c>false</c>, the selection is not extended.
            </param>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Operations.IEditorOperations.SwapCaretAndAnchor">
            <summary>
            Swaps the caret from its current position to the other end of the selection.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Operations.IEditorOperations.Backspace">
            <summary>
            Deletes a character to the left of the current caret.
            </summary>
            <returns>
            <c>true</c> if the edit succeeded, otherwise <c>false</c>.
            </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Operations.IEditorOperations.DeleteWordToRight">
            <summary>
            Deletes the word to the right of the current caret position.
            </summary>
            <returns>
            <c>true</c> if the edit succeeded, otherwise <c>false</c>.
            </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Operations.IEditorOperations.DeleteWordToLeft">
            <summary>
            Deletes the word to the left of the current caret position.
            </summary>
            <returns>
            <c>true</c> if the edit succeeded, otherwise <c>false</c>.
            </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Operations.IEditorOperations.DeleteToEndOfLine">
            <summary>
            Deletes the line the caret is on, up to the line break character and the selection, if present.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Operations.IEditorOperations.DeleteToBeginningOfLine">
            <summary>
            Deletes the line the caret is on, up to the previous line break character and the selection, if present.
            </summary>
            <returns>
            <c>true</c> if the edit succeeded, otherwise <c>false</c>.
            </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Operations.IEditorOperations.DeleteBlankLines">
            <summary>
            Deletes all empty lines or lines that contain only white space in the selection.
            </summary>
            <returns>
            <c>true</c> if the edit succeeded, otherwise <c>false</c>.
            </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Operations.IEditorOperations.DeleteHorizontalWhiteSpace">
            <summary>
            Deletes all white space from the beginnings and ends of the selected lines, and trims internal white space.
            </summary>
            <returns>
            <c>true</c> if the edit succeeded, otherwise <c>false</c>.
            </returns>
            <remarks>
            <para>
            The algorithm for this operation follows these rules:
            </para>
            <para>
            If there is no selection, the white space around the caret is trimmed so that only one space or tab remains.
            If there is only one space or tab, then this operation does nothing.
            </para>
            <para>
            If there is a selection, then the white space at the beginning or end of a line 
            contained within the selection is completely deleted.
            If there is at least one block of contiguous white space longer than one character 
            in the selection, then all white space between the first and last 
            non-white space characters is trimmed so that only one space or tab remains for each contiguous block.
            If there are only contiguous runs of a single space or tab contained within the selection,
            then all spaces and tabs in the selection are deleted.
            </para>
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Operations.IEditorOperations.InsertNewLine">
            <summary>
            Inserts a new line at the current caret position.
            </summary>
            <returns>
            <c>true</c> if the edit succeeded, otherwise <c>false</c>.
            </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Operations.IEditorOperations.OpenLineAbove">
            <summary>
            Inserts a new line at the start of the line the caret is on.
            </summary>
            <returns>
            <c>true</c> if the edit succeeded, otherwise <c>false</c>.
            </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Operations.IEditorOperations.OpenLineBelow">
            <summary>
            Inserts a new line at the end of the line the caret is on.
            </summary>
            <returns>
            <c>true</c> if the edit succeeded, otherwise <c>false</c>.
            </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Operations.IEditorOperations.Indent">
            <summary>
            If there is a multi-line selection indents the selection, otherwise inserts a tab at the caret location.
            </summary>
            <returns>
            <c>true</c> if the edit succeeded, otherwise <c>false</c>.
            </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Operations.IEditorOperations.Unindent">
            <summary>
            If there is a multi-line selection, unindents the selection. If there is a single line selection,
            removes up to a tab's worth of white space from before the start of the selection. If there is no selection,
            removes up to a tab's worth of white space from before the caret position.
            </summary>
            <returns>
            <c>true</c> if the edit succeeded, otherwise <c>false</c>.
            </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Operations.IEditorOperations.IncreaseLineIndent">
            <summary>
            If there is a multi-line selection, adds indentation to every line in the selection, 
            otherwise adds indentation to the line the caret is on.
            </summary>
            <returns>
            <c>true</c> if the edit succeeded, otherwise <c>false</c>.
            </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Operations.IEditorOperations.DecreaseLineIndent">
            <summary>
            If there is a multi-line selection, removes indentation from every line in the selection, 
            otherwise removes indentation from the line the caret is on.
            </summary>
            <returns>
            <c>true</c> if the edit succeeded, otherwise <c>false</c>.
            </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Operations.IEditorOperations.InsertText(System.String)">
            <summary>
            Inserts the given text at the current caret position.
            </summary>
            <param name="text">
            The text to be inserted in the buffer.
            </param>
            <returns>
            <c>true</c> if the edit succeeded, otherwise <c>false</c>.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="text" /> is null.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Operations.IEditorOperations.InsertTextAsBox(System.String,Microsoft.VisualStudio.Text.VirtualSnapshotPoint@,Microsoft.VisualStudio.Text.VirtualSnapshotPoint@)">
            <summary>
            Inserts the given text at the current caret position as a box.
            </summary>
            <param name="text">
            The text to be inserted in the buffer.  Each "line" from the text
            will be written out a line at a time.
            </param>
            <param name="boxStart">The start of the newly inserted box.</param>
            <param name="boxEnd">The end of the newly inserted box.</param>
            <returns>
            <c>true</c> if the edit succeeded, otherwise <c>false</c>.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="text" /> is null.</exception>
            <remarks>
            This has the same behavior as copying and pasting a box selection.
            In order to insert the text as a box, the <paramref name="text" /> is
            split by newlines and inserted a line at a time, each one on a successive
            line below the line the caret is on (and starting at the caret's x coordinate
            on each line).
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Operations.IEditorOperations.InsertProvisionalText(System.String)">
            <summary>
            Inserts the given text at the current caret position as provisional text.
            </summary>
            <param name="text">
            The text to be inserted in the buffer.
            </param>
            <returns>
            <c>true</c> if the edit succeeded, otherwise <c>false</c>.
            </returns>
            <remarks>
            Provisional text is automatically replaced by subsequent InsertText() or InsertProvisionalText() calls.
            </remarks>
            <exception cref="T:System.ArgumentNullException"><paramref name="text" /> is null.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Operations.IEditorOperations.Delete">
            <summary>
            Deletes the selection if there is one, or the next character in the buffer if one exists.
            </summary>
            <returns>
            <c>true</c> if the edit succeeded, otherwise <c>false</c>.
            </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Operations.IEditorOperations.DeleteFullLine">
            <summary>
            If there is a selection, deletes all the lines touched by the selection, including line break characters.
            Otherwise, deletes the line the caret is on, including the line break characters.
            </summary>
            <returns>
            <c>true</c> if the edit succeeded, otherwise <c>false</c>.
            </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Operations.IEditorOperations.ReplaceSelection(System.String)">
            <summary>
            Replaces the text selection with the new text.
            </summary>
            <param name="text">
            The new text that replaces the old selection.
            </param>
            <returns>
            <c>true</c> if the edit succeeded, otherwise <c>false</c>.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="text" /> is null.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Operations.IEditorOperations.TransposeCharacter">
            <summary>
            Transposes the character at the cursor with the next character. 
            Transposes the first two characters when the cursor is at the start of the line. 
            Transposes the last two characters when the cursor is at the end of the line.
            </summary>
            <returns>
            <c>true</c> if the edit succeeded, otherwise <c>false</c>.
            </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Operations.IEditorOperations.TransposeLine">
            <summary>
            Transposes the line containing the cursor with the next line. Transposes the last two lines when the cursor at the last line.
            </summary>
            <returns>
            <c>true</c> if the edit succeeded, otherwise <c>false</c>.
            </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Operations.IEditorOperations.TransposeWord">
            <summary>
            Transposes the current word with the next one. White space and punctuation are not treated as words.
            </summary>
            <returns>
            <c>true</c> if the edit succeeded, otherwise <c>false</c>.
            </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Operations.IEditorOperations.MakeLowercase">
            <summary>
            Converts uppercase letters to lowercase in the selection. If the selection is empty, makes the next character lowercase.
            </summary>
            <returns>
            <c>true</c> if the edit succeeded, otherwise <c>false</c>.
            </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Operations.IEditorOperations.MakeUppercase">
            <summary>
            Converts lowercase letters to uppercase in the selection. If the selection is empty, makes the next character uppercase.
            </summary>
            <returns>
            <c>true</c> if the edit succeeded, otherwise <c>false</c>.
            </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Operations.IEditorOperations.ToggleCase">
            <summary>
            Switches the case of each character in the selection. If the selection is empty, changes the case of the next character.
            </summary>
            <returns>
            <c>true</c> if the edit succeeded, otherwise <c>false</c>.
            </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Operations.IEditorOperations.Capitalize">
            <summary>
            Converts all the characters in the selection to lowercase, 
            then converts the first character in each word in the selection to uppercase.
            If the selection is empty, then it makes the next character uppercase.
            </summary>
            <returns>
            <c>true</c> if the edit succeeded, otherwise <c>false</c>.
            </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Operations.IEditorOperations.ReplaceText(Microsoft.VisualStudio.Text.Span,System.String)">
            <summary>
            Replaces text from the given span with the new text.
            </summary>
            <param name="replaceSpan">The span of text to be replaced.</param>
            <param name="text">
            The new text.
            </param>
            <returns>
            <c>true</c> if the edit succeeded, otherwise <c>false</c>.
            </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Operations.IEditorOperations.ReplaceAllMatches(System.String,System.String,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Replaces all matching occurrences of the given string.
            </summary>
            <param name="searchText">
            The text to match.
            </param>
            <param name="replaceText">
            The replacement text.
            </param>
            <param name="matchCase">
            <c>true</c> if the search should match case, otherwise <c>false</c>.
            </param>
            <param name="matchWholeWord">
            <c>true</c> if the search should match whole words, otherwise <c>false</c>.
            </param>
            <param name="useRegularExpressions">
            <c>true</c> if the search should use regular expressions, otherwise <c>false</c>.
            </param>
            <returns>
            <c>true</c> if the edit succeeded, otherwise <c>false</c>.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="searchText" /> is null.</exception>
            <exception cref="T:System.ArgumentException"> if <paramref name="useRegularExpressions" /> is true and <paramref name="searchText" /> is an invalid regular expression.</exception>
            <returns>The number of matches found.</returns>
            <remarks>If any of the matches found is read only, none of the matches will be replaced.</remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Operations.IEditorOperations.InsertFile(System.String)">
            <summary>
            Inserts a file on disk into the text buffer.
            </summary>
            <param name="filePath">The path of the file on disk.</param>
            <returns>
            <c>true</c> if the edit succeeded, otherwise <c>false</c>.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="filePath" /> is null.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="filePath" /> is a zero-length string, 
            contains only white space, or contains one or more invalid characters as defined by InvalidPathChars.</exception>
            <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. 
            For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters. </exception>
            <exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid (for example, it is on an unmapped drive). </exception>
            <exception cref="T:System.IO.IOException">An I/O error occurred while opening the file. </exception>
            <exception cref="T:System.UnauthorizedAccessException"><paramref name="filePath" /> specified a file that is read-only, or
            this operation is not supported on the current platform, or
            <paramref name="filePath" /> specified a directory, or
            the caller does not have the required permission.</exception>
            <exception cref="T:System.IO.FileNotFoundException">The file specified in <paramref name="filePath" /> was not found.</exception>
            <exception cref="T:System.NotSupportedException"><paramref name="filePath" /> is in an invalid format. </exception>
            <exception cref="T:System.Security.SecurityException">The caller does not have the required permission.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Operations.IEditorOperations.Tabify">
            <summary>
            Converts the leading white space to tabs on all lines touched by the selection and caret.
            </summary>
            <returns>
            <c>true</c> if the edit succeeded, otherwise <c>false</c>.
            </returns>
            <remarks>
            <para>
            If the column position of the first non-white space character is not evenly divisible by the tab size, there will be
            spaces left at the end of the line equal to the remainder of that division.
            </para>
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Operations.IEditorOperations.Untabify">
            <summary>
            Converts the leading white space to spaces of all lines touched by the selection and caret.
            </summary>
            <returns>
            <c>true</c> if the edit succeeded, otherwise <c>false</c>.
            </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Operations.IEditorOperations.ConvertSpacesToTabs">
            <summary>
            Converts spaces to tabs in the selection, or on the line the caret is on if the selection is empty.
            </summary>
            <returns>
            <c>true</c> if the edit succeeded, otherwise <c>false</c>.
            </returns>
            <remarks>
            <para>
            Only spaces immediately preceding a tab stop will be converted to tabs.
            </para>
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Operations.IEditorOperations.ConvertTabsToSpaces">
            <summary>
            Converts tabs to spaces in the selection, or on the line the caret is on if the selection is empty.
            </summary>
            <returns>
            <c>true</c> if the edit succeeded, otherwise <c>false</c>.
            </returns>
            <remarks>
            <para>
            A tab is replaced by the number of spaces equal to the distance between one tab and the next.
            </para>
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Operations.IEditorOperations.NormalizeLineEndings(System.String)">
            <summary>
            Replaces all line endings that do not match <paramref name="replacement" /> with <paramref name="replacement" />.
            </summary>
            <param name="replacement">The character sequence that all line endings will match.</param>
            <returns>
            <c>true</c> if the edit succeeded, otherwise <c>false</c>.
            </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Operations.IEditorOperations.SelectCurrentWord">
            <summary>
            Selects the current word.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Operations.IEditorOperations.SelectEnclosing">
            <summary>
            Selects the enclosing parent.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Operations.IEditorOperations.SelectFirstChild">
            <summary>
            Selects the first child.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Operations.IEditorOperations.SelectNextSibling(System.Boolean)">
            <summary>
            Selects the next sibling.
            </summary>
            <param name="extendSelection">If <c>true</c>, the selection is extended when the caret is moved; if <c>false</c>, the selection is not extended.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Operations.IEditorOperations.SelectPreviousSibling(System.Boolean)">
            <summary>
            Selects the previous sibling.
            </summary>
            <param name="extendSelection">If <c>true</c>, the selection is extended when the caret is moved; if <c>false</c>, the selection is not extended.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Operations.IEditorOperations.SelectLine(Microsoft.VisualStudio.Text.Formatting.ITextViewLine,System.Boolean)">
            <summary>
            Selects the given line.
            </summary>
            <param name="viewLine">
            The line to select.
            </param>
            <param name="extendSelection">
            If <c>true</c>, the selection is extended when the caret is moved; if <c>false</c>, the selection is not extended.
            </param>
            <exception cref="T:System.ArgumentNullException"><paramref name="viewLine" /> is
            <c>null</c></exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Operations.IEditorOperations.SelectAll">
            <summary>
            Selects all text.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Operations.IEditorOperations.ExtendSelection(System.Int32)">
            <summary>
            Extends the current selection span to the new selection end.
            </summary>
            <param name="newEnd">
            The new character position to which the selection is to be extended.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="newEnd" /> is less than 0.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Operations.IEditorOperations.MoveCaret(Microsoft.VisualStudio.Text.Formatting.ITextViewLine,System.Double,System.Boolean)">
            <summary>
            Moves the caret to the given <paramref name="textLine" /> at the given <paramref name="horizontalOffset" />.
            </summary>
            <param name="textLine">The <see cref="T:Microsoft.VisualStudio.Text.Formatting.ITextViewLine" /> on which to place the caret.</param>
            <param name="horizontalOffset">The horizontal location in the given <paramref name="textLine" /> to which to move the caret.</param>
            <param name="extendSelection">
            If <c>true</c>, the selection is extended when the caret is moved; if <c>false</c>, the selection is not extended.
            </param>
            <exception cref="T:System.ArgumentNullException"><paramref name="textLine" /> is null.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Operations.IEditorOperations.ResetSelection">
            <summary>
            Resets any selection in the text.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Operations.IEditorOperations.CopySelection">
            <summary>
            Copies the selected text to the clipboard.
            </summary>
            <returns>
            <c>true</c> if the clipboard operation succeeded, otherwise <c>false</c>.
            </returns>
            <exception cref="T:System.InsufficientMemoryException"> is thrown if there is not sufficient memory to complete the operation.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Operations.IEditorOperations.CutSelection">
            <summary>
            Cuts the selected text.
            </summary>
            <returns>
            <c>true</c> if the edit and the clipboard operation both succeeded, otherwise <c>false</c>.
            </returns>
            <exception cref="T:System.InsufficientMemoryException"> is thrown if there is not sufficient memory to complete the operation.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Operations.IEditorOperations.Paste">
            <summary>
            Pastes text from the clipboard to the text buffer.
            </summary>
            <returns>
            <c>true</c> if the edit and the clipboard operation both succeeded, otherwise <c>false</c>.
            </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Operations.IEditorOperations.CutFullLine">
            <summary>
            If there is a selection present, deletes all lines touched by the selection,
            including line break characters, and copies the text to the clipboard.
            Otherwise, deletes the line the caret is on, including the line break characters, and copies the text to the clipboard.
            </summary>
            <returns>
            <c>true</c> if the edit and the clipboard operation both succeeded, otherwise <c>false</c>.
            </returns>
            <exception cref="T:System.InsufficientMemoryException"> is thrown if there is not sufficient memory to complete the operation.</exception>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Operations.IEditorOperations.CanPaste">
            <summary>
            Determines whether a paste operation is possible.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Operations.IEditorOperations.CanDelete">
            <summary>
            Determines whether a delete operation is possible.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Operations.IEditorOperations.CanCut">
            <summary>
            Determines whether  a cut operation is possible.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Operations.IEditorOperations.ScrollUpAndMoveCaretIfNecessary">
            <summary>
            Scrolls the view up by one line and repositions the caret, 
            if it is scrolled off the page, to the last fully-visible
            line in the view.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Operations.IEditorOperations.ScrollDownAndMoveCaretIfNecessary">
            <summary>
            Scrolls the view down by one line and repositions the caret, 
            if it is scrolled off the page, to the first fully-visible
            line in the view.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Operations.IEditorOperations.ScrollPageUp">
            <summary>
            Scrolls the view up a page without moving the caret.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Operations.IEditorOperations.ScrollPageDown">
            <summary>
            Scrolls the view down a page without moving the caret.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Operations.IEditorOperations.ScrollColumnLeft">
            <summary>
            Scrolls the view one column to the left.
            </summary>
            <remarks>
            A column is the width of a space in the default font.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Operations.IEditorOperations.ScrollColumnRight">
            <summary>
            Scrolls the view one column to the right.
            </summary>
            <remarks>
            A column is the width of a space in the default font.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Operations.IEditorOperations.ScrollLineBottom">
            <summary>
            Scrolls the line the caret is on, so that it is the last
            fully-visible line in the view.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Operations.IEditorOperations.ScrollLineTop">
            <summary>
            Scroll sthe line the caret is on, so that it is the first
            fully-visible line in the view.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Operations.IEditorOperations.ScrollLineCenter">
            <summary>
            Scrolls the line the caret is on, so that it is centered in the view.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Operations.IEditorOperations.AddBeforeTextBufferChangePrimitive">
            <summary>
            Adds an <see cref="T:Microsoft.VisualStudio.Text.Operations.ITextUndoPrimitive" /> to the <see cref="T:Microsoft.VisualStudio.Text.Operations.ITextUndoHistory" /> for the buffer
            that will revert the selection to the current state when it is undone.
            </summary>
            <remarks>
            When performing edits that will change the selection, you can surround the edits with calls
            to <see cref="M:Microsoft.VisualStudio.Text.Operations.IEditorOperations.AddBeforeTextBufferChangePrimitive" /> and 
            <see cref="M:Microsoft.VisualStudio.Text.Operations.IEditorOperations.AddAfterTextBufferChangePrimitive" /> to ensure that the selection
            behaves correctly when the edits are undone and redone.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Operations.IEditorOperations.AddAfterTextBufferChangePrimitive">
            <summary>
            Adds an <see cref="T:Microsoft.VisualStudio.Text.Operations.ITextUndoPrimitive" /> to the <see cref="T:Microsoft.VisualStudio.Text.Operations.ITextUndoHistory" /> for the buffer
            that will revert the selection to the current state when it is redone.
            </summary>
            <remarks>
            When performing edits that will change the selection, you can surround the edits with calls
            to <see cref="M:Microsoft.VisualStudio.Text.Operations.IEditorOperations.AddBeforeTextBufferChangePrimitive" /> and 
            <see cref="M:Microsoft.VisualStudio.Text.Operations.IEditorOperations.AddAfterTextBufferChangePrimitive" /> to ensure that the selection
            behaves correctly when the edits are undone and redone.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Operations.IEditorOperations.ZoomIn">
            <summary>
            Zooms in to the text view by a scaling factor of 10%
            </summary>
            <remarks>
            The maximum zooming scale is 400%
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Operations.IEditorOperations.ZoomOut">
            <summary>
            Zooms out of the text view by a scaling factor of 10%
            </summary>
            <remarks>
            The minimum zooming scale is 20%
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Operations.IEditorOperations.ZoomTo(System.Double)">
            <summary>
            Applies the given zoomLevel to the text view
            </summary>
            <param name="zoomLevel">The zoom level to apply between 20% to 400%</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Operations.IEditorOperations.GetWhitespaceForVirtualSpace(Microsoft.VisualStudio.Text.VirtualSnapshotPoint)">
            <summary>
            Gets a string composed of whitespace characters that would be inserted to fill the gap between
            a given <see cref="T:Microsoft.VisualStudio.Text.VirtualSnapshotPoint" /> and the closest <see cref="T:Microsoft.VisualStudio.Text.SnapshotPoint" /> on the same line.
            </summary>
            <param name="point">The point in virtual space</param>
            <remarks>
            Returns an empty string if the provided <paramref name="point" /> is not in virtual space.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Operations.IEditorOperations.TextView">
            <summary>
            Gets the text view on which these operations work.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Operations.IEditorOperations.Options">
            <summary>
            Gets the options specific to this view.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Operations.IEditorOperations.ProvisionalCompositionSpan">
            <summary>
            Gets the span of the current provisional composition (null if there is no provisional composition).
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Operations.IEditorOperations.SelectedText">
            <summary>
            Gets the selected text.
            </summary>
            <remarks>
            In box selection mode, this will have each span of text separated by a newline
            character, with an extra newline at the very end.
            </remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Operations.IEditorOperations2">
            <summary>
            Defines operations relating to the editor, in addition to operations defined by <see cref="T:Microsoft.VisualStudio.Text.Operations.IEditorOperations" />.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Operations.IEditorOperations2.MoveSelectedLinesUp">
            <summary>
            Moves the selected lines up above the line bordering the selection on top. 
            Moving up from the top of the file will return true, however no changes will be made.
            Collapsed regions being moved, and being moved over, will remain collapsed.
            Moves involving readonly regions will result in no changes being made.
            </summary>
            <returns>
            <c>true</c> if the edit succeeded or no change was needed, otherwise <c>false</c>.
            </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Operations.IEditorOperations2.MoveSelectedLinesDown">
            <summary>
            Moves the selected lines below the line bordering the selection on the bottom.
            Moving down from the bottom of the file will return true, however no changes will be made.
            Collapsed regions being moved, and being moved over, will remain collapsed.
            Moves involving readonly regions will result in no changes being made.
            </summary>
            <returns>
            <c>true</c> if the edit succeeded or no change was needed, otherwise <c>false</c>.
            </returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Operations.IEditorOperations3">
            <summary>
            Defines operations relating to the editor, in addition to operations defined by <see cref="T:Microsoft.VisualStudio.Text.Operations.IEditorOperations2" />.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Operations.IEditorOperations3.InsertFinalNewLine">
            <summary>
            Inserts a new line at the end of the document if it's not there yet.
            </summary>
            <returns>
            <c>true</c> if the edit succeeded, otherwise <c>false</c>.
            </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Operations.IEditorOperations3.TrimTrailingWhiteSpace">
            <summary>
            Deletes all white space from ends of the selected lines.
            </summary>
            <returns>
            <c>true</c> if the edit succeeded, otherwise <c>false</c>.
            </returns>
            <remarks>
            <para>
            The algorithm for this operation follows these rules:
            </para>
            <para>
            If there is no selection, the trailing white space is deleted on all lines in the document.
            </para>
            <para>
            If there is a selection, then the trailing white space is deleted on all lines the selection spans.
            </para>
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Operations.IEditorOperations3.DuplicateSelection">
            <summary>
            Duplicates the current selection, or the whole line (if there is no selection), without changing the clipboard.
            </summary>
            <returns>
            <c>true</c> if the edit succeeded, otherwise <c>false</c>.
            </returns>
            <remarks>
            Multiple selection cases like block selection will treat each selection independently.
            </remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Operations.IEditorOperations4">
            <summary>
            Defines operations relating to the editor, in addition to operations defined by <see cref="T:Microsoft.VisualStudio.Text.Operations.IEditorOperations3" />.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Operations.IEditorOperations4.NormalizeNewlinesInString(System.String)">
            <summary>
            Returns a string with the original content except for newlines, which are replaced to match the document
            </summary>
            <param name="text">Text to normalize newlines</param>
            <returns>The normalized string, if the document has enough information to normalize with. The original string otherwise.</returns>
            <remarks>This method uses the newline state associated with the document buffer.</remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Operations.IEditorOperations4.MoveToNextSubWord(System.Boolean)">
            <summary>
            Moves the caret to the next subword.
            </summary>
            <param name="extendSelection">
            If <c>true</c>, the selection is extended when the caret is moved; if <c>false</c>, the selection is not extended.
            </param>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Operations.IEditorOperations4.MoveToPreviousSubWord(System.Boolean)">
            <summary>
            Moves the caret to the previous subword.
            </summary>
            <param name="extendSelection">
            If <c>true</c>, the selection is extended when the caret is moved; if <c>false</c>, the selection is not extended.
            </param>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Operations.IEditorOperations4.TransposeSubword">
            <summary>
            Transposes the current subword with the next subword.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Operations.IEditorOperations4.DeleteSubwordToRight">
            <summary>
            Deletes to the end of the subword.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Operations.IEditorOperations4.DeleteSubwordToLeft">
            <summary>
            Deletes to the start of the subword.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Operations.IEditorOperations4.SelectCurrentSubword">
            <summary>
            Select the current subword.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Operations.IEditorOperationsFactoryService">
            <summary>
            A service that provides <see cref="T:Microsoft.VisualStudio.Text.Operations.IEditorOperations" /> objects.
            </summary>
            <remarks>This is a MEF component part, and should be imported as follows:
            [Import]
            IEditorOperationsFactoryService factory = null;
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Operations.IEditorOperationsFactoryService.GetEditorOperations(Microsoft.VisualStudio.Text.Editor.ITextView)">
            <summary>
            Gets the <see cref="T:Microsoft.VisualStudio.Text.Operations.IEditorOperations" /> objects for the specified <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView" />.
            </summary>
            <param name="textView">The <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView" />.</param>
            <returns>The <see cref="T:Microsoft.VisualStudio.Text.Operations.IEditorOperations" />. </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.TextBufferOperationHelpers.IndexOfNextNonWhiteSpaceCharacter(Microsoft.VisualStudio.Text.ITextSnapshotLine,System.Int32)">
            <summary>
            Find the index of the next non-whitespace character in a line.
            </summary>
            <param name="line">The line to search.</param>
            <param name="startIndex">The index at which to begin the search, relative to the start of the line.</param>
            <returns>The index, relative to the start of the line, of the first non-whitespace character whose index 
            is <paramref name="startIndex" /> or greater, or -1 if there are not any non-whitespace characters at that index or greater.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException"> if <paramref name="startIndex" /> is negative.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.TextBufferOperationHelpers.IndexOfPreviousNonWhiteSpaceCharacter(Microsoft.VisualStudio.Text.ITextSnapshotLine,System.Int32)">
            <summary>
            Find the index of the previous non-whitespace character in a line.
            </summary>
            <param name="line">The line to search.</param>
            <param name="startIndex">The index at which to begin the search, relative to the start of the line.</param>
            <returns>The index, relative to the start of the line, of the first non-whitespace character whose index 
            is <paramref name="startIndex" /> or greater, or -1 if there are not any non-whitespace characters at that index or greater.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException"> if <paramref name="startIndex" /> is negative.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.TextBufferOperationHelpers.HasAnyNonWhitespaceCharacters(Microsoft.VisualStudio.Text.ITextSnapshotLine)">
            <summary>
            Checks if the given <see cref="T:Microsoft.VisualStudio.Text.ITextSnapshotLine" /> has any non-whitespace characters
            </summary>
            <param name="line">The <see cref="T:Microsoft.VisualStudio.Text.ITextSnapshotLine" /> on which the check is performed</param>
            <returns>True if the <see cref="T:Microsoft.VisualStudio.Text.ITextSnapshotLine" />  contains any non-whitespace characters</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.TextBufferOperationHelpers.GetNewLineCharacterToInsert(Microsoft.VisualStudio.Text.ITextSnapshotLine,Microsoft.VisualStudio.Text.Editor.IEditorOptions)">
            <summary>
            For a given <see cref="T:Microsoft.VisualStudio.Text.ITextSnapshotLine" /> gets the new line character to be inserted to the line based on
            either the given line, or the second last line or the default new line charcter provided by <see cref="T:Microsoft.VisualStudio.Text.Editor.IEditorOptions" />
            </summary>
            <param name="line">The <see cref="T:Microsoft.VisualStudio.Text.ITextSnapshotLine" /> for whcih the new line character is to be decied for</param>
            <param name="editorOptions">The current set of <see cref="T:Microsoft.VisualStudio.Text.Editor.IEditorOptions" /> applicable for the given <see cref="T:Microsoft.VisualStudio.Text.ITextSnapshotLine" /></param>
            <returns>The new line character to be inserted</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.TextBufferOperationHelpers.TryInsertFinalNewLine(Microsoft.VisualStudio.Text.ITextBuffer,Microsoft.VisualStudio.Text.Editor.IEditorOptions)">
            <summary>
            Inserts a final new line for the given <see cref="T:Microsoft.VisualStudio.Text.ITextBuffer" /> based on 
            whether the option to insert it is enabled in the current set of <see cref="T:Microsoft.VisualStudio.Text.Editor.IEditorOptions" /> applicable to the buffer
            </summary>
            <param name="buffer">The <see cref="T:Microsoft.VisualStudio.Text.ITextBuffer" /> in which the final new line has to be inserted in</param>
            <param name="editorOptions">The current set of <see cref="T:Microsoft.VisualStudio.Text.Editor.IEditorOptions" /> applicable to the buffer</param>
            <returns>Whether the operation on the buffer succeded or not</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Outlining.IAccurateOutliningManager">
            <summary>
            Extension of IOutliningManager to allow it to get accurate (if slow) results from the outlining taggers.
            </summary>
            <remarks>
            <para>This interface only contains the minimal number of overloads of IOutliningManager methods to make restoring regions when opening a file
            work. More overloads can be added as needed.</para>
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Outlining.IAccurateOutliningManager.CollapseAll(Microsoft.VisualStudio.Text.SnapshotSpan,System.Predicate{Microsoft.VisualStudio.Text.Outlining.ICollapsible},System.Threading.CancellationToken)">
            <summary>
            Collapses all regions that match the specified predicate.
            </summary>
            <param name="span">The regions that intersect this span.</param>
            <param name="match">The predicate to match.</param>
            <param name="cancel">Cancellation token.</param>
            <returns>The newly-collapsed regions.</returns>
            <remarks>
            The <paramref name="match" /> predicate may be passed regions that cannot actually be collapsed, due
            to the region being partially obscured by another already collapsed region (either pre-existing or collapsed
            in an earlier call to the predicate).  The elements of the returned enumeration do accurately track
            the regions that were collapsed, so they may differ from the elements for which the predicate returned <c>true</c>.
            </remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Outlining.ICollapsible">
            <summary>
            Represents a span that may be collapsed.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Outlining.ICollapsible.Extent">
            <summary>
            Gets the extent of this collapsible region.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Outlining.ICollapsible.IsCollapsed">
            <summary>
            Determines whether this outlining region is collapsed.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Outlining.ICollapsible.IsCollapsible">
            <summary>
            Determines whether this region can be collapsed.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Outlining.ICollapsible.CollapsedForm">
            <summary>
            Gets the data object for the collapsed UI.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Outlining.ICollapsible.CollapsedHintForm">
            <summary>
            Gets the data object for the collapsed UI tooltip.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Outlining.ICollapsible.Tag">
            <summary>
            Gets the <see cref="T:Microsoft.VisualStudio.Text.Tagging.IOutliningRegionTag" /> that was used to produce this collapsible region.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Outlining.ICollapsed">
            <summary>
            Represents a collapsed <see cref="T:Microsoft.VisualStudio.Text.Outlining.ICollapsible" />.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Outlining.ICollapsed.CollapsedChildren">
            <summary>
            Enumerates the children of this collapsed region that are also collapsed.
            </summary>
            <exception cref="T:System.InvalidOperationException">Thrown if this collapsed region has been expanded.</exception>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Outlining.IInternalOutliningManagerProvider">
            <summary>
            Get an <see cref="T:Microsoft.VisualStudio.Text.Outlining.IOutliningManager" /> for a given view. Implementer does not need to maintain a cache of managers they provide.
            </summary>
            <remarks>
            This is a MEF component and must be exported with [ContentType] and [TextViewRoles] attributes.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Outlining.IInternalOutliningManagerProvider.GetOutliningManager(Microsoft.VisualStudio.Text.Editor.ITextView)">
            <summary>
            Gets an <see cref="T:Microsoft.VisualStudio.Text.Outlining.IOutliningManager" /> for the given <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView" />
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Outlining.IOutliningManager">
            <summary>
            Provides outlining functionality.
            </summary>
            <remarks>
            <para>Any methods that take <see cref="T:Microsoft.VisualStudio.Text.SnapshotSpan" /> objects are spans of the
            edit buffer in the view model of a view. This buffer can also be retrieved from
            the TextBuffer property of an <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView" />.</para>
            <para>This outlining manager is provided by <see cref="T:Microsoft.VisualStudio.Text.Outlining.IOutliningManagerService" />.</para>
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Outlining.IOutliningManager.GetCollapsedRegions(Microsoft.VisualStudio.Text.SnapshotSpan)">
            <summary>
            Gets all the collapsed regions that intersect the given span.
            </summary>
            <param name="span">The span.</param>
            <returns>A sorted sequence of collapsed regions.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Outlining.IOutliningManager.GetCollapsedRegions(Microsoft.VisualStudio.Text.SnapshotSpan,System.Boolean)">
            <summary>
            Gets all the collapsed regions that intersect the given span.
            </summary>
            <param name="span">The span.</param>
            <param name="exposedRegionsOnly">If <c>true</c>, this returns only top-level regions (regions that aren't inside another collapsed region).</param>
            <returns>A sorted sequence of collapsed regions.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Outlining.IOutliningManager.GetCollapsedRegions(Microsoft.VisualStudio.Text.NormalizedSnapshotSpanCollection)">
            <summary>
            Gets all the collapsed regions that intersect the given collection of spans.
            </summary>
            <param name="spans">The collection of spans.</param>
            <returns>A sorted sequence of collapsed regions.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Outlining.IOutliningManager.GetCollapsedRegions(Microsoft.VisualStudio.Text.NormalizedSnapshotSpanCollection,System.Boolean)">
            <summary>
            Gets all the collapsed regions that intersect the given collection of spans.
            </summary>
            <param name="spans">The collection of spans.</param>
            <param name="exposedRegionsOnly">If <c>true</c>, this returns only top-level regions (regions that aren't inside another collapsed region).</param>
            <returns>A sorted sequence of collapsed regions.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Outlining.IOutliningManager.GetAllRegions(Microsoft.VisualStudio.Text.SnapshotSpan)">
            <summary>
            Gets all the regions that intersect the given span, whether or not they are collapsed.
            </summary>
            <param name="span">The span.</param>
            <returns>A sorted sequence of all intersecting collapsible regions.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Outlining.IOutliningManager.GetAllRegions(Microsoft.VisualStudio.Text.SnapshotSpan,System.Boolean)">
            <summary>
            Gets all the regions that intersect the given span, whether or not they are collapsed.
            </summary>
            <param name="span">The span.</param>
            <param name="exposedRegionsOnly">If <c>true</c>, this returns only top-level regions (regions that aren't inside another collapsed region).</param>
            <returns>A sorted sequence of all intersecting collapsible regions.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Outlining.IOutliningManager.GetAllRegions(Microsoft.VisualStudio.Text.NormalizedSnapshotSpanCollection)">
            <summary>
            Gets all the regions that intersect the given collection of spans, whether or not they are collapsed.
            </summary>
            <param name="spans">The collection of spans.</param>
            <returns>A sorted sequence of all intersecting collapsible regions.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Outlining.IOutliningManager.GetAllRegions(Microsoft.VisualStudio.Text.NormalizedSnapshotSpanCollection,System.Boolean)">
            <summary>
            Gets all the regions that intersect the given collection of spans, whether or not they are collapsed.
            </summary>
            <param name="spans">The collection of spans.</param>
            <param name="exposedRegionsOnly">If <c>true</c>, this returns only top-level regions (regions that aren't inside another collapsed region).</param>
            <returns>A sorted sequence of all intersecting collapsible regions.</returns>
        </member>
        <member name="E:Microsoft.VisualStudio.Text.Outlining.IOutliningManager.RegionsChanged">
            <summary>
            Occurs when the set of <see cref="T:Microsoft.VisualStudio.Text.Outlining.ICollapsible" /> regions on the corresponding elision buffer changes.
            </summary>
            <remarks>Not raised when the collapsed state of any <see cref="T:Microsoft.VisualStudio.Text.Outlining.ICollapsible" /> changes.</remarks>
        </member>
        <member name="E:Microsoft.VisualStudio.Text.Outlining.IOutliningManager.RegionsExpanded">
            <summary>
            Occurs when an <see cref="T:Microsoft.VisualStudio.Text.Outlining.ICollapsed" /> region is expanded.
            </summary>
            <remarks>This event is not raised when the set of <see cref="T:Microsoft.VisualStudio.Text.Outlining.ICollapsible" /> regions on the corresponding
            elision buffer changes.</remarks>
        </member>
        <member name="E:Microsoft.VisualStudio.Text.Outlining.IOutliningManager.RegionsCollapsed">
            <summary>
            Occurs when an <see cref="T:Microsoft.VisualStudio.Text.Outlining.ICollapsible" /> region is collapsed.
            </summary>
            <remarks>Not raised when the set of <see cref="T:Microsoft.VisualStudio.Text.Outlining.ICollapsible" /> regions on the corresponding
            elision buffer changes.</remarks>
        </member>
        <member name="E:Microsoft.VisualStudio.Text.Outlining.IOutliningManager.OutliningEnabledChanged">
            <summary>
            Occurs when outlining has been enabled or disabled.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Outlining.IOutliningManager.Expand(Microsoft.VisualStudio.Text.Outlining.ICollapsed)">
            <summary>
            Expands the collapsible span.
            </summary>
            <returns>The newly-expanded span.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Outlining.IOutliningManager.TryCollapse(Microsoft.VisualStudio.Text.Outlining.ICollapsible)">
            <summary>
            Tries to collapse a given region.
            </summary>
            <returns>The newly collapsed span if successful, otherwise null.</returns>
            <remarks>
            There are two cases in which this method can fail to collapse the region:
            <para>The region is already collapsed.</para>
            <para>The region is partially obscured because another collapsed region partially covers it.</para>
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Outlining.IOutliningManager.CollapseAll(Microsoft.VisualStudio.Text.SnapshotSpan,System.Predicate{Microsoft.VisualStudio.Text.Outlining.ICollapsible})">
            <summary>
            Collapses all regions that match the specified predicate.
            </summary>
            <param name="span">The regions that intersect this span.</param>
            <param name="match">The predicate to match.</param>
            <returns>The newly-collapsed regions.</returns>
            <remarks>
            The <paramref name="match" /> predicate may be passed regions that cannot actually be collapsed, due
            to the region being partially obscured by another already collapsed region (either pre-existing or collapsed
            in an earlier call to the predicate).  The elements of the returned enumeration do accurately track
            the regions that were collapsed, so they may differ from the elements for which the predicate returned <c>true</c>.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Outlining.IOutliningManager.ExpandAll(Microsoft.VisualStudio.Text.SnapshotSpan,System.Predicate{Microsoft.VisualStudio.Text.Outlining.ICollapsed})">
            <summary>
            Expands all the regions that match the specified predicate.
            </summary>
            <param name="match">The predicate to match.</param>
            <param name="span">The regions that intersect this span.</param>
            <returns>The newly-expanded regions.</returns>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Outlining.IOutliningManager.Enabled">
            <summary>
            Determines whether outlining is enabled.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Outlining.IOutliningManagerExtensions.GetFirstCollapsedRegion(Microsoft.VisualStudio.Text.Outlining.IOutliningManager,Microsoft.VisualStudio.Text.Editor.ITextView,Microsoft.VisualStudio.Text.SnapshotPoint,Microsoft.VisualStudio.Text.SnapshotPoint,System.Int32)">
            <summary>
            Retrieves the first found collapsed region that fully contains the associated range of passed points.
            </summary>
            <param name="manager">Outlining manager.</param>
            <param name="textView">The text view to retrieve associated collapsed regions from.</param>
            <param name="startPoint">The starting point of the span to search for a fully collapsed region.</param>
            <param name="endPoint">The ending point of the span to search for a fully collapsed region.</param>
            <param name="maxLength">The maximum length of the span to search for a fully collapsed region.</param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Outlining.IOutliningManagerService">
            <summary>
            Provides the <see cref="T:Microsoft.VisualStudio.Text.Outlining.IOutliningManager" /> for a given view model.
            </summary>
            <remarks>
            This is a MEF component part, and should be imported as follows:
            [Import]
            IOutliningManagerService outliningManager = null;
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Outlining.IOutliningManagerService.GetOutliningManager(Microsoft.VisualStudio.Text.Editor.ITextView)">
            <summary>
            Gets an <see cref="T:Microsoft.VisualStudio.Text.Outlining.IOutliningManager" /> for the given view.
            </summary>
            <remarks>
            The outlining manager is available only for views that have the <see cref="F:Microsoft.VisualStudio.Text.Editor.PredefinedTextViewRoles.Structured" /> role.
            Also, while IOutliningManager implements IDisposable, callers should take care to not dispose of it.
            </remarks>
            <param name="textView">The <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView" /> from which to get the outlining manager.</param>
            <returns>A valid outlining manager if the view model supports outlining,
            otherwise null.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="textView" /> is null.</exception>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Outlining.OutliningEnabledEventArgs">
            <summary>
            Provides information for the <see cref="E:Microsoft.VisualStudio.Text.Outlining.IOutliningManager.OutliningEnabledChanged" /> event.
            </summary>
            <remarks>
            The event is raised when outlining has been enabled or disabled.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Outlining.OutliningEnabledEventArgs.Enabled">
            <summary>
            Determines whether outlining has been enabled or disabled.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Outlining.OutliningEnabledEventArgs.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of <see cref="T:Microsoft.VisualStudio.Text.Outlining.OutliningEnabledEventArgs" /> for the specified change.
            </summary>
            <param name="enabled"><c>true</c> if outlining has been enabled, <c>false</c> if it has been disabled.</param>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Outlining.RegionsChangedEventArgs">
            <summary>
            Provides information for the <see cref="E:Microsoft.VisualStudio.Text.Outlining.IOutliningManager.RegionsChanged" /> event.
            </summary>
            <remarks>
            Provides the <see cref="T:Microsoft.VisualStudio.Text.SnapshotSpan" /> over which <see cref="T:Microsoft.VisualStudio.Text.Outlining.ICollapsible" /> regions were added or 
            removed. Call GetAllRegions to get the current set of <see cref="T:Microsoft.VisualStudio.Text.Outlining.ICollapsible" /> regions over the affected snapshot span.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Outlining.RegionsChangedEventArgs.AffectedSpan">
            <summary>
            Gets the <see cref="T:Microsoft.VisualStudio.Text.SnapshotSpan" /> over which collapsible spans have changed.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Outlining.RegionsChangedEventArgs.#ctor(Microsoft.VisualStudio.Text.SnapshotSpan)">
            <summary>
            Initializes a new instance of <see cref="T:Microsoft.VisualStudio.Text.Outlining.RegionsChangedEventArgs" /> with the specified <see cref="T:Microsoft.VisualStudio.Text.SnapshotSpan" />.
            </summary>
            <param name="affectedSpan">The <see cref="T:Microsoft.VisualStudio.Text.SnapshotSpan" /> over which collapsible regions have changed.</param>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Outlining.RegionsCollapsedEventArgs">
            <summary>
            Provides information for the <see cref="E:Microsoft.VisualStudio.Text.Outlining.IOutliningManager.RegionsCollapsed" /> event.
            </summary>
            <remarks>
            Provides the <see cref="T:Microsoft.VisualStudio.Text.Outlining.ICollapsed" /> regions that are now collapsed.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Outlining.RegionsCollapsedEventArgs.CollapsedRegions">
            <summary>
            Gets the <see cref="T:Microsoft.VisualStudio.Text.Outlining.ICollapsed" /> regions that are now collapsed.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Outlining.RegionsCollapsedEventArgs.#ctor(System.Collections.Generic.IEnumerable{Microsoft.VisualStudio.Text.Outlining.ICollapsed})">
            <summary>
            Initializes a new instance of <see cref="T:Microsoft.VisualStudio.Text.Outlining.RegionsCollapsedEventArgs" /> with the specified <see cref="T:Microsoft.VisualStudio.Text.Outlining.ICollapsed" /> regions.
            </summary>
            <param name="collapsedRegions">The newly-collapsed regions.</param>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Outlining.RegionsExpandedEventArgs">
            <summary>
            Provides information for the <see cref="E:Microsoft.VisualStudio.Text.Outlining.IOutliningManager.RegionsExpanded" /> event.
            </summary>
            <remarks>
            Provides the <see cref="T:Microsoft.VisualStudio.Text.Outlining.ICollapsible" /> regions that are now expanded.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Outlining.RegionsExpandedEventArgs.ExpandedRegions">
            <summary>
            Gets the <see cref="T:Microsoft.VisualStudio.Text.Outlining.ICollapsible" /> regions which are now expanded.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Outlining.RegionsExpandedEventArgs.RemovalPending">
            <summary>
            <c>true</c> if the regions are being expanded because they are being removed.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Outlining.RegionsExpandedEventArgs.#ctor(System.Collections.Generic.IEnumerable{Microsoft.VisualStudio.Text.Outlining.ICollapsible})">
            <summary>
            Initializes a new instance of <see cref="T:Microsoft.VisualStudio.Text.Outlining.RegionsExpandedEventArgs" /> with the specified <see cref="T:Microsoft.VisualStudio.Text.Outlining.ICollapsible" /> regions, assuming that they are not also being removed.
            </summary>
            <param name="expandedRegions">The newly-expanded regions.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Outlining.RegionsExpandedEventArgs.#ctor(System.Collections.Generic.IEnumerable{Microsoft.VisualStudio.Text.Outlining.ICollapsible},System.Boolean)">
            <summary>
            Initializes a new instance of <see cref="T:Microsoft.VisualStudio.Text.Outlining.RegionsExpandedEventArgs" /> with the specified <see cref="T:Microsoft.VisualStudio.Text.Outlining.ICollapsible" /> regions.
            </summary>
            <param name="expandedRegions">The newly-expanded regions.</param>
            <param name="removalPending">If these regions are being expanded as part of being removed.</param>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.IOvertypeManager">
            <summary>
            A per text view manager for overtype.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.IOvertypeManager.TryStartOvertypeSession(Microsoft.VisualStudio.Text.SnapshotSpan)">
            <summary>
            Starts a new overtype session for the given snapshot span.
            </summary>
            <param name="snapshotSpan">The range on which overtype should be possible.</param>
            <returns>Returns <code>True</code> if the session has been created.</returns>
            <remarks>
            <para>
            A session will be created only if the caret position is within the given <paramref name="snapshotSpan" /> range.
            </para>
            <para>
            If all the characters in the <paramref name="snapshotSpan" /> to the left and right of the caret are identical
            at the moment when the session is created (for example, "|"), then all the characters on the left and right
            can be overtyped.
            </para>
            <para>
            If characters to the left and right of the <paramref name="snapshotSpan" /> are different, then only characters
            to the right of the caret can be overtyped. For example, creating a session on `<!--|-->` will only allow to overtype `--&gt;`.
            </para>
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.IOvertypeManager.TryStartOvertypeSession(Microsoft.VisualStudio.Text.SnapshotSpan,System.Boolean)">
            <summary>
            Starts a new overtype session for the given snapshot span.
            </summary>
            <param name="snapshotSpan">The range on which overtype should be possible.</param>
            <param name="allowOvertypeCaretPrefix">(optional) Indicates whether the span before the caret can be overtyped.</param>
            <returns>Returns <code>True</code> if the session has been created.</returns>
            <remarks>
            <para>
            A session will be created only if the caret position is within the given <paramref name="snapshotSpan" /> range.
            </para>
            <para>
            If all the characters in the <paramref name="snapshotSpan" /> to the left and right of the caret are identical
            at the moment when the session is created (for example, "|") and that <paramref name="allowOvertypeCaretPrefix" /> is <code>true</code>,
            then all the characters on the left and right can be overtyped.
            </para>
            <para>
            If characters to the left and right of the <paramref name="snapshotSpan" /> are different, then only characters
            to the right of the caret can be overtyped. For example, creating a session on `<!--|-->` will only allow to overtype `--&gt;`.
            </para>
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.IOvertypeManager.TryStartOvertypeSessionAtCaretLocation">
            <summary>
            Starts a new overtype session at the caret location.
            </summary>
            <returns>Returns <code>True</code> if the session has been created.</returns>
            <remarks>
            <para>
            A session will be created only if the characters around the caret correspond to a brace pair supported
            by <see cref="T:Microsoft.VisualStudio.Text.BraceCompletion.IBraceCompletionManagerFactory" /> in the current content type or document.
            </para>
            <para>
            If all the characters of the opening and closing brace pair are identical (for example, "|"), then all the
            characters on the left and right of the caret can be overtyped.
            </para>
            <para>
            If the brace pair has different opening and closing brace characters, then only characters to the right of the caret
            can be overtyped. For example, creating a session on `<!--|-->` will only allow to overtype `--&gt;`.
            </para>
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.IOvertypeManager.TryStartOvertypeSessionAtCaretLocation(System.Boolean)">
            <summary>
            Starts a new overtype session at the caret location.
            </summary>
            <param name="allowOvertypeCaretPrefix">(optional) Indicates whether the span before the caret can be overtyped.</param>
            <returns>Returns <code>True</code> if the session has been created.</returns>
            <remarks>
            <para>
            A session will be created only if the characters around the caret correspond to a brace pair supported
            by <see cref="T:Microsoft.VisualStudio.Text.BraceCompletion.IBraceCompletionManagerFactory" /> in the current content type or document.
            </para>
            <para>
            If all the characters of the opening and closing brace pair are identical (for example, "|")
            and that <paramref name="allowOvertypeCaretPrefix" /> is <code>true</code>, then all the
            characters on the left and right of the caret can be overtyped.
            </para>
            <para>
            If the brace pair has different opening and closing brace characters, then only characters to the right of the caret
            can be overtyped. For example, creating a session on `<!--|-->` will only allow to overtype `--&gt;`.
            </para>
            </remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.IOvertypeManagerFactory">
            <summary>
            A service that returns an <see cref="T:Microsoft.VisualStudio.Text.IOvertypeManager" /> that manages overtype for a particular <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView" />.
            </summary>
            <remarks>This is a MEF component part, and should be imported as follows:
            [Import]
            IOvertypeManagerFactory overtypeManagerFactory = null;
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.IOvertypeManagerFactory.TryGetOvertypeManager(Microsoft.VisualStudio.Text.Editor.ITextView)">
            <summary>
            Returns an <see cref="T:Microsoft.VisualStudio.Text.IOvertypeManager" /> that manages overtype for a particular <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView" />.
            </summary>
            <param name="textView">A text view to get a <see cref="T:Microsoft.VisualStudio.Text.IOvertypeManager" /> for.</param>
            <returns>An <see cref="T:Microsoft.VisualStudio.Text.IOvertypeManager" /> that manages overtype for a particular <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView" />.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.IOvertypeManagerInternal">
            <summary>
            A per text view manager for overtype.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.IOvertypeManagerInternal.PreTypeChar(System.Char,System.Boolean@)">
            <summary>
            Called by the editor when a character has been typed and before it is 
            inserted into the buffer.
            </summary>
            <param name="character">Typed character.</param>
            <param name="handledCommand">Set to true to prevent the typed character
            from being inserted into the buffer.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.IOvertypeManagerInternal.PostTypeChar(System.Char)">
            <summary>
            Called by the editor after a character has been typed.
            </summary>
            <param name="character">Typed character.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.IOvertypeManagerInternal.TryStartOvertypeSession(Microsoft.VisualStudio.Text.SnapshotSpan,Microsoft.VisualStudio.Text.BraceCompletion.IBraceCompletionSession,Microsoft.VisualStudio.Text.BraceCompletion.IBraceCompletionContext,System.Boolean)">
            <summary>
            Starts a new overtype session for the given snapshot span.
            </summary>
            <param name="snapshotSpan">The range on which overtype should be possible.</param>
            <param name="braceCompletionSession"></param>
            <param name="braceCompletionContext"></param>
            <param name="allowOvertypeCaretPrefix">(optional) Indicates whether the span before the caret can be overtyped.</param>
            <returns>Returns <code>True</code> if the session has been created.</returns>
            <remarks>
            <para>
            A session will be created only if the caret position is within the given <paramref name="snapshotSpan" /> range.
            </para>
            <para>
            If all the characters in the <paramref name="snapshotSpan" /> to the left and right of the caret are identical
            at the moment when the session is created (for example, "|"), then all the characters on the left and right
            can be overtyped.
            </para>
            <para>
            If characters to the left and right of the <paramref name="snapshotSpan" /> are different, then only characters
            to the right of the caret can be overtyped. For example, creating a session on `<!--|-->` will only allow to overtype `--&gt;`.
            </para>
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.IOvertypeManagerInternal.TryStartMultiSelectionOvertypeSession(System.Collections.Generic.IReadOnlyList{Microsoft.VisualStudio.Text.SnapshotSpan})">
            <summary>
            Starts a new multi-selection overtype session for the given snapshot spans.
            </summary>
            <returns>Returns <code>True</code> if the session has been created</returns>
            <param name="spans">The ranges on which overtype should be possible</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.IOvertypeManagerInternal.TryStartOvertypeSession(Microsoft.VisualStudio.Text.SnapshotSpan,Microsoft.VisualStudio.Text.Editor.Overtype.OvertypeConfiguration)">
            <summary>
            Starts a new overtype session for the given snapshot span.
            </summary>
            <param name="snapshotSpan">The range on which overtype should be possible</param>
            <param name="configuration">The configuration for the overtype session</param>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.SpellChecker.ISpellCheckFixerProvider">
             <summary>
             Exportable interface implemented to support rename functionality for spelling errors.
             </summary>
             <remarks>
             Content-type specific providers implement this interface to respond to rename spell checking error code actions.
            
             This is a MEF component part, and should be exported with the following attributes:
             [Export(typeof(ISpellCheckFixerProvider))]
             [ContentType("code")]
             [Name("SpellCheckFixerProvider")]
            
             Component exporters must add at least one ContentType attribute to specify the content types the provider is valid for.
             </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.SpellChecker.ISpellCheckFixerProvider.RenameWordAsync(Microsoft.VisualStudio.Text.SnapshotSpan,System.String,Microsoft.VisualStudio.Utilities.IUIThreadOperationContext)">
            <summary>
            Passes in the identifier span that must be renamed and the suggestion to replace it with.
            This is not called for comment or string types. This method will be invoked in the UI thread.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Tagging.IViewTagAggregatorFactoryService">
            <summary>
            A service that creates an <see cref="T:Microsoft.VisualStudio.Text.Tagging.ITagAggregator`1" /> for an <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView" />.
            This is a MEF component part, and should be imported as follows:
            [Import]
            IViewLevelTagAggregatorFactoryService factory = null;
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Tagging.IViewTagAggregatorFactoryService.CreateTagAggregator``1(Microsoft.VisualStudio.Text.Editor.ITextView)">
            <summary>
            Creates a tag aggregator for the specified <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView" /> that aggregates
            tags of the given type.
            </summary>
            <param name="textView">The <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView" /> with which to get the <see cref="T:Microsoft.VisualStudio.Text.Tagging.ITagAggregator`1" />.</param>
            <typeparam name="T">The type of tag to aggregate.</typeparam>
            <returns>The <see cref="T:Microsoft.VisualStudio.Text.Tagging.ITagAggregator`1" /> of the correct type for <paramref name="textView" />.</returns>
            <remarks>The ITagAggregatorr&lt;T&gt;.DispatchedTagsChanged event will be raised on the thread used to create the tag aggregator.</remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Tagging.IViewTagAggregatorFactoryService.CreateTagAggregator``1(Microsoft.VisualStudio.Text.Editor.ITextView,Microsoft.VisualStudio.Text.Tagging.TagAggregatorOptions)">
            <summary>
            Creates a tag aggregator for the specified <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView" /> and with the given options that aggregates
            tags of the given type.
            </summary>
            <param name="textView">The <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView" /> with which to get the <see cref="T:Microsoft.VisualStudio.Text.Tagging.ITagAggregator`1" />.</param>
            <param name="options">The options to use for the newly created aggregator.</param>
            <typeparam name="T">The type of tag to aggregate.</typeparam>
            <returns>The <see cref="T:Microsoft.VisualStudio.Text.Tagging.ITagAggregator`1" /> of the correct type for <paramref name="textView" />.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Tagging.IViewTaggerProvider">
            <summary>
            Creates an <see cref="T:Microsoft.VisualStudio.Text.Tagging.ITagger`1" /> for a given buffer.
            </summary>
            <remarks>
            This is a MEF component part, and implementers must use the following attributes:
            <c>[Export(typeof(ITaggerProvider))]</c>
            Exports must specify at least one content type attribute and at least one tag type attribute. Exports may
            optionally specify a TextViewRole; if no TextViewRole is specified, the tagger applies to views with any roles.
            <example>
            <code>
            [Export(typeof(ITaggerProvider))]
            [ContentType(...)]                  // Required, must have at least one <see cref="T:Microsoft.VisualStudio.Utilities.ContentTypeAttribute" /> (and can have multiple ContentType attributes)
                                                //  Specifies the <see cref="T:Microsoft.VisualStudio.Utilities.IContentType" />s which this provider provides taggers.
            [TextViewRole(...))]                // Optional, can have multiple <see cref="T:Microsoft.VisualStudio.Text.Editor.TextViewRoleAttribute" />s.
                                                //  Specifies the required roles that a view must have before this tagger is created.
            [TagType(...))]                     // Required, must have at least one <see cref="T:Microsoft.VisualStudio.Text.Tagging.TagTypeAttribute" /> (and can have multiple TagType attributes)
                                                //  Specifies the types of taggers that can be created by this provider.
            [Name(...)]                         // Required, can have only one <see cref="T:Microsoft.VisualStudio.Utilities.NameAttribute" />
                                                //  Specifies the name of the tagger provider.
                                                //  Providers with a name attribute can be replaced by another tagger provider that specifies
                                                //  the name in their <see cref="T:Microsoft.VisualStudio.Text.Editor.ReplacesAttribute" />.
                                                //  In addition, providers with the same name as an <see cref="T:Microsoft.VisualStudio.Text.Tagging.ITaggerProvider" /> will automatically
                                                //  suppress that provider if this provider's <see cref="M:Microsoft.VisualStudio.Text.Tagging.IViewTaggerProvider.CreateTagger``1(Microsoft.VisualStudio.Text.Editor.ITextView,Microsoft.VisualStudio.Text.ITextBuffer)" /> returns a tagger.
            [Replaces(...)]                     // Optional, can have zero or more <see cref="T:Microsoft.VisualStudio.Text.Editor.ReplacesAttribute" />
                                                //  Providers with a name attribute that matches replaces attribute of another provider will
                                                //  be suppressed. Note that the other tagger is suppressed even if the replacing provider does not
                                                //  supply a tagger.
            [DeferCreation(OptionName = ...)]   // Optional, can have only one <see cref="T:Microsoft.VisualStudio.Text.Editor.DeferCreationAttribute" />
                                                //  If specified, the tagger will not be created until the option (<see cref="T:Microsoft.VisualStudio.Text.Editor.IEditorOptions" />) specified
                                                //  in the defer creation attribute becomes true.
            </code>
            </example>
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Tagging.IViewTaggerProvider.CreateTagger``1(Microsoft.VisualStudio.Text.Editor.ITextView,Microsoft.VisualStudio.Text.ITextBuffer)">
            <summary>
            Creates a tag provider for the specified view and buffer.
            </summary>
            <param name="textView">The <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView" />.</param>
            <param name="buffer">The <see cref="T:Microsoft.VisualStudio.Text.ITextBuffer" />.</param>
            <typeparam name="T">The type of the tag.</typeparam>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Tagging.ErrorTag">
            <summary>
            An implementation of <see cref="T:Microsoft.VisualStudio.Text.Tagging.IErrorTag" />.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Tagging.ErrorTag.#ctor(System.String,System.Object)">
            <summary>
            Initializes a new instance of a <see cref="T:Microsoft.VisualStudio.Text.Tagging.ErrorTag" /> of the specified type.
            </summary>
            <param name="errorType">The type of error to use.</param>
            <param name="toolTipContent">The tooltip content to display. May be null.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="errorType" /> is null.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Tagging.ErrorTag.#ctor(System.String)">
            <summary>
            Initializes a new instance of a <see cref="T:Microsoft.VisualStudio.Text.Tagging.ErrorTag" /> of the specified type with no tooltip content.
            </summary>
            <param name="errorType">The type of error to use,</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Tagging.ErrorTag.#ctor">
            <summary>
            Initializes a new instance of a <see cref="T:Microsoft.VisualStudio.Text.Tagging.ErrorTag" /> of type SyntaxError with no tooltip content.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Tagging.ErrorTag.ErrorType">
            <summary>
            Gets the type of error to use.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Tagging.ErrorTag.ToolTipContent">
            <summary>
            Gets the content to use when displaying a tooltip for this error.
            This property may be null.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Tagging.IContainerStructureTag">
            <summary>
            Extends <see cref="T:Microsoft.VisualStudio.Text.Tagging.IStructureTag" /> with <see cref="P:Microsoft.VisualStudio.Text.Tagging.IContainerStructureTag.SubHeadings" /> property improving
            structure visualization support for secondary structure elements such as C# "else" statement,
            also support for the "catch" and "case"statement.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Tagging.IContainerStructureTag.SubHeadings">
            <summary>
            Gets the optional <see cref="T:Microsoft.VisualStudio.Text.Tagging.SubHeadingStructureData" /> of the sub headings of the code block represented by this tag.
            </summary>
            <remarks>
            <para>
            An Example:
            <code>
            try 
            {
                //something;
            }
            catch
            {
                // something else;
            }
            </code>
            <see cref="P:Microsoft.VisualStudio.Text.Tagging.IContainerStructureTag.SubHeadings" /> of the <see cref="T:Microsoft.VisualStudio.Text.Tagging.IContainerStructureTag" /> representing "try" will contain SubHeadingSpans representing "catch" and "finally".
            would be the same as the <see cref="P:Microsoft.VisualStudio.Text.Tagging.IStructureTag.HeaderSpan" /> of the <see cref="T:Microsoft.VisualStudio.Text.Tagging.IStructureTag" /> representing "try" statement block.
            This allows structure visualizing features to provide more useful context when visualizing "catch" structure blocks.
            </para>
            </remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Tagging.SubHeadingStructureData">
            <summary>
            Define the subHeadingStructureData which provide below information:
            Get the whole span of this code block.
            Gets the span of the statement that controls the structural block.
            Determines the semantic type of the structural block.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Tagging.IEndOfLineAdornmentTag">
            <summary>
            Used to indicate the rectangle covered by an adornment (allowing participating adornments to adjust themselves if needed).
            </summary>
            <remarks>
            This interface is subject to change in future releases without notice. Use at your own risk.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Tagging.IEndOfLineAdornmentTag.Type">
            <summary>
            The type associated with the creator of an adornment.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Tagging.IEndOfLineAdornmentTag.HorizontalOffset">
            <summary>
            The offset from the right edge of the containing line to the left edge of the adornment.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Tagging.IEndOfLineAdornmentTag.VerticalOffset">
            <summary>
            The offset from the TextTop edge of the containing line to the top edge of the adornment.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Tagging.IEndOfLineAdornmentTag.Width">
            <summary>
            Width of the adornment.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Tagging.IEndOfLineAdornmentTag.Height">
            <summary>
            Height of the adornment.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Tagging.IErrorTag">
            <summary>
            Represents an error, which is used to place squiggle adornments on the view.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Tagging.IErrorTag.ErrorType">
            <summary>
            Gets the type of error to use.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Tagging.IErrorTag.ToolTipContent">
            <summary>
            Gets the content to use when displaying a tooltip for this error.
            This property may be null.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Tagging.IntraTextTag">
            <summary>
            Represents a tag that provides adornments to be displayed as interspersed with text.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Tagging.IntraTextTag.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of a <see cref="T:Microsoft.VisualStudio.Text.Tagging.IntraTextTag" /> of the given classification type.
            </summary>
            <param name="classificationType">The classification type to use.</param>
            <param name="content">The content to display.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="classificationType" /> is null.</exception>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Tagging.IntraTextTag.ClassificationType">
            <summary>
            Gets the classification type to use.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Tagging.IntraTextTag.Content">
            <summary>
            Gets the content to display.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Tagging.IOutliningRegionTag">
            <summary>
            Provides a tag for outlining regions.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Tagging.IOutliningRegionTag.IsDefaultCollapsed">
            <summary>
            Determines whether the region is collapsed by default.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Tagging.IOutliningRegionTag.IsImplementation">
            <summary>
            Determines whether a region is an implementation region.
            </summary>
            <remarks>
            Implementation regions are the blocks of code following a method definition. 
            They are used for commands such as the Visual Studio Collapse to Definition command, 
            which hides the implementation region and leaves only the method definition exposed.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Tagging.IOutliningRegionTag.CollapsedForm">
            <summary>
            Gets the data object for the collapsed UI. If the default is set, returns null.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Tagging.IOutliningRegionTag.CollapsedHintForm">
            <summary>
            Gets the data object for the collapsed UI tooltip. If the default is set, returns null.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Tagging.IOverviewMarkTag">
            <summary>
            Provides the information needed to render a mark in the overview margin.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Tagging.IOverviewMarkTag.MarkKindName">
            <summary>
            Gets the name of the EditorFormatDefinition whose background color is used to draw the mark.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Tagging.IStructureTag">
            <summary>
            Represents a structural code block, which is used for vertical structural line adornments
            and outlining collapse regions.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Tagging.IStructureTag.Snapshot">
            <summary>
            The Snapshot from which this IStructureTag was generated.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Tagging.IStructureTag.OutliningSpan">
            <summary>
            Gets the span containing the entire contents of the block (minus the block header).
            This span will be collapsed or expanded when the block outlining adornment is invoked.
            </summary>
            <remarks>
            If this parameter is null, block structure adornments will still be drawn as long as
            the <see cref="P:Microsoft.VisualStudio.Text.Tagging.IStructureTag.GuideLineHorizontalAnchorPoint" /> and the <see cref="P:Microsoft.VisualStudio.Text.Tagging.IStructureTag.GuideLineSpan" /> are both provided,
            however, no outlining adornment will be drawn.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Tagging.IStructureTag.HeaderSpan">
            <summary>
            Gets the span of the statement that controls the structural block.
            </summary>
            <remarks>
            <para>
            For example, in the following snippet of code,
            <code>
            if (condition1 &amp;&amp;
                condition2) // comment
            {
                something;
            }
            </code>
            this.HeaderSpan would extend from the start of the "if" to the end of comment.
            this.OutliningSpan would extend from the end of "// comment" to the end of the "}".
            </para>
            <para>
            If this parameter is null, block structure adornments will still be drawn as long as
            the <see cref="P:Microsoft.VisualStudio.Text.Tagging.IStructureTag.OutliningSpan" /> is provided, or the <see cref="P:Microsoft.VisualStudio.Text.Tagging.IStructureTag.GuideLineHorizontalAnchorPoint" />
            and the <see cref="P:Microsoft.VisualStudio.Text.Tagging.IStructureTag.GuideLineSpan" /> are both provided.
            </para>
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Tagging.IStructureTag.GuideLineSpan">
            <summary>
            Gets the vertical span within which the block structure adornment will be drawn.
            </summary>
            <remarks>
            For a block to have an adornment, it must not be of type <see cref="F:Microsoft.VisualStudio.Text.Adornments.PredefinedStructureTagTypes.Nonstructural" />,
            and the implementer must also provide the GuideLineHorizontalAnchor. The adornment is drawn from the top of the
            line containing the start of the span to the bottom of the line containing the bottom of the span. If null,
            the GuideLineSpan is inferred from the OutliningSpan and the HeaderSpan.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Tagging.IStructureTag.GuideLineHorizontalAnchorPoint">
            <summary>
            Gets the point with which the block structure adornment will be horizontally aligned.
            </summary>
            <remarks>
            This point can be on any line and is used solely for determining horizontal position. If null,
            or if <see cref="P:Microsoft.VisualStudio.Text.Tagging.IStructureTag.GuideLineSpan" /> is null, this point is computed from the HeaderSpan and
            OutliningSpan via heuristics.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Tagging.IStructureTag.Type">
            <summary>
            Determines the semantic type of the structural block.
            </summary>
            <remarks>
            See <see cref="T:Microsoft.VisualStudio.Text.Adornments.PredefinedStructureTagTypes" /> for the canonical types.
            Use <see cref="F:Microsoft.VisualStudio.Text.Adornments.PredefinedStructureTagTypes.Nonstructural" /> for blocks that will not have any visible affordance
            (but will be used for outlining).
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Tagging.IStructureTag.IsCollapsible">
            <summary>
            Determines whether a block can be collapsed.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Tagging.IStructureTag.IsDefaultCollapsed">
            <summary>
            Determines whether a block is collapsed by default.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Tagging.IStructureTag.IsImplementation">
            <summary>
            Determines whether a block is an implementation block.
            </summary>
            <remarks>
            Implementation blocks are the blocks of code following a method definition.
            They are used for commands such as the Visual Studio Collapse to Definition command,
            which hides the implementation block and leaves only the method definition exposed.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Tagging.IStructureTag.GetCollapsedForm">
            <summary>
            Gets the data object for the collapsed UI. If the default is set, returns null.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Tagging.IStructureTag.GetCollapsedHintForm">
            <summary>
            Gets the data object for the collapsed UI tooltip. If the default is set, returns null.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Tagging.IStructureTag2">
            <summary>
            Extends <see cref="T:Microsoft.VisualStudio.Text.Tagging.IStructureTag" /> with <see cref="P:Microsoft.VisualStudio.Text.Tagging.IStructureTag2.PrimaryHeaderSpan" /> property improving
            structure visualization support for secondary structure elements such as C# "else" statement.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Tagging.IStructureTag2.PrimaryHeaderSpan">
            <summary>
            Gets the optional <see cref="T:Microsoft.VisualStudio.Text.Span" /> of the primary header of the code block represented by this tag.
            </summary>
            <remarks>
            <para>
            For example, in the following snippet of code,
            <code>
            if (condition1)
            {
                //something;
            }
            else
            {
                // something else;
            }
            </code>
            <see cref="P:Microsoft.VisualStudio.Text.Tagging.IStructureTag2.PrimaryHeaderSpan" /> of the <see cref="T:Microsoft.VisualStudio.Text.Tagging.IStructureTag2" /> representing "else" statement block
            would be the same as the <see cref="P:Microsoft.VisualStudio.Text.Tagging.IStructureTag.HeaderSpan" /> of the <see cref="T:Microsoft.VisualStudio.Text.Tagging.IStructureTag" /> representing "if" statement block.
            This allows structure visualizing features to provide more useful context when visualizing "else" structure blocks.
            </para>
            </remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Tagging.ITextMarkerTag">
            <summary>
            Represents the text marker tag, which is used to place text marker adornments on a view.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Tagging.ITextMarkerTag.Type">
            <summary>
            Gets the type of adornment to use.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Tagging.OutliningRegionTag">
            <summary>
            Represents a tag for outlining regions.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Tagging.OutliningRegionTag.IsDefaultCollapsed">
            <summary>
            Determines whether the region is collapsed by default.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Tagging.OutliningRegionTag.IsImplementation">
            <summary>
            Determines whether a region is an implementation region. 
            </summary>
            <remarks>
            Implementation regions are the blocks of code following a method definition. 
            They are used for commands such as the Visual Studio Collapse to Definition command, 
            which hides the implementation region and leaves only the method definition exposed.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Tagging.OutliningRegionTag.CollapsedForm">
            <summary>
            Gets the data object for the collapsed UI. If the default is set, returns null.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Tagging.OutliningRegionTag.CollapsedHintForm">
            <summary>
            Gets the data object for the collapsed UI tooltip. If the default is set, returns null.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Tagging.OutliningRegionTag.#ctor">
            <summary>
            Initializes a new instance of a <see cref="T:Microsoft.VisualStudio.Text.Tagging.OutliningRegionTag" />. 
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Tagging.OutliningRegionTag.#ctor(System.Object,System.Object)">
            <summary>
            Initializes a new instance of a <see cref="T:Microsoft.VisualStudio.Text.Tagging.OutliningRegionTag" /> with the specified objects. 
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Tagging.OutliningRegionTag.#ctor(System.Boolean,System.Boolean,System.Object,System.Object)">
            <summary>
            Initializes a new instance of a <see cref="T:Microsoft.VisualStudio.Text.Tagging.OutliningRegionTag" /> with the specified default collapsed state.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Tagging.OverviewMarkTag">
            <summary>
            An implementation of <see cref="T:Microsoft.VisualStudio.Text.Tagging.IOverviewMarkTag" />.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Tagging.OverviewMarkTag.#ctor(System.String)">
            <summary>
            Initializes a new instance of a <see cref="T:Microsoft.VisualStudio.Text.Tagging.OverviewMarkTag" /> of the specified kind.
            </summary>
            <param name="markKindName">The name of the EditorFormatDefinition whose background color is used to draw the mark.</param>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Tagging.OverviewMarkTag.MarkKindName">
            <summary>
            Gets the name of the EditorFormatDefinition whose background color is used to draw the mark.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Tagging.SpaceNegotiatingAdornmentTag">
            <summary>
            Represents a tag for a space-negotiating adornment. The tag is used to provide space
            for positioning the adornment in a view.
            </summary>
            <remarks>
            The units used in properties like <see cref="P:Microsoft.VisualStudio.Text.Tagging.SpaceNegotiatingAdornmentTag.Width" /> and <see cref="P:Microsoft.VisualStudio.Text.Tagging.SpaceNegotiatingAdornmentTag.TopSpace" /> are those used in the presentation technology.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Tagging.SpaceNegotiatingAdornmentTag.Width">
            <summary>
            Gets the width of the adornment.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Tagging.SpaceNegotiatingAdornmentTag.TopSpace">
            <summary>
            Gets the amount of space needed between the top of the text in the <see cref="T:Microsoft.VisualStudio.Text.Formatting.ITextViewLine" /> and the top of the <see cref="T:Microsoft.VisualStudio.Text.Formatting.ITextViewLine" />.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Tagging.SpaceNegotiatingAdornmentTag.Baseline">
            <summary>
            Gets the baseline of the space-negotiating adornment.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Tagging.SpaceNegotiatingAdornmentTag.TextHeight">
            <summary>
            Gets the height of the text portion of the space-negotiating adornment.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Tagging.SpaceNegotiatingAdornmentTag.BottomSpace">
            <summary>
            Gets the amount of space needed between the bottom of the text in the <see cref="T:Microsoft.VisualStudio.Text.Formatting.ITextViewLine" /> and the botton of the <see cref="T:Microsoft.VisualStudio.Text.Formatting.ITextViewLine" />.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Tagging.SpaceNegotiatingAdornmentTag.Affinity">
            <summary>
            Gets the <see cref="T:Microsoft.VisualStudio.Text.PositionAffinity" /> of the space-negotiating adornment.
            </summary>
            <remarks>
            This property is only used for adornments that do not replace text.
            An adornment does not replace text if its tag has a zero-length span on the view's text buffer.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Tagging.SpaceNegotiatingAdornmentTag.IdentityTag">
            <summary>
            Gets a unique object associated with the space-negotiating adornment, which is used by <see cref="T:Microsoft.VisualStudio.Text.Formatting.ITextViewLine" />.GetAdornmentBounds.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Tagging.SpaceNegotiatingAdornmentTag.ProviderTag">
            <summary>
            Gets a unique object that identifies the provider of the adornment.
            </summary>
            <remarks>
            This object is used to get adornments by calling <see cref="M:Microsoft.VisualStudio.Text.Formatting.ITextViewLine.GetAdornmentTags(System.Object)" />.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Tagging.SpaceNegotiatingAdornmentTag.Ranking">
            <summary>
            Gets the adornments ranking (used as a tie breaker to position coincident adornments).
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Tagging.SpaceNegotiatingAdornmentTag.#ctor(System.Double,System.Double,System.Double,System.Double,System.Double,Microsoft.VisualStudio.Text.PositionAffinity,System.Object,System.Object)">
            <summary>
            Initializes a new instance of a <see cref="T:Microsoft.VisualStudio.Text.Tagging.SpaceNegotiatingAdornmentTag" /> with the specified properties.
            </summary>
            <param name="width">The width of the tag in pixels.</param>
            <param name="topSpace">The space needed between the top of the text in the <see cref="T:Microsoft.VisualStudio.Text.Formatting.ITextViewLine" /> and the top of the <see cref="T:Microsoft.VisualStudio.Text.Formatting.ITextViewLine" />.</param>
            <param name="baseline">The baseline of the space-negotiating adornment.</param>
            <param name="textHeight">The height in pixels of the text portion of the space-negotiating adornment.</param>
            <param name="bottomSpace">The space needed between the bottom of the text in the <see cref="T:Microsoft.VisualStudio.Text.Formatting.ITextViewLine" /> and the botton of the <see cref="T:Microsoft.VisualStudio.Text.Formatting.ITextViewLine" />.</param>
            <param name="affinity">The <see cref="T:Microsoft.VisualStudio.Text.PositionAffinity" /> of the space-negotiating adornment.</param>
            <param name="identityTag">A unique object associated with the space-negotiating adornment, used by <see cref="T:Microsoft.VisualStudio.Text.Formatting.ITextViewLine" />.GetAdornmentBounds.</param>
            <param name="providerTag">A unique object identifying the provider of the adornment, used by <see cref="M:Microsoft.VisualStudio.Text.Formatting.ITextViewLine.GetAdornmentTags(System.Object)" />).</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Tagging.SpaceNegotiatingAdornmentTag.#ctor(System.Double,System.Double,System.Double,System.Double,System.Double,Microsoft.VisualStudio.Text.PositionAffinity,System.Object,System.Object,System.Double)">
            <summary>
            Initializes a new instance of a <see cref="T:Microsoft.VisualStudio.Text.Tagging.SpaceNegotiatingAdornmentTag" /> with the specified properties.
            </summary>
            <param name="width">The width of the tag in pixels.</param>
            <param name="topSpace">The space needed between the top of the text in the <see cref="T:Microsoft.VisualStudio.Text.Formatting.ITextViewLine" /> and the top of the <see cref="T:Microsoft.VisualStudio.Text.Formatting.ITextViewLine" />.</param>
            <param name="baseline">The baseline of the space-negotiating adornment.</param>
            <param name="textHeight">The height in pixels of the text portion of the space-negotiating adornment.</param>
            <param name="bottomSpace">The space needed between the bottom of the text in the <see cref="T:Microsoft.VisualStudio.Text.Formatting.ITextViewLine" /> and the botton of the <see cref="T:Microsoft.VisualStudio.Text.Formatting.ITextViewLine" />.</param>
            <param name="affinity">The <see cref="T:Microsoft.VisualStudio.Text.PositionAffinity" /> of the space-negotiating adornment.</param>
            <param name="identityTag">A unique object associated with the space-negotiating adornment, used by <see cref="T:Microsoft.VisualStudio.Text.Formatting.ITextViewLine" />.GetAdornmentBounds.</param>
            <param name="providerTag">A unique object identifying the provider of the adornment, used by <see cref="M:Microsoft.VisualStudio.Text.Formatting.ITextViewLine.GetAdornmentTags(System.Object)" />).</param>
            <param name="ranking">Tie breaker used to order coincident adornments.</param>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Tagging.StructureTag">
            <summary>
            An implementation of <see cref="T:Microsoft.VisualStudio.Text.Tagging.IStructureTag2" />.
            </summary>
            <remarks>
            Using this class is the recommended way to create an instance of <see cref="T:Microsoft.VisualStudio.Text.UI.Adornments.IStructureElement" /> for most purposes.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Tagging.StructureTag.#ctor(Microsoft.VisualStudio.Text.ITextSnapshot,System.Nullable{Microsoft.VisualStudio.Text.Span},System.Nullable{Microsoft.VisualStudio.Text.Span},System.Nullable{Microsoft.VisualStudio.Text.Span},System.Nullable{System.Int32},System.String,System.Boolean,System.Boolean,System.Boolean,System.Object,System.Object)">
            <summary>
            Constructs an instance of the <see cref="T:Microsoft.VisualStudio.Text.Tagging.IStructureTag" />.
            </summary>
            <remarks>
            StructureTag offers explicit control of the block structure adornments.
            This class operates on the pay-to-play principle, in that,
            it will allow you to create a tag with just a subset of fields, but if a field is missing, it
            will attempt to guess the missing fields from the information that it has. The most useful example
            of this is to omit the GuideLineSpan and GuideLineHorizontalAnchorPoint to have the API guess
            them from the HeaderSpan and StatementSpan indentation. If enough information is missing, the tag
            does nothing.
            </remarks>
            <param name="snapshot">The snapshot used to generate this StructureTag.</param>
            <param name="outliningSpan">The block contents, used to determine the collapse region.</param>
            <param name="headerSpan">The control statement at the start of the block.</param>
            <param name="guideLineSpan">
            The vertical span within which the block structure guide is drawn.
            If this member is omitted, it is computed from the HeaderSpan and the OutliningSpan via heuristics.</param>
            <param name="guideLineHorizontalAnchor">
            A point capturing the horizontal offset at which the guide is drawn.
            If this member is omitted, it is computed from the HeaderSpan and the OutliningSpan via heuristics.</param>
            <param name="type">The structure type of the block.</param>
            <param name="isCollapsible">If true, block will have block adornments.</param>
            <param name="isDefaultCollapsed">If true, block is collapsed by default.</param>
            <param name="isImplementation">Defines whether or not the block defines a region following a function declaration.</param>
            <param name="collapsedForm">The form the block appears when collapsed.</param>
            <param name="collapsedHintForm">The form of the collapsed region tooltip.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Tagging.StructureTag.#ctor(Microsoft.VisualStudio.Text.ITextSnapshot,System.Nullable{Microsoft.VisualStudio.Text.Span},System.Nullable{Microsoft.VisualStudio.Text.Span},System.Nullable{Microsoft.VisualStudio.Text.Span},System.Nullable{System.Int32},System.String,System.Boolean,System.Boolean,System.Boolean,System.Object,System.Object,System.Nullable{Microsoft.VisualStudio.Text.Span})">
            <summary>
            Constructs an instance of the <see cref="T:Microsoft.VisualStudio.Text.Tagging.IStructureTag" />.
            </summary>
            <remarks>
            StructureTag offers explicit control of the block structure adornments.
            This class operates on the pay-to-play principle, in that,
            it will allow you to create a tag with just a subset of fields, but if a field is missing, it
            will attempt to guess the missing fields from the information that it has. The most useful example
            of this is to omit the GuideLineSpan and GuideLineHorizontalAnchorPoint to have the API guess
            them from the HeaderSpan and StatementSpan indentation. If enough information is missing, the tag
            does nothing.
            </remarks>
            <param name="snapshot">The snapshot used to generate this StructureTag.</param>
            <param name="outliningSpan">The block contents, used to determine the collapse region.</param>
            <param name="headerSpan">The control statement at the start of the block.</param>
            <param name="guideLineSpan">
            The vertical span within which the block structure guide is drawn.
            If this member is omitted, it is computed from the HeaderSpan and the OutliningSpan via heuristics.</param>
            <param name="guideLineHorizontalAnchor">
            A point capturing the horizontal offset at which the guide is drawn.
            If this member is omitted, it is computed from the HeaderSpan and the OutliningSpan via heuristics.</param>
            <param name="type">The structure type of the block.</param>
            <param name="isCollapsible">If true, block will have block adornments.</param>
            <param name="isDefaultCollapsed">If true, block is collapsed by default.</param>
            <param name="isImplementation">Defines whether or not the block defines a region following a function declaration.</param>
            <param name="collapsedForm">The form the block appears when collapsed.</param>
            <param name="collapsedHintForm">The form of the collapsed region tooltip.</param>
            <param name="primaryHeaderSpan">Optional primary control statement of this block (e.g. "if" statement of the "else" block).</param>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Tagging.StructureTag.Snapshot">
            <summary>
            The Snapshot from which this structure tag was generated.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Tagging.StructureTag.OutliningSpan">
            <summary>
            Gets the span containing the entire contents of the block (minus the block header).
            This span will be collapsed or expanded when the block outlining adornment is invoked.
            </summary>
            <remarks>
            If this parameter is null, block structure adornments will still be drawn as long as
            the <see cref="P:Microsoft.VisualStudio.Text.Tagging.StructureTag.GuideLineHorizontalAnchorPoint" /> and the <see cref="P:Microsoft.VisualStudio.Text.Tagging.StructureTag.GuideLineSpan" /> are both provided,
            however, no outlining adornment will be drawn.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Tagging.StructureTag.HeaderSpan">
            <summary>
            Gets the span of the statement that controls the structural block.
            </summary>
            <remarks>
            <para>
            For example, in the following snippet of code,
            <code>
            if (condition1 &amp;&amp;
                condition2) // comment
            {
                something;
            }
            </code>
            this.HeaderSpan would extend from the start of the "if" to the end of comment.
            this.OutliningSpan would extend from the end of "// comment" to the end of the "}".
            </para>
            <para>
            If this parameter is null, block structure adornments will still be drawn as long as
            the <see cref="P:Microsoft.VisualStudio.Text.Tagging.StructureTag.OutliningSpan" /> is provided, or the <see cref="P:Microsoft.VisualStudio.Text.Tagging.StructureTag.GuideLineHorizontalAnchorPoint" />
            and the <see cref="P:Microsoft.VisualStudio.Text.Tagging.StructureTag.GuideLineSpan" /> are both provided.
            </para>
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Tagging.StructureTag.PrimaryHeaderSpan">
            <summary>
            Gets the optional <see cref="T:Microsoft.VisualStudio.Text.Span" /> of the primary header of the code block represented by this tag.
            </summary>
            <remarks>
            <para>
            For example, in the following snippet of code,
            <code>
            if (condition1)
            {
                //something;
            }
            else
            {
                // something else;
            }
            </code>
            <see cref="P:Microsoft.VisualStudio.Text.Tagging.StructureTag.PrimaryHeaderSpan" /> of the <see cref="T:Microsoft.VisualStudio.Text.Tagging.IStructureTag2" /> representing "else" statement block
            would be the same as the <see cref="P:Microsoft.VisualStudio.Text.Tagging.IStructureTag.HeaderSpan" /> of the <see cref="T:Microsoft.VisualStudio.Text.Tagging.IStructureTag" /> representing "if" statement block.
            This allows structure visualizing features to provide more useful context when visualizing "else" structure blocks.
            </para>
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Tagging.StructureTag.GuideLineHorizontalAnchorPoint">
            <summary>
            Gets the point with which the block structure adornment will be horizontally aligned.
            </summary>
            <remarks>
            This point can be on any line and is used solely for determining horizontal position. If null,
            this point is computed from the HeaderSpan and OutliningSpan via heuristics.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Tagging.StructureTag.GuideLineSpan">
            <summary>
            Gets the vertical span within which the block structure adornment will be drawn.
            </summary>
            <remarks>
            For a block to have an adornment, it must not be of type <see cref="F:Microsoft.VisualStudio.Text.Adornments.PredefinedStructureTagTypes.Nonstructural" />,
            and the implementer must also provide the GuideLineHorizontalAnchor. The adornment is drawn from the top of the
            line containing the start of the span to the bottom of the line containing the bottom of the span. If null,
            the GuideLineSpan is inferred from the OutliningSpan and the HeaderSpan.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Tagging.StructureTag.Type">
            <summary>
            Determines the semantic type of the structural block.
            </summary>
            <remarks>
            See <see cref="T:Microsoft.VisualStudio.Text.Adornments.PredefinedStructureTagTypes" /> for the canonical types.
            Use <see cref="F:Microsoft.VisualStudio.Text.Adornments.PredefinedStructureTagTypes.Nonstructural" /> for blocks that will not have any visible affordance
            (but will be used for outlining).
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Tagging.StructureTag.IsCollapsible">
            <summary>
            Determines whether or not a block can be collapsed.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Tagging.StructureTag.IsDefaultCollapsed">
            <summary>
            Determines whether a block is collapsed by default.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Tagging.StructureTag.IsImplementation">
            <summary>
            Determines whether a StructureTag represents an implementation block region.
            </summary>
            <remarks>
            Implementation blocks are the blocks of code following a method definition.
            They are used for commands such as the Visual Studio Collapse to Definition command,
            which hides the implementation block and leaves only the method definition exposed.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Tagging.StructureTag.GetCollapsedForm">
            <summary>
            Gets the data object for the collapsed UI. If the default is set, returns null.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Tagging.StructureTag.GetCollapsedHintForm">
            <summary>
            Gets the data object for the collapsed UI tooltip. If the default is set, returns null.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Tagging.TextMarkerTag">
            <summary>
            Represents the text marker tag, which is used to place text marker adornments on a view.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Tagging.TextMarkerTag.#ctor(System.String)">
            <summary>
            Initializes a new instance of a <see cref="T:Microsoft.VisualStudio.Text.Tagging.TextMarkerTag" /> of the given type.
            </summary>
            <param name="type">The type of text marker to use.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="type" /> is null.</exception>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Tagging.TextMarkerTag.Type">
            <summary>
            Gets the type of adornment to use.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Audio.AudioDefinition.#ctor(System.String,System.Int32)">
            <summary>
            Definition of an audio file registered with Windows
            </summary>
            <param name="identifier">the key of the audio file used to find the path of the audio file</param>
            <param name="priority">the priority of the audio sound that is used to determine if an audio file will be played</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Audio.IAudioPlayer.PlaySound(Microsoft.VisualStudio.Audio.AudioDefinition)">
            <summary>
            Play a sound for a given <see cref="T:Microsoft.VisualStudio.Audio.AudioDefinition" />
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Commanding.CommandArgs">
            <summary>
            A base class for all command arguments.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Commanding.CommandExecutionContext">
            <summary>
            Represents a command execution context, which is set up by a command handler service
            and provided to each command handler.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Commanding.CommandExecutionContext.#ctor(Microsoft.VisualStudio.Utilities.IUIThreadOperationContext)">
            <summary>
            Creates new instance of the <see cref="T:Microsoft.VisualStudio.Commanding.CommandExecutionContext" />.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Commanding.CommandExecutionContext.OperationContext">
            <summary>
            Provides a context of executing a command handler on the UI thread, which
            enables two way shared cancellability and wait indication.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Commanding.CommandExecutionContext.Properties">
            <summary>
            A collection of properties.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Commanding.CommandHandlerExtensions">
            <summary>
            Contains command handler utility extension methods.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Commanding.CommandHandlerExtensions.GetCommandState``1(Microsoft.VisualStudio.Commanding.ICommandHandler,``0,System.Func{Microsoft.VisualStudio.Commanding.CommandState})">
             <summary>
             Called to determine the state of the command.
             </summary>
             <remarks>
             <para>
             A command handler can implement <see cref="T:Microsoft.VisualStudio.Commanding.ICommandHandler`1" /> or
             <see cref="T:Microsoft.VisualStudio.Commanding.IChainedCommandHandler`1" />, but either way this method returns
             the final state of the command as returned by either this or next
             command handler.
             </para>
             <para>If <paramref name="commandHandler" /> implements <see cref="T:Microsoft.VisualStudio.Commanding.ICommandHandler`1" />,
             its <see cref="M:Microsoft.VisualStudio.Commanding.ICommandHandler`1.GetCommandState(`0)" /> method is called. If it returns
             <see cref="P:Microsoft.VisualStudio.Commanding.CommandState.Unspecified" />, <paramref name="nextCommandHandler" /> is invoked.
            </para>
            <para>
             If <paramref name="commandHandler" /> implements <see cref="T:Microsoft.VisualStudio.Commanding.IChainedCommandHandler`1" />,
             its <see cref="M:Microsoft.VisualStudio.Commanding.IChainedCommandHandler`1.GetCommandState(`0,System.Func{Microsoft.VisualStudio.Commanding.CommandState})" /> method is invoked with
             <paramref name="nextCommandHandler" /> passed as an argument.
            </para>
             </remarks>
             <param name="args">The <see cref="T:Microsoft.VisualStudio.Commanding.CommandArgs" /> arguments for the command.</param>
             <param name="nextCommandHandler">The next command handler in the command execution chain.</param>
             <param name="commandHandler">A command handler to query the state of the command.</param>
             <returns>A <see cref="T:Microsoft.VisualStudio.Commanding.CommandState" /> instance that contains information on the availability of the command.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Commanding.CommandHandlerExtensions.ExecuteCommand``1(Microsoft.VisualStudio.Commanding.ICommandHandler,``0,System.Action,Microsoft.VisualStudio.Commanding.CommandExecutionContext)">
             <summary>
             Called to execute the command.
             </summary>
             <remarks>
             <para>
             A command handler can implement <see cref="T:Microsoft.VisualStudio.Commanding.ICommandHandler`1" /> or
             <see cref="T:Microsoft.VisualStudio.Commanding.IChainedCommandHandler`1" />, but either way this method executes
             the command by either this or next command handler.
             </para>
             <para>If <paramref name="commandHandler" /> implements <see cref="T:Microsoft.VisualStudio.Commanding.ICommandHandler`1" />,
             its <see cref="M:Microsoft.VisualStudio.Commanding.ICommandHandler`1.ExecuteCommand(`0,Microsoft.VisualStudio.Commanding.CommandExecutionContext)" /> method is called. If it returns
             <c>false</c>, <paramref name="nextCommandHandler" /> is invoked.
            </para>
            <para>
             If <paramref name="commandHandler" /> implements <see cref="T:Microsoft.VisualStudio.Commanding.IChainedCommandHandler`1" />,
             its <see cref="M:Microsoft.VisualStudio.Commanding.IChainedCommandHandler`1.ExecuteCommand(`0,System.Action,Microsoft.VisualStudio.Commanding.CommandExecutionContext)" /> method is invoked with
             <paramref name="nextCommandHandler" /> passed as an argument.
            </para>
             </remarks>
             <param name="args">The <see cref="T:Microsoft.VisualStudio.Commanding.CommandArgs" /> arguments for the command.</param>
             <param name="nextCommandHandler">The next command handler in the command execution chain.</param>
             <param name="commandHandler">A command handler to execute the command.</param>
             <param name="executionContext">Current command execution context.</param>
        </member>
        <member name="T:Microsoft.VisualStudio.Commanding.CommandState">
            <summary>
            Returned by <see cref="M:Microsoft.VisualStudio.Commanding.ICommandHandler`1.GetCommandState(`0)" /> and determines the state of the command.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Commanding.CommandState.IsUnspecified">
            <summary>
            If true, the command state is unspecified and should not be taken into account.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Commanding.CommandState.IsAvailable">
            <summary>
            If true, the command should be available for execution.
            <see cref="P:Microsoft.VisualStudio.Commanding.CommandState.IsEnabled" /> and <see cref="P:Microsoft.VisualStudio.Commanding.CommandState.IsVisible" /> properties control how the command should be represented in the UI.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Commanding.CommandState.IsEnabled">
            <summary>
            If true, the command should be enabled in the UI.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Commanding.CommandState.IsVisible">
            <summary>
            If true, the command should be visible in the UI.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Commanding.CommandState.IsChecked">
            <summary>
            If true, the command should appear as checked (i.e. toggled) in the UI.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Commanding.CommandState.DisplayText">
            <summary>
            If specified, returns the custom text that should be displayed in the UI.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Commanding.CommandState.Available">
            <summary>
            A helper singleton representing an available (supported, enabled and visible) command state.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Commanding.CommandState.Unavailable">
            <summary>
            A helper singleton representing an unavailable command state.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Commanding.CommandState.Unspecified">
            <summary>
            A helper singleton representing an unspecified command state.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Commanding.IChainedCommandHandler`1">
            <summary>
            Represents a command handler that depends on behavior of following command handlers in the command execution chain
            formed from same strongly-typed <see cref="T:Microsoft.VisualStudio.Commanding.ICommandHandler" />s ordered according to their [Order] attributes.
            </summary>
            <remarks>
            This is a MEF component part and should be exported as the non-generic <see cref="T:Microsoft.VisualStudio.Commanding.ICommandHandler" /> with required
            [Name], [ContentType] attributes and optional [Order] and [TextViewRole] attributes.
            </remarks>
            <example>
            <code>
            [Export(typeof(ICommandHandler))]
            [Name(nameof(MyCommandHandler))]
            [ContentType("text")]
            [Order(Before ="OtherCommandHandler")]   
            [TextViewRole(PredefinedTextViewRoles.Editable)]
            internal class MyCommandHandler : IChainedCommandHandler&lt;MyCommandArgs&gt;
            </code>
            </example>
        </member>
        <member name="M:Microsoft.VisualStudio.Commanding.IChainedCommandHandler`1.GetCommandState(`0,System.Func{Microsoft.VisualStudio.Commanding.CommandState})">
            <summary>
            Called to determine the state of the command.
            This method should never return <see cref="P:Microsoft.VisualStudio.Commanding.CommandState.Unspecified" /> as it would prevent calling following command handlers.
            <paramref name="nextCommandHandler" /> should be called instead. If a <see cref="T:Microsoft.VisualStudio.Commanding.IChainedCommandHandler`1" /> handles a command
            it doesn't own, its <see cref="M:Microsoft.VisualStudio.Commanding.IChainedCommandHandler`1.GetCommandState(`0,System.Func{Microsoft.VisualStudio.Commanding.CommandState})" /> should always call <paramref name="nextCommandHandler" />"
            to give a chance a <see cref="T:Microsoft.VisualStudio.Commanding.ICommandHandler" /> that owns the command to enable or disable it.
            </summary>
            <param name="args">The <see cref="T:Microsoft.VisualStudio.Commanding.CommandArgs" /> arguments for the command.</param>
            <param name="nextCommandHandler">The next command handler in the command execution chain.</param>
            <returns>A <see cref="T:Microsoft.VisualStudio.Commanding.CommandState" /> instance that contains information on the availability of the command.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Commanding.IChainedCommandHandler`1.ExecuteCommand(`0,System.Action,Microsoft.VisualStudio.Commanding.CommandExecutionContext)">
            <summary>
            Called to execute the command.
            If this implementation does not execute the command, <paramref name="nextCommandHandler" /> should be called
            so that other <see cref="T:Microsoft.VisualStudio.Commanding.ICommandHandler" />s may act on this command.
            </summary>
            <param name="args">The <see cref="T:Microsoft.VisualStudio.Commanding.CommandArgs" /> arguments for the command.</param>
            <param name="nextCommandHandler">The next command handler in the command execution chain.</param>
            <param name="executionContext">Execution context associated with this operation.</param>
        </member>
        <member name="T:Microsoft.VisualStudio.Commanding.ICommandHandler">
            <summary>
            This interface marks a class that implements at least one strongly-typed
            <see cref="T:Microsoft.VisualStudio.Commanding.ICommandHandler`1" /> or <see cref="T:Microsoft.VisualStudio.Commanding.IChainedCommandHandler`1" />.
            </summary>
            <remarks>
            This is a MEF component part and should be exported as the non-generic <see cref="T:Microsoft.VisualStudio.Commanding.ICommandHandler" /> with required
            [Name], [ContentType] attributes and optional [Order] and [TextViewRole] attributes.
            </remarks>
            <example>
            <code>
            [Export(typeof(ICommandHandler))]
            [Name(nameof(MyCommandHandler))]
            [ContentType("text")]
            [Order(Before ="OtherCommandHandler")]   
            [TextViewRole(PredefinedTextViewRoles.Editable)]
            internal class MyCommandHandler : ICommandHandler&lt;MyCommandArgs&gt;
            </code>
            </example>
        </member>
        <member name="T:Microsoft.VisualStudio.Commanding.ICommandHandler`1">
            <summary>
            Represents a handler for a command associated with specific <see cref="T:Microsoft.VisualStudio.Commanding.CommandArgs" />.
            </summary>
            <remarks>
            This is a MEF component part and should be exported as the non-generic <see cref="T:Microsoft.VisualStudio.Commanding.ICommandHandler" /> with required
            [Name], [ContentType] attributes and optional [Order] and [TextViewRole] attributes.
            </remarks>
            <example>
            <code>
            [Export(typeof(ICommandHandler))]
            [Name(nameof(MyCommandHandler))]
            [ContentType("text")]
            [Order(Before ="OtherCommandHandler")]   
            [TextViewRole(PredefinedTextViewRoles.Editable)]
            internal class MyCommandHandler : ICommandHandler&lt;MyCommandArgs&gt;
            </code>
            </example>
        </member>
        <member name="M:Microsoft.VisualStudio.Commanding.ICommandHandler`1.GetCommandState(`0)">
            <summary>
            Called to determine the state of the command.
            </summary>
            <param name="args">The <see cref="T:Microsoft.VisualStudio.Commanding.CommandArgs" /> arguments for the command.</param>
            <returns>A <see cref="T:Microsoft.VisualStudio.Commanding.CommandState" /> instance that contains information on the availability of the command.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Commanding.ICommandHandler`1.ExecuteCommand(`0,Microsoft.VisualStudio.Commanding.CommandExecutionContext)">
            <summary>
            Called to execute the command.
            </summary>
            <param name="args">The <see cref="T:Microsoft.VisualStudio.Commanding.CommandArgs" /> arguments for the command.</param>
            <param name="executionContext">Execution context associated with this operation.</param>
            <returns>Returns <c>true</c> if the command was handled, <c>false</c> otherwise.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Commanding.IDynamicCommandHandler`1">
            <summary>
            A command handler that can opt out of <see cref="M:Microsoft.VisualStudio.Commanding.ICommandHandler`1.ExecuteCommand(`0,Microsoft.VisualStudio.Commanding.CommandExecutionContext)" />.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Commanding.IDynamicCommandHandler`1.CanExecuteCommand(`0)">
            <summary>
            Determines whether <see cref="M:Microsoft.VisualStudio.Commanding.ICommandHandler`1.ExecuteCommand(`0,Microsoft.VisualStudio.Commanding.CommandExecutionContext)" /> should be called.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Utilities.AbstractUIThreadOperationContext">
            <summary>
            Abstract base implementation of the <see cref="T:Microsoft.VisualStudio.Utilities.IUIThreadOperationContext" /> interface.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.AbstractUIThreadOperationContext.#ctor(System.Boolean,System.String)">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.VisualStudio.Utilities.AbstractUIThreadOperationContext" />.
            </summary>
            <param name="allowCancellation">Initial value of the <see cref="P:Microsoft.VisualStudio.Utilities.IUIThreadOperationContext.AllowCancellation" />
            property, which can change as new scopes are added to the context.</param>
            <param name="defaultDescription">Default value of the <see cref="P:Microsoft.VisualStudio.Utilities.IUIThreadOperationContext.Description" />
            property, which can change as new scopes are added to the context.</param>
        </member>
        <member name="P:Microsoft.VisualStudio.Utilities.AbstractUIThreadOperationContext.UserCancellationToken">
            <summary>
            Cancellation token for cancelling the operation.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Utilities.AbstractUIThreadOperationContext.AllowCancellation">
            <summary>
            Gets whether the operation can be cancelled.
            </summary>
            <remarks>This value is composed of initial AllowCancellation value and
            <see cref="P:Microsoft.VisualStudio.Utilities.IUIThreadOperationScope.AllowCancellation" /> values of all currently added scopes.
            The value composition logic takes into acount disposed scopes too - if any of added scopes
            were disposed while its <see cref="P:Microsoft.VisualStudio.Utilities.IUIThreadOperationScope.AllowCancellation" /> was false,
            this property will stay false regardless of all other scopes' <see cref="P:Microsoft.VisualStudio.Utilities.IUIThreadOperationScope.AllowCancellation" />
            values.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Utilities.AbstractUIThreadOperationContext.Description">
            <summary>
            Gets user readable operation description, composed of initial context description or
            descriptions of all currently added scopes.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Utilities.AbstractUIThreadOperationContext.Scopes">
            <summary>
            Gets current list of <see cref="T:Microsoft.VisualStudio.Utilities.IUIThreadOperationScope" />s in this context.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Utilities.AbstractUIThreadOperationContext.Properties">
            <summary>
            A collection of properties.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.AbstractUIThreadOperationContext.AddScope(System.Boolean,System.String)">
            <summary>
            Adds an UI thread operation scope with its own cancellability, description and progress tracker.
            The scope is removed from the context on dispose.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.AbstractUIThreadOperationContext.OnScopesChanged">
            <summary>
            Invoked when new <see cref="T:Microsoft.VisualStudio.Utilities.IUIThreadOperationScope" />s are added or disposed.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.AbstractUIThreadOperationContext.Dispose">
            <summary>
            Disposes this instance.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.AbstractUIThreadOperationContext.TakeOwnership">
            <summary>
            Allows a component to take full ownership over this UI thread operation, for example
            when it shows its own modal UI dialog and handles cancellability through that dialog instead.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Utilities.IBackgroundWorkIndicatorService">
            <summary>
            Factory for creating lightweight <see cref="T:Microsoft.VisualStudio.Utilities.IBackgroundWorkIndicator" />s that can sit in the editor in a
            unobtrusive fashion unlike the Threaded-Wait-Dialog. Features can use this to indicate to users that work
            is happening in the background while not blocking the user from continuing to work with their code.
            </summary>
            <remarks>This is a MEF Component, and should be imported as follows:
            <code>
            [Import]
            IBackgroundWorkIndicatorService backgroundWorkIndicatorService = null;
            </code>
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.IBackgroundWorkIndicatorService.Create(Microsoft.VisualStudio.Text.Editor.ITextView,Microsoft.VisualStudio.Text.SnapshotSpan,System.String,Microsoft.VisualStudio.Utilities.BackgroundWorkIndicatorOptions)">
            <summary>
            Creates a new background work indicator at the requested location to notify the user that background work is happening.
            The work is always cancellable by the user hitting the 'escape' key.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Utilities.BackgroundWorkIndicatorOptions">
            <summary>
            Determines behavior for an <see cref="T:Microsoft.VisualStudio.Utilities.IBackgroundWorkIndicator" />.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Utilities.BackgroundWorkIndicatorOptions.CancelOnEdit">
            <summary>
            Cancels the <see cref="T:Microsoft.VisualStudio.Utilities.IBackgroundWorkIndicator" /> if the buffer changes.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Utilities.BackgroundWorkIndicatorOptions.CancelOnFocusLost">
            <summary>
            Cancels the <see cref="T:Microsoft.VisualStudio.Utilities.IBackgroundWorkIndicator" /> if the view loses focus.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Utilities.IBackgroundWorkIndicator">
            <summary>
            A low-impact indicator that can be shown while work is being done in the background.
            Created by <see cref="T:Microsoft.VisualStudio.Utilities.IBackgroundWorkIndicatorService" />
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Utilities.IBackgroundWorkIndicator.CancellationToken">
            <summary>
            IsCancellationRequested will be set to true when the <see cref="T:Microsoft.VisualStudio.Utilities.IBackgroundWorkIndicator" /> is dismissed
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.IBackgroundWorkIndicator.AddScope(System.String)">
            <summary>
            Allows updating the text of this <see cref="T:Microsoft.VisualStudio.Utilities.IBackgroundWorkIndicator" /> and reporting progress.
            </summary>
            <param name="description"></param>
            <returns>An <see cref="T:Microsoft.VisualStudio.Utilities.BackgroundWorkOperationScope" /> that can be disposed when this scope's work is complete.</returns>
            <remarks>This method can be invoked from any thread.</remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.IBackgroundWorkIndicator.SuppressAutoCancel">
            <summary>
            Allows clients to temporarily suppress auto cancel behaviors when
            they want to apply edits or navigate without canceling the <see cref="T:Microsoft.VisualStudio.Utilities.IBackgroundWorkIndicator" />.
            </summary>
            <returns><see cref="T:System.IDisposable" /> that restores auto cancel behaviors.</returns>
            <remarks>This method must be called from the UI thread.</remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.Utilities.BackgroundWorkOperationScope">
            <summary>
            Represents a single scope in the context of executing a potentially long running operation.
            </summary>
            <remarks>Members can be invoked from any thread.</remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Utilities.BackgroundWorkOperationScope.Description">
            <summary>
            Updates the description of the operation scope.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.BackgroundWorkOperationScope.Dispose">
            <summary>
            Marks the operation scope as completed
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Utilities.IClipboardOverwrite">
            <summary>
            Provides methods to overwrite the behavior of <see cref="T:Microsoft.VisualStudio.Utilities.IClipboardService" />.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.IClipboardOverwrite.OverwriteTryGetTextResult(System.String)">
            <summary>
            Forces the next invocation to <see cref="M:Microsoft.VisualStudio.Utilities.IClipboardService.TryGetText(System.String,System.Boolean@,System.String,System.Boolean@,System.String@)" />
            to return the specified text.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Utilities.IClipboardService">
            <summary>
            Provides methods to place data on and retrieve data from the system clipboard.
            </summary>
            <remarks>This is a MEF Component, and should be imported as follows:
            <code>
            [Import]
            IClipboardService clipboardService = null;
            </code>
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.IClipboardService.TryGetText(System.String,System.Boolean@,System.String,System.Boolean@,System.String@)">
            <summary>
            Gets text from the system clipboard along with specified tags.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.IClipboardService.ContainsText">
            <summary>
            Return true if Clipboard contains the text data format which is unicode. 
            Otherwise, return false.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.IClipboardService.SetData(System.String,System.String,System.String,System.String,System.Boolean,System.String,System.Boolean,System.Boolean)">
            <summary>
            Places text to the system clipboard along with specified tags.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Utilities.IStatusBarService">
            <summary>
            A status bar service enabling to send messages to the editor host's status bar.
            </summary>
            <remarks>
            <para>This is a MEF component part, and should be imported as follows:
            [Import]
            IStatusBarService statusBarService = null;
            </para>
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.IStatusBarService.SetTextAsync(System.String)">
            <summary>
            Sends a text to the editor host's status bar.
            </summary>
            <param name="text">A text to be displayed on the status bar.</param>
        </member>
        <member name="T:Microsoft.VisualStudio.Utilities.IUIThreadOperationContext">
            <summary>
            Represents a context of executing potentially long running operation on the UI thread, which
            enables shared two way cancellability and wait indication.
            </summary>
            <remarks>
            Instances implementing this interface are produced by <see cref="T:Microsoft.VisualStudio.Utilities.IUIThreadOperationExecutor" />
            MEF component.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Utilities.IUIThreadOperationContext.UserCancellationToken">
            <summary>
            Cancellation token that allows user to cancel the operation unless the operation
            is not cancellable.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Utilities.IUIThreadOperationContext.AllowCancellation">
            <summary>
            Gets whether the operation can be cancelled.
            </summary>
            <remarks>This value is composed of initial AllowCancellation value and
            <see cref="P:Microsoft.VisualStudio.Utilities.IUIThreadOperationScope.AllowCancellation" /> values of all currently added scopes.
            The value composition logic takes into acount disposed scopes too - if any of added scopes
            were disposed while its <see cref="P:Microsoft.VisualStudio.Utilities.IUIThreadOperationScope.AllowCancellation" /> was false,
            this property will stay false regardless of all other scopes' <see cref="P:Microsoft.VisualStudio.Utilities.IUIThreadOperationScope.AllowCancellation" />
            values.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Utilities.IUIThreadOperationContext.Description">
            <summary>
            Gets user readable operation description, composed of initial context description and
            descriptions of all currently added scopes.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Utilities.IUIThreadOperationContext.Scopes">
            <summary>
            Gets current list of <see cref="T:Microsoft.VisualStudio.Utilities.IUIThreadOperationScope" />s in this context.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.IUIThreadOperationContext.AddScope(System.Boolean,System.String)">
            <summary>
            Adds a UI thread operation scope with its own two way cancellability, description and progress tracker.
            The scope is removed from the context on dispose.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.IUIThreadOperationContext.TakeOwnership">
            <summary>
            Allows a component to take full ownership over this UI thread operation, for example
            when it shows its own modal UI dialog and handles cancellability through that dialog instead.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Utilities.IUIThreadOperationExecutor">
             <summary>
             Executes potentially long running operation on the UI thread and provides shared two way cancellability
             and wait indication.
             </summary>
             <remarks>
             <para>
             Visual Studio implementation of this service measures operation execution duration
             and displays a modal wait dialog if it takes too long. The wait dialog describes operation to the user,
             optionally provides progress information and allows user to cancel the operation if
             it can be cancelled.
             Components running in the operation can affect the wait dialog via <see cref="T:Microsoft.VisualStudio.Utilities.IUIThreadOperationContext" />
             provided by this service.
             </para>
             <para>
             This is a MEF component and should be imported for consumptions as follows:
             <code>
             [Import]
             private IUIThreadOperationExecutor uiThreadOperationExecutor = null;
             </code>
             </para>
             <para>
             Host specific implementations of this service should be exported as follows:
             <code>
             [ExportImplementation(typeof(IUIThreadOperationExecutor))]
              [Name("Visual Studio UI thread operation executor")]
              [Order(Before = "default")]
              internal sealed class VSUIThreadOperationExecutor : IUIThreadOperationExecutor
             </code>
             </para>
             <para>
             All methods of this interface should only be called on the UI thread.
             </para>
             </remarks>
             <example>
             A typical usage of <see cref="T:Microsoft.VisualStudio.Utilities.IUIThreadOperationExecutor" /> to execute a potentially
             long running operation on the UI thread is as follows:
             <code>
             [Import]
             private IUIThreadOperationExecutor uiThreadOperationExecutor = null;
             ...
             UIThreadOperationStatus status = _uiThreadOperationExecutor.Execute("Format document",
                 "Please wait for document formatting...", allowCancel: true, showProgress: false,
                 action: (context) =&gt; Format(context.UserCancellationToken));
             if (status == UIThreadOperationStatus.Completed)...
             </code>
             Or alternatively
             <code>
             using (var context = _uiThreadOperationExecutor.BeginExecute("Format document",
                 "Please wait for document formatting...", allowCancel: true, showProgress: false))
             {
                 Format(context);
             }
            
             private void Format(IUIThreadOperationContext context)
             {
                 using (context.AddScope(allowCancellation: true, description: "Acquiring user preferences..."))
                 {...}
             }
             </code>
             </example>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.IUIThreadOperationExecutor.Execute(System.String,System.String,System.Boolean,System.Boolean,System.Action{Microsoft.VisualStudio.Utilities.IUIThreadOperationContext})">
            <summary>
            Executes the action synchronously and waits for it to complete.
            </summary>
            <param name="title">Operation's title. Can be null to indicate that the wait dialog should use the application's title.</param>
            <param name="defaultDescription">Default operation's description, which is displayed on the wait dialog unless
            one or more <see cref="T:Microsoft.VisualStudio.Utilities.IUIThreadOperationScope" />s with more specific descriptions were added to
            the <see cref="T:Microsoft.VisualStudio.Utilities.IUIThreadOperationContext" />.</param>
            <param name="allowCancellation">Whether to allow cancellability.</param>
            <param name="showProgress">Whether to show progress indication.</param>
            <param name="action">An action to execute.</param>
            <returns>A status of action execution.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.IUIThreadOperationExecutor.Execute(Microsoft.VisualStudio.Utilities.UIThreadOperationExecutionOptions,System.Action{Microsoft.VisualStudio.Utilities.IUIThreadOperationContext})">
            <summary>
            Executes the action synchronously and waits for it to complete.
            </summary>
            <param name="executionOptions">Options that control action execution behavior.</param>
            <param name="action">An action to execute.</param>
            <returns>A status of action execution.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.IUIThreadOperationExecutor.BeginExecute(System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
            Begins executing potentially long running operation on the caller thread and provides a context object that provides access to shared
            cancellability and wait indication.
            </summary>
            <param name="title">Operation's title. Can be null to indicate that the wait dialog should use the application's title.</param>
            <param name="defaultDescription">Default operation's description, which is displayed on the wait dialog unless
            one or more <see cref="T:Microsoft.VisualStudio.Utilities.IUIThreadOperationScope" />s with more specific descriptions were added to
            the <see cref="T:Microsoft.VisualStudio.Utilities.IUIThreadOperationContext" />.</param>
            <param name="allowCancellation">Whether to allow cancellability.</param>
            <param name="showProgress">Whether to show progress indication.</param>
            <returns><see cref="T:Microsoft.VisualStudio.Utilities.IUIThreadOperationContext" /> instance that provides access to shared two way
            cancellability and wait indication for the given operation. The operation is considered executed
            when this <see cref="T:Microsoft.VisualStudio.Utilities.IUIThreadOperationContext" /> instance is disposed.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.IUIThreadOperationExecutor.BeginExecute(Microsoft.VisualStudio.Utilities.UIThreadOperationExecutionOptions)">
            <summary>
            Begins executing potentially long running operation on the caller thread and provides a context object that provides access to shared
            cancellability and wait indication.
            </summary>
            <param name="executionOptions">Options that control execution behavior.</param>
            <returns><see cref="T:Microsoft.VisualStudio.Utilities.IUIThreadOperationContext" /> instance that provides access to shared two way
            cancellability and wait indication for the given operation. The operation is considered executed
            when this <see cref="T:Microsoft.VisualStudio.Utilities.IUIThreadOperationContext" /> instance is disposed.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Utilities.IUIThreadOperationScope">
            <summary>
            Represents a single scope of a context of executing potentially long running operation on the UI thread.
            Scopes allow multiple components running within an operation to share the same context.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Utilities.IUIThreadOperationScope.AllowCancellation">
            <summary>
            Gets or sets whether the operation can be cancelled.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Utilities.IUIThreadOperationScope.Description">
            <summary>
            Gets user readable operation description.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Utilities.IUIThreadOperationScope.Context">
            <summary>
            The <see cref="T:Microsoft.VisualStudio.Utilities.IUIThreadOperationContext" /> owning this scope instance.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Utilities.IUIThreadOperationScope.Progress">
            <summary>
            Progress tracker instance to report operation progress.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Utilities.ProgressInfo">
            <summary>
            Represents an update of a progress.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Utilities.ProgressInfo.CompletedItems">
            <summary>
            A number of already completed items.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Utilities.ProgressInfo.TotalItems">
            <summary>
            A total number if items.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.ProgressInfo.#ctor(System.Int32,System.Int32)">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.VisualStudio.Utilities.ProgressInfo" /> struct.
            </summary>
            <param name="completedItems">A number of already completed items.</param>
            <param name="totalItems">A total number if items.</param>
        </member>
        <member name="T:Microsoft.VisualStudio.Utilities.IUIThreadOperationTimeoutController">
            <summary>
            A controller that enables and controls auto-cancellation of an operation execution by
            <see cref="T:Microsoft.VisualStudio.Utilities.IUIThreadOperationExecutor" /> on a timeout.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Utilities.IUIThreadOperationTimeoutController.CancelAfter">
            <summary>
            The duration (in milliseconds) after which an operation shouold be auto-cancelled.
            </summary>
            <remarks><see cref="F:System.Threading.Timeout.Infinite" /> disables auto-cancellation.</remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.IUIThreadOperationTimeoutController.ShouldCancel">
            <summary>
            Gets whether an operation, whose execution time exceeded <see cref="P:Microsoft.VisualStudio.Utilities.IUIThreadOperationTimeoutController.CancelAfter" /> timeout should be
            cancelled.
            </summary>
            <remarks>This callback can be used to disable auto-cancellation when an operation already
            passed the point of no cancellation and it would leave system in an inconsistent state.
            This method is called on a background thread.</remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.IUIThreadOperationTimeoutController.OnTimeout(System.Boolean)">
            <summary>
            An event callback raised when an operation execution timeout was reached.
            </summary>
            <param name="wasExecutionCancelled">Indicates whether an operation was auto-cancelled.
            Might be <c>false</c> if the operation is not cancellable (<see cref="P:Microsoft.VisualStudio.Utilities.IUIThreadOperationContext.AllowCancellation" />
            is <c>false</c> or <see cref="M:Microsoft.VisualStudio.Utilities.IUIThreadOperationTimeoutController.ShouldCancel" /> returned <c>false</c>.
            </param>7
            <remarks>This method is called on a background thread.</remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.IUIThreadOperationTimeoutController.OnDelay">
            <summary>
            An event callback raised when a UI thread operation execution took long enough to be considered
            as a delay. Visual Studio implementation of the <see cref="T:Microsoft.VisualStudio.Utilities.IUIThreadOperationExecutor" /> displays
            a wait dialog at this point.
            </summary>
            <remarks>This method is called on a background thread.</remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.Utilities.IUIThreadScheduler">
            <summary>
            A JTF scheduler that can run tasks on UI thread using a Dispatcher with Normal priority.
            </summary>
            <remarks>This is a MEF Component, and should be imported as follows:
            <code>
            [Import]
            IUIThreadScheduler uiThreadScheduler = null;
            </code>
            </remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.Utilities.UIThreadScheduler">
            <summary>
            This class provides a default implementation when the Editor is hosted outside of VS
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Utilities.UIThreadOperationExecutionOptions">
            <summary>
            Options that control behavior of <see cref="T:Microsoft.VisualStudio.Utilities.IUIThreadOperationExecutor" />.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Utilities.UIThreadOperationExecutionOptions.Title">
            <summary>
            Operation's title.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Utilities.UIThreadOperationExecutionOptions.DefaultDescription">
            <summary>
            Default operation's description, which is displayed on the wait dialog unless
            one or more <see cref="T:Microsoft.VisualStudio.Utilities.IUIThreadOperationScope" />s with more specific descriptions were added to
            the <see cref="T:Microsoft.VisualStudio.Utilities.IUIThreadOperationContext" />.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Utilities.UIThreadOperationExecutionOptions.AllowCancellation">
            <summary>
            Whether to allow cancellability.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Utilities.UIThreadOperationExecutionOptions.ShowProgress">
            <summary>
            Whether to show progress indication.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Utilities.UIThreadOperationExecutionOptions.TimeoutController">
            <summary>
            A controller that enables and controls auto-cancellation of an operation execution on a timeout.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.UIThreadOperationExecutionOptions.#ctor(System.String,System.String,System.Boolean,System.Boolean,Microsoft.VisualStudio.Utilities.IUIThreadOperationTimeoutController)">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.VisualStudio.Utilities.UIThreadOperationExecutionOptions" />.
            </summary>
            <param name="title">Operation's title. Can be null to indicate that the wait dialog should use the application's title.</param>
            <param name="defaultDescription">Default operation's description, which is displayed on the wait dialog unless
            one or more <see cref="T:Microsoft.VisualStudio.Utilities.IUIThreadOperationScope" />s with more specific descriptions were added to
            the <see cref="T:Microsoft.VisualStudio.Utilities.IUIThreadOperationContext" />.</param>
            <param name="allowCancellation">Whether to allow cancellability.</param>
            <param name="showProgress">Whether to show progress indication.</param>
            <param name="timeoutController">A controller that enables and controls auto-cancellation of an operation execution on a timeout.</param>
        </member>
        <member name="T:Microsoft.VisualStudio.Utilities.UIThreadOperationStatus">
            <summary>
            Represents a status of executing a potentially long running operation on the UI thread.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Utilities.UIThreadOperationStatus.Completed">
            <summary>
            An operation was successfully completed.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Utilities.UIThreadOperationStatus.Canceled">
            <summary>
            An operation was cancelled.
            </summary>
        </member>
        <member name="T:System.Runtime.CompilerServices.IsExternalInit">
            <summary>
            Used by C# 9 for property <c>init</c> accessors.
            </summary>
        </member>
    </members>
<Signature xmlns="http://www.w3.org/2000/09/xmldsig#"><SignedInfo><CanonicalizationMethod Algorithm="http://www.w3.org/TR/2001/REC-xml-c14n-20010315" /><SignatureMethod Algorithm="http://www.w3.org/2001/04/xmldsig-more#rsa-sha256" /><Reference URI=""><Transforms><Transform Algorithm="http://www.w3.org/2000/09/xmldsig#enveloped-signature" /><Transform Algorithm="http://www.w3.org/TR/2001/REC-xml-c14n-20010315" /></Transforms><DigestMethod Algorithm="http://www.w3.org/2001/04/xmlenc#sha256" /><DigestValue>aMkReDBf+qHqo6os6W3iJ7qb82lGkO75rvBxmMTZBvk=</DigestValue></Reference></SignedInfo><SignatureValue>RsMk03HIdnf0f8E1JtE3FaF9Wmt3s5hoquwAvStqQeubZyVZZUySYPXEh6PdbxCM/iiHVqZ3fGTMvC3Rgr1FDPDBgXsS6QETkfTIfNCWHeWsRsKgxSK+6rH586NdrONWGXV02vL/vZX5P43etRn5wsT1mrmu7MxP9Bmv8Cv5jbMbys1nGs2j33UN+Ym4d4LaEJjPHXoIA9TIGCSh3suVkWcpasvYbKWJPoIm9SWLw1w7eVCIIf8pymk4JHMHjF2KdW64USZnEw7ptKQPUjg4phVzxVyFp+r6m1H2UCgB2o4XWZeUSokSdmrT67Pzm5d1u/9K7ue2FSiZgrJUA7BsIA==</SignatureValue><KeyInfo><KeyValue><RSAKeyValue><Modulus>zkvLNa2un9GBrYNDoRGkGv7d0PqtTBB4ViYakFbjuWpmF0KcvDAzzaCWJPhVgIXjz+S8cHEoHuWnp/n+UOljT3ehA8Rs6Lb1aTYub3tB/e0txewv2sQ3yscjYdtTBtFvEm9L8Yv76K3Cxzi/Yvrdg+sr7w8y5RHn1Am0Ff8xggY1xpWCXFI+kQM18njQDcUqSlwBnexYfqHBhzz6YXA/S0EziYBu2O2mM7R6gSyYkEOHgIGTVOGnOvvC5xBgC4KNcnQuQSRLiUI2CmzU8vefR6ykruyzt1rNMPI8OqWHQtSDKXU5JNqbk4GNjwzcwbSzOHrxuxWHq91l/vLdVDGDUw==</Modulus><Exponent>AQAB</Exponent></RSAKeyValue></KeyValue><X509Data><X509Certificate>MIIF9DCCA9ygAwIBAgITMwAAA68wQA5Mo00FQQAAAAADrzANBgkqhkiG9w0BAQsFADB+MQswCQYDVQQGEwJVUzETMBEGA1UECBMKV2FzaGluZ3RvbjEQMA4GA1UEBxMHUmVkbW9uZDEeMBwGA1UEChMVTWljcm9zb2Z0IENvcnBvcmF0aW9uMSgwJgYDVQQDEx9NaWNyb3NvZnQgQ29kZSBTaWduaW5nIFBDQSAyMDExMB4XDTIzMTExNjE5MDkwMFoXDTI0MTExNDE5MDkwMFowdDELMAkGA1UEBhMCVVMxEzARBgNVBAgTCldhc2hpbmd0b24xEDAOBgNVBAcTB1JlZG1vbmQxHjAcBgNVBAoTFU1pY3Jvc29mdCBDb3Jwb3JhdGlvbjEeMBwGA1UEAxMVTWljcm9zb2Z0IENvcnBvcmF0aW9uMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAzkvLNa2un9GBrYNDoRGkGv7d0PqtTBB4ViYakFbjuWpmF0KcvDAzzaCWJPhVgIXjz+S8cHEoHuWnp/n+UOljT3ehA8Rs6Lb1aTYub3tB/e0txewv2sQ3yscjYdtTBtFvEm9L8Yv76K3Cxzi/Yvrdg+sr7w8y5RHn1Am0Ff8xggY1xpWCXFI+kQM18njQDcUqSlwBnexYfqHBhzz6YXA/S0EziYBu2O2mM7R6gSyYkEOHgIGTVOGnOvvC5xBgC4KNcnQuQSRLiUI2CmzU8vefR6ykruyzt1rNMPI8OqWHQtSDKXU5JNqbk4GNjwzcwbSzOHrxuxWHq91l/vLdVDGDUwIDAQABo4IBczCCAW8wHwYDVR0lBBgwFgYKKwYBBAGCN0wIAQYIKwYBBQUHAwMwHQYDVR0OBBYEFEcccTTyBDxkjvJKs/m4AgEFhl7BMEUGA1UdEQQ+MDykOjA4MR4wHAYDVQQLExVNaWNyb3NvZnQgQ29ycG9yYXRpb24xFjAUBgNVBAUTDTIzMDAxMis1MDE4MjYwHwYDVR0jBBgwFoAUSG5k5VAF04KqFzc3IrVtqMp1ApUwVAYDVR0fBE0wSzBJoEegRYZDaHR0cDovL3d3dy5taWNyb3NvZnQuY29tL3BraW9wcy9jcmwvTWljQ29kU2lnUENBMjAxMV8yMDExLTA3LTA4LmNybDBhBggrBgEFBQcBAQRVMFMwUQYIKwYBBQUHMAKGRWh0dHA6Ly93d3cubWljcm9zb2Z0LmNvbS9wa2lvcHMvY2VydHMvTWljQ29kU2lnUENBMjAxMV8yMDExLTA3LTA4LmNydDAMBgNVHRMBAf8EAjAAMA0GCSqGSIb3DQEBCwUAA4ICAQCEsRbf80dn60xTweOWHZoWaQdpzSaDqIvqpYHE5ZzuEMJWDdcP72MGw8v6BSaJQ+a+hTCXdERnIBDPKvU4ENjgu4EBJocHlSe8riiZUAR+z+z4OUYqoFd3EqJyfjjOJBR2z94Dy4ss7LEkHUbj2NZiFqBoPYu2OGQvEk+1oaUsnNKZ7Nl7FHtV7CI2lHBru83e4IPe3glIi0XVZJT5qV6Gx/QhAFmpEVBjSAmDdgII4UUwuI9yiX6jJFNOEek6MoeP06LMJtbqA3Bq+ZWmJ033F97uVpyaiS4bj3vFI/ZBgDnMqNDtZjcA2vi4RRMweggd9vsHyTLpn6+nXoLy03vMeebq0C3k44pgUIEuPQUlJIRTe6IrN3GcjaZ6zHGuQGWgu6SyO9r7qkrEpS2pRjnGZjx2RmCamdAWnDdu+DmfNEPAddYjaJJ7PTnd+PGzG+WeH4ocWgVnm5fJFhItjj70CJjgHqt57e1FiQcyWCwBhKX2rGgN2UICHBF3Q/rsKOspjMw2OlGphTn2KmFl5J7cQxru54A9roClLnHGCiSUYos/iwFHI/dAVXEh0S0KKfTfM6AC6/9bCbsD61QLcRzRIElvgCgaiMWFjOBL99pemoElAHsyzG6uX93fMfas09N9YzA0/rFAKAsNDOcFbQlEHKiDT7mI20tVoCcmSIhJAQ==</X509Certificate><X509Certificate>MIIHejCCBWKgAwIBAgIKYQ6Q0gAAAAAAAzANBgkqhkiG9w0BAQsFADCBiDELMAkGA1UEBhMCVVMxEzARBgNVBAgTCldhc2hpbmd0b24xEDAOBgNVBAcTB1JlZG1vbmQxHjAcBgNVBAoTFU1pY3Jvc29mdCBDb3Jwb3JhdGlvbjEyMDAGA1UEAxMpTWljcm9zb2Z0IFJvb3QgQ2VydGlmaWNhdGUgQXV0aG9yaXR5IDIwMTEwHhcNMTEwNzA4MjA1OTA5WhcNMjYwNzA4MjEwOTA5WjB+MQswCQYDVQQGEwJVUzETMBEGA1UECBMKV2FzaGluZ3RvbjEQMA4GA1UEBxMHUmVkbW9uZDEeMBwGA1UEChMVTWljcm9zb2Z0IENvcnBvcmF0aW9uMSgwJgYDVQQDEx9NaWNyb3NvZnQgQ29kZSBTaWduaW5nIFBDQSAyMDExMIICIjANBgkqhkiG9w0BAQEFAAOCAg8AMIICCgKCAgEAq/D6chAcLq3YbqqCEE00uvK2WCGfQhsqa+laUKq4BjgaBEm6f8MMHt03a8YS2AvwOMKZBrDIOdUBFDFC04kNeWSHfpRgJGyvnkmc6Whe0t+bU7IKLMOv2akrrnoJr9eWWcpgGgXpZnboMlImEi/nqwhQz7NEt13YxC4Ddato88tt8zpcoRb0RrrgOGSsbmQ1eKagYw8t00CT+OPeBw3VXHmlSSnnDb6gE3e+lD3v++MrWhAfTVYoonpy4BI6t0le2O3tQ5GD2Xuye4Yb2T6xjF3oiU+EGvKhL1nkkDstrjNYxbc+/jLTswM9sbKvkjh+0p2ALPVOVpEhNSXDOW5kf1O6nA+tGSOEy/S6A4aN91/w0FK/jJSHvMAhdCVfGCi2zCcoOCWYOUo2z3yxkq4cI6epZuxhH2rhKEmdX4jiJV3TIUs+UsS1Vz8kA/DRelsv1SPjcF0PUUZ3s/gA4bysAoJf28AVs70b1FVL5zmhD+kjSbwYuER8ReTBw3J64HLnJN+/RpnF78IcV9uDjexNSTCnq47f7Fufr/zdsGbiwZeBe+3W7UvnSSmnEyimp31ngOaKYnhfsi+E11ecXL93KCjx7W3DKI8sj0A3T8HhhUSJxAlMxdSlQy90lfdu+HggWCwTXWCVmj5PM4TasIgX3p5O9JawvEagbJjS4NaIjAsCAwEAAaOCAe0wggHpMBAGCSsGAQQBgjcVAQQDAgEAMB0GA1UdDgQWBBRIbmTlUAXTgqoXNzcitW2oynUClTAZBgkrBgEEAYI3FAIEDB4KAFMAdQBiAEMAQTALBgNVHQ8EBAMCAYYwDwYDVR0TAQH/BAUwAwEB/zAfBgNVHSMEGDAWgBRyLToCMZBDuRQFTuHqp8cx0SOJNDBaBgNVHR8EUzBRME+gTaBLhklodHRwOi8vY3JsLm1pY3Jvc29mdC5jb20vcGtpL2NybC9wcm9kdWN0cy9NaWNSb29DZXJBdXQyMDExXzIwMTFfMDNfMjIuY3JsMF4GCCsGAQUFBwEBBFIwUDBOBggrBgEFBQcwAoZCaHR0cDovL3d3dy5taWNyb3NvZnQuY29tL3BraS9jZXJ0cy9NaWNSb29DZXJBdXQyMDExXzIwMTFfMDNfMjIuY3J0MIGfBgNVHSAEgZcwgZQwgZEGCSsGAQQBgjcuAzCBgzA/BggrBgEFBQcCARYzaHR0cDovL3d3dy5taWNyb3NvZnQuY29tL3BraW9wcy9kb2NzL3ByaW1hcnljcHMuaHRtMEAGCCsGAQUFBwICMDQeMiAdAEwAZQBnAGEAbABfAHAAbwBsAGkAYwB5AF8AcwB0AGEAdABlAG0AZQBuAHQALiAdMA0GCSqGSIb3DQEBCwUAA4ICAQBn8oalmOBUeRou09h0ZyKbC5YR4WOSmUKWfdJ5DJDBZV8uLD74w3LRbYP+vj/oCso7v0epo/Np22O/IjWll11lhJB9i0ZQVdgMknzSGksc8zxCi1LQsP1r4z4HLimb5j0bpdS1HXeUOeLpZMlEPXh6I/MTfaaQdION9MsmAkYqwooQu6SpBQyb7Wj6aC6VoCo/KmtYSWMfCWluWpiW5IP0wI/zRive/DvQvTXvbiWu5a8n7dDd8w6vmSiXmE0OPQvyCInWH8MyGOLwxS3OW560STkKxgrCxq2u5bLZ2xWIUUVYODJxJxp/sfQn+N4sOiBpmLJZiWhub6e3dMNABQamASooPoI/E01mC8CzTfXhj38cbxV9Rad25UAqZaPDXVJihsMdYzaXht/a8/jyFqGaJ+HNpZfQ7l1jQeNbB5yHPgZ3BtEGsXUfFL5hYbXw3MYbBL7fQccOKO7eZS/sl/ahXJbYANahRr1Z85elCUtIEJmAH9AAKcWxm6U/RXceNcbSoqKfenoi+kiVH6v7RyOA9Z74v2u3S5fi63V4GuzqN5l5GEv/1rMjaHXmr/r8i+sLgOppO6/8MO0ETI7f33VtY5E90Z1WTk+/gFcioXgRMiF670EKsT/7qMykXcGhiJtXcVZOSEXAQsmbdlsKgEhr/Xmfwb1tbWrJUnMTDXpQzQ==</X509Certificate><X509Certificate>MIIF7TCCA9WgAwIBAgIQP4vItfyfspZDtWnWbELhRDANBgkqhkiG9w0BAQsFADCBiDELMAkGA1UEBhMCVVMxEzARBgNVBAgTCldhc2hpbmd0b24xEDAOBgNVBAcTB1JlZG1vbmQxHjAcBgNVBAoTFU1pY3Jvc29mdCBDb3Jwb3JhdGlvbjEyMDAGA1UEAxMpTWljcm9zb2Z0IFJvb3QgQ2VydGlmaWNhdGUgQXV0aG9yaXR5IDIwMTEwHhcNMTEwMzIyMjIwNTI4WhcNMzYwMzIyMjIxMzA0WjCBiDELMAkGA1UEBhMCVVMxEzARBgNVBAgTCldhc2hpbmd0b24xEDAOBgNVBAcTB1JlZG1vbmQxHjAcBgNVBAoTFU1pY3Jvc29mdCBDb3Jwb3JhdGlvbjEyMDAGA1UEAxMpTWljcm9zb2Z0IFJvb3QgQ2VydGlmaWNhdGUgQXV0aG9yaXR5IDIwMTEwggIiMA0GCSqGSIb3DQEBAQUAA4ICDwAwggIKAoICAQCygEGqNThNE3IyaCJNuLLx/9VSvGzH9dJKjDbu0cJcfoyKrq8TKG/Ac+M6ztAlqFo6be+ouFmrEyNozQwph9FvgFyPRH9dkAFSWKxRxV8qh9zc2AodwQO5e7BW6KPeZGHCnvjzfLnsDbVU/ky2ZU+I8JxImQxCCwl8MVkXeQZ4KI2JOkwDJb5xalwL54RgpJki49KvhKSn+9GY7Qyp3pSJ4Q6g3MDOmT3qCFK7VnnkH4S6Hri0xElcTzFLh93dBWcmmYDgcRGjuKVB4qRTufcyKYMME782XgSzS0NHL2vikR7TmE/dQgfI6B0S/Jmpaz6SfsjWaTr8ZL22CZ3K/QwLopt3YEsDlKQwaRLWQi3BQUzK3Kr9j1uDRprZ/LHR47PJf0h6zSTwQY9cdNCssBAgBkm3xy0hyFfj0IbzA2j70M5xwYmZSmQBbP3sMJHPQTySx+W6hh1hhMdfgzlirrSSL0fzC/hV66AfWdC7dJse0Hbm8ukG1xDo+mTeacY1logC8Ea4PyeZb8txiSk190gWAjWP1Xl8TQLPX+uKg09FcYj5qQ1OcunCnAfPSRtOBA5jUYxe2ADBVSy2xuDCZU7JNDn1nLPEfuhhbhNfFcRf2X7tHc7uROzLLoax7Dj2cO2rXBPB2Q8Nx4CyVe0096yb5MPa50c8prWPMd/FS6/r8QIDAQABo1EwTzALBgNVHQ8EBAMCAYYwDwYDVR0TAQH/BAUwAwEB/zAdBgNVHQ4EFgQUci06AjGQQ7kUBU7h6qfHMdEjiTQwEAYJKwYBBAGCNxUBBAMCAQAwDQYJKoZIhvcNAQELBQADggIBAH9yzw+3xRXbm8BJyiZb/p4T5tPw0tuXX/JLP02zrhmu7deXoKzvqTqjwkGw5biRnhOBJAPmCf0/V0A5ISRW0RAvS0CpNoZLtFNXmvvxfomPEf4YbFGq6O0JlbXlccmh6Yd1phV/yX43VF50k8XDZ8wNT2uoFwxtCJJ+i92Bqi1wIcM9BhS7vyRep4TXPw8hIr1LAAbblxzYXtTFC1yHblCk6MM4pPvLLMWSZpuFXst6bJN8gClYW1e1QGm6CHmmZGIVnYeWRbVmIyADixxzoNOieTPgUFmG2y/lAiXqcyqfABTINseSO+lOAOzYVgm5M0kS0lQLAausR7aRKX1MtHWAUgHoyoL2n8ysnI8X6i8msKtyrAv+nlEex0NVZ09Rs1fWtuzuUrc66U7h14GIvE+OdbtLqPA1qibUZ2dJsnBMO5PcHd94kIZysjik0dySTclY6ysSXNQ7roxrsIPlAT/4CTL2kzU0Iq/dNw13CYArzUgA8YyZGUcFAenRv9FO0OYoQzeZpApKCNmacXPSqs0xE2N2oTdvkjgefRI8ZjLny23h/FKJ3crWZgWalmG+oijHHKOnNlA8OqTfSm7mhzvO6/DggTedEzxSjr25HTTGHdUKaj2YKXCMiSrRq4IQSB/c9O+lxbtVGjhjhE63bK2VVOxlIhBJF7jAHscPrFRH</X509Certificate></X509Data></KeyInfo><Object Id="ts-countersig"><X509Data><X509Certificate>MIIHIDCCBQigAwIBAgITMwAAAfGzRfUn6MAW1gABAAAB8TANBgkqhkiG9w0BAQsFADB8MQswCQYDVQQGEwJVUzETMBEGA1UECBMKV2FzaGluZ3RvbjEQMA4GA1UEBxMHUmVkbW9uZDEeMBwGA1UEChMVTWljcm9zb2Z0IENvcnBvcmF0aW9uMSYwJAYDVQQDEx1NaWNyb3NvZnQgVGltZS1TdGFtcCBQQ0EgMjAxMDAeFw0yMzEyMDYxODQ1NTVaFw0yNTAzMDUxODQ1NTVaMIHLMQswCQYDVQQGEwJVUzETMBEGA1UECBMKV2FzaGluZ3RvbjEQMA4GA1UEBxMHUmVkbW9uZDEeMBwGA1UEChMVTWljcm9zb2Z0IENvcnBvcmF0aW9uMSUwIwYDVQQLExxNaWNyb3NvZnQgQW1lcmljYSBPcGVyYXRpb25zMScwJQYDVQQLEx5uU2hpZWxkIFRTUyBFU046ODYwMy0wNUUwLUQ5NDcxJTAjBgNVBAMTHE1pY3Jvc29mdCBUaW1lLVN0YW1wIFNlcnZpY2UwggIiMA0GCSqGSIb3DQEBAQUAA4ICDwAwggIKAoICAQCxulCZttIf8X97rW9/J+Q4Vg9PiugB1ya1/DRxxLW2hwy4QgtU3j5fV75ZKa6XTTQhW5ClkGl6gp1nd5VBsx4Jb+oU4PsMA2foe8gP9bQNPVxIHMJu6TYcrrn39Hddet2xkdqUhzzySXaPFqFMk2VifEfj+HR6JheNs2LLzm8FDJm+pBddPDLag/R+APIWHyftq9itwM0WP5Z0dfQyI4WlVeUS+votsPbWm+RKsH4FQNhzb0t/D4iutcfCK3/LK+xLmS6dmAh7AMKuEUl8i2kdWBDRcc+JWa21SCefx5SPhJEFgYhdGPAop3G1l8T33cqrbLtcFJqww4TQiYiCkdysCcnIF0ZqSNAHcfI9SAv3gfkyxqQNJJ3sTsg5GPRF95mqgbfQbkFnU17iYbRIPJqwgSLhyB833ZDgmzxbKmJmdDabbzS0yGhngHa6+gwVaOUqcHf9w6kwxMo+OqG3QZIcwd5wHECs5rAJZ6PIyFM7Ad2hRUFHRTi353I7V4xEgYGuZb6qFx6Pf44i7AjXbptUolDcVzYEdgLQSWiuFajS6Xg3k7Cy8TiM5HPUK9LZInloTxuULSxJmJ7nTjUjOj5xwRmC7x2S/mxql8nvHSCN1OED2/wECOot6MEe9bL3nzoKwO8TNlEStq5scd25GA0gMQO+qNXV/xTDOBTJ8zBcGQIDAQABo4IBSTCCAUUwHQYDVR0OBBYEFLy2xe59sCE0SjycqE5Erb4YrS1gMB8GA1UdIwQYMBaAFJ+nFV0AXmJdg/Tl0mWnG1M1GelyMF8GA1UdHwRYMFYwVKBSoFCGTmh0dHA6Ly93d3cubWljcm9zb2Z0LmNvbS9wa2lvcHMvY3JsL01pY3Jvc29mdCUyMFRpbWUtU3RhbXAlMjBQQ0ElMjAyMDEwKDEpLmNybDBsBggrBgEFBQcBAQRgMF4wXAYIKwYBBQUHMAKGUGh0dHA6Ly93d3cubWljcm9zb2Z0LmNvbS9wa2lvcHMvY2VydHMvTWljcm9zb2Z0JTIwVGltZS1TdGFtcCUyMFBDQSUyMDIwMTAoMSkuY3J0MAwGA1UdEwEB/wQCMAAwFgYDVR0lAQH/BAwwCgYIKwYBBQUHAwgwDgYDVR0PAQH/BAQDAgeAMA0GCSqGSIb3DQEBCwUAA4ICAQDhSEjSBFSCbJyl3U/QmFMW2eLPBknnlsfID/7gTMvANEnhq08I9HHbbqiwqDEHSvARvKtL7j0znICYBbMrVSmvgDxU8jAGqMyiLoM80788So3+T6IZV//UZRJqBl4oM3bCIQgFGo0VTeQ6RzYL+t1zCUXmmpPmM4xcScVFATXj5Tx7By4ShWUC7Vhm7picDiU5igGjuivRhxPvbpflbh/bsiE5tx5cuOJEJSG+uWcqByR7TC4cGvuavHSjk1iRXT/QjaOEeJoOnfesbOdvJrJdbm+leYLRI67N3cd8B/suU21tRdgwOnTk2hOuZKs/kLwaX6NsAbUy9pKsDmTyoWnGmyTWBPiTb2rp5ogo8Y8hMU1YQs7rHR5hqilEq88jF+9H8Kccb/1ismJTGnBnRMv68Ud2l5LFhOZ4nRtl4lHri+N1L8EBg7aE8EvPe8Ca9gz8sh2F4COTYd1PHce1ugLvvWW1+aOSpd8NnwEid4zgD79ZQxisJqyO4lMWMzAgEeFhUm40FshtzXudAsX5LoCil4rLbHfwYtGOpw9DVX3jXAV90tG9iRbcqjtt3vhW9T+L3fAZlMeraWfh7eUmPltMU8lEQOMelo/1ehkIGO7YZOHxUqeKpmF9QaW8LXTT090AHZ4k6g+tdpZFfCMotyG+E4XqN6ZWtKEBQiE3xL27BA==</X509Certificate><X509Certificate>MIIHcTCCBVmgAwIBAgITMwAAABXF52ueAptJmQAAAAAAFTANBgkqhkiG9w0BAQsFADCBiDELMAkGA1UEBhMCVVMxEzARBgNVBAgTCldhc2hpbmd0b24xEDAOBgNVBAcTB1JlZG1vbmQxHjAcBgNVBAoTFU1pY3Jvc29mdCBDb3Jwb3JhdGlvbjEyMDAGA1UEAxMpTWljcm9zb2Z0IFJvb3QgQ2VydGlmaWNhdGUgQXV0aG9yaXR5IDIwMTAwHhcNMjEwOTMwMTgyMjI1WhcNMzAwOTMwMTgzMjI1WjB8MQswCQYDVQQGEwJVUzETMBEGA1UECBMKV2FzaGluZ3RvbjEQMA4GA1UEBxMHUmVkbW9uZDEeMBwGA1UEChMVTWljcm9zb2Z0IENvcnBvcmF0aW9uMSYwJAYDVQQDEx1NaWNyb3NvZnQgVGltZS1TdGFtcCBQQ0EgMjAxMDCCAiIwDQYJKoZIhvcNAQEBBQADggIPADCCAgoCggIBAOThpkzntHIhC3miy9ckeb0O1YLT/e6cBwfSqWxOdcjKNVf2AX9sSuDivbk+F2Az/1xPx2b3lVNxWuJ+Slr+uDZnhUYjDLWNE893MsAQGOhgfWpSg0S3po5GawcU88V29YZQ3MFEyHFcUTE3oAo4bo3t1w/YJlN8OWECesSq/XJprx2rrPY2vjUmZNqYO7oaezOtgFt+jBAcnVL+tuhiJdxqD89d9P6OU8/W7IVWTe/dvI2k45GPsjksUZzpcGkNyjYtcI4xyDUoveO0hyTD4MmPfrVUj9z6BVWYbWg7mka97aSueik3rMvrg0XnRm7KMtXAhjBcTyziYrLNueKNiOSWrAFKu75xqRdbZ2De+JKRHh09/SDPc31BmkZ1zcRfNN0Sidb9pSB9fvzZnkXftnIv231fgLrbqn427DZM9ituqBJR6L8FA6PRc6ZNN3SUHDSCD/AQ8rdHGO2n6Jl8P0zbr17C89XYcz1DTsEzOUyOArxCaC4Q6oRRRuLRvWoYWmEBc8pnol7XKHYC4jMYctenIPDC+hIK12NvDMk2ZItboKaDIV1fMHSRlJTYuVD5C4lh8zYGNRiER9vcG9H9stQcxWv2XFJRXRLbJbqvUAV6bMURHXLvjflSxIUXk8A8FdsaN8cIFRg/eKtFtvUeh17aj54WcmnGrnu3tz5q4i6tAgMBAAGjggHdMIIB2TASBgkrBgEEAYI3FQEEBQIDAQABMCMGCSsGAQQBgjcVAgQWBBQqp1L+ZMSavoKRPEY1Kc8Q/y8E7jAdBgNVHQ4EFgQUn6cVXQBeYl2D9OXSZacbUzUZ6XIwXAYDVR0gBFUwUzBRBgwrBgEEAYI3TIN9AQEwQTA/BggrBgEFBQcCARYzaHR0cDovL3d3dy5taWNyb3NvZnQuY29tL3BraW9wcy9Eb2NzL1JlcG9zaXRvcnkuaHRtMBMGA1UdJQQMMAoGCCsGAQUFBwMIMBkGCSsGAQQBgjcUAgQMHgoAUwB1AGIAQwBBMAsGA1UdDwQEAwIBhjAPBgNVHRMBAf8EBTADAQH/MB8GA1UdIwQYMBaAFNX2VsuP6KJcYmjRPZSQW9fOmhjEMFYGA1UdHwRPME0wS6BJoEeGRWh0dHA6Ly9jcmwubWljcm9zb2Z0LmNvbS9wa2kvY3JsL3Byb2R1Y3RzL01pY1Jvb0NlckF1dF8yMDEwLTA2LTIzLmNybDBaBggrBgEFBQcBAQROMEwwSgYIKwYBBQUHMAKGPmh0dHA6Ly93d3cubWljcm9zb2Z0LmNvbS9wa2kvY2VydHMvTWljUm9vQ2VyQXV0XzIwMTAtMDYtMjMuY3J0MA0GCSqGSIb3DQEBCwUAA4ICAQCdVX38Kq3hLB9nATEkW+Geckv8qW/qXBS2Pk5HZHixBpOXPTEztTnXwnE2P9pkbHzQdTltuw8x5MKP+2zRoZQYIu7pZmc6U03dmLq2HnjYNi6cqYJWAAOwBb6J6Gngugnue99qb74py27YP0h1AdkY3m2CDPVtI1TkeFN1JFe53Z/zjj3G82jfZfakVqr3lbYoVSfQJL1AoL8ZthISEV09J+BAljis9/kpicO8F7BUhUKz/AyeixmJ5/ALaoHCgRlCGVJ1ijbCHcNhcy4sa3tuPywJeBTpkbKpW99Jo3QMvOyRgNI95ko+ZjtPu4b6MhrZlvSP9pEB9s7GdP32THJvEKt1MMU0sHrYUP4KWN1APMdUbZ1jdEgssU5HLcEUBHG/ZPkkvnNtyo4JvbMBV0lUZNlz138eW0QBjloZkWsNn6Qo3GcZKCS6OEuabvshVGtqRRFHqfG3rsjoiV5PndLQTHa1V1QJsWkBRH58oWFsc/4Ku+xBZj1p/cvBQUl+fpO+y/g75LcVv7TOPqUxUYS8vwLBgqJ7Fx0ViY1w/ue10CgaiQuPNtq6TPmb/wrpNPgkNWcr4A245oyZ1uEi6vAnQj0llOZ0dFtq0Z4+7X6gMTN9vMvpe784cETRkPHIqzqKOghif9lwY1NNje6CbaUFEMFxBmoQtB1VM1izoXBm8g==</X509Certificate></X509Data><CounterSignature ts-format="cms-timestamp-message" xmlns="http://schemas.microsoft.com/xmldsig/timestamp/2003"></CounterSignature></Object></Signature></doc>
